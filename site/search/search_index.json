{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Programmieren II \u00b6 Herzlich willkommen zur Programmieren II -Veranstaltung! Wir haben in Programmieren I unter Verwendung der Programmiersprache Java bereits wesentliche Konzepte kennengelernt, die f\u00fcr das Verst\u00e4ndnis mordenen Programmierens notwendig sind. Diese Kenntnisse wollen wir nun erweitern und vertiefen. Wir werden Git kennenlernen, Exceptions, Wrapper-Klassen, Interfaces und Collections. Wir besch\u00e4ftigen uns intensiv mit dem Testen von Programmen und erzeugen uns eigene Nutzeroberfl\u00e4chen. Hier einige Tipps, damit Sie die Veranstaltung erfolgreich durchf\u00fchren und Sie dabei auch Spa\u00df haben: L\u00f6sen Sie alle \u00dcbungsaufgaben selbst\u00e4ndig! Es ist kein Problem, wenn Sie f\u00fcr das Bew\u00e4ltigen der \u00dcbungen etwas l\u00e4nger ben\u00f6tigen. Sollten Sie es gar nicht alleine schaffen, ist das auch kein Problem. Wichtig ist dann, dass Sie sich die L\u00f6sung anschauen und es erneut selbst\u00e4ndig versuchen. H\u00f6ren Sie nicht auf, bis Sie es geschafft haben! Sie k\u00f6nnen die Hausaufgaben zu zweit l\u00f6sen. Achten Sie aber darauf, dass Sie Ihre gemeinsame L\u00f6sung vollst\u00e4ndig verstanden haben und dass Sie sie danach auch alleine erstellen k\u00f6nnen. Sie k\u00f6nnen beim L\u00f6sen der Hausaufgaben beliebig kreativ sein! Die Aufgabenstellung gibt Ihnen Anhaltspunkte f\u00fcr eine eventuelle L\u00f6sung. Sie k\u00f6nnen es aber auch ganz anders machen! Die Klausurvorbereitung beginnt mit Beginn der Veranstaltung. Es ist nicht m\u00f6glich, die Klausur am Ende des Semesters zu bestehen, wenn Sie nicht das ganze Semester \u00fcber intensiv programmieren. Die \u00dcbungsaufgaben sind \"kleine\" Aufgaben, um das in der Vorlesung vermittelte Wissen direkt anzuwenden. F\u00fcr die L\u00f6sung der Hausaufgaben ist bereits ein gewisses Abstraktionsniveau erforderlich, um zu erkennen, dass das in der Vorlesung vermittelte Wissen daf\u00fcr ausreichend ist. Programmieren lernt man nur durch Programmieren. Sie m\u00fcssen es tun. Das Lesen von B\u00fcchern oder das \"Anschauen\" von Code gen\u00fcgt nicht. Eine Sprache lernt man auch nur durch Sprechen. Sie m\u00fcssen programmieren, programmieren, prohgrammieren... Lassen Sie sich durch Fehler nicht verunsichern, sondern analysieren Sie Ihre Fehler. Bis zur Klausur sollten Sie alle Fehler einmal gemacht haben. Wenn Sie sich \u00fcberlegen, warum das jeweils ein Fehler war, dann werden Sie diesen Fehler nicht wiederholen und haben durch die Reflektion eine Menge gelernt. Fehler zu machen (und dar\u00fcber zu reflektieren) geh\u00f6rt zu den besten Lernmethoden des Programmierens. Haben Sie Spa\u00df! Je mehr Sie das Programmieren lernen, je mehr Spa\u00df werden Sie haben. Wir versuchen, dass Sie das genaze Semester \u00fcber Spa\u00df am Programmieren haben werden. Sollte es Ihnen zwischendurch keinen Spa\u00df mehr machen, geben Sie mir sofort Bescheid! Viel Erfolg! Und viel Spa\u00df! Organisatorisches \u00b6 Der (Corona-)Plan zur Durchf\u00fchrung der Veranstaltung ist derzeit wie folgt: Themen werden ausf\u00fchrlich in diesem Skript beschrieben und anhand von Videos eingef\u00fchrt und verdeutlicht, das Skript und die Videos werden (sp\u00e4testens) freitags hochgeladen, das hei\u00dft, \"Vorlesungen\" finden asynchron statt (im Selbststudium), zusammen mit dem Skript und den Videos werden sowohl die \u00dcbung als auch die Aufgabe hochgeladen, die \u00dcbung (und die vergangene Aufgabe) werden donnerstags (8:00 Uhr und nochmal 14:00 Uhr) besprochen (Sie k\u00f6nnen frei w\u00e4hlen, welche der beiden \u00dcbungen Sie w\u00e4hlen), bei Bedarf k\u00f6nnen wir auch gerne jederzeit eine Synchron-Video-Vorlesung einschieben, um Fragen zu erkl\u00e4ren, die Veranstaltung wird durch ein Tutorium unterst\u00fctzt, sollten Sie W\u00fcnsche haben, diesen Plan zu \u00e4ndern, kommen Sie gerne auf mich zu Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen die Aufgaben l\u00f6sen und zu den jeweiligen Fristen auf GitHub hochladen. Wenn Sie alle Aufgaben fristgerecht hochgeladen haben, d\u00fcrfen Sie an der Klausur teilnehmen. Es werden insgesamt wahrscheinlich 10 Aufgaben sein, die Sie selbst\u00e4ndig l\u00f6sen und hochladen m\u00fcssen. Sie k\u00f6nnen die Aufgaben auch zu zweit l\u00f6sen. Laden Sie dann aber bitte beide jeweils die L\u00f6sung hoch. Am Ende des Semesters schreiben wir eine Klausur (am Rechner). Diese Klausur wird bewertet und entspricht der Note f\u00fcr das gesamte \"Programmieren\"-Modul. Unter Aufgaben sind die Aufgaben beschrieben, die Sie in jeder Woche ausf\u00fchren sollen. Damit Sie dies erfolgreich erledigen k\u00f6nnen, ist jeweils angegeben, welche Themen Sie daf\u00fcr durcharbeiten m\u00fcssen. Das Durcharbeiten der jeweiligen Themen entspricht jeweils einer Vorlesung. Diese wird also selbst\u00e4ndig durchgef\u00fchrt. Daneben gibt es jede Woche (zu jedem Thema) \u00dcbungen , die wir in den \u00dcbungszeiten besprechen. Diese dienen der Anwendung und der Festigung der erlangten Kenntnisse. Die \u00dcbungen sind kleine Aufgaben, an denen Sie das neue Wissen anwenden sollen. Die \u00dcbungen dienen der Bef\u00e4higung, die (gr\u00f6\u00dferen) Aufgaben l\u00f6sen zu k\u00f6nnen. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Au\u00dferdem lernen Sie beim Beantworten der Fragen nochmals deutlich mehr. Das w\u00e4re super, wenn das klappt! Grober Inhalt (kann sich noch \u00e4ndern) \u00b6 Wir besch\u00e4ftigen uns dieses Semester mit weiteren Konzepten der Programmierung. Wir lernen weitere Datenstrukturen kennen (Collections), werden lernen, mit Exceptions umzugehen und implementieren Tests. Wir besch\u00e4ftigen uns mit Grafischen Nutzeroberfl\u00e4chen (GUIs) und lernen, Nutzereignisse zu behandeln. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Die Vorlesungsvideos finden Sie darunter f\u00fcr die einzelnen Wochen (unter Inhalte ). Woche Themen (Vorlesung) \u00dcbung Aufgabe Abgabe Aufgabe bis 1. 05.-09.04.2021 Einf\u00fchrung und Organisatorisches, Wiederholung - - - 1. 12.-16.04.2021 Git \u00dcbung 1 Aufgabe 1 23.04.2021 2. 19.-23.04.2021 Enumerations und Exceptions \u00dcbung 2 Aufgabe 2 30.04.2021 3. 26.-30.04.2021 Wrapper-Klassen (boxing und unboxing) \u00dcbung 3 Aufgabe 3 07.05.2021 4. 03.-07.05.2021 Testen mit JUnit \u00dcbung 4 Aufgabe 4 14.05.2021 5. 10.-14.05.2021 Collections (List und Set) + Generics \u00dcbung 5 Aufgabe 5 21.05.2021 6. 17.-21.05.2021 Collections (Map) + Abstrakte Klassen \u00dcbung 6 Aufgabe 6 28.05.2021 7. 24.-28.05.2021 Interfaces \u00dcbung 7 Aufgabe 7 04.06.2021 8. 31.-04.06.2021 GUI \u00dcbung 8 Aufgabe 8 11.06.2021 9. 07.-11.06.2021 Ereignisse \u00dcbung 9 Aufgabe 9 18.06.2021 10. 14.-18.06.2021 Dialoge und Graphics \u00dcbung 10 Aufgabe 10 02.07.2021 12. 21.-25.06.2021 Neuerungen in Java 10-14 \u00dcbung 11 - - 13. 28.-02.07.2021 - \u00dcbung 12 - - 14. 05.-09.07.2021 Klausurvorbereitung \u00dcbung 13 - - 15. 12.-16.07.2021 Klausurvorbereitung - - - Inhalte \u00b6 Woche 1 - Einf\u00fchrung und Organisatorisches + Wiederholung","title":"Home"},{"location":"#programmieren-ii","text":"Herzlich willkommen zur Programmieren II -Veranstaltung! Wir haben in Programmieren I unter Verwendung der Programmiersprache Java bereits wesentliche Konzepte kennengelernt, die f\u00fcr das Verst\u00e4ndnis mordenen Programmierens notwendig sind. Diese Kenntnisse wollen wir nun erweitern und vertiefen. Wir werden Git kennenlernen, Exceptions, Wrapper-Klassen, Interfaces und Collections. Wir besch\u00e4ftigen uns intensiv mit dem Testen von Programmen und erzeugen uns eigene Nutzeroberfl\u00e4chen. Hier einige Tipps, damit Sie die Veranstaltung erfolgreich durchf\u00fchren und Sie dabei auch Spa\u00df haben: L\u00f6sen Sie alle \u00dcbungsaufgaben selbst\u00e4ndig! Es ist kein Problem, wenn Sie f\u00fcr das Bew\u00e4ltigen der \u00dcbungen etwas l\u00e4nger ben\u00f6tigen. Sollten Sie es gar nicht alleine schaffen, ist das auch kein Problem. Wichtig ist dann, dass Sie sich die L\u00f6sung anschauen und es erneut selbst\u00e4ndig versuchen. H\u00f6ren Sie nicht auf, bis Sie es geschafft haben! Sie k\u00f6nnen die Hausaufgaben zu zweit l\u00f6sen. Achten Sie aber darauf, dass Sie Ihre gemeinsame L\u00f6sung vollst\u00e4ndig verstanden haben und dass Sie sie danach auch alleine erstellen k\u00f6nnen. Sie k\u00f6nnen beim L\u00f6sen der Hausaufgaben beliebig kreativ sein! Die Aufgabenstellung gibt Ihnen Anhaltspunkte f\u00fcr eine eventuelle L\u00f6sung. Sie k\u00f6nnen es aber auch ganz anders machen! Die Klausurvorbereitung beginnt mit Beginn der Veranstaltung. Es ist nicht m\u00f6glich, die Klausur am Ende des Semesters zu bestehen, wenn Sie nicht das ganze Semester \u00fcber intensiv programmieren. Die \u00dcbungsaufgaben sind \"kleine\" Aufgaben, um das in der Vorlesung vermittelte Wissen direkt anzuwenden. F\u00fcr die L\u00f6sung der Hausaufgaben ist bereits ein gewisses Abstraktionsniveau erforderlich, um zu erkennen, dass das in der Vorlesung vermittelte Wissen daf\u00fcr ausreichend ist. Programmieren lernt man nur durch Programmieren. Sie m\u00fcssen es tun. Das Lesen von B\u00fcchern oder das \"Anschauen\" von Code gen\u00fcgt nicht. Eine Sprache lernt man auch nur durch Sprechen. Sie m\u00fcssen programmieren, programmieren, prohgrammieren... Lassen Sie sich durch Fehler nicht verunsichern, sondern analysieren Sie Ihre Fehler. Bis zur Klausur sollten Sie alle Fehler einmal gemacht haben. Wenn Sie sich \u00fcberlegen, warum das jeweils ein Fehler war, dann werden Sie diesen Fehler nicht wiederholen und haben durch die Reflektion eine Menge gelernt. Fehler zu machen (und dar\u00fcber zu reflektieren) geh\u00f6rt zu den besten Lernmethoden des Programmierens. Haben Sie Spa\u00df! Je mehr Sie das Programmieren lernen, je mehr Spa\u00df werden Sie haben. Wir versuchen, dass Sie das genaze Semester \u00fcber Spa\u00df am Programmieren haben werden. Sollte es Ihnen zwischendurch keinen Spa\u00df mehr machen, geben Sie mir sofort Bescheid! Viel Erfolg! Und viel Spa\u00df!","title":"Programmieren II"},{"location":"#organisatorisches","text":"Der (Corona-)Plan zur Durchf\u00fchrung der Veranstaltung ist derzeit wie folgt: Themen werden ausf\u00fchrlich in diesem Skript beschrieben und anhand von Videos eingef\u00fchrt und verdeutlicht, das Skript und die Videos werden (sp\u00e4testens) freitags hochgeladen, das hei\u00dft, \"Vorlesungen\" finden asynchron statt (im Selbststudium), zusammen mit dem Skript und den Videos werden sowohl die \u00dcbung als auch die Aufgabe hochgeladen, die \u00dcbung (und die vergangene Aufgabe) werden donnerstags (8:00 Uhr und nochmal 14:00 Uhr) besprochen (Sie k\u00f6nnen frei w\u00e4hlen, welche der beiden \u00dcbungen Sie w\u00e4hlen), bei Bedarf k\u00f6nnen wir auch gerne jederzeit eine Synchron-Video-Vorlesung einschieben, um Fragen zu erkl\u00e4ren, die Veranstaltung wird durch ein Tutorium unterst\u00fctzt, sollten Sie W\u00fcnsche haben, diesen Plan zu \u00e4ndern, kommen Sie gerne auf mich zu Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen die Aufgaben l\u00f6sen und zu den jeweiligen Fristen auf GitHub hochladen. Wenn Sie alle Aufgaben fristgerecht hochgeladen haben, d\u00fcrfen Sie an der Klausur teilnehmen. Es werden insgesamt wahrscheinlich 10 Aufgaben sein, die Sie selbst\u00e4ndig l\u00f6sen und hochladen m\u00fcssen. Sie k\u00f6nnen die Aufgaben auch zu zweit l\u00f6sen. Laden Sie dann aber bitte beide jeweils die L\u00f6sung hoch. Am Ende des Semesters schreiben wir eine Klausur (am Rechner). Diese Klausur wird bewertet und entspricht der Note f\u00fcr das gesamte \"Programmieren\"-Modul. Unter Aufgaben sind die Aufgaben beschrieben, die Sie in jeder Woche ausf\u00fchren sollen. Damit Sie dies erfolgreich erledigen k\u00f6nnen, ist jeweils angegeben, welche Themen Sie daf\u00fcr durcharbeiten m\u00fcssen. Das Durcharbeiten der jeweiligen Themen entspricht jeweils einer Vorlesung. Diese wird also selbst\u00e4ndig durchgef\u00fchrt. Daneben gibt es jede Woche (zu jedem Thema) \u00dcbungen , die wir in den \u00dcbungszeiten besprechen. Diese dienen der Anwendung und der Festigung der erlangten Kenntnisse. Die \u00dcbungen sind kleine Aufgaben, an denen Sie das neue Wissen anwenden sollen. Die \u00dcbungen dienen der Bef\u00e4higung, die (gr\u00f6\u00dferen) Aufgaben l\u00f6sen zu k\u00f6nnen. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Au\u00dferdem lernen Sie beim Beantworten der Fragen nochmals deutlich mehr. Das w\u00e4re super, wenn das klappt!","title":"Organisatorisches"},{"location":"#grober-inhalt-kann-sich-noch-andern","text":"Wir besch\u00e4ftigen uns dieses Semester mit weiteren Konzepten der Programmierung. Wir lernen weitere Datenstrukturen kennen (Collections), werden lernen, mit Exceptions umzugehen und implementieren Tests. Wir besch\u00e4ftigen uns mit Grafischen Nutzeroberfl\u00e4chen (GUIs) und lernen, Nutzereignisse zu behandeln. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Die Vorlesungsvideos finden Sie darunter f\u00fcr die einzelnen Wochen (unter Inhalte ). Woche Themen (Vorlesung) \u00dcbung Aufgabe Abgabe Aufgabe bis 1. 05.-09.04.2021 Einf\u00fchrung und Organisatorisches, Wiederholung - - - 1. 12.-16.04.2021 Git \u00dcbung 1 Aufgabe 1 23.04.2021 2. 19.-23.04.2021 Enumerations und Exceptions \u00dcbung 2 Aufgabe 2 30.04.2021 3. 26.-30.04.2021 Wrapper-Klassen (boxing und unboxing) \u00dcbung 3 Aufgabe 3 07.05.2021 4. 03.-07.05.2021 Testen mit JUnit \u00dcbung 4 Aufgabe 4 14.05.2021 5. 10.-14.05.2021 Collections (List und Set) + Generics \u00dcbung 5 Aufgabe 5 21.05.2021 6. 17.-21.05.2021 Collections (Map) + Abstrakte Klassen \u00dcbung 6 Aufgabe 6 28.05.2021 7. 24.-28.05.2021 Interfaces \u00dcbung 7 Aufgabe 7 04.06.2021 8. 31.-04.06.2021 GUI \u00dcbung 8 Aufgabe 8 11.06.2021 9. 07.-11.06.2021 Ereignisse \u00dcbung 9 Aufgabe 9 18.06.2021 10. 14.-18.06.2021 Dialoge und Graphics \u00dcbung 10 Aufgabe 10 02.07.2021 12. 21.-25.06.2021 Neuerungen in Java 10-14 \u00dcbung 11 - - 13. 28.-02.07.2021 - \u00dcbung 12 - - 14. 05.-09.07.2021 Klausurvorbereitung \u00dcbung 13 - - 15. 12.-16.07.2021 Klausurvorbereitung - - -","title":"Grober Inhalt (kann sich noch \u00e4ndern)"},{"location":"#inhalte","text":"Woche 1 - Einf\u00fchrung und Organisatorisches + Wiederholung","title":"Inhalte"},{"location":"aufgaben/","text":"Aufgaben \u00b6 Aufgabe 1 (W\u00fcrfelspiel) \u00b6 Aufgabe 1 Vorbereitung (Selbstudium) Informieren Sie sich \u00fcber die Klasse JOptionPane aus dem Paket javax.swing (z.B. hier oder hier oder hier ) Sollten Sie mit dem Java-Modulsystem arbeiten, d.h. sollten Sie in Ihrem Java-Projekt eine Datei module-info.java haben, dann m\u00fcssen Sie in diese Datei (in den Anweisungsblock) die Anweisung requires java.desktop; einf\u00fcgen - das ist das Modul, in dem sich das Paket javax.swing befindet. Rufen Sie jeweils die statischen Methoden showConfirmDialog() , showInputDialog() , showMessageDialog() und showOptionDialog() auf und werten Sie jeweils die Nutzereingabe aus (Bei showInputDialog() ist die R\u00fcckgabe ein String , ansonsten ist die R\u00fcckgabe ein int , der mit folgenden Optionen verglichen werden kann: JOptionPane.YES_OPTION , JOptionPane.NO_OPTION , JOptionPane.CANCEL_OPTION , JOptionPane.OK_OPTION , JOptionPane.CLOSED_OPTION Erstellen Sie insbesondere folgenden Dialog und pr\u00fcfen Sie, ob der Nein - oder der Ja -Button gedr\u00fcckt wurde (im Beispiel steht A f\u00fcr den Namen eines Spielers \u2013 siehe Aufgabe unten): Aufgabe Implementieren Sie folgendes W\u00fcrfelspiel: An dem Spiel k\u00f6nnen beliebig viele Spieler teilnehmen. Die Spieler sind nacheinander an der Reihe. Wenn ein Spieler an der Reihe ist, dann befindet er sich in einem Versuch . In einem Versuch kann der Spieler so lange w\u00fcrfeln, bis er entweder eine 6 w\u00fcrfelt oder er den Versuch freiwillig beendet. Hat der Spieler eine 6 gew\u00fcrfelt, wird der gesamte Versuch mit 0 Punkten bewertet. Hat der Spieler den Versuch freiwillig beendet, wird die in dem Versuch erzielte Summe aus sein Punktekonto addiert (gespeichert). Der Spieler, der zuerst eine bestimmte Punktzahl (z.B. 20 ) erreicht hat, hat gewonnen. Beispiel mit zwei Spielern A und B bis Gesamtpunktzahl 20 : Committen und pushen Sie Ihre L\u00f6sung nach GitHub (oder Ihrem Git-Diensteanbieter).","title":"Aufgaben"},{"location":"aufgaben/#aufgaben","text":"","title":"Aufgaben"},{"location":"aufgaben/#aufgabe-1-wurfelspiel","text":"Aufgabe 1 Vorbereitung (Selbstudium) Informieren Sie sich \u00fcber die Klasse JOptionPane aus dem Paket javax.swing (z.B. hier oder hier oder hier ) Sollten Sie mit dem Java-Modulsystem arbeiten, d.h. sollten Sie in Ihrem Java-Projekt eine Datei module-info.java haben, dann m\u00fcssen Sie in diese Datei (in den Anweisungsblock) die Anweisung requires java.desktop; einf\u00fcgen - das ist das Modul, in dem sich das Paket javax.swing befindet. Rufen Sie jeweils die statischen Methoden showConfirmDialog() , showInputDialog() , showMessageDialog() und showOptionDialog() auf und werten Sie jeweils die Nutzereingabe aus (Bei showInputDialog() ist die R\u00fcckgabe ein String , ansonsten ist die R\u00fcckgabe ein int , der mit folgenden Optionen verglichen werden kann: JOptionPane.YES_OPTION , JOptionPane.NO_OPTION , JOptionPane.CANCEL_OPTION , JOptionPane.OK_OPTION , JOptionPane.CLOSED_OPTION Erstellen Sie insbesondere folgenden Dialog und pr\u00fcfen Sie, ob der Nein - oder der Ja -Button gedr\u00fcckt wurde (im Beispiel steht A f\u00fcr den Namen eines Spielers \u2013 siehe Aufgabe unten): Aufgabe Implementieren Sie folgendes W\u00fcrfelspiel: An dem Spiel k\u00f6nnen beliebig viele Spieler teilnehmen. Die Spieler sind nacheinander an der Reihe. Wenn ein Spieler an der Reihe ist, dann befindet er sich in einem Versuch . In einem Versuch kann der Spieler so lange w\u00fcrfeln, bis er entweder eine 6 w\u00fcrfelt oder er den Versuch freiwillig beendet. Hat der Spieler eine 6 gew\u00fcrfelt, wird der gesamte Versuch mit 0 Punkten bewertet. Hat der Spieler den Versuch freiwillig beendet, wird die in dem Versuch erzielte Summe aus sein Punktekonto addiert (gespeichert). Der Spieler, der zuerst eine bestimmte Punktzahl (z.B. 20 ) erreicht hat, hat gewonnen. Beispiel mit zwei Spielern A und B bis Gesamtpunktzahl 20 : Committen und pushen Sie Ihre L\u00f6sung nach GitHub (oder Ihrem Git-Diensteanbieter).","title":"Aufgabe 1 (W\u00fcrfelspiel)"},{"location":"enum/","text":"Aufz\u00e4hlungstypen (enum) \u00b6 Motivation \u00b6 Angenommen, Sie wollen mithilfe einer Variablen eine festgelegte Menge an Zust\u00e4nden beschreiben, z.B. String Tag = \"MONTAG\" // kann auch Werte \"Dienstag\" usw. annehmen int Tag = 0 ; // Magic Number f\u00fcr \"Montag\" Das Problem: - die Variablen k\u00f6nnen auch beliebige andere Werte (aus dem jeweiligen Wertebereich) annehmen, z.B. Tag = \"hallo\" oder Tag=4711 , - Magic Numbers sollen vermieden werden \u2192 meistens schlechte Lesbarkeit Beispiel TicTacToe public class TicTacToe { int [][] field ; TicTacToe () { field = new int [ 3 ][ 3 ] ; for ( int i = 0 ; i < field . length ; i ++ ) for ( int j = 0 ; j < field [ i ] . length ; j ++ ) field [ i ][ j ]= 0 ; } void makeMove ( int i , int j , int player ) { if ( field [ i ][ j ]== 0 && player == 1 || player == 2 ) field [ i ][ j ]= player ; } } Zust\u00e4nde EMPTY ( 0 ), RED ( 1 ), BLACK ( 2 ) verschl\u00fcsselt \u2192 magic numbers field[i][j] k\u00f6nnte auch beliebige andere int -Werte annehmen Code nahezu unlesbar Erster Verbesserungsversuch: Konstanten \u00b6 Beispiel TicTacToe mit Konstanten public class TicTacToe { int [][] field ; static final int EMPTY = 0 ; static final int RED = 1 ; static final int BLACK = 2 ; TicTacToe () { field = new int [ 3 ][ 3 ] ; for ( int i = 0 ; i < field . length ; i ++ ) for ( int j = 0 ; j < field [ i ] . length ; j ++ ) field [ i ][ j ]= EMPTY ; } void makeMove ( int i , int j , int player ) { if ( field [ i ][ j ]== EMPTY && player == RED || player == BLACK ) field [ i ][ j ]= player ; } } etwas besser, aber immer noch beliebige Werte f\u00fcr field[i][j] m\u00f6glich Der Aufz\u00e4hlungstyp enum \u00b6 Anforderungen: eigener Datentyp endliche Anzahl an Zust\u00e4nden bzw. Werten leserliche Bezeichnung der Werte L\u00f6sung: - Enumerations (sog. Aufz\u00e4hlungstypen) - Schl\u00fcsselwort enum Syntax: enum TypName { WERT1 , WERT2 , WERT3 }; Verwendung: - TypName nun als Datentyp verwendbar, z.B. TypName[][] - Zugriff auf Werte \u00fcber statische Punktschreibweise, z.B. TypName.WERT1 Beispiel TicTacToe mit enum 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class TicTacToe { enum State { EMPTY , RED , BLACK }; State [][] field ; TicTacToe () { field = new State [ 3 ][ 3 ] ; for ( int i = 0 ; i < field . length ; i ++ ) for ( int j = 0 ; j < field [ i ] . length ; j ++ ) field [ i ][ j ]= State . EMPTY ; } void makeMove ( int i , int j , State player ) { if ( field [ i ][ j ]== State . EMPTY && player != State . EMPTY ) field [ i ][ j ]= player ; } } typsicher rot und schwarz \u00fcber State.RED und State.BLACK erreichbar andere Zust\u00e4nde nicht m\u00f6glich Details: \u00b6 alle enum erben implizit von java.lang.Enum enum sind Referenztypen die Konstanten (Werte) in enum sind automatisch static und final == kann verwendet werden (auch switch() ); equals() gibt es aber auch Beispiel enum 1 2 3 4 5 6 7 8 State s = State . EMPTY ; // s = 0 oder s = \"rot\" oder so geht nicht //-> typsicher switch ( s ) { case EMPTY : System . out . println ( \"leeres Feld\" ); break ; case RED : System . out . println ( \"roter Stein\" ); break ; case BLACK : System . out . println ( \"schwarzer Stein Feld\" ); break ; } Weiteres: \u00b6 auch Definition von Methoden m\u00f6glich toString() , equals() usw. aus Object k\u00f6nnen \u00fcberschrieben werden Konstanten k\u00f6nnen mit Attributen versehen werden (dann noch privater Konstruktor notwendig) Zugriff auf das Array von Konstanten mithilfe von values() Beispiel f\u00fcr Werte mit Attributen enum Farben { KREUZ ( 12 ), PIK ( 11 ), HERZ ( 10 ), KARO ( 9 ); private int farbwert ; private Farben ( int wert ) { this . farbwert = wert ; } @Override public String toString () { char c = ' ' ; switch ( this ) { case KREUZ : c = '\\u2663' ; break ; case PIK : c = '\\u2664' ; break ; case HERZ : c = '\\u2665' ; break ; case KARO : c = '\\u2666' ; break ; } return String . valueOf ( c ); } } noch ein Beispiel f\u00fcr Werte mit Attributen enum Karten { AS ( 11 ), ZEHN ( 10 ), NEUN ( 0 ), ACHT ( 0 ), SIEBEN ( 0 ), K ( 4 ), D ( 3 ), B ( 2 ); private int kartenwert ; private Karten ( int wert ) { this . kartenwert = wert ; } @Override public String toString () { String s = \"\" ; switch ( this ) { case AS : s = \"A\" ; break ; case ZEHN : s = \"10\" ; break ; case NEUN : s = \"9\" ; break ; case ACHT : s = \"8\" ; break ; case SIEBEN : s = \"7\" ; break ; case K : s = \"K\" ; break ; case D : s = \"D\" ; break ; case B : s = \"B\" ; break ; } return s ; } } Ausf\u00fchrliches Beispiel - Skat.javapackage vorbereitungen.enums ; import java.util.Arrays ; import java.util.Random ; public class Skat { Karte [] p1 ; Karte [] p2 ; Karte [] p3 ; Karte [] skat ; enum Karten { AS ( 11 ), ZEHN ( 10 ), NEUN ( 0 ), ACHT ( 0 ), SIEBEN ( 0 ), K ( 4 ), D ( 3 ), B ( 2 ); private int kartenwert ; private Karten ( int wert ) { this . kartenwert = wert ; } @Override public String toString () { String s = \"\" ; switch ( this ) { case AS : s = \"A\" ; break ; case ZEHN : s = \"10\" ; break ; case NEUN : s = \"9\" ; break ; case ACHT : s = \"8\" ; break ; case SIEBEN : s = \"7\" ; break ; case K : s = \"K\" ; break ; case D : s = \"D\" ; break ; case B : s = \"B\" ; break ; } return s ; } } enum Farben { KREUZ ( 12 ), PIK ( 11 ), HERZ ( 10 ), KARO ( 9 ); private int farbwert ; private Farben ( int wert ) { this . farbwert = wert ; } @Override public String toString () { char c = ' ' ; switch ( this ) { case KREUZ : c = '\\u2663' ; break ; case PIK : c = '\\u2664' ; break ; case HERZ : c = '\\u2665' ; break ; case KARO : c = '\\u2666' ; break ; } return String . valueOf ( c ); } } class Karte { Karten k ; Farben f ; Karte ( Karten k , Farben f ) { this . k = k ; this . f = f ; } @Override public Karte clone () { return new Karte ( this . k , this . f ); } @Override public String toString () { return f . toString () + k . toString () + \" \" ; } } class Deck { Karte [] deck ; Deck () { deck = new Karte [ 32 ] ; int index = 0 ; for ( Farben f : Farben . values ()) { for ( Karten k : Karten . values ()) { deck [ index ++] = new Karte ( k , f ); } } } @Override public String toString () { String s = \"\" ; for ( int i = 0 ; i < deck . length ; i ++ ) { s += deck [ i ] . f . toString () + deck [ i ] . k . toString () + \" \" ; if ( i == 7 || i == 15 || i == 23 || i == 31 ) s += \"\\n\" ; } return s ; } public void print () { System . out . println ( this . toString ()); } } Skat () { p1 = new Karte [ 8 ] ; p2 = new Karte [ 8 ] ; p3 = new Karte [ 8 ] ; skat = new Karte [ 2 ] ; } boolean existsFalse ( boolean [] b ) { for ( int i = 0 ; i < b . length ; i ++ ) { if ( ! b [ i ] ) return true ; } return false ; } public void geben () { Deck d = new Deck (); Random r = new Random (); boolean [] b = new boolean [ 32 ] ; Arrays . fill ( b , false ); int indexP1 = 0 , indexP2 = 0 , indexP3 = 0 , indexSkat = 0 ; int zz = r . nextInt ( 32 ); while ( existsFalse ( b )) { while ( b [ zz ] ) { zz = r . nextInt ( 32 ); } b [ zz ] = true ; if ( indexP1 < 8 ) { p1 [ indexP1 ++] = d . deck [ zz ] . clone (); } else if ( indexP2 < 8 ) { p2 [ indexP2 ++] = d . deck [ zz ] . clone (); } else if ( indexP3 < 8 ) { p3 [ indexP3 ++] = d . deck [ zz ] . clone (); } else if ( indexSkat < 2 ) { skat [ indexSkat ++] = d . deck [ zz ] . clone (); } } } public void sortieren () { } public void print () { System . out . print ( \"Spieler 1 : \" ); for ( Karte k : p1 ) System . out . print ( k . toString () + \" \" ); System . out . println (); System . out . print ( \"Spieler 2 : \" ); for ( Karte k : p2 ) System . out . print ( k . toString () + \" \" ); System . out . println (); System . out . print ( \"Spieler 3 : \" ); for ( Karte k : p3 ) System . out . print ( k . toString () + \" \" ); System . out . println (); System . out . print ( \"Skat : \" ); for ( Karte k : skat ) System . out . print ( k . toString () + \" \" ); System . out . println (); } public static void main ( String [] args ) { Skat s = new Skat (); s . geben (); s . print (); } } N\u00fctzliche Links f\u00fcr enums \u00b6 Oracle Docs W3Schools Java enums - so geht's Enums Java Tutorial - Enums (youtube)","title":"Aufz\u00e4hlungstypen"},{"location":"enum/#aufzahlungstypen-enum","text":"","title":"Aufz\u00e4hlungstypen (enum)"},{"location":"enum/#motivation","text":"Angenommen, Sie wollen mithilfe einer Variablen eine festgelegte Menge an Zust\u00e4nden beschreiben, z.B. String Tag = \"MONTAG\" // kann auch Werte \"Dienstag\" usw. annehmen int Tag = 0 ; // Magic Number f\u00fcr \"Montag\" Das Problem: - die Variablen k\u00f6nnen auch beliebige andere Werte (aus dem jeweiligen Wertebereich) annehmen, z.B. Tag = \"hallo\" oder Tag=4711 , - Magic Numbers sollen vermieden werden \u2192 meistens schlechte Lesbarkeit Beispiel TicTacToe public class TicTacToe { int [][] field ; TicTacToe () { field = new int [ 3 ][ 3 ] ; for ( int i = 0 ; i < field . length ; i ++ ) for ( int j = 0 ; j < field [ i ] . length ; j ++ ) field [ i ][ j ]= 0 ; } void makeMove ( int i , int j , int player ) { if ( field [ i ][ j ]== 0 && player == 1 || player == 2 ) field [ i ][ j ]= player ; } } Zust\u00e4nde EMPTY ( 0 ), RED ( 1 ), BLACK ( 2 ) verschl\u00fcsselt \u2192 magic numbers field[i][j] k\u00f6nnte auch beliebige andere int -Werte annehmen Code nahezu unlesbar","title":"Motivation"},{"location":"enum/#erster-verbesserungsversuch-konstanten","text":"Beispiel TicTacToe mit Konstanten public class TicTacToe { int [][] field ; static final int EMPTY = 0 ; static final int RED = 1 ; static final int BLACK = 2 ; TicTacToe () { field = new int [ 3 ][ 3 ] ; for ( int i = 0 ; i < field . length ; i ++ ) for ( int j = 0 ; j < field [ i ] . length ; j ++ ) field [ i ][ j ]= EMPTY ; } void makeMove ( int i , int j , int player ) { if ( field [ i ][ j ]== EMPTY && player == RED || player == BLACK ) field [ i ][ j ]= player ; } } etwas besser, aber immer noch beliebige Werte f\u00fcr field[i][j] m\u00f6glich","title":"Erster Verbesserungsversuch: Konstanten"},{"location":"enum/#der-aufzahlungstyp-enum","text":"Anforderungen: eigener Datentyp endliche Anzahl an Zust\u00e4nden bzw. Werten leserliche Bezeichnung der Werte L\u00f6sung: - Enumerations (sog. Aufz\u00e4hlungstypen) - Schl\u00fcsselwort enum Syntax: enum TypName { WERT1 , WERT2 , WERT3 }; Verwendung: - TypName nun als Datentyp verwendbar, z.B. TypName[][] - Zugriff auf Werte \u00fcber statische Punktschreibweise, z.B. TypName.WERT1 Beispiel TicTacToe mit enum 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class TicTacToe { enum State { EMPTY , RED , BLACK }; State [][] field ; TicTacToe () { field = new State [ 3 ][ 3 ] ; for ( int i = 0 ; i < field . length ; i ++ ) for ( int j = 0 ; j < field [ i ] . length ; j ++ ) field [ i ][ j ]= State . EMPTY ; } void makeMove ( int i , int j , State player ) { if ( field [ i ][ j ]== State . EMPTY && player != State . EMPTY ) field [ i ][ j ]= player ; } } typsicher rot und schwarz \u00fcber State.RED und State.BLACK erreichbar andere Zust\u00e4nde nicht m\u00f6glich","title":"Der Aufz\u00e4hlungstyp enum"},{"location":"enum/#details","text":"alle enum erben implizit von java.lang.Enum enum sind Referenztypen die Konstanten (Werte) in enum sind automatisch static und final == kann verwendet werden (auch switch() ); equals() gibt es aber auch Beispiel enum 1 2 3 4 5 6 7 8 State s = State . EMPTY ; // s = 0 oder s = \"rot\" oder so geht nicht //-> typsicher switch ( s ) { case EMPTY : System . out . println ( \"leeres Feld\" ); break ; case RED : System . out . println ( \"roter Stein\" ); break ; case BLACK : System . out . println ( \"schwarzer Stein Feld\" ); break ; }","title":"Details:"},{"location":"enum/#weiteres","text":"auch Definition von Methoden m\u00f6glich toString() , equals() usw. aus Object k\u00f6nnen \u00fcberschrieben werden Konstanten k\u00f6nnen mit Attributen versehen werden (dann noch privater Konstruktor notwendig) Zugriff auf das Array von Konstanten mithilfe von values() Beispiel f\u00fcr Werte mit Attributen enum Farben { KREUZ ( 12 ), PIK ( 11 ), HERZ ( 10 ), KARO ( 9 ); private int farbwert ; private Farben ( int wert ) { this . farbwert = wert ; } @Override public String toString () { char c = ' ' ; switch ( this ) { case KREUZ : c = '\\u2663' ; break ; case PIK : c = '\\u2664' ; break ; case HERZ : c = '\\u2665' ; break ; case KARO : c = '\\u2666' ; break ; } return String . valueOf ( c ); } } noch ein Beispiel f\u00fcr Werte mit Attributen enum Karten { AS ( 11 ), ZEHN ( 10 ), NEUN ( 0 ), ACHT ( 0 ), SIEBEN ( 0 ), K ( 4 ), D ( 3 ), B ( 2 ); private int kartenwert ; private Karten ( int wert ) { this . kartenwert = wert ; } @Override public String toString () { String s = \"\" ; switch ( this ) { case AS : s = \"A\" ; break ; case ZEHN : s = \"10\" ; break ; case NEUN : s = \"9\" ; break ; case ACHT : s = \"8\" ; break ; case SIEBEN : s = \"7\" ; break ; case K : s = \"K\" ; break ; case D : s = \"D\" ; break ; case B : s = \"B\" ; break ; } return s ; } } Ausf\u00fchrliches Beispiel - Skat.javapackage vorbereitungen.enums ; import java.util.Arrays ; import java.util.Random ; public class Skat { Karte [] p1 ; Karte [] p2 ; Karte [] p3 ; Karte [] skat ; enum Karten { AS ( 11 ), ZEHN ( 10 ), NEUN ( 0 ), ACHT ( 0 ), SIEBEN ( 0 ), K ( 4 ), D ( 3 ), B ( 2 ); private int kartenwert ; private Karten ( int wert ) { this . kartenwert = wert ; } @Override public String toString () { String s = \"\" ; switch ( this ) { case AS : s = \"A\" ; break ; case ZEHN : s = \"10\" ; break ; case NEUN : s = \"9\" ; break ; case ACHT : s = \"8\" ; break ; case SIEBEN : s = \"7\" ; break ; case K : s = \"K\" ; break ; case D : s = \"D\" ; break ; case B : s = \"B\" ; break ; } return s ; } } enum Farben { KREUZ ( 12 ), PIK ( 11 ), HERZ ( 10 ), KARO ( 9 ); private int farbwert ; private Farben ( int wert ) { this . farbwert = wert ; } @Override public String toString () { char c = ' ' ; switch ( this ) { case KREUZ : c = '\\u2663' ; break ; case PIK : c = '\\u2664' ; break ; case HERZ : c = '\\u2665' ; break ; case KARO : c = '\\u2666' ; break ; } return String . valueOf ( c ); } } class Karte { Karten k ; Farben f ; Karte ( Karten k , Farben f ) { this . k = k ; this . f = f ; } @Override public Karte clone () { return new Karte ( this . k , this . f ); } @Override public String toString () { return f . toString () + k . toString () + \" \" ; } } class Deck { Karte [] deck ; Deck () { deck = new Karte [ 32 ] ; int index = 0 ; for ( Farben f : Farben . values ()) { for ( Karten k : Karten . values ()) { deck [ index ++] = new Karte ( k , f ); } } } @Override public String toString () { String s = \"\" ; for ( int i = 0 ; i < deck . length ; i ++ ) { s += deck [ i ] . f . toString () + deck [ i ] . k . toString () + \" \" ; if ( i == 7 || i == 15 || i == 23 || i == 31 ) s += \"\\n\" ; } return s ; } public void print () { System . out . println ( this . toString ()); } } Skat () { p1 = new Karte [ 8 ] ; p2 = new Karte [ 8 ] ; p3 = new Karte [ 8 ] ; skat = new Karte [ 2 ] ; } boolean existsFalse ( boolean [] b ) { for ( int i = 0 ; i < b . length ; i ++ ) { if ( ! b [ i ] ) return true ; } return false ; } public void geben () { Deck d = new Deck (); Random r = new Random (); boolean [] b = new boolean [ 32 ] ; Arrays . fill ( b , false ); int indexP1 = 0 , indexP2 = 0 , indexP3 = 0 , indexSkat = 0 ; int zz = r . nextInt ( 32 ); while ( existsFalse ( b )) { while ( b [ zz ] ) { zz = r . nextInt ( 32 ); } b [ zz ] = true ; if ( indexP1 < 8 ) { p1 [ indexP1 ++] = d . deck [ zz ] . clone (); } else if ( indexP2 < 8 ) { p2 [ indexP2 ++] = d . deck [ zz ] . clone (); } else if ( indexP3 < 8 ) { p3 [ indexP3 ++] = d . deck [ zz ] . clone (); } else if ( indexSkat < 2 ) { skat [ indexSkat ++] = d . deck [ zz ] . clone (); } } } public void sortieren () { } public void print () { System . out . print ( \"Spieler 1 : \" ); for ( Karte k : p1 ) System . out . print ( k . toString () + \" \" ); System . out . println (); System . out . print ( \"Spieler 2 : \" ); for ( Karte k : p2 ) System . out . print ( k . toString () + \" \" ); System . out . println (); System . out . print ( \"Spieler 3 : \" ); for ( Karte k : p3 ) System . out . print ( k . toString () + \" \" ); System . out . println (); System . out . print ( \"Skat : \" ); for ( Karte k : skat ) System . out . print ( k . toString () + \" \" ); System . out . println (); } public static void main ( String [] args ) { Skat s = new Skat (); s . geben (); s . print (); } }","title":"Weiteres:"},{"location":"enum/#nutzliche-links-fur-enums","text":"Oracle Docs W3Schools Java enums - so geht's Enums Java Tutorial - Enums (youtube)","title":"N\u00fctzliche Links f\u00fcr enums"},{"location":"exceptions/","text":"Exceptions \u00b6 Exceptions kennen wir schon, denn sie passieren uns h\u00e4ufiger. Wenn wir z.B. auf einen Index in einem Array zugreifen, dieser Index aber gar nicht existiert, wird eine ArrayIndexOutOfBounds -Exception geworfen. Wenn wir auf eine Objekteigenschaft zugreifen wollen, z.B. eine Objektmethode, die daf\u00fcr verwendete Referenzvariable aber gar nicht auf ein Objekt zeigt, sondern auf null , erhalten wir eine NullPointerException . Wenn bei einer Nutzereingabe eine Zahl erwartet, um damit weiterrechnen zu k\u00f6nnen, die Nutzerin gibt aber etwas anderes als eine Zahl ein, dann wird ebenfalls ein Exception geworfen . Wir wollen aber gar nicht, dass das Programm in solchen F\u00e4llen abst\u00fcrzt, sondern wir wollen diesen \u201eFehler\u201c erkennen und darauf reagieren. Grunds\u00e4tzlich gibt es also zwei Arten von Fehlern: syntaktische Fehler \u2192 k\u00f6nnen vom Compiler vor der Laufzeit erkannt werden; das programm wird gar nicht erst vollst\u00e4ndig compiliert und nicht ausgef\u00fchrt und logische Fehler \u2192 k\u00f6nnen erst zur Laufzeit erkannt werden. Im Falle der logischen Fehler, die erst zur Laufzeit auftreten, spricht man von Laufzeitfehlern (oder Ausnahmen oder Exceptions ). Die Aufgabe beim Programmieren ist nun, zu identifizieren, an welchen Stellen ein logischer Fehler auftreten k\u00f6nnte , z.B. fehlerhafte Benutzereingabe Datenbank- oder Netzwerkverbindung nicht verf\u00fcgbar gesuchte Datei/Ordner nicht vorhanden usw. Die Stellen, an denen ein solcher logischer Fehler auftreten k\u00f6nnte, nennen wir im Folgenden kritischer Abschnitt . Wir m\u00fcssen solche kritischen Abschnitte in unserem Quellcode identifizieren und haben dann die M\u00f6glichkeit, solche kritischen Abschnitte so zu implementieren, dass die Exception, die eventuell geworfen wird, abgefangen wird und das Programm dadurch nicht abst\u00fcrzt. try-catch \u00b6 Die grunds\u00e4tzliche Idee ist die, dass wir zun\u00e4chst versuchen den kritischen Abschnitt einfach auszuf\u00fchren. Wir versuchen z.B. einfach mit einem index auf das Array zuzugreifen, auch wenn wir gar nicht wissen, ob dies ein tats\u00e4chlicher index aus dem Array ist. Allerdings binden wir diesen Versuch in einen try{} -Block ein. Sollte in einem solchen try{} -Block nun eine Exception geworfen werden, dann fangen wir diese in einem catch(){} -Block auf und behandeln sie dort. Die allgemeine Syntax daf\u00fcr sieht so aus: allgemeine Syntax try-catch 1 2 3 4 5 6 7 8 try { // Anweisung(en), die evtl. Fehler verursachen (kritischer Abschnitt) } catch ( Exception e ) { // Behandlung der Exception } Es passiert Folgendes: wir f\u00fchren die Anweisung(en) in Zeile 3 aus. Wenn diese keine Exception wirft, also alles okay ist, dann machen wir einfach hinter dem catch -Block, also nach Zeile 8 weiter. Wenn aber die Anweisung(en) in Zeile 3 einen Laufzeitfehler verursachen, also eine Exception werfen, dann wird diese in Zeile 5 \"aufgefangen\" und in dem Anweisungsblock in den Zeilen 6-8 behandelt. Das Programm st\u00fcrzt nun nicht mehr ab, sondern wir haben die M\u00f6glichkeit, auf die Exception zu reagieren. Beispiel ohne try-catch \u00b6 Wir verdeutlichen dieses Prinzip an einem ersten Beispiel: Beispiel zun\u00e4chst ohne Behandlung der Exceptions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Ausnahmen { static char charAt ( String s , int index ) { char c = s . charAt ( index ); // kritisch! return c ; } static double divide ( int divident , int divisor ) { double result = divident / divisor ; // kritisch! return result ; } public static void main ( String [] args ) { System . out . println ( divide ( 5 , 0 )); // ArithmeticException System . out . println ( charAt ( \"Hallo\" , 5 )); // StringIndexOutOfBoundsException } } Das Beispiel enth\u00e4lt zwei Methoden charAt() und divide . Der charAt -Methode wird ein String \u00fcbergeben und ein index . Die Methode gibt das Zeichen ( char ) zur\u00fcck, dass im String unter dem index gespeichert ist (z.B. charAt(\"Hallo\", 1) gibt das 'a' zur\u00fcck). Es wird jedoch gar nicht gepr\u00fcft, ob index tats\u00e4chlich ein korrekter Index des Strings s ist, d.h. evtl. ist index kleiner als 0 oder gr\u00f6\u00dfer als die L\u00e4nge von s minus 1 . Die Anweisung s.charAt(index); ist somit eine kritische Anweisung , denn sie kann (bei \"falschem\" index ) eine StringIndexOutOfBoundsException werfen. Genau so ist die Anweisung divident/divisor; in der Methode divide eine kritische Anweisung , da es sein kann, dass der divisior gleich 0 ist. Bei der int -Division durch 0 wird eine ArithmeticException geworfen. Wenn die main -Methode nun wie angegeben ausgef\u00fchrt wird, dann \"st\u00fcrzt\" das Programm bereits bei Ausf\u00fchrung von Zeile 16 ab und Zeile 17 wird gar nicht mehr erreicht: Exception in thread \"main\" java.lang.ArithmeticException: / by zero at packageName.Ausnahmen.divide ( Ausnahmen.java:10 ) at packageName.Ausnahmen.main ( Ausnahmen.java:16 ) Die Fehlermeldung gibt uns an, welche Zeile die Ausnahme geworfen hat, n\u00e4mlich Ausnahmen.java:10 und um welche Exception es sich handelt, n\u00e4mlich ArithmeticException: / by zero . Wenn wir in der main -Methode Zeile 16 auskommentieren, dann sehen wir, dass auch die Anweisung in Zeile 17 eine Exception wirft, n\u00e4mlich: Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: String index out of range: 5 at java.base/java.lang.StringLatin1.charAt ( StringLatin1.java:47 ) at java.base/java.lang.String.charAt ( String.java:702 ) at packageName.Ausnahmen.charAt ( Ausnahmen.java:5 ) at packageName.Ausnahmen.main ( Ausnahmen.java:17 ) Die Fehlermeldung gibt uns an, welche Zeile unseres Programms die Ausnahme geworfen hat, n\u00e4mlich Ausnahmen.java:5 und um welche Exception es sich handelt, n\u00e4mlich StringIndexOutOfBoundsException: String index out of range: 5 . Sie sehen auch, dass eigentlich sogar die Anweisung in Zeile 47 in der Klasse StringLatin1 in der dortigen Methode charAt die Exception geworfen hat. Wir werden dieses \"Weiterreichen\" von Exceptions gleich noch n\u00e4her betrachten. Beispiel mit try-catch \u00b6 Zun\u00e4chst \"reparieren\" wir unseren Code, indem wir try-catch -Bl\u00f6cke um unsere kritischen Anweisungen hinzuf\u00fcgen: Beispiel mit Behandlung der Exceptions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Ausnahmen { static char charAt ( String s , int index ) { char c = ' ' ; try { c = s . charAt ( index ); // kritisch! } catch ( StringIndexOutOfBoundsException e ) { System . err . println ( \"Der Index war ausserhalb des Strings\" ); } return c ; } static double divide ( int divident , int divisor ) { double result = 0.0 ; try { result = divident / divisor ; // kritisch! } catch ( ArithmeticException ae ) { System . err . println ( \"Division durch 0 nicht definiert!\" ); } return result ; } public static void main ( String [] args ) { System . out . println ( divide ( 5 , 0 )); // ArithmeticException System . out . println ( charAt ( \"Hallo\" , 5 )); // StringIndexOutOfBoundsException } } Die kritischen Anweisungen wurden nun jeweils in einen try -Block integriert und die Behandlung der eventuell auftretenden Exceptions besteht nur aus einer jeweiligen Fehlerausgabe (ich habe hier daf\u00fcr nicht das Standardausgabeger\u00e4t out in den println -Anweisungen verwendet, sondern err - Zeilen 12 und 26 ). Wenn wir das Programm nun ausf\u00fchren (in main muss auch nichts mehr auskommentiert werden), dann erhalten wir die Ausgabe: Division durch 0 nicht definiert! 0 .0 Der Index war ausserhalb des Strings Das Programm \"st\u00fcrzt\" nun also nicht mehr ab, das ist schonmal ein Erfolg. So ganz optimal ist die L\u00f6sung allerdings noch nicht, da wir nun jeweils einen Nebeneffekt in unsere Methoden eingebaut haben. Angenommen, in der divide -Methode wird eine Exception geworfen, dann erfolgt durch Zeile 26 die Fehlerausgabe auf die Konsole. Danach wird in Zeile 28 aber result zur\u00fcckgegeben (hat den Wert 0.0 , den wir bei der Initailisierung in Zeile 19 angegeben haben) und dieser Wert wird durch Zeile 33 auf die Konsole ausgegeben. Das gleiche gilt f\u00fcr die charAt -Methode. Auch da haben wir einen Nebeneffekt eingebaut und es wird durch Zeile 34 das Leerzeichen auf die Konsole ausgegeben. Nebeneffekte wollen wir aber unbedingt vermeiden und m\u00fcssen unsere Implementierung deshalb noch \u00e4ndern. Zun\u00e4chst schauen wir uns aber den generellen Ablauf einer solchen Ausnahmesituation an: Ablauf einer Ausnahmesituation \u00b6 Der generelle Ablauf beim \"Werfen\" eine Exception ist wie folgt: Das Laufzeitsystem (JVM) erzeugt ein Ausnahme-Objekt (Objekt vom Elterntyp Exception ), wenn eine Exception \"geworfen\" wird Die Abarbeitung des Programmcodes wird sofort unterbrochen. Das Laufzeitsystem sucht nach der n\u00e4chsten catch -Klausel und f\u00fchrt diese aus. Passt die gefundene catch -Klausel nicht zur Art der Ausnahme, wird die n\u00e4chste catch -Klausel gesucht usw. Betrachten wir nochmal obigen Code, dann stellen wir fest, dass in der einen catch -Klausel (Zeile 10 ) ein Objekt vom Typ StringIndexOutOfBoundsException erwartet wird. Wir werden gleich sehen, dass dies schon ein sehr spezieller Typ in der Vererbungshierarchie von Exception ist. Das Programm w\u00fcrde auch genau so funktionieren, wenn wir dort anstelle von StringIndexOutOfBoundsException allegmein eine Exception erwarten w\u00fcrden. Das gleiche gilt f\u00fcr die andere catch -Klausel (Zeile 24 ), wo wir eine ArithmeticException erwarten. Wir schauen uns die Vererbungshierarchie der Exceptions gleich an. generell gilt, dass man mehrere catch -Bl\u00f6cke hintereinander setzen kann und der erste catch -Block, der dem erwartetetn Parametertyp entspricht, wird ausgef\u00fchrt. Wichtig ist, dass wir uns merken, dass durch eine Exception der Programmablauf sofort unterbrochen und zur n\u00e4chsten \"passenden\" catch -Klausel gesprungen wird. Ein weiteres Beispiel \u00b6 Wir schauen uns dazu ein weiteres Beispiel an und erg\u00e4nzen unsere Klasse Ausnahmen um eine weitere Methode inputInt() : eine weitere methode inputInt() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 /* * Sollten Sie mit dem Modul-System von Java arbeiten, d.h. sollten * Sie eine Datei module-info.java in Ihrem Projekt-Ordner haben, * dann muessen Sie dort noch * module ProjektName * { * requires java.desktop; * } * eintragen, damit Sie das Paket javax.swing importieren koennen. */ import javax.swing.JOptionPane ; public class Ausnahmen { static char charAt ( String s , int index ) { char c = ' ' ; try { c = s . charAt ( index ); // kritisch! } catch ( StringIndexOutOfBoundsException e ) { System . err . println ( \"Der Index war ausserhalb des Strings\" ); } return c ; } static double divide ( int divident , int divisor ) { double result = 0.0 ; try { result = divident / divisor ; // kritisch! } catch ( ArithmeticException ae ) { System . err . println ( \"Division durch 0 nicht definiert!\" ); } return result ; } static int inputInt () { int inputInt = 0 ; boolean inputOk = false ; String input = \"\" ; while ( ! inputOk ) { input = JOptionPane . showInputDialog ( \"Zahl :\" ); inputOk = true ; try { inputInt = Integer . parseInt ( input ); } catch ( NumberFormatException e ) { inputOk = false ; } } return inputInt ; } public static void main ( String [] args ) { System . out . println ( divide ( 5 , 0 )); // ArithmeticException System . out . println ( charAt ( \"Hallo\" , 5 )); // StringIndexOutOfBoundsException System . out . println ( \"Zahl: \" + inputInt ()); // NumberFormatException } } Schauen wir uns die Implementierung von inputInt() genauer an: in Zeile 50 wird ein kleines Eingabefenster erzeugt ( JOptionPane ist eine Klasse aus dem javax.swing -Paket, welches wiederum im Modul java.desktop verf\u00fcgbar ist). Die Eingabe in dieses Fenster wird als String zur\u00fcckgegeben und in der Variablen input gespeichert. in Zeile 53 wird versucht, den Eingabestring input in ein int umzuwandeln. Dazu wird die Methode parseInt() verwendet, die zur Klasse Integer geh\u00f6rt ( Integer ist eine sogenannte Wrapper-Klasse - diese schauen wir uns n\u00e4chste Woche an). wenn input eine Zahl enth\u00e4lt, also z.B. so aussieht: \"1234\" , dann erzeugt parseInt() daraus die int -Zahl 1234 und alles ist ok. Wenn input jedoch keine Zahl enth\u00e4lt, also z.B. \"hallo\" , dann wirft parseInt() eine NumberFormatException , weil die Umwandlung des String s in ein int nicht m\u00f6glich ist. in Zeile 55 wird eine solche NumberFormatException aufgefangen. Die \"Behandlung\" dieser Excepion sieht so aus, dass der Schalter inputOk auf false gesetzt wird. der gesamte Anweisungsblock Fenster->Eingabe->try-catch ist in eine Schleife eingebettet. Diese Schleife wird so lange ausgef\u00fchrt, so lange der Wert von inputOk nicht false ist. Das bedeutet, wenn keine Zahl eingegeben wird, dann \u00f6ffnet sich das Fenster erneut und es muss so lange eine Eingabe erfolgen, bis die Eingabe einer Zahl entspricht (und somit parseInt() keine Exception wirft) \u00dcbrigend k\u00f6nnte die Anweisung inputOk = true; auch nach parseInt() in den try -Block geschrieben werden: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 static int inputInt () { int inputInt = 0 ; boolean inputOk = false ; String input = \"\" ; while ( ! inputOk ) { input = JOptionPane . showInputDialog ( \"Zahl :\" ); try { inputInt = Integer . parseInt ( input ); inputOk = true ; } catch ( NumberFormatException e ) { inputOk = false ; } } return inputInt ; } Zeile 12 wird nur genau dann erreicht, wenn parseInt() keine Exception wirft. Dann wird auch der catch -Block nicht betreten und die Schleife wird beendet. Beispiel mit mehreren Exceptions \u00b6 Wir betrachten jetzt einmal an einem Besipiel die bei Ablauf einer Ausnahmesituation unter Punkt 4 beschriebene Situation, dass die n\u00e4chstpassende catch -Klausel gesucht wird. Wir erweitern dazu unsere Klasse Ausnahmen um eine weitere Methode mehrereExceptions() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public static void mehrereExceptions () { String [] basen = { \"2\" , \"8\" , \"10\" , \"Hi\" }; int base = 0 ; double result = 0 ; boolean ok = true ; for ( int index = 0 ; index <= 4 ; index ++ ) { try { base = Integer . parseInt ( basen [ index ] ); ok = true ; } catch ( NumberFormatException nfe ) { System . out . println ( \"Keine Zahl!\" ); ok = false ; } catch ( IndexOutOfBoundsException ioobe ) { System . out . println ( \"Ausserhalb des Arrays\" ); ok = false ; } for ( int exp = 0 ; exp < 6 && ok ; exp ++ ) { result = Math . pow ( base , exp ); System . out . printf ( \"%d ^ %d = %.0f %n\" , base , exp , result ); } } } In Zeile 3 definieren wir uns ein String[] mit 4 Eintr\u00e4gen. Durch dieses String[] laufen wir mit einer for -Schleife (Zeile 8 ) durch. In Zeile 11 wndeln wir jeden Eintrag aus dem String[] in eine int -Zahl um. An zwei Stellen k\u00f6nnen Exceptions geworfen werden: Bei dem Index-basierten Zugriff auf das Array basen[index] in Zeile 11 kann eine ArrayIndexOutOfBounds -Exception geworfen werden, falls index kein korrekter Index des String[] ist (gilt f\u00fcr index==4 ). Bei der Umwandlung von String nach int durch parseInt() in Zeile 11 kann eine NumberFormatException geworfen werden, falls der entsprechende Eintrag im String[] keine Zahl ist (gilt f\u00fcr basen[3]=='Hi' ). Die Methode erzeugt die folgende Ausgabe: 2 ^ 0 = 1 2 ^ 1 = 2 2 ^ 2 = 4 2 ^ 3 = 8 2 ^ 4 = 16 2 ^ 5 = 32 8 ^ 0 = 1 8 ^ 1 = 8 8 ^ 2 = 64 8 ^ 3 = 512 8 ^ 4 = 4096 8 ^ 5 = 32768 10 ^ 0 = 1 10 ^ 1 = 10 10 ^ 2 = 100 10 ^ 3 = 1000 10 ^ 4 = 10000 10 ^ 5 = 100000 Keine Zahl! Ausserhalb des Arrays Das hei\u00dft, dass wenn f\u00fcr parseInt(\"Hi\") eine NumberFormatException geworfen wird, dann wird der catch -Block ausgef\u00fchrt, der eine NumberFormatException erwartet (Zeilen 14-17 ). Der andere catch -Block wird nicht ausgef\u00fchrt. Wenn f\u00fcr basen[4] eine ArrayIndexOutOfBoundsException geworfen wird, dann wird der catch -Block ausgef\u00fchrt, der eine IndexOutOfBoundsException erwartet (Zeilen 18-21 ). Der andere catch -Block wird nicht ausgef\u00fchrt. Wir sehen, dass es offensichtlich auch eine IndexOutOfBoundsException -Klasse gibt. Das ist eine Elternklasse von ArrayIndexOutOfBoundsException und auch von StringIndexOutOfBoundsException . Wir schauen uns diese Vererbungshierarchie von Exception nun mal an: Die Vererbungshierarchie der Klasse Exception \u00b6 Wenn Sie sich die Klasse Exception in der Java-Dokumentation einmal anschauen, dann sehen Sie, dass diese Klasse ein Unmenge von Kindklassen hat. Wir betrachten hier einmal die f\u00fcr uns wichtigsten Klassen: Alle Exception-Klassen erben von der Klasse Exception , die im java.lang -Paket definiert ist. Grunds\u00e4tzlich werden zwei Arten von Exceptions unterschieden: checked Exceptions: Checked Exceptions m\u00fcssen gepr\u00fcft werden, d.h. Methoden, die eine checked Exception werfen k\u00f6nnen, m\u00fcssen in einen try-catch -Block integriert werden. Dies wird bereits zur Compilezeit gepr\u00fcft, d.h. das Programm l\u00e4sst sich gar nicht compilieren, wenn eine Methode, die eventuell eine checked Exception wirft, nicht in einem try -Block steht. In der Abbildung stehen checked Exceptions auf der rechten Seite (gr\u00fcn). unchecked Exceptions: Unchecked Exceptions k\u00f6nnen gepr\u00fcft werden, m\u00fcssen aber nicht. Alle unchecked Exceptions leiten sich von der Klasse RunTimeException ab. Wir werden uns genau mit diesen uncheck Exceptions, also von RunTimeException abgeleiteten Klassen besch\u00e4ftigen. Es gibt von RunTimeException noch viele weitere Kindklassen, wie man in der Java-Dokumentation sehen kann, aber die in der Abbildung gezeigten sind die wichtigsten. Eine Kindklasse davon, die IllegalArgumentException -Klasse wird f\u00fcr uns noch eine weitere Rolle spielen, da wir von ihr erben werden, wenn wir uns eigene Exception -Klassen erstellen. try-catch-finally \u00b6 Prinzipiell besteht das Konstrukt try und catch nicht nur aus diesen beiden Bl\u00f6cken, sondern auch noch aus dem finally -Block. Der finally -Block wird grunds\u00e4tzlich immer ausgef\u00fchrt, egal, ob eine Exception geworfen wird oder nicht. Die Syntax ist wie folgt: try { // Anweisung(en), die evtl. Fehler verursachen (kritischer Abschnitt) } catch ( Exception e ) { // Behandlung der Exception } finally { // Aufraeumen, z.B. Schliessen von Dateien, Beenden von // Verbindungen zu Servern, Datenbanken etc. } Typischerweise wird der finally -Block dazu verwendet, bestimmte Ressourcen wieder freizugeben, z.B. Dateien zu schlie\u00dfen, Verbindungen zu Servern, Datenbanken usw. zu beenden. Wir werden finally jedoch nicht sehr oft implementieren. throws - eine Exception weiterreichen \u00b6 Wir haben bis jetzt immer in den Methoden, in denen die kritische Anweisung ausgef\u00fchrt wurde, diese direkt mit einem try-catch -Block \"ummantelt\". Das muss nicht unbedingt sein. Wir k\u00f6nnen eine in einer Methode geworfene Exception auch an die aufrufende Methode weiterreichen. Dann kann (und sollte) die Exception in der aufrufenden Methode abgefangen und behandelt werden. Um anzugeben, dass eine Methode evtl. eine Exception wirft, wird das Schl\u00fcsselwort throws verwendet. Wir erweiteren also die Deklaration einer Methode (also den Methodenkopf) um throws und danach kommt der entsprechende Typ der Exxception, die in der Methode geworfen werden kann. Die allgemeine Syntax einer Methodendeklaration sieht somit so aus: [ modifizierer ] [ rueckgabetyp ] methodenname throws ExceptionType { // Anweisungsblock // wirft (evtl.) Exception } Wir betrachten auch daf\u00fcr ein Beispiel und erweiteren unsere Klasse Ausnahmen um die Methode getValueAtIndex : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 static int getValueAtIndex ( int [] field , int index ) throws ArrayIndexOutOfBoundsException { return field [ index ] ; } public static void main ( String [] args ) { System . out . println ( divide ( 5 , 0 )); // ArithmeticException System . out . println ( charAt ( \"Hallo\" , 5 )); // StringIndexOutOfBoundsException System . out . println ( \"Zahl: \" + inputInt ()); // NumberFormatException mehrereExceptions (); int value = 0 ; boolean ok = true ; int [] field = { 8 , 3 , - 4 , 2 , - 9 }; try { value = getValueAtIndex ( field , - 3 ); } catch ( ArrayIndexOutOfBoundsException e ) { System . out . println ( \"Index ausserhalb des Arrays!\" ); ok = false ; } if ( ok ) { System . out . println ( \"value : \" + value ); } } Obwohl die Methode eine kritische Anweisung enth\u00e4lt ( field[index] ), ist diese Anweisung nicht in einen try-catch -Block eingebunden. Es kann nun also sein, dass bei Aufruf der Methode eine Exception (eine ArrayIndexOutOfBoundsException ) geworfen wird. Wir geben das im Methodenkopf mithilfe von throws ArrayIndexOutOfBoundsException bekannt. Die aufrufende Methode ( main ) kann nun selbst den Aufruf der Methode getValueAtIndex() in einen try-catch -Block ummanteln und somit die Exception selbst abfangen und behandeln. Nur wenn keine Exception geworfen wird, wird der von der Methode getValueAtIndex() zur\u00fcckgegebene Wert ausgegeben. Wenn wir an unsere einleitenden Beispiele denken (Methoden charAt() und divide() ), dann erinnern wir uns, dass wir dort festegestellt haben, dss die Implementierung so nicht g\u00fcnstig war, da sie Nebeneffekte erzeugt hat, sobald eine Exception geworfen wurde. Diese Nebeneffekte werden bei der Implementierung von getValueAtIndex() vermieden, obwohl die grunds\u00e4tzliche Idee die gleiche ist, wie bei charAt() . Der Nachteil ist, dass man die aufrufende Methode \"zwingt\", die Exception selbst zu behandeln. Sch\u00f6ner Code \u00b6 Der letzte Satz aus dem vorherigen Abschnitt ist insofern nicht ganz richtig, dass mit unchecked Exceptions ja genau nicht erzwungen wird, eventuelle Exceptions abzufangen. Es gibt gute Gr\u00fcnde daf\u00fcr, alle eigenen Exceptions eher als checked Exceptions zu definieren, als als unchecked Exceptions. Aber zu eigenen Exceptions kommen wir gleich. Trotzdem k\u00f6nnen wir uns schon zum jetzigen Zeitpunkt einige Gedanken, \u00fcber sch\u00f6nen Code in Bezug auf Exceptions machen: eine Methode sollte immer nur eine Sache erledigen (single responsibility principle - SRP) \u2192 die Methode kann nicht auch noch f\u00fcr das Abfangen des Fehlers zust\u00e4ndig sein (try-catch-Bl\u00f6cke sind eh \u201eh\u00e4sslich\u201c und unleserlich) \u2192 lassen Sie Methode, die etwas eledigt, eine Exception werfen und leiten Sie diese weiter ( throws ) \u2192 fangen Sie den Fehler in einer anderen Methode ab ( try ) \u2192 Sie k\u00f6nnen sogar die eigentliche Behandlung des Fehlers ( catch ) in eine dritte Methode auslagern (single responsibility) H\u00e4ufig sieht man, dass die Methode, die den Fehler abf\u00e4ngt ( try ) im catch -Block den fehler protokolliert (in ein ErrorLog-File) und dann eine eigens erzeugte Exception an die Methode weiterleitet, die den Fehler behandelt. Wie man eine Exception erzeugt, schauen wir uns jetzt an. throw - eigene Exceptions erzeugen \u00b6 Zun\u00e4chst kommt ein neues Schl\u00fcsselwort hinzu, n\u00e4mlich throw . Ungl\u00fccklicherweise ist dies dem Schl\u00fcsselwort throws sehr \u00e4hnlich. Mit throw erzeugen (werfen) wir eine eigene Exception, mit throws wird im Methodenkopf angegeben, dass die Methode (eventuell) eine Exception wirft und diese an die aufrufende Methode weitergibt. Angenommen, f\u00fcr einen Konstruktor der Klasse Dreieck werden Seitenl\u00e4ngen \u00fcbergeben, die entweder kleiner als 0 oder die Summe von 2 Seitenl\u00e4ngen ist kleiner als die dritte Seite ist. Wir hatten uns bei der Bearbeitung der Aufgabe Traingle im ersten Semester bereits \u00fcberlegt, dass ddurch kein \"richtiges\" Dreieck erzeugt wird, aber wir konnten das noch nicht verhindern. das machen wir jetzt. Wie k\u00f6nnen wir also verhindern, dass ein solches Objekt erzeugt wird? Die L\u00f6sung besteht darin, eine eigene Exception zu definieren und diese im Fehlerfall zu werfen. Mithilfe des Schl\u00fcsselwortes throw wird also eine eigene Exception geworfen. Bis jetzt wurden unsere Exceptions ja geworfen. F\u00fcr eine eigene Exception haben wir zwei M\u00f6glichkeiten: entweder erstellen wir uns eine eigene Exception-Klasse und leiten diese von der Klasse Exception oder von der Klasse RunTimeException ab ( extends Exception bzw. extends RunTimeException ) oder wir verwenden eine bereits existierende Exception-Klasse (typischerweise IllegalArgumentException ). throw new IllegalArgumentException \u00b6 Wir implementieren unsere Klasse Triangle so, dass wir im Konstruktor f\u00fcr den Fall, dass eine Seite kleiner gleich 0 ist, eine IllegalArgumentException werfen. Dieser Exception kann ein String als Parameter \u00fcbergeben werden, der im catch -Block mittels getMessage() wieder ausgelesen werden kann. Das gleiche machen wir f\u00fcr den Fall, dass die Summe von zwei Seiten kleiner der dritten Seite ist. Triangle mit eigenen IllegalArgumentExceptions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 public class Triangle { private int a , b , c ; public Triangle ( int a , int b , int c ) throws IllegalArgumentException { if ( a <= 0 || b <= 0 || c <= 0 ) { throw new IllegalArgumentException ( \"Seiten muessen groesser als 0 sein!\" ); } else if ( a >= ( b + c ) || b >= ( a + c ) || c >= ( a + b )) { throw new IllegalArgumentException ( \"Kein Dreieck!\" ); } else { this . a = a ; this . b = b ; this . c = c ; } } public static void main ( String [] args ) { Triangle d ; try { d = new Triangle ( 3 , 4 , 5 ); //(3,4,0) und (3,4,8) probieren } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } } } Der Konstruktor f\u00e4ngt die Exception nicht selbst auf und behandelt sie auch nicht selbst, sondern leitet sie an die aufrufende Methode weiter (Zeile 5 - throws IllegalArgumentException ). Im Konstruktor werden die Parameterwerte gepr\u00fcft und entweder eine IllegalArgumentException geworfen, falls eine Seite kleiner gleich 0 ist (Zeile 9 - throw new ) oder eine IllegalArgumentException geworfen, falls die Summe von zwei Seiten kleiner als die dritte Seite ist (Zeile 13 - throw new ) oder die Objektvariablen die Werte der Parameter bekommen (wenn alles ok ist - Zeilen 17-19 ). Die Erzeugung eines Triangle -Objektes (also der Aufruf des Konstruktors) ist nun in einen try-catch -Block eingebettet (Zeilen 26-32 ). Beachten Sie, dass es sein kann, dass d nach Aufruf des Konstruktors immernoch null ist (n\u00e4mlich dann, wenn eine Exception geworfen wird). Wir haben hier gleich die main -Methode mit in die Klasse genommen, das sollte man nat\u00fcrlich nicht machen. Eigene Exception-Klasse definieren \u00b6 Wir erstellen uns eigene Exception-Klassen f\u00fcr die oben beschriebenen \"Fehler\" im Konstruktor von Triangle . Diese eigenen Exception-Klassen erben von der Klasse Exception . Damit sind die eigenen Exceptions checked Exceptions, d.h. sie m\u00fcssen in einem try-catch -Block abgefangen und behandelt werden. Eigene Klasse IllegalTriangleException 1 2 3 4 5 6 7 8 9 10 public class IllegalTriangleException extends Exception { public IllegalTriangleException ( String s ) { super ( s ); } public IllegalTriangleException () { super ( \"Each side has to be smaller than the sum of the other sides!\" ); } } Die Klasse IllegalTriangleException verwenden wir f\u00fcr den Fall, dass die Summe zweier Seiten kleiner als die dritte Seite ist. Eigene Klasse IllegalSideLengthException 1 2 3 4 5 6 7 8 9 10 11 public class IllegalSideLengthException extends Exception { public IllegalSideLengthException ( String s ) { super ( s ); } public IllegalSideLengthException () { super ( \"Sides must be greater than zero!\" ); } } Die Klasse IllegalSideLengthException verwenden wir f\u00fcr den Fall, dass eine Seite kleiner gleich 0 ist. F\u00fcr beide Klassen haben wir jeweils einen parameterlosen Konstruktor definiert, der ein Objekt von Exception erzeugt und dem eine Fehlermeldung als String im Parameter \u00fcbergeben wird. Au\u00dferdem haben wir in beiden Klassen noch einen parametrisierten Konstruktor, dem eine Fehlermeldung als String \u00fcbergeben werden kann. Wir haben nun die Wahl, ob wir den paarmeterlosen oder den parametrisierten Konstruktor verwenden. Die Anwendung dieser beiden Exception-Klassen in der Klasse Triangle k\u00f6nnte nun so aussehen (wir haben hier auch gleich die main -Methode mit in die Klasse genommen, das sollte man nat\u00fcrlich nicht machen): Triangle mit den selbst definierten Exception-Klassen 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public class Triangle { private int a , b , c ; public Triangle ( int a , int b , int c ) throws Exception { if ( a <= 0 || b <= 0 || c <= 0 ) { throw new IllegalTriangleException (); } else if ( a >= ( b + c ) || b >= ( a + c ) || c >= ( a + b )) { throw new IllegalSideLengthException (); } else { this . a = a ; this . b = b ; this . c = c ; } } public static void main ( String [] args ) { Triangle d ; try { d = new Triangle ( 3 , 4 , 5 ); //(3,4,0) und (3,4,8) probieren } catch ( Exception e ) { System . out . println ( e . getMessage ()); } } } Beide eigenen Klassen sind ja auch vom Laufzeittyp Exception , da sie von dieser Klasse geerbt haben. Insofern ist der Parametertyp in der catch -Klausel mit Exception (Zeile 30 ) passend. Wenn Sie anstelle der Zeilen 27-33 nur d = new Triangle(3,4,5); schreiben, stellen Sie fest, dass sich das Programm nicht \u00fcbersetzen l\u00e4sst, da es sich um checked Exceptions handelt, die in einem try-catch -Block abgefangen werden m\u00fcssen. Eclipse bietet Ihnen dann aber einen QuickFix an Surround with try/catch . Das sollten Sie einmal ausprobieren. Wenn Sie anstelle von Exception von der Klasse RunTimeException erben, dann handelt es sich bei Ihren Exceptions um unchecked Exceptions. Es ist aber besseres Programmieren, wenn man checked Exceptions erstellt, denn dazu sind die Exceptions ja da, dass sie abgefangen und behandelt werden. Success Wir haben Exceptions kennengelernt. Solche Laufzeitfehler k\u00f6nnen an verschiedenen Stellen passieren und haben unterschiedliche Typen (siehe Kindklassen von Exception , insb. von RunTimeException ). Mithilfe von try-catch-[finally] k\u00f6nnen wir solche Exceptions abfangen und behandeln. Damit st\u00fcrzt unser Programm nicht mehr ab. Mithilfe von throws zeigt eine Methode an, dass sie eine Exception erzeugen kann. Das Schl\u00fcsselwort throw weist die Laufzeitumgebung an, das angegebene Laufzeitobjekt (eine Exception) zu erzeugen und zu werfen. Checked Exceptions m\u00fcssen behandelt werden (Aufruf der Exception-werfenden Methode in einem try-catch -Block). Unchecked Exceptions k\u00f6nnen behandelt werden, m\u00fcssen aber nicht, sollten aber. K\u00f6nnen wir ja jetzt schlie\u00dflich...","title":"Exceptions"},{"location":"exceptions/#exceptions","text":"Exceptions kennen wir schon, denn sie passieren uns h\u00e4ufiger. Wenn wir z.B. auf einen Index in einem Array zugreifen, dieser Index aber gar nicht existiert, wird eine ArrayIndexOutOfBounds -Exception geworfen. Wenn wir auf eine Objekteigenschaft zugreifen wollen, z.B. eine Objektmethode, die daf\u00fcr verwendete Referenzvariable aber gar nicht auf ein Objekt zeigt, sondern auf null , erhalten wir eine NullPointerException . Wenn bei einer Nutzereingabe eine Zahl erwartet, um damit weiterrechnen zu k\u00f6nnen, die Nutzerin gibt aber etwas anderes als eine Zahl ein, dann wird ebenfalls ein Exception geworfen . Wir wollen aber gar nicht, dass das Programm in solchen F\u00e4llen abst\u00fcrzt, sondern wir wollen diesen \u201eFehler\u201c erkennen und darauf reagieren. Grunds\u00e4tzlich gibt es also zwei Arten von Fehlern: syntaktische Fehler \u2192 k\u00f6nnen vom Compiler vor der Laufzeit erkannt werden; das programm wird gar nicht erst vollst\u00e4ndig compiliert und nicht ausgef\u00fchrt und logische Fehler \u2192 k\u00f6nnen erst zur Laufzeit erkannt werden. Im Falle der logischen Fehler, die erst zur Laufzeit auftreten, spricht man von Laufzeitfehlern (oder Ausnahmen oder Exceptions ). Die Aufgabe beim Programmieren ist nun, zu identifizieren, an welchen Stellen ein logischer Fehler auftreten k\u00f6nnte , z.B. fehlerhafte Benutzereingabe Datenbank- oder Netzwerkverbindung nicht verf\u00fcgbar gesuchte Datei/Ordner nicht vorhanden usw. Die Stellen, an denen ein solcher logischer Fehler auftreten k\u00f6nnte, nennen wir im Folgenden kritischer Abschnitt . Wir m\u00fcssen solche kritischen Abschnitte in unserem Quellcode identifizieren und haben dann die M\u00f6glichkeit, solche kritischen Abschnitte so zu implementieren, dass die Exception, die eventuell geworfen wird, abgefangen wird und das Programm dadurch nicht abst\u00fcrzt.","title":"Exceptions"},{"location":"exceptions/#try-catch","text":"Die grunds\u00e4tzliche Idee ist die, dass wir zun\u00e4chst versuchen den kritischen Abschnitt einfach auszuf\u00fchren. Wir versuchen z.B. einfach mit einem index auf das Array zuzugreifen, auch wenn wir gar nicht wissen, ob dies ein tats\u00e4chlicher index aus dem Array ist. Allerdings binden wir diesen Versuch in einen try{} -Block ein. Sollte in einem solchen try{} -Block nun eine Exception geworfen werden, dann fangen wir diese in einem catch(){} -Block auf und behandeln sie dort. Die allgemeine Syntax daf\u00fcr sieht so aus: allgemeine Syntax try-catch 1 2 3 4 5 6 7 8 try { // Anweisung(en), die evtl. Fehler verursachen (kritischer Abschnitt) } catch ( Exception e ) { // Behandlung der Exception } Es passiert Folgendes: wir f\u00fchren die Anweisung(en) in Zeile 3 aus. Wenn diese keine Exception wirft, also alles okay ist, dann machen wir einfach hinter dem catch -Block, also nach Zeile 8 weiter. Wenn aber die Anweisung(en) in Zeile 3 einen Laufzeitfehler verursachen, also eine Exception werfen, dann wird diese in Zeile 5 \"aufgefangen\" und in dem Anweisungsblock in den Zeilen 6-8 behandelt. Das Programm st\u00fcrzt nun nicht mehr ab, sondern wir haben die M\u00f6glichkeit, auf die Exception zu reagieren.","title":"try-catch"},{"location":"exceptions/#beispiel-ohne-try-catch","text":"Wir verdeutlichen dieses Prinzip an einem ersten Beispiel: Beispiel zun\u00e4chst ohne Behandlung der Exceptions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Ausnahmen { static char charAt ( String s , int index ) { char c = s . charAt ( index ); // kritisch! return c ; } static double divide ( int divident , int divisor ) { double result = divident / divisor ; // kritisch! return result ; } public static void main ( String [] args ) { System . out . println ( divide ( 5 , 0 )); // ArithmeticException System . out . println ( charAt ( \"Hallo\" , 5 )); // StringIndexOutOfBoundsException } } Das Beispiel enth\u00e4lt zwei Methoden charAt() und divide . Der charAt -Methode wird ein String \u00fcbergeben und ein index . Die Methode gibt das Zeichen ( char ) zur\u00fcck, dass im String unter dem index gespeichert ist (z.B. charAt(\"Hallo\", 1) gibt das 'a' zur\u00fcck). Es wird jedoch gar nicht gepr\u00fcft, ob index tats\u00e4chlich ein korrekter Index des Strings s ist, d.h. evtl. ist index kleiner als 0 oder gr\u00f6\u00dfer als die L\u00e4nge von s minus 1 . Die Anweisung s.charAt(index); ist somit eine kritische Anweisung , denn sie kann (bei \"falschem\" index ) eine StringIndexOutOfBoundsException werfen. Genau so ist die Anweisung divident/divisor; in der Methode divide eine kritische Anweisung , da es sein kann, dass der divisior gleich 0 ist. Bei der int -Division durch 0 wird eine ArithmeticException geworfen. Wenn die main -Methode nun wie angegeben ausgef\u00fchrt wird, dann \"st\u00fcrzt\" das Programm bereits bei Ausf\u00fchrung von Zeile 16 ab und Zeile 17 wird gar nicht mehr erreicht: Exception in thread \"main\" java.lang.ArithmeticException: / by zero at packageName.Ausnahmen.divide ( Ausnahmen.java:10 ) at packageName.Ausnahmen.main ( Ausnahmen.java:16 ) Die Fehlermeldung gibt uns an, welche Zeile die Ausnahme geworfen hat, n\u00e4mlich Ausnahmen.java:10 und um welche Exception es sich handelt, n\u00e4mlich ArithmeticException: / by zero . Wenn wir in der main -Methode Zeile 16 auskommentieren, dann sehen wir, dass auch die Anweisung in Zeile 17 eine Exception wirft, n\u00e4mlich: Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: String index out of range: 5 at java.base/java.lang.StringLatin1.charAt ( StringLatin1.java:47 ) at java.base/java.lang.String.charAt ( String.java:702 ) at packageName.Ausnahmen.charAt ( Ausnahmen.java:5 ) at packageName.Ausnahmen.main ( Ausnahmen.java:17 ) Die Fehlermeldung gibt uns an, welche Zeile unseres Programms die Ausnahme geworfen hat, n\u00e4mlich Ausnahmen.java:5 und um welche Exception es sich handelt, n\u00e4mlich StringIndexOutOfBoundsException: String index out of range: 5 . Sie sehen auch, dass eigentlich sogar die Anweisung in Zeile 47 in der Klasse StringLatin1 in der dortigen Methode charAt die Exception geworfen hat. Wir werden dieses \"Weiterreichen\" von Exceptions gleich noch n\u00e4her betrachten.","title":"Beispiel ohne try-catch"},{"location":"exceptions/#beispiel-mit-try-catch","text":"Zun\u00e4chst \"reparieren\" wir unseren Code, indem wir try-catch -Bl\u00f6cke um unsere kritischen Anweisungen hinzuf\u00fcgen: Beispiel mit Behandlung der Exceptions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Ausnahmen { static char charAt ( String s , int index ) { char c = ' ' ; try { c = s . charAt ( index ); // kritisch! } catch ( StringIndexOutOfBoundsException e ) { System . err . println ( \"Der Index war ausserhalb des Strings\" ); } return c ; } static double divide ( int divident , int divisor ) { double result = 0.0 ; try { result = divident / divisor ; // kritisch! } catch ( ArithmeticException ae ) { System . err . println ( \"Division durch 0 nicht definiert!\" ); } return result ; } public static void main ( String [] args ) { System . out . println ( divide ( 5 , 0 )); // ArithmeticException System . out . println ( charAt ( \"Hallo\" , 5 )); // StringIndexOutOfBoundsException } } Die kritischen Anweisungen wurden nun jeweils in einen try -Block integriert und die Behandlung der eventuell auftretenden Exceptions besteht nur aus einer jeweiligen Fehlerausgabe (ich habe hier daf\u00fcr nicht das Standardausgabeger\u00e4t out in den println -Anweisungen verwendet, sondern err - Zeilen 12 und 26 ). Wenn wir das Programm nun ausf\u00fchren (in main muss auch nichts mehr auskommentiert werden), dann erhalten wir die Ausgabe: Division durch 0 nicht definiert! 0 .0 Der Index war ausserhalb des Strings Das Programm \"st\u00fcrzt\" nun also nicht mehr ab, das ist schonmal ein Erfolg. So ganz optimal ist die L\u00f6sung allerdings noch nicht, da wir nun jeweils einen Nebeneffekt in unsere Methoden eingebaut haben. Angenommen, in der divide -Methode wird eine Exception geworfen, dann erfolgt durch Zeile 26 die Fehlerausgabe auf die Konsole. Danach wird in Zeile 28 aber result zur\u00fcckgegeben (hat den Wert 0.0 , den wir bei der Initailisierung in Zeile 19 angegeben haben) und dieser Wert wird durch Zeile 33 auf die Konsole ausgegeben. Das gleiche gilt f\u00fcr die charAt -Methode. Auch da haben wir einen Nebeneffekt eingebaut und es wird durch Zeile 34 das Leerzeichen auf die Konsole ausgegeben. Nebeneffekte wollen wir aber unbedingt vermeiden und m\u00fcssen unsere Implementierung deshalb noch \u00e4ndern. Zun\u00e4chst schauen wir uns aber den generellen Ablauf einer solchen Ausnahmesituation an:","title":"Beispiel mit try-catch"},{"location":"exceptions/#ablauf-einer-ausnahmesituation","text":"Der generelle Ablauf beim \"Werfen\" eine Exception ist wie folgt: Das Laufzeitsystem (JVM) erzeugt ein Ausnahme-Objekt (Objekt vom Elterntyp Exception ), wenn eine Exception \"geworfen\" wird Die Abarbeitung des Programmcodes wird sofort unterbrochen. Das Laufzeitsystem sucht nach der n\u00e4chsten catch -Klausel und f\u00fchrt diese aus. Passt die gefundene catch -Klausel nicht zur Art der Ausnahme, wird die n\u00e4chste catch -Klausel gesucht usw. Betrachten wir nochmal obigen Code, dann stellen wir fest, dass in der einen catch -Klausel (Zeile 10 ) ein Objekt vom Typ StringIndexOutOfBoundsException erwartet wird. Wir werden gleich sehen, dass dies schon ein sehr spezieller Typ in der Vererbungshierarchie von Exception ist. Das Programm w\u00fcrde auch genau so funktionieren, wenn wir dort anstelle von StringIndexOutOfBoundsException allegmein eine Exception erwarten w\u00fcrden. Das gleiche gilt f\u00fcr die andere catch -Klausel (Zeile 24 ), wo wir eine ArithmeticException erwarten. Wir schauen uns die Vererbungshierarchie der Exceptions gleich an. generell gilt, dass man mehrere catch -Bl\u00f6cke hintereinander setzen kann und der erste catch -Block, der dem erwartetetn Parametertyp entspricht, wird ausgef\u00fchrt. Wichtig ist, dass wir uns merken, dass durch eine Exception der Programmablauf sofort unterbrochen und zur n\u00e4chsten \"passenden\" catch -Klausel gesprungen wird.","title":"Ablauf einer Ausnahmesituation"},{"location":"exceptions/#ein-weiteres-beispiel","text":"Wir schauen uns dazu ein weiteres Beispiel an und erg\u00e4nzen unsere Klasse Ausnahmen um eine weitere Methode inputInt() : eine weitere methode inputInt() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 /* * Sollten Sie mit dem Modul-System von Java arbeiten, d.h. sollten * Sie eine Datei module-info.java in Ihrem Projekt-Ordner haben, * dann muessen Sie dort noch * module ProjektName * { * requires java.desktop; * } * eintragen, damit Sie das Paket javax.swing importieren koennen. */ import javax.swing.JOptionPane ; public class Ausnahmen { static char charAt ( String s , int index ) { char c = ' ' ; try { c = s . charAt ( index ); // kritisch! } catch ( StringIndexOutOfBoundsException e ) { System . err . println ( \"Der Index war ausserhalb des Strings\" ); } return c ; } static double divide ( int divident , int divisor ) { double result = 0.0 ; try { result = divident / divisor ; // kritisch! } catch ( ArithmeticException ae ) { System . err . println ( \"Division durch 0 nicht definiert!\" ); } return result ; } static int inputInt () { int inputInt = 0 ; boolean inputOk = false ; String input = \"\" ; while ( ! inputOk ) { input = JOptionPane . showInputDialog ( \"Zahl :\" ); inputOk = true ; try { inputInt = Integer . parseInt ( input ); } catch ( NumberFormatException e ) { inputOk = false ; } } return inputInt ; } public static void main ( String [] args ) { System . out . println ( divide ( 5 , 0 )); // ArithmeticException System . out . println ( charAt ( \"Hallo\" , 5 )); // StringIndexOutOfBoundsException System . out . println ( \"Zahl: \" + inputInt ()); // NumberFormatException } } Schauen wir uns die Implementierung von inputInt() genauer an: in Zeile 50 wird ein kleines Eingabefenster erzeugt ( JOptionPane ist eine Klasse aus dem javax.swing -Paket, welches wiederum im Modul java.desktop verf\u00fcgbar ist). Die Eingabe in dieses Fenster wird als String zur\u00fcckgegeben und in der Variablen input gespeichert. in Zeile 53 wird versucht, den Eingabestring input in ein int umzuwandeln. Dazu wird die Methode parseInt() verwendet, die zur Klasse Integer geh\u00f6rt ( Integer ist eine sogenannte Wrapper-Klasse - diese schauen wir uns n\u00e4chste Woche an). wenn input eine Zahl enth\u00e4lt, also z.B. so aussieht: \"1234\" , dann erzeugt parseInt() daraus die int -Zahl 1234 und alles ist ok. Wenn input jedoch keine Zahl enth\u00e4lt, also z.B. \"hallo\" , dann wirft parseInt() eine NumberFormatException , weil die Umwandlung des String s in ein int nicht m\u00f6glich ist. in Zeile 55 wird eine solche NumberFormatException aufgefangen. Die \"Behandlung\" dieser Excepion sieht so aus, dass der Schalter inputOk auf false gesetzt wird. der gesamte Anweisungsblock Fenster->Eingabe->try-catch ist in eine Schleife eingebettet. Diese Schleife wird so lange ausgef\u00fchrt, so lange der Wert von inputOk nicht false ist. Das bedeutet, wenn keine Zahl eingegeben wird, dann \u00f6ffnet sich das Fenster erneut und es muss so lange eine Eingabe erfolgen, bis die Eingabe einer Zahl entspricht (und somit parseInt() keine Exception wirft) \u00dcbrigend k\u00f6nnte die Anweisung inputOk = true; auch nach parseInt() in den try -Block geschrieben werden: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 static int inputInt () { int inputInt = 0 ; boolean inputOk = false ; String input = \"\" ; while ( ! inputOk ) { input = JOptionPane . showInputDialog ( \"Zahl :\" ); try { inputInt = Integer . parseInt ( input ); inputOk = true ; } catch ( NumberFormatException e ) { inputOk = false ; } } return inputInt ; } Zeile 12 wird nur genau dann erreicht, wenn parseInt() keine Exception wirft. Dann wird auch der catch -Block nicht betreten und die Schleife wird beendet.","title":"Ein weiteres Beispiel"},{"location":"exceptions/#beispiel-mit-mehreren-exceptions","text":"Wir betrachten jetzt einmal an einem Besipiel die bei Ablauf einer Ausnahmesituation unter Punkt 4 beschriebene Situation, dass die n\u00e4chstpassende catch -Klausel gesucht wird. Wir erweitern dazu unsere Klasse Ausnahmen um eine weitere Methode mehrereExceptions() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public static void mehrereExceptions () { String [] basen = { \"2\" , \"8\" , \"10\" , \"Hi\" }; int base = 0 ; double result = 0 ; boolean ok = true ; for ( int index = 0 ; index <= 4 ; index ++ ) { try { base = Integer . parseInt ( basen [ index ] ); ok = true ; } catch ( NumberFormatException nfe ) { System . out . println ( \"Keine Zahl!\" ); ok = false ; } catch ( IndexOutOfBoundsException ioobe ) { System . out . println ( \"Ausserhalb des Arrays\" ); ok = false ; } for ( int exp = 0 ; exp < 6 && ok ; exp ++ ) { result = Math . pow ( base , exp ); System . out . printf ( \"%d ^ %d = %.0f %n\" , base , exp , result ); } } } In Zeile 3 definieren wir uns ein String[] mit 4 Eintr\u00e4gen. Durch dieses String[] laufen wir mit einer for -Schleife (Zeile 8 ) durch. In Zeile 11 wndeln wir jeden Eintrag aus dem String[] in eine int -Zahl um. An zwei Stellen k\u00f6nnen Exceptions geworfen werden: Bei dem Index-basierten Zugriff auf das Array basen[index] in Zeile 11 kann eine ArrayIndexOutOfBounds -Exception geworfen werden, falls index kein korrekter Index des String[] ist (gilt f\u00fcr index==4 ). Bei der Umwandlung von String nach int durch parseInt() in Zeile 11 kann eine NumberFormatException geworfen werden, falls der entsprechende Eintrag im String[] keine Zahl ist (gilt f\u00fcr basen[3]=='Hi' ). Die Methode erzeugt die folgende Ausgabe: 2 ^ 0 = 1 2 ^ 1 = 2 2 ^ 2 = 4 2 ^ 3 = 8 2 ^ 4 = 16 2 ^ 5 = 32 8 ^ 0 = 1 8 ^ 1 = 8 8 ^ 2 = 64 8 ^ 3 = 512 8 ^ 4 = 4096 8 ^ 5 = 32768 10 ^ 0 = 1 10 ^ 1 = 10 10 ^ 2 = 100 10 ^ 3 = 1000 10 ^ 4 = 10000 10 ^ 5 = 100000 Keine Zahl! Ausserhalb des Arrays Das hei\u00dft, dass wenn f\u00fcr parseInt(\"Hi\") eine NumberFormatException geworfen wird, dann wird der catch -Block ausgef\u00fchrt, der eine NumberFormatException erwartet (Zeilen 14-17 ). Der andere catch -Block wird nicht ausgef\u00fchrt. Wenn f\u00fcr basen[4] eine ArrayIndexOutOfBoundsException geworfen wird, dann wird der catch -Block ausgef\u00fchrt, der eine IndexOutOfBoundsException erwartet (Zeilen 18-21 ). Der andere catch -Block wird nicht ausgef\u00fchrt. Wir sehen, dass es offensichtlich auch eine IndexOutOfBoundsException -Klasse gibt. Das ist eine Elternklasse von ArrayIndexOutOfBoundsException und auch von StringIndexOutOfBoundsException . Wir schauen uns diese Vererbungshierarchie von Exception nun mal an:","title":"Beispiel mit mehreren Exceptions"},{"location":"exceptions/#die-vererbungshierarchie-der-klasse-exception","text":"Wenn Sie sich die Klasse Exception in der Java-Dokumentation einmal anschauen, dann sehen Sie, dass diese Klasse ein Unmenge von Kindklassen hat. Wir betrachten hier einmal die f\u00fcr uns wichtigsten Klassen: Alle Exception-Klassen erben von der Klasse Exception , die im java.lang -Paket definiert ist. Grunds\u00e4tzlich werden zwei Arten von Exceptions unterschieden: checked Exceptions: Checked Exceptions m\u00fcssen gepr\u00fcft werden, d.h. Methoden, die eine checked Exception werfen k\u00f6nnen, m\u00fcssen in einen try-catch -Block integriert werden. Dies wird bereits zur Compilezeit gepr\u00fcft, d.h. das Programm l\u00e4sst sich gar nicht compilieren, wenn eine Methode, die eventuell eine checked Exception wirft, nicht in einem try -Block steht. In der Abbildung stehen checked Exceptions auf der rechten Seite (gr\u00fcn). unchecked Exceptions: Unchecked Exceptions k\u00f6nnen gepr\u00fcft werden, m\u00fcssen aber nicht. Alle unchecked Exceptions leiten sich von der Klasse RunTimeException ab. Wir werden uns genau mit diesen uncheck Exceptions, also von RunTimeException abgeleiteten Klassen besch\u00e4ftigen. Es gibt von RunTimeException noch viele weitere Kindklassen, wie man in der Java-Dokumentation sehen kann, aber die in der Abbildung gezeigten sind die wichtigsten. Eine Kindklasse davon, die IllegalArgumentException -Klasse wird f\u00fcr uns noch eine weitere Rolle spielen, da wir von ihr erben werden, wenn wir uns eigene Exception -Klassen erstellen.","title":"Die Vererbungshierarchie der Klasse Exception"},{"location":"exceptions/#try-catch-finally","text":"Prinzipiell besteht das Konstrukt try und catch nicht nur aus diesen beiden Bl\u00f6cken, sondern auch noch aus dem finally -Block. Der finally -Block wird grunds\u00e4tzlich immer ausgef\u00fchrt, egal, ob eine Exception geworfen wird oder nicht. Die Syntax ist wie folgt: try { // Anweisung(en), die evtl. Fehler verursachen (kritischer Abschnitt) } catch ( Exception e ) { // Behandlung der Exception } finally { // Aufraeumen, z.B. Schliessen von Dateien, Beenden von // Verbindungen zu Servern, Datenbanken etc. } Typischerweise wird der finally -Block dazu verwendet, bestimmte Ressourcen wieder freizugeben, z.B. Dateien zu schlie\u00dfen, Verbindungen zu Servern, Datenbanken usw. zu beenden. Wir werden finally jedoch nicht sehr oft implementieren.","title":"try-catch-finally"},{"location":"exceptions/#throws-eine-exception-weiterreichen","text":"Wir haben bis jetzt immer in den Methoden, in denen die kritische Anweisung ausgef\u00fchrt wurde, diese direkt mit einem try-catch -Block \"ummantelt\". Das muss nicht unbedingt sein. Wir k\u00f6nnen eine in einer Methode geworfene Exception auch an die aufrufende Methode weiterreichen. Dann kann (und sollte) die Exception in der aufrufenden Methode abgefangen und behandelt werden. Um anzugeben, dass eine Methode evtl. eine Exception wirft, wird das Schl\u00fcsselwort throws verwendet. Wir erweiteren also die Deklaration einer Methode (also den Methodenkopf) um throws und danach kommt der entsprechende Typ der Exxception, die in der Methode geworfen werden kann. Die allgemeine Syntax einer Methodendeklaration sieht somit so aus: [ modifizierer ] [ rueckgabetyp ] methodenname throws ExceptionType { // Anweisungsblock // wirft (evtl.) Exception } Wir betrachten auch daf\u00fcr ein Beispiel und erweiteren unsere Klasse Ausnahmen um die Methode getValueAtIndex : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 static int getValueAtIndex ( int [] field , int index ) throws ArrayIndexOutOfBoundsException { return field [ index ] ; } public static void main ( String [] args ) { System . out . println ( divide ( 5 , 0 )); // ArithmeticException System . out . println ( charAt ( \"Hallo\" , 5 )); // StringIndexOutOfBoundsException System . out . println ( \"Zahl: \" + inputInt ()); // NumberFormatException mehrereExceptions (); int value = 0 ; boolean ok = true ; int [] field = { 8 , 3 , - 4 , 2 , - 9 }; try { value = getValueAtIndex ( field , - 3 ); } catch ( ArrayIndexOutOfBoundsException e ) { System . out . println ( \"Index ausserhalb des Arrays!\" ); ok = false ; } if ( ok ) { System . out . println ( \"value : \" + value ); } } Obwohl die Methode eine kritische Anweisung enth\u00e4lt ( field[index] ), ist diese Anweisung nicht in einen try-catch -Block eingebunden. Es kann nun also sein, dass bei Aufruf der Methode eine Exception (eine ArrayIndexOutOfBoundsException ) geworfen wird. Wir geben das im Methodenkopf mithilfe von throws ArrayIndexOutOfBoundsException bekannt. Die aufrufende Methode ( main ) kann nun selbst den Aufruf der Methode getValueAtIndex() in einen try-catch -Block ummanteln und somit die Exception selbst abfangen und behandeln. Nur wenn keine Exception geworfen wird, wird der von der Methode getValueAtIndex() zur\u00fcckgegebene Wert ausgegeben. Wenn wir an unsere einleitenden Beispiele denken (Methoden charAt() und divide() ), dann erinnern wir uns, dass wir dort festegestellt haben, dss die Implementierung so nicht g\u00fcnstig war, da sie Nebeneffekte erzeugt hat, sobald eine Exception geworfen wurde. Diese Nebeneffekte werden bei der Implementierung von getValueAtIndex() vermieden, obwohl die grunds\u00e4tzliche Idee die gleiche ist, wie bei charAt() . Der Nachteil ist, dass man die aufrufende Methode \"zwingt\", die Exception selbst zu behandeln.","title":"throws - eine Exception weiterreichen"},{"location":"exceptions/#schoner-code","text":"Der letzte Satz aus dem vorherigen Abschnitt ist insofern nicht ganz richtig, dass mit unchecked Exceptions ja genau nicht erzwungen wird, eventuelle Exceptions abzufangen. Es gibt gute Gr\u00fcnde daf\u00fcr, alle eigenen Exceptions eher als checked Exceptions zu definieren, als als unchecked Exceptions. Aber zu eigenen Exceptions kommen wir gleich. Trotzdem k\u00f6nnen wir uns schon zum jetzigen Zeitpunkt einige Gedanken, \u00fcber sch\u00f6nen Code in Bezug auf Exceptions machen: eine Methode sollte immer nur eine Sache erledigen (single responsibility principle - SRP) \u2192 die Methode kann nicht auch noch f\u00fcr das Abfangen des Fehlers zust\u00e4ndig sein (try-catch-Bl\u00f6cke sind eh \u201eh\u00e4sslich\u201c und unleserlich) \u2192 lassen Sie Methode, die etwas eledigt, eine Exception werfen und leiten Sie diese weiter ( throws ) \u2192 fangen Sie den Fehler in einer anderen Methode ab ( try ) \u2192 Sie k\u00f6nnen sogar die eigentliche Behandlung des Fehlers ( catch ) in eine dritte Methode auslagern (single responsibility) H\u00e4ufig sieht man, dass die Methode, die den Fehler abf\u00e4ngt ( try ) im catch -Block den fehler protokolliert (in ein ErrorLog-File) und dann eine eigens erzeugte Exception an die Methode weiterleitet, die den Fehler behandelt. Wie man eine Exception erzeugt, schauen wir uns jetzt an.","title":"Sch\u00f6ner Code"},{"location":"exceptions/#throw-eigene-exceptions-erzeugen","text":"Zun\u00e4chst kommt ein neues Schl\u00fcsselwort hinzu, n\u00e4mlich throw . Ungl\u00fccklicherweise ist dies dem Schl\u00fcsselwort throws sehr \u00e4hnlich. Mit throw erzeugen (werfen) wir eine eigene Exception, mit throws wird im Methodenkopf angegeben, dass die Methode (eventuell) eine Exception wirft und diese an die aufrufende Methode weitergibt. Angenommen, f\u00fcr einen Konstruktor der Klasse Dreieck werden Seitenl\u00e4ngen \u00fcbergeben, die entweder kleiner als 0 oder die Summe von 2 Seitenl\u00e4ngen ist kleiner als die dritte Seite ist. Wir hatten uns bei der Bearbeitung der Aufgabe Traingle im ersten Semester bereits \u00fcberlegt, dass ddurch kein \"richtiges\" Dreieck erzeugt wird, aber wir konnten das noch nicht verhindern. das machen wir jetzt. Wie k\u00f6nnen wir also verhindern, dass ein solches Objekt erzeugt wird? Die L\u00f6sung besteht darin, eine eigene Exception zu definieren und diese im Fehlerfall zu werfen. Mithilfe des Schl\u00fcsselwortes throw wird also eine eigene Exception geworfen. Bis jetzt wurden unsere Exceptions ja geworfen. F\u00fcr eine eigene Exception haben wir zwei M\u00f6glichkeiten: entweder erstellen wir uns eine eigene Exception-Klasse und leiten diese von der Klasse Exception oder von der Klasse RunTimeException ab ( extends Exception bzw. extends RunTimeException ) oder wir verwenden eine bereits existierende Exception-Klasse (typischerweise IllegalArgumentException ).","title":"throw - eigene Exceptions erzeugen"},{"location":"exceptions/#throw-new-illegalargumentexception","text":"Wir implementieren unsere Klasse Triangle so, dass wir im Konstruktor f\u00fcr den Fall, dass eine Seite kleiner gleich 0 ist, eine IllegalArgumentException werfen. Dieser Exception kann ein String als Parameter \u00fcbergeben werden, der im catch -Block mittels getMessage() wieder ausgelesen werden kann. Das gleiche machen wir f\u00fcr den Fall, dass die Summe von zwei Seiten kleiner der dritten Seite ist. Triangle mit eigenen IllegalArgumentExceptions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 public class Triangle { private int a , b , c ; public Triangle ( int a , int b , int c ) throws IllegalArgumentException { if ( a <= 0 || b <= 0 || c <= 0 ) { throw new IllegalArgumentException ( \"Seiten muessen groesser als 0 sein!\" ); } else if ( a >= ( b + c ) || b >= ( a + c ) || c >= ( a + b )) { throw new IllegalArgumentException ( \"Kein Dreieck!\" ); } else { this . a = a ; this . b = b ; this . c = c ; } } public static void main ( String [] args ) { Triangle d ; try { d = new Triangle ( 3 , 4 , 5 ); //(3,4,0) und (3,4,8) probieren } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } } } Der Konstruktor f\u00e4ngt die Exception nicht selbst auf und behandelt sie auch nicht selbst, sondern leitet sie an die aufrufende Methode weiter (Zeile 5 - throws IllegalArgumentException ). Im Konstruktor werden die Parameterwerte gepr\u00fcft und entweder eine IllegalArgumentException geworfen, falls eine Seite kleiner gleich 0 ist (Zeile 9 - throw new ) oder eine IllegalArgumentException geworfen, falls die Summe von zwei Seiten kleiner als die dritte Seite ist (Zeile 13 - throw new ) oder die Objektvariablen die Werte der Parameter bekommen (wenn alles ok ist - Zeilen 17-19 ). Die Erzeugung eines Triangle -Objektes (also der Aufruf des Konstruktors) ist nun in einen try-catch -Block eingebettet (Zeilen 26-32 ). Beachten Sie, dass es sein kann, dass d nach Aufruf des Konstruktors immernoch null ist (n\u00e4mlich dann, wenn eine Exception geworfen wird). Wir haben hier gleich die main -Methode mit in die Klasse genommen, das sollte man nat\u00fcrlich nicht machen.","title":"throw new IllegalArgumentException"},{"location":"exceptions/#eigene-exception-klasse-definieren","text":"Wir erstellen uns eigene Exception-Klassen f\u00fcr die oben beschriebenen \"Fehler\" im Konstruktor von Triangle . Diese eigenen Exception-Klassen erben von der Klasse Exception . Damit sind die eigenen Exceptions checked Exceptions, d.h. sie m\u00fcssen in einem try-catch -Block abgefangen und behandelt werden. Eigene Klasse IllegalTriangleException 1 2 3 4 5 6 7 8 9 10 public class IllegalTriangleException extends Exception { public IllegalTriangleException ( String s ) { super ( s ); } public IllegalTriangleException () { super ( \"Each side has to be smaller than the sum of the other sides!\" ); } } Die Klasse IllegalTriangleException verwenden wir f\u00fcr den Fall, dass die Summe zweier Seiten kleiner als die dritte Seite ist. Eigene Klasse IllegalSideLengthException 1 2 3 4 5 6 7 8 9 10 11 public class IllegalSideLengthException extends Exception { public IllegalSideLengthException ( String s ) { super ( s ); } public IllegalSideLengthException () { super ( \"Sides must be greater than zero!\" ); } } Die Klasse IllegalSideLengthException verwenden wir f\u00fcr den Fall, dass eine Seite kleiner gleich 0 ist. F\u00fcr beide Klassen haben wir jeweils einen parameterlosen Konstruktor definiert, der ein Objekt von Exception erzeugt und dem eine Fehlermeldung als String im Parameter \u00fcbergeben wird. Au\u00dferdem haben wir in beiden Klassen noch einen parametrisierten Konstruktor, dem eine Fehlermeldung als String \u00fcbergeben werden kann. Wir haben nun die Wahl, ob wir den paarmeterlosen oder den parametrisierten Konstruktor verwenden. Die Anwendung dieser beiden Exception-Klassen in der Klasse Triangle k\u00f6nnte nun so aussehen (wir haben hier auch gleich die main -Methode mit in die Klasse genommen, das sollte man nat\u00fcrlich nicht machen): Triangle mit den selbst definierten Exception-Klassen 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public class Triangle { private int a , b , c ; public Triangle ( int a , int b , int c ) throws Exception { if ( a <= 0 || b <= 0 || c <= 0 ) { throw new IllegalTriangleException (); } else if ( a >= ( b + c ) || b >= ( a + c ) || c >= ( a + b )) { throw new IllegalSideLengthException (); } else { this . a = a ; this . b = b ; this . c = c ; } } public static void main ( String [] args ) { Triangle d ; try { d = new Triangle ( 3 , 4 , 5 ); //(3,4,0) und (3,4,8) probieren } catch ( Exception e ) { System . out . println ( e . getMessage ()); } } } Beide eigenen Klassen sind ja auch vom Laufzeittyp Exception , da sie von dieser Klasse geerbt haben. Insofern ist der Parametertyp in der catch -Klausel mit Exception (Zeile 30 ) passend. Wenn Sie anstelle der Zeilen 27-33 nur d = new Triangle(3,4,5); schreiben, stellen Sie fest, dass sich das Programm nicht \u00fcbersetzen l\u00e4sst, da es sich um checked Exceptions handelt, die in einem try-catch -Block abgefangen werden m\u00fcssen. Eclipse bietet Ihnen dann aber einen QuickFix an Surround with try/catch . Das sollten Sie einmal ausprobieren. Wenn Sie anstelle von Exception von der Klasse RunTimeException erben, dann handelt es sich bei Ihren Exceptions um unchecked Exceptions. Es ist aber besseres Programmieren, wenn man checked Exceptions erstellt, denn dazu sind die Exceptions ja da, dass sie abgefangen und behandelt werden. Success Wir haben Exceptions kennengelernt. Solche Laufzeitfehler k\u00f6nnen an verschiedenen Stellen passieren und haben unterschiedliche Typen (siehe Kindklassen von Exception , insb. von RunTimeException ). Mithilfe von try-catch-[finally] k\u00f6nnen wir solche Exceptions abfangen und behandeln. Damit st\u00fcrzt unser Programm nicht mehr ab. Mithilfe von throws zeigt eine Methode an, dass sie eine Exception erzeugen kann. Das Schl\u00fcsselwort throw weist die Laufzeitumgebung an, das angegebene Laufzeitobjekt (eine Exception) zu erzeugen und zu werfen. Checked Exceptions m\u00fcssen behandelt werden (Aufruf der Exception-werfenden Methode in einem try-catch -Block). Unchecked Exceptions k\u00f6nnen behandelt werden, m\u00fcssen aber nicht, sollten aber. K\u00f6nnen wir ja jetzt schlie\u00dflich...","title":"Eigene Exception-Klasse definieren"},{"location":"git/","text":"Git \u00b6 Git ist ein Versionierungswerkzeug f\u00fcr die Softwareentwicklung. Mit Git k\u00f6nnen Sie Ihre Software versionieren, d.h. Versionen Ihrer Software erstellen und zwischen diesen Versionen hin- und herwecheseln sowie im Team gemeinsam an einem Softwareprojekt arbeiten und die einzelnen Entwicklungen aller Teammitglieder geeignet zusammenf\u00fchren. Git ist Open Source und frei verf\u00fcgbar . Entstanden ist Git im Rahmen der Entwicklung von Linux , initiiert durch Linus Torvalds , dem Initiator von Linux. Installation von Git \u00b6 Um Git verwenden zu k\u00f6nnen, m\u00fcssen Sie es zun\u00e4chst installieren. Laden Sie sich Git f\u00fcr Ihr Betriebssystem von der Download-Seite herunter bzw. gehen Sie so vor, wie f\u00fcr Ihr Betriebssystenm beschrieben. Installationshilfen erhalten Sie z.B. auch im frei verf\u00fcgbaren Git-Buch unter Git installieren oder auch im Video \u00fcber die ersten Schritte mit Git. Wenn Sie unter Windows arbeiten, dann erhalten Sie mit Git eine GitBash . Wenn wir von nun an vom Terminal (oder Shell oder Bash ) sprechen, dann verwenden Sie bitte immer diese GitBash . Nach erfolgreicher Installation k\u00f6nnen Sie im Terminal den Befehl git --version eingeben und es sollte eine Ausgabe, wie git version 2 .30.1 oder eine aktuellere Versionsnummer erfolgen. Wir k\u00f6nnen Git nun verwenden und betrachten zun\u00e4chst, wie Git als Versionierungswerkzeug verwendet werden kann und schauen uns danach an, wie es als Kollaborationswerkzeug verwendet wird. Git als Versionierungswerkzeug \u00b6 Die grunds\u00e4tzliche Idee von Git ist, \u00c4nderungen an Dateien und Ordnern so zu speichern, dass alle diese \u00c4nderungen nachverfolgbar sind. Git erzeugt sogenannte Snapshots aller Dateien und Ordner und speichert diese Snapshots nacheinander lokal ab. D.h. alles passiert bei Ihnen lokal auf dem Rechner, Sie ben\u00f6tigen keine Verbindung zu einem Server. Wenn Sie sp\u00e4ter im Team zu Mehreren an einem Projekt arbeiten, dann gleichen Sie immer nur die Historien Ihrer Snapshots ab. Git f\u00fcgt immer nur hinzu und das ist auch korrekt so. Selbst, wenn in sp\u00e4teren Versionen Ihres eine Datei nicht mehr existiert, die in fr\u00fcheren Versionen des Projektes noch existierte, soll diese Datei gar nicht gel\u00f6scht werden, denn es k\u00f6nnte ja sein, dass Sie irgendwann nochmal die fr\u00fchere Version anschauen wollen, die die Datei enthielt. Dieses Skript hier z.B. verwalte ich mit Git. Das bedeutet, dass alle Dateien eines Ordners (und Unterordnern) in einem sogenannten Git-Repository (oder nur Repository ) verwaltet werden. F\u00fcr dieses Skript hier k\u00f6nnte das z.B. so aussehen: Das hei\u00dft, ich erstelle zun\u00e4chst 3 Dateien: Einf\u00fchrung , Wiederholung und Git und \"sage\" Git, dass dies Version1 sein soll. Danach f\u00fcge ich 3 weitere Dateien hinzu Aufgaben , \u00dcbungen und Wrapperklassen und zusammen mit den vorherigen 3 Dateien aus Version 1 ergibt das dann Version 2 . Danach \u00e4ndere ich (f\u00fcge hinzu) die Dateien Aufgaben und \u00fcbungen und f\u00fcge au\u00dferdem neue Dateien f\u00fcr Exceptions und JUnit hinzu und \"sage\", dass das insgesamt Version 3 ergibt usw. Git verwaltet nun diese Versionen und der Vorteil ist, dass ich jede dieser Versionen separat zur Verf\u00fcgung stellen k\u00f6nnte und auch auf diesen Versionen weiterarbeiten. Wir werden in Zukunft in Bezug auf Git aber nicht mehr unbedingt von Versionen sprechen, sondern von Snapshots . Wir schauen uns das nun in einem Besipiel an. git init - ein Repository erstellen \u00b6 Angenommen, wir haben in unserem workspace folgende Ordner-Struktur: In dem workspace gibt es ein Projekt Projekt1 und darin einen src -Ordner mit unseren *.java -Dateien und einen bin -Ordner mit unseren *.class -Dateien. Wir lassen f\u00fcr dieses einf\u00fchrende Beispiel einmal Pakete weg. Diese w\u00fcrden ja als Ordner-Struktur sowohl innerhalb von src als auch von bin auftauchen. So sieht also ein typischer workspace aus. Es gibt darin noch weitere Ordner und Dateien, wie z.B. .idea , .metadata , .classpath , .project , .settings , die von unseren Entwicklungsumgebungen (Eclipse, IntelliJ, ...) angelegt wurden. Wir wollen nun unseren workspace von Git verwalten lassen. Dazu wechseln wir im Terminal in den workspace -Ordner und f\u00fchren dort das Kommando git init aus. Dieses Kommando erstellt das Git-Repository . Es muss genau einmal, n\u00e4mlich ganz am Anfang zur Erstellung des Repositorys ausgef\u00fchrt werden. Im Terminal erscheint Hinweis: Als Name f\u00fcr den initialen Branch wurde 'master' benutzt. Dieser Hinweis: Standard-Branchname kann sich \u00e4ndern. Um den Namen des initialen Branches Hinweis: zu konfigurieren, der in allen neuen Repositories verwendet werden soll und Hinweis: um diese Warnung zu unterdr\u00fccken, f\u00fchren Sie aus: Hinweis: Hinweis: git config --global init.defaultBranch <Name> Hinweis: Hinweis: H\u00e4ufig gew\u00e4hlte Namen statt 'master' sind 'main' , 'trunk' und Hinweis: 'development' . Der gerade erstellte Branch kann mit diesem Befehl Hinweis: umbenannt werden: Hinweis: Hinweis: git branch -m <Name> Leeres Git-Repository in /...IhrPfadZumWorkspaceOrdner.../workspace/.git/ initialisiert Somit wurde ein Git-Repository erstellt. Der workspace -Ordner wird nun von Git verwaltet. Dies erkennen Sie daran, dass in dem workspace -Ordner ein .git -Ordner angelegt wurde: Klicken Sie ruhig mal in den Ordner, um zu sehen, was da alles drin ist. .gitignore - Dateien aus der Verwaltung ausschlie\u00dfen \u00b6 Git w\u00fcrde nun den gesamten workspace -Ordner verwalten. Das w\u00e4re zun\u00e4chst auch gar kein Problem. Aber wenn Sie im Team zu mehreren am selben Projekt (workspace) arbeiten, dann wollen Sie bestimmte Dateien gar nicht untereinander austauschen, z.B. alle Dateien, die von Ihrer IDE erstellt wurden (z.B. .idea , .metadata , .classpath , .project , .settings ). Auch alle Dateien im bin -Ordner m\u00fcssen nicht von Git verwaltet werden, weil Sie ja stets neu durch das Compilieren erzeugt werden. Noch bevor wir nun also unsere erste Version erzeugen wollen, schlie\u00dfen wir zun\u00e4chst einige Ordner und Dateien aus der Verwaltung von Git aus. Dazu wird im workspace -Ordner eine Datei .gitignore erstellt, in die wir alle Dateien und Ordner eintragen, die wir aus der Git-Verwaltung ausschlie\u00dfen wollen. Bevor wir das machen, geben wir im Terminal in unserem workspace -Ordner einmal den Befehl git status ein. Dies wird der am meisten verwendete Befehl f\u00fcr uns sein, der mit dem Befehl bekommen wir Auskunft \u00fcber den aktuellen Status des Repositorys. Die Ausgabe derzeit ist Auf Branch master Noch keine Commits Unversionierte Dateien: ( benutzen Sie \"git add <Datei>...\" , um die \u00c4nderungen zum Commit vorzumerken ) .DS_Store .idea/ .metadata/ Projekt1/ nichts zum Commit vorgemerkt, aber es gibt unversionierte Dateien ( benutzen Sie \"git add\" zum Versionieren ) Das m\u00fcssen wir zum jetzigen Zeitpunkt noch nicht alles verstehen, aber wir sehen, dass Git derzeit die Datei .DS_Store und die Ordner .idea/ , .metadata/ und Projekt1/ verwaltet und wir ja eigentlich nur die Verwaltung von Projekt1/ w\u00fcnschen (und darin auch nicht alles). Wir erstellen uns also im workspace -Ordner eine .gitignore -Datei und geben darin ein: .DS_Store .idea .metadata Projekt1/bin Projekt1/.classpath Projekt1/.project Projekt1/.settings Damit geben wir an, dass die Datei .DS_Store ignoriert werden soll (gibt es nur unter Mac - legt der Finder automatisch zur schnelleren Suche an) sowie die Ordner .idea und .metadata . H\u00e4tten wir .idea/ und .metadata/ geschrieben, w\u00fcrde der Ordner jeweils selbst mit in der Git-Verwaltung sein, jedoch der Kontent nicht. Ansonsten soll auch noch der Ordner Projekt1/bin aus der Git-Verwaltung entfernt werden und alle Dateien und Ordner, die mit einem Punkt beginnen und im Ordner Projekt1 liegen. Wenn man alle Dateien ignorieren m\u00f6chte, die mit einem Punkt beginnen, egal in welchem ordner, dann k\u00f6nnte man auch .* in die .gitignore schreiben. Dann w\u00fcrde allerdings auch die .gitignore selbst dazugeh\u00f6ren. Diese kann und sollte man aber ruhig mit in die Git-Verwaltung aufnehmen. Eine \u00dcbersicht \u00fcber m\u00f6gliche Eintr\u00e4ge in die .gitignore findet man z.B. hier oder hier . Wenn wir jetzt erneut git status eingeben, dann ist die Ausgabe: Auf Branch master Noch keine Commits Unversionierte Dateien: ( benutzen Sie \"git add <Datei>...\" , um die \u00c4nderungen zum Commit vorzumerken ) .gitignore Projekt1/ nichts zum Commit vorgemerkt, aber es gibt unversionierte Dateien ( benutzen Sie \"git add\" zum Versionieren ) D.h. wir sehen, dass die Dateien und Ordner .DS_Store , .idea/ und .metadata/ nun nicht mehr mit verwaltet werden, daf\u00fcr aber die .gitignore . Wir haben jetzt ein Git-Repoitory , aber es ist noch leer. Wir f\u00fcgen nun Dateien diesem Repository hinzu. git add - dem Repository Dateien hinzuf\u00fcgen \u00b6 Wir haben noch keine Ordner und Dateien in unser Repository aufgenommen, d.h. es werden noch keine \u00c4nderungen an diesen Dateien durch Git verwaltet. Um Dateien dem Repository hinzuzuf\u00fcgen, verwenden wir das Kommando git add . Wir wollen den Ordner Projekt1 und die Datei .gitignore dem Repository hinzuf\u00fcgen, um sie von nun an von Git verwalten zu lassen (d.h. ihre \u00c4nderungen zu \"protokollieren\"). Wir geben im Terminal im workspace -Ordner ein: git add .gitignore git add Projekt1 und f\u00fcgen somit den gesamten Ordner Projekt1 (aber nicht die in der .gitignore definierten Dateien und Ordner aus dem Ordner Projekt1 ) und die .gitignore -Datei dem Repository hinzu. git status ergibt nun: Auf Branch master Noch keine Commits Zum Commit vorgemerkte \u00c4nderungen: ( benutzen Sie \"git rm --cached <Datei>...\" zum Entfernen aus der Staging-Area ) neue Datei: .gitignore neue Datei: Projekt1/src/A.java neue Datei: Projekt1/src/B.java D.h. von nun an werden von Git die Dateien .gitignore , Projekt1/src/A.java und Projekt1/src/B.java verwaltet. Die Dateien A.java und B.java sind jetzt noch leer. Wann immer wir eine neue Datei in unserem workspace erstellen und wir wollen, dass sie von Git verwaltet wird, f\u00fcgen wir diese Datei mit git add <datei> dem repository hinzu! Wann immer wir eine neue Datei in unserem workspace erstellen und wir nicht wollen, dass sie von Git verwaltet wird, f\u00fcgen wir diese Datei der .gitignore -Datei hinzu! Mit dem Befehl git add . werden einfach immer alle neuen Dateien hinzugef\u00fcgt. Wir werden diesen Befehl h\u00e4ufig nutzen, um nicht alle neuen Dateien einzeln aufzulisten. Es gibt f\u00fcr add auch die Option --all ( -A ), mit der alle Dateien aus einem Ordner hinzugef\u00fcgt werden. git commit - einen Snapshot erstellen \u00b6 Mit git commit \"speichern\" wir das gesamte Repository. Git merkt sich den Stand aller Dateien und Ordner und den Zeitpunkt des Commits. Zus\u00e4tzlich geben wir zum git commit noch eine Commit-Nachricht an, um den Stand der Arbeit zu beschreiben. In einem Snapshot werden alle \u00c4nderungen im Vergleich zum vorherigen Snapshot gespeichert. Man kann sich also die Versionierung mit Git wie eine Reihe von Commits (Snapshots) vorstellen: Ganz am Anfang ein initiales Commit ( C0 ), dann wurde weiter gearbeitet und ein weiteres Commit ( C1 ) gesetzt und so weiter ( C2 ). Es ist ohne Probleme m\u00f6glich, wieder zum Stand von C1 oder sogar C0 \"zur\u00fcckzuspringen\" (zeigen wir sp\u00e4ter, wie). Zun\u00e4chst erstellen wir unser initiales Commit. Dazu geben wir im Terminal im workspace -Ordner ein: git commit -m \"Initiales Commit. A.java und B.java jeweils leer.\" es erscheint die Ausgabe: [ master ( Root-Commit ) 8236e8a ] Initiales Commit. A.java und B.java jeweils leer. 3 files changed, 8 insertions ( + ) create mode 100644 .gitignore create mode 100644 Projekt1/src/A.java create mode 100644 Projekt1/src/B.java Unser erstes Commit (das sogenannte Root-Commit ) wurde erstellt. Wir haben jetzt einen \"gespeicherten\" Ausgangszustand, zu dem wir immer wieder zur\u00fccksetzen k\u00f6nnten. Unser \"Entwicklungsstrang\" nennt sich Branch . Der Hauptstrang , an dem wir versuchen, alle Entwicklungen immer ordentlich zusammenzuf\u00fchren, nennt sich master -Branch. Das letzte Commit ist stets der HEAD . Derzeit ist unser HEAD also dieses initiale Commit. Die Begriffe sind in der folgenden Abbildung dargestellt: Wir \u00e4ndern nun mal die Datei Projekt1/src/A.java und f\u00fcgen dort einfach ein Zeilenkommentar // Zeile 1 hinzugefuegt // hinzu. Wenn wir nun git status aufrufen, erscheint Auf Branch master \u00c4nderungen, die nicht zum Commit vorgemerkt sind: ( benutzen Sie \"git add <Datei>...\" , um die \u00c4nderungen zum Commit vorzumerken ) ( benutzen Sie \"git restore <Datei>...\" , um die \u00c4nderungen im Arbeitsverzeichnis zu verwerfen ) ge\u00e4ndert: Projekt1/src/A.java keine \u00c4nderungen zum Commit vorgemerkt ( benutzen Sie \"git add\" und/oder \"git commit -a\" ) Wir k\u00f6nnen diese \u00c4nderung nun committen, indem wir die Option -a verwenden (oder zuvor git add Projekt1/src/A.java ): git commit -am \"in A.java Zeile 1 hinzugefuegt\" Wir erhalten die Ausgabe: [ master 44ed3a8 ] in A.java Zeile 1 hinzugefuegt 1 file changed, 2 insertions ( + ) Wir haben jetzt einen neuen HEAD , nicht mehr das Root-Commit mit der \"Nummer\" 8236e8a , sondern nun dieses zweite Commit mit der \"Nummer\" 44ed3a8 . Diese Nummern sind Hash-Werte. Tats\u00e4chlich sind diese Hash-Werte sogar l\u00e4nger. Wir k\u00f6nnen Sie uns mit git log anzeigen lassen. git log und git show \u00b6 Mit git log k\u00f6nnen Sie sich alle Ihre Commits auflisten lassen. In unserem jetzigen Zustand erzeugt git log folgende Ausgabe: commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd ( HEAD -> master ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 18 :13:48 2021 +0200 in A.java Zeile 1 hinzugefuegt commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. Wenn Ihnen diese Ansicht zu un\u00fcbersichtlich ist, k\u00f6nnen Sie die Option --oneline verwenden: git log --oneline erzeugt: 44ed3a8 ( HEAD -> master ) in A.java Zeile 1 hinzugefuegt 8236e8a Initiales Commit. A.java und B.java jeweils leer. git branch und git ckeckout - Branches in Git \u00b6 Unser Repository sieht derzeit so aus: Angenommen, wir wollen etwas ausprobieren und unabh\u00e4ngig von dem Hauptentwicklungsstrang (dem master -Branch) z.B. an Projekt1/src/B.java arbeiten, ohne aber den bisherigen Stand zu \"gef\u00e4rden\". Dazu gibt es die M\u00f6glichkeit, neue, eigene Branches zu erstellen. Diese gehen von einem Commit des master -Branches aus und k\u00f6nnen sp\u00e4ter auch wieder auf den master -Branch f\u00fchren (oder, falls unser Ausprobieren doch nicht erfolgreich war, auch nicht). Einen neuen Branch erstellen wir mit git branch <nameDesNeuenBranches> . Wir erstellen uns einen Branch tryB : git branch tryB Dabei passiert erstmal noch gar nichts. Es wird nur ein Link auf das letzte Commit (den HEAD ) erzeugt und dieser Link hei\u00dft tryB . Wenn wir jetzt einfach erstmal an Projekt1/src/A.java weiterarbeiten w\u00fcrden und die \u00c4nderungen committen, stellen wir fest, dass wir tats\u00e4chlich am master -Branch weiterarbeiten. Um das zu zeigen, \u00e4ndern wir die Datei Projekt1/src/A.java und f\u00fcgen einen weiteren Zeilenkommentar hinzu. // Zeile 1 hinzugefuegt // Zeile 2 hinzugefuegt // Wir wissen bereits, wie wir diese \u00c4nderung committen: git commit -am \"in A.java Zeile 2 hinzugefuegt\" git log ergibt: commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde ( HEAD -> master ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Sat Apr 3 09 :09:54 2021 +0200 in A.java Zeile 2 hinzugefuegt commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd ( tryB ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 18 :13:48 2021 +0200 in A.java Zeile 1 hinzugefuegt commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. Das zeigt uns, dass wir am master -Branch weitergearbeitet haben und dass HEAD auf den master -Branch zeigt. Wir sehen aber auch, dass wir auf dem zweiten Commit einen Link tryB haben. Wir wollen jetzt aber auf diesem tryB -Branch arbeiten und nutzen dazu den Befehl git checkout <branch> : git checkout tryB Damit haben wir 2 Sachen getan: arbeiten wir jetzt auf einem anderen Branch, als dem master -Branch, n\u00e4mlich dem tryB -Branch und setzen wir auf den Zustand auf, den wir mit dem Commit gespeichert hatten ( 44ed3a8 ), auf den tryB zeigt. Den 2. Punkt k\u00f6nnen wir \u00fcberpr\u00fcfen, indem wir uns die Datei Projekt1/src/A.java anschauen. Die sieht n\u00e4mlich jetzt (wieder) so aus: // Zeile 1 hinzugefuegt // Wir f\u00fcgen nun das Gleiche in die Projekt1/src/B.java ein: // Zeile 1 hinzugefuegt // und committen diese \u00c4nderung: git commit -am \"in B.java Zeile 1 hinzugefuegt\" Die Commits lassen wir uns zun\u00e4chst mit git log anzeigen: commit e754d18f0d8cb1e8593edca740fa75b84d5de30f ( HEAD -> tryB ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Sat Apr 3 09 :56:28 2021 +0200 in B.java Zeile 1 hinzugefuegt commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 18 :13:48 2021 +0200 in A.java Zeile 1 hinzugefuegt commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. Wir sehen, dass alle Commits aufgelistet werden, die bis zum aktuellen HEAD f\u00fchren. Es fehlt aber beispielsweise das Commit, das bereits f\u00fcr den master -Branch ausgef\u00fchrt wurde und in dem in Projekt1/src/A.java bereits Zeile 2 hinzugefuegt wurde. Um sich alle Commits auszugeben und sogar eine Graph-\u00e4hnliche Darstellung zu erhalten, verwenden wir git log --all --graph Wir erhalten folgende Ausgabe: * commit e754d18f0d8cb1e8593edca740fa75b84d5de30f ( HEAD -> tryB ) | Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 09 :56:28 2021 +0200 | | in B.java Zeile 1 hinzugefuegt | | * commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde ( master ) | / Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 09 :09:54 2021 +0200 | | in A.java Zeile 2 hinzugefuegt | * commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd | Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Fri Apr 2 18 :13:48 2021 +0200 | | in A.java Zeile 1 hinzugefuegt | * commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. und daraus erkennt man, dass unser Repository (die Commit-Hostorie) derzeit so aussieht: git merge - Branches zusammenf\u00fchren \u00b6 Wir haben folgende Situation: ausgehend von Commit 44ed3a8 ( in A.java Zeile 1 hinzugefuegt ) haben wir auf dem master -Branch weitergearbeitet und dort ein Commit 9c869b6 ( in A.java Zeile 2 hinzugefuegt ) erstellt und parallel dazu auf dem tryB -Branch gearbeitet und dort ein Commit e754d18 ( in B.java Zeile 1 hinzugefuegt ) erstellt. Nun wollen wir beide Branches wieder zusammenf\u00fchren, um mit beiden \u00c4nderungen weiterzuarbeiten. Das Zusammenf\u00fchren von Branches erfolgt mithilfe von git merge <branchToMerge> . Wir wollen gerne den tryB -Branch in den master -Branch mergen , um dann mit dem master -Branch weiterzuarbeiten. Dazu wechseln wir zun\u00e4chst in den master -Branch. das erreichen wir, indem wir checkout verwenden: git checkout master Die Ausgabe ist Zu Branch 'master' gewechselt Nun mergen wir diesen mit dem tryB -Branch, indem wir git merge tryB eingeben. Wichtig ist, dass es sich hierbei auch um ein erzwungenes Commit (sogenanntes Merge-Commit ) handelt, da beide Branches eigene Commits enthielten. Es wird uns eine Commit-nachricht angeboten. Mit ZZ verlassen wir den vi . Wenn wir uns nun die Commit-Logs ausgeben lassen ( git log --all --graph ), dann erhalten wir folgende Ausgabe * commit 7ffabf8646580d6bb2ba289de93e6fe20b894084 ( HEAD -> master, tryB ) | \\ Merge: e754d18 9c869b6 | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 16 :21:12 2021 +0200 | | | | Merge branch 'master' into tryB | | | * commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 09 :09:54 2021 +0200 | | | | in A.java Zeile 2 hinzugefuegt | | * | commit e754d18f0d8cb1e8593edca740fa75b84d5de30f | / Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 09 :56:28 2021 +0200 | | in B.java Zeile 1 hinzugefuegt | * commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd | Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Fri Apr 2 18 :13:48 2021 +0200 | | in A.java Zeile 1 hinzugefuegt | * commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. und erkennen, dass die beiden Branches nun wieder \"vereint\" sind: Wenn wir uns A.java anschauen, dann sehen wir, dass diese Datei 2 Zeilen enth\u00e4lt und die Datei B.java eine. Beide sind also auf dem aktuellsten Stand. Wir \u00fcben Mergen an dieser Stelle nochmal und bilden 2 Branches, in dem einen erstellen wir uns eine \"Klasse\" C.java und in dem anderen eine D.java : git branch classC git branch classD git checkout classC touch Projekt1/src/C.java echo \"// Zeile 1 hinzugefuegt\" >> Projekt1/src/C.java git add Projekt1/src/C.java git commit -m \"in C.java Zeile 1 hinzugefuegt\" git checkout classD touch Projekt1/src/C.java echo \"// Zeile 1 hinzugefuegt\" >> Projekt1/src/D.java git add Projekt1/src/D.java git commit -m \"in D.java Zeile 1 hinzugefuegt\" git checkout master git merge classC Hierbei handelt es sich um ein sogenanntes Fast-Forward-Commit , da der master -Branch keine eigenen \u00c4nderungen enthielt, sondern nur die \u00c4nderungen des classC -Branches in den master -Branch eingef\u00fcgt werden m\u00fcssen. Es gibt hier keine potenziellen Konflikte. Wenn wir nun aber auch den classD -Branch in den master -Branch mergen wollen, enth\u00e4lt sowohl der master -Branch \u00c4nderungen ( C.java ) als auch der classD -Branch ( D.java ). Hierbei handelt es sich also um ein Merge-Commit : git merge classD vi \u00f6ffnet und wir k\u00f6nnen die Commit-Message \u00e4ndern oder sie so lassen. Wir beenden den vi wieder mit ZZ . git log --all --graph zeigt: * commit 15d5e0b00f2a4af5eaa4d84ba55e340f912ccb42 ( HEAD -> master ) | \\ Merge: 0d86294 01f8dfd | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 17 :12:18 2021 +0200 | | | | Merge branch 'classD' | | | * commit 01f8dfd9c68148c984db99dec980d227f1fe4044 ( classD ) | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 17 :05:46 2021 +0200 | | | | in D.java Zeile 1 hinzugefuegt | | * | commit 0d8629458ca0a5e244c121be525f8e647b5c6bd9 ( classC ) | / Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 16 :51:14 2021 +0200 | | in C.java Zeile 1 hinzugefuegt | * commit 7ffabf8646580d6bb2ba289de93e6fe20b894084 ( tryB ) | \\ Merge: e754d18 9c869b6 | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 16 :21:12 2021 +0200 | | | | Merge branch 'master' into tryB | | | * commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 09 :09:54 2021 +0200 | | | | in A.java Zeile 2 hinzugefuegt | | * | commit e754d18f0d8cb1e8593edca740fa75b84d5de30f | / Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 09 :56:28 2021 +0200 | | in B.java Zeile 1 hinzugefuegt | * commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd | Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Fri Apr 2 18 :13:48 2021 +0200 | | in A.java Zeile 1 hinzugefuegt | * commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. Die Commit-Historie unseres Repositories sieht so aus: Eine umfangreiche Beschreibung aller \u00c4nderungen in den jeweiligen Commits erhalten Sie auch durch den Befehl git show --pretty=fuller --abbrev-commit . Konflikte aufl\u00f6sen \u00b6 Gerade bei der Arbeit im Team kann es passieren, dass in verschiedenen Branches an der gleichen Datei \u00c4nderungen durchgef\u00fchrt werden. Wenn diese Branches dann \"gemerged\" werden sollen, kann Git diesen Konflikt nicht alleine aufl\u00f6sen (soll \u00c4nderung A gelten oder \u00c4nderung B oder beide?). Die Aufl\u00f6sung eines solchen Konfliktes muss durch die Entwicklerinnen geschehen. Zur Demonstration erzeugen wir uns erneut zwei Branches, changeA1 und changeA2 und f\u00fchren in beiden Branches eine \u00c4nderung an Projekt1/src/A.java durch: git branch changeA1 git branch changeA2 git checkout changeA1 echo \"// eine \u00c4nderung durch Entwicklerin A\" >> Projekt1/src/A.java git commit -am \"in A eine \u00c4nderung durch Entwicklerin A\" git checkout changeA2 echo \"// eine \u00c4nderung durch Entwicklerin B\" >> Projekt1/src/A.java git commit -am \"in A eine \u00c4nderung durch Entwicklerin B\" Wenn wir jetzt versuchen, die beiden Branches mit git merge changeA1 zu mergen, dann erhalten wir folgende Ausgabe: automatischer Merge von Projekt1/src/A.java KONFLIKT ( Inhalt ) : Merge-Konflikt in Projekt1/src/A.java Automatischer Merge fehlgeschlagen ; beheben Sie die Konflikte und committen Sie dann das Ergebnis. Git kann diesen Konflikt nicht automatisch aufl\u00f6sen. Die Ausgabe von git status hilft dabei nicht wirklich weiter: Auf Branch changeA2 Sie haben nicht zusammengef\u00fchrte Pfade. ( beheben Sie die Konflikte und f\u00fchren Sie \"git commit\" aus ) ( benutzen Sie \"git merge --abort\" , um den Merge abzubrechen ) Nicht zusammengef\u00fchrte Pfade: ( benutzen Sie \"git add/rm <Datei>...\" , um die Aufl\u00f6sung zu markieren ) von beiden ge\u00e4ndert: Projekt1/src/A.java keine \u00c4nderungen zum Commit vorgemerkt ( benutzen Sie \"git add\" und/oder \"git commit -a\" ) Mit git log --merge k\u00f6nnen wir uns die Commits anschauen, die die \u00c4nderungen enthalten, welche f\u00fcr den Konflikt sorgen: commit da1f715199e68f17ea276b07a9c3a6e88b319e8a ( HEAD -> changeA2 ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Sun Apr 4 08 :08:13 2021 +0200 in A eine \u00c4nderung durch Entwicklerin B commit 63a9a40ab267bc53f2a688a45e6813d7c15170c6 ( changeA1 ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Sun Apr 4 08 :07:25 2021 +0200 in A eine \u00c4nderung durch Entwicklerin A Der Befehl git diff zeigt uns den Konflikt ganz konkret an: diff --cc Projekt1/src/A.java index a5c84c3,a920d29..0000000 --- a/Projekt1/src/A.java +++ b/Projekt1/src/A.java @@@ -1,4 -1,4 +1,8 @@@ // Zeile 1 hinzugefuegt // Zeile 2 hinzugefuegt // ++ <<<<<< < HEAD +// eine \u00c4nderung durch Entwicklerin B ++ ======= + // eine \u00c4nderung durch Entwicklerin A ++>>>>>>> changeA1 Diese Darstellung in der Datei finden wir auch wieder, wenn wir uns die Datei Projekt1/src/A.java anschauen: // Zeile 1 hinzugefuegt // Zeile 2 hinzugefuegt // <<<<<< < HEAD // eine \u00c4nderung durch Entwicklerin B ======= // eine \u00c4nderung durch Entwicklerin A >>>>>>> changeA1 In unserer Konflikt-Datei gibt es folgende drei Eintr\u00e4ge: <<<<<<< HEAD ======= >>>>>>> changeA1 Aller Inhalt zwischen den ersten beiden Zeilen enth\u00e4lt die \u00c4nderungen des aktuellen Branches und alle \u00c4nderungen zwischen den letzten beiden Zeilen enth\u00e4lt alle \u00c4nderungen des Branches, in den gemerged werden soll ( changeA1 ). Entwicklungsumgebungen (IntelliJ, Eclipse, Atom, Visual Studio Code usw.) unterst\u00fctzen bei der Aufl\u00f6sung solcher Konflikte. Wir \u00fcbernehmen einfach beide \u00c4nderungen h\u00e4ndisch und committen diese \u00c4nderung. Projekt1/src/A.java sieht also jetzt so aus: // Zeile 1 hinzugefuegt // Zeile 2 hinzugefuegt // // eine \u00c4nderung durch Entwicklerin B // eine \u00c4nderung durch Entwicklerin A und der Commit: git commit -am \"Merge-Konflikt in A.java geloest. Aenderungen A UND B eingefuegt\" . Merge abbrechen \u00b6 Sollten Sie aufgrund der Konfliktmeldung den Merge-Vorgang doch nicht durchf\u00fchren wollen, k\u00f6nnen Sie mit git merge --abort den Merge abbrechen und mit git reset die in Konflikt stehenden Dateien auf einen als funktionierend bekannten Zustand zur\u00fcckzusetzen. git stash - Arbeit unterbrechen \u00b6 Angenommen, Sie haben bereits \u00c4nderungen durchgef\u00fchrt, diese sind aber noch nicht \"fertig\" und Sie wollen Sie deshalb noch nicht committen. Stattdessen m\u00fcssen Sie aber an anderer Stelle zun\u00e4chst noch einen BugFix erledigen. Dann k\u00f6nnen Sie Ihre gegenw\u00e4rtigen \u00c4nderungen \"stashen\" - in einen Stash-Modus setzen, also erstmal verstauen , um daran sp\u00e4ter weiterzuarbeiten: git stash Jetzt k\u00f6nnen Sie erstmal andere \u00c4nderungen durchf\u00fchren und committen und um dann wieder zu Ihren urspr\u00fcnglichen \u00c4nderungen zur\u00fcckzukehren, holen Sie diese wieder aus dem Stash-Modus: git stash pop Einige weitere n\u00fctzliche Befehle \u00b6 Angenommen, Sie haben committed, aber einige \u00c4nderungen vergessen (entweder vorher nicht geadded oder noch gar nicht ge\u00e4ndert), dann k\u00f6nnen Sie den vorherigen Commit \"\u00fcberschreiben\". git commit -m \"zu frueh committed\" // jetzt noch die Aenderungen hinzufuegen git commit --amend Angenommen, Sie haben seit dem letzten Commit \u00c4nderungen an Dateien vorgenommen, die Sie aber gerne verwerfen m\u00f6chten. Sie werden in der Literatur daf\u00fcr Befehle finden, wie z.B. git checkout HEAD oder git reset --hard . Sie sollten damit \u00e4u\u00dferst vorsichtig sein! Bei git checkout HEAD (aslo dem \"Zur\u00fccksetzen\" auf das letzte Commit) bleiben die ge\u00e4nderten Dateien \"modifiziert\". Das hilft also gar nicht wirklich. git reset --hard kann Sie unter Umst\u00e4nden auf ein Commit zur\u00fccksetzen, das noch weiter zur\u00fcck in der Historie liegt, als Sie planen. Verwenden Sie zum Zur\u00fccksetzen Ihrer \u00c4nderungen (Undo) besser git restore <dateiUndo> Geben Sie also die Datei an, die Sie ge\u00e4ndert haben und die wieder auf den Zustand des letzten Commits zur\u00fcckgesetzt werden soll. L\u00f6schen Sie niemals einfach Dateien oder Ordner in dem durch Git verwalteten Ordner (Ihrem Repository) \u00fcber den Finder oder den Dateiexplorer! Die Idee von Git ist die, dass immer nur etwas hinzukommt. Selbst, wenn Sie eine bestimmte Datei nicht mehr ben\u00f6tigen, so kann es ja doch sein, dass diese in fr\u00fcheren Versionen vorkommt. Lassen Sie sie einfach im Verzeichnis! Aliases \u00b6 Es ist ganz hilfreich, sich f\u00fcr einige Optionen Aliase zu definieren, da diese oft verwendet werden. Dazu nutzen Sie git config . Hier einige Beispiele von n\u00fctzlichen Aliases (aus dem Git-Buch ): git config --global alias.co checkout git config --global alias.br branch git config --global alias.ci commit git config --global alias.st status Git als Kollaborationswerkzeug \u00b6 Im vorherigen Abschnitt haben wir diskutiert, wie wir Git zur Versionsverwaltung verwenden k\u00f6nnen. Dazu haben wir ein lokales Git-Repository angelegt. Nun wollen wir betrachten, wie Git als Kollaborationswerkzeug eingesetzt werden kann, d.h. wie mehere Entwicklerinnen zusammen an einem (globalen) Git-Repository arbeiten k\u00f6nnen. Dazu ben\u00f6tigen wir einen Host (Bereitsteller netzbasierter Dienste), der ein zentrales Git-Repository zur Verf\u00fcgung stellen kann. Es gibt mehrere solcher Git-Hosts. Die bekanntesten sind: GitHub GitLab Bibucket Wir zeigen das Verwenden eines zentralen Repositories exemplarisch f\u00fcr GitHub . Sie m\u00fcssen sich in GitHub registrieren . Die Verwendung von GitHub ist kostenlos . Die Idee eines zentralen Repositorys ist die, dass daran mehrere lokale Repositories angebunden sein k\u00f6nnen: \u00dcber das zentrale Repository werden alle lokalen Repositories synchronisiert, so dass alle Repositories \u00fcber den gleichen Stand, d.h. alle Dateien und Ordner sowie die gleiche Commit-Historie verf\u00fcgen. Wichtig ist jedoch, dass man zum Entwickeln nicht permanent online sein muss. Vielmehr kann man beliebig lange offline auf dem eigenen lokalen Repository arbeiten, bis man irgendwann seine \u00c4nderungen in das zentrale Repository schreiben ( push ) bzw. dort abgelegte \u00c4nderungen aus anderen lokalen Repositories lesen ( pull ) m\u00f6chte. Ein zentrales Repository anlegen \u00b6 Sie loggen sich in GitHub (oder dem von Ihnen gew\u00e4hlten Diensteanbieter) ein und klicken auf \"New\": Dann geben Sie einen sprechenden Namen f\u00fcr das Repository ein. Sie k\u00f6nnen w\u00e4hlen, ob das Repository Public (f\u00fcr alle lesbar) oder Private (nur f\u00fcr Eingeladene lesbar) sein soll. Die darunter stehenden Checkboxen sollten Sie nicht anklicken, da Sie ein bereits existierendes lokales Repository mit diesem zentralen Repository verbinden wollen. In Ihrem lokalen Repository haben Sie ja wahrscheinlich bereits eine .gitignore -Datei. W\u00fcrden Sie diese Checkboxen markieren, m\u00fcssten Sie bereits ganz am Anfang mergen . Klicken Sie auf den Button Create repository . Das zentrale Repository ist nun erstellt. Nun m\u00fcssen wir nur noch vorgehen, wie auf der Seite angegeben: Im Terminal f\u00fchren wir im workspace -Ordner (in unserem lokalen Repository - der Ordner, der den .git -Ordner enth\u00e4lt) den Befehl git remote add origin https://github.com/jfreiheit/einfuehrung-git.git aus. https://github.com/jfreiheit/einfuehrung-git.git entspricht dabei der sogenannten Remote-URL und lautet bei Ihnen nat\u00fcrlich anders. Es ist der Pfad (die URL) zu Ihrem zentralen Git-Repository. Mit diesem Befehl verbinden wir unser lokales Git-Repository mit dem zentralen Git-Repository. Wir geben dem zentralen Git-Repository dabei den Namen origin . Den n\u00e4chsten von GitHub vorgeschlagenen Befehl git branch -M main k\u00f6nnen wir ebenfalls ausf\u00fchren. Wir wissen bereits, dass wir damit einen neuen Branch erstellen, n\u00e4mlich main . Wir verlassen also den master -Branch und wechseln zu einem neuen main -Branch. Das kann man machen, muss man aber nicht. Die Option -M steht f\u00fcr --move --force . Damit bestimmen wir, dass wir einen main -Branch erstellen, selbst wenn dieser bereits existierte. Siehe auch die Dokumentation f\u00fcr git branch . Der dritte von GitHub vorgeschlagene Befehl git push -u origin main bewirkt, dass unser komplettes lokales Git-Repository auf das zentrale Git-Repository gespielt wird. Das hei\u00dft, der aktuelle Branch main wird auf das zentrale Git-Repository origin gepushed . Nach Ausf\u00fchrung dieses Befehls ist das zentrale Repository auf dem selben Stand wie das lokale Repository. Alltag mit Git \u00b6 Ihr lokales Repository ist nun mit dem zentralen Repository verkn\u00fcpft. Wenn Sie jetzt \u00c4nderungen an Ihrem Code (Ihrem lokalen Repository) durchf\u00fchren und diese \u00c4nderungen auf dem zentralen Repository speichern wollen, sieht Ihr \"Alltag\" wie folgt aus. git add - eine neue Datei hinzuf\u00fcgen \u00b6 Angenommen, Sie erstellen eine neue Klasse (Datei), z.B. Projekt1/src/E.java , dann f\u00fcgen Sie diese neue Datei mit git add <neueDatei> Ihrem lokalen Repository hinzu: git add Projekt1/src/E.java Wenn Sie sich dann mit git status den Status des Repositorys anschauen, erhalten Sie Auf Branch main Ihr Branch ist auf demselben Stand wie 'origin/main' . Zum Commit vorgemerkte \u00c4nderungen: ( benutzen Sie \"git restore --staged <Datei>...\" zum Entfernen aus der Staging-Area ) neue Datei: Projekt1/src/E.java Neue Dateien f\u00fcgen Sie mittels git add <neueDatei> dem Repository hinzu. git commit - \u00c4nderungen \"speichern\" \u00b6 Angenommen, Sie haben \u00c4nderungen an Dateien hinzugef\u00fcgt, diese Dateien sind aber bereits Teil des Repositorys (wurden also bereits bei Erstellung mit git add hinzugef\u00fcgt). Dann speichern Sie diese \u00c4nderungen mit git commit -am \"Commit-Message\" . Angenommen, wir haben in Projekt1/src/E.java 2 Zeilen hinzugef\u00fcgt, dann committen wir diese \u00c4nderungen z.B. mit git commit -am \"in E.java 2 Zeilen hinzugefuegt\" Die Option -m steht daf\u00fcr, dass wir gleich die Commit-Message mit angeben. Fehlt diese Option, \u00f6ffnet sich ein vi und wir f\u00fcgen die Commit-Message nachtr\u00e4glich hinzu. Den vi verlassen wir mit ZZ . Die Option -a steht f\u00fcr add . Jede \u00c4nderung muss zun\u00e4chst hinzugef\u00fcgt werden. H\u00e4ufig sieht man daf\u00fcr die Verwendung des Befehls git add . . Das l\u00e4sst sich aber mit der Option -a auch beim Commit selbst erledigen. Wenn Sie sich dann mit git status den Status des Repositorys anschauen, erhalten Sie Auf Branch main Ihr Branch ist 1 Commit vor 'origin/main' . ( benutzen Sie \"git push\" , um lokale Commits zu publizieren ) nichts zu committen, Arbeitsverzeichnis unver\u00e4ndert \u00c4nderungen am Code (Repository) \"committen\" (speichern) Sie mittels git commit -am \"Commit-Message\" . git push - \u00c4nderungen auf das zentrale Repository spielen \u00b6 Sie k\u00f6nnen beliebig lange und oft Ihr lokales Repository \u00e4ndern, wie im Abschnitt Git als Versionierungswerkzeug beschrieben. Wenn Sie Ihr lokales Repository auf Ihr zentrales Repository spielen m\u00f6chten, verwenden Sie den Befehl git push . Damit stellen Sie das zentrale Repository auf den Stand Ihres lokalen Repositorys. git push ergibt folgende Ausgabe: Objekte aufz\u00e4hlen: 8 , fertig. Z\u00e4hle Objekte: 100 % ( 8 /8 ) , fertig. Delta-Kompression verwendet bis zu 8 Threads. Komprimiere Objekte: 100 % ( 3 /3 ) , fertig. Schreibe Objekte: 100 % ( 5 /5 ) , 439 Bytes | 439 .00 KiB/s, fertig. Gesamt 5 ( Delta 1 ) , Wiederverwendet 0 ( Delta 0 ) , Pack wiederverwendet 0 remote: Resolving deltas: 100 % ( 1 /1 ) , completed with 1 local object. To https://github.com/jfreiheit/einfuehrung-git.git 15d5e0b..6ddd0dc main -> main Damit \u00fcbernimmt das zentrale Repository den Stand des lokalen Repositorys. Um das zentrale Repository auf den Stand Ihres lokalen Repositorys zu bringen, verwenden Sie git push . Das hei\u00dft, wenn Sie alleine an Ihrem zenztralen Repository arbeiten, m\u00fcssen sie sich nur folgende Befehle merken: git add <datei> // falls die Datei neu erstellt wurde und Ihrem Repository bekannt gemacht (hinzugef\u00fcgt) werden soll git commit -am \"Commit-Message\" // um die \u00c4nderungen ins lokale Repository zu \"speichern\" git push // um das zentrale Repository auf den Stand des lokalen Repositorys zu bringen So sieht einfach sieht der Alltag aus, wenn Sie alleine am (zentralen) Repository arbeiten. Ein existierendes zentrales Repository verwenden \u00b6 Angenommen, jemand anderer besitzt ein zentrales Repository und m\u00f6chte den Code mit Ihnen teilen - angenommen, ich m\u00f6chte mit Ihnen den Code aus meinem Repository https://github.com/jfreiheit/einfuehrung-git.git teilen. Sie k\u00f6nnen dieses Repository klonen (kopieren), indem sie einmalig git clone https://github.com/jfreiheit/einfuehrung-git.git eingeben. Dadurch erstellen Sie sich ein lokales Repository, das einer identischen Kopie (einem Clone) des zentralen Repositorys https://github.com/jfreiheit/einfuehrung-git.git entspricht. Dieses lokale Repository ist dann bereits auch mit dem zentralen Repository verbunden. Angenommen, ich f\u00fchre nun \u00c4nderungen an diesem zentralen Repository durch und somit einige Commits. Damit diese \u00c4nderungen auch Ihrem lokalen Repository bekannt werden, f\u00fchren Sie git pull aus. Damit \"holen\" Sie sich den aktuellen Stand des zentralen Repositories. N\u00fctzliche Links zu Git \u00b6 Git Dokumentation Git Buch Lerne Git mit Bitbucket Cloud Git-Tutorial: Git und die wichtigsten Befehle kennenlernen Learn Git Branching Git - Der einfache Einstieg","title":"Git"},{"location":"git/#git","text":"Git ist ein Versionierungswerkzeug f\u00fcr die Softwareentwicklung. Mit Git k\u00f6nnen Sie Ihre Software versionieren, d.h. Versionen Ihrer Software erstellen und zwischen diesen Versionen hin- und herwecheseln sowie im Team gemeinsam an einem Softwareprojekt arbeiten und die einzelnen Entwicklungen aller Teammitglieder geeignet zusammenf\u00fchren. Git ist Open Source und frei verf\u00fcgbar . Entstanden ist Git im Rahmen der Entwicklung von Linux , initiiert durch Linus Torvalds , dem Initiator von Linux.","title":"Git"},{"location":"git/#installation-von-git","text":"Um Git verwenden zu k\u00f6nnen, m\u00fcssen Sie es zun\u00e4chst installieren. Laden Sie sich Git f\u00fcr Ihr Betriebssystem von der Download-Seite herunter bzw. gehen Sie so vor, wie f\u00fcr Ihr Betriebssystenm beschrieben. Installationshilfen erhalten Sie z.B. auch im frei verf\u00fcgbaren Git-Buch unter Git installieren oder auch im Video \u00fcber die ersten Schritte mit Git. Wenn Sie unter Windows arbeiten, dann erhalten Sie mit Git eine GitBash . Wenn wir von nun an vom Terminal (oder Shell oder Bash ) sprechen, dann verwenden Sie bitte immer diese GitBash . Nach erfolgreicher Installation k\u00f6nnen Sie im Terminal den Befehl git --version eingeben und es sollte eine Ausgabe, wie git version 2 .30.1 oder eine aktuellere Versionsnummer erfolgen. Wir k\u00f6nnen Git nun verwenden und betrachten zun\u00e4chst, wie Git als Versionierungswerkzeug verwendet werden kann und schauen uns danach an, wie es als Kollaborationswerkzeug verwendet wird.","title":"Installation von Git"},{"location":"git/#git-als-versionierungswerkzeug","text":"Die grunds\u00e4tzliche Idee von Git ist, \u00c4nderungen an Dateien und Ordnern so zu speichern, dass alle diese \u00c4nderungen nachverfolgbar sind. Git erzeugt sogenannte Snapshots aller Dateien und Ordner und speichert diese Snapshots nacheinander lokal ab. D.h. alles passiert bei Ihnen lokal auf dem Rechner, Sie ben\u00f6tigen keine Verbindung zu einem Server. Wenn Sie sp\u00e4ter im Team zu Mehreren an einem Projekt arbeiten, dann gleichen Sie immer nur die Historien Ihrer Snapshots ab. Git f\u00fcgt immer nur hinzu und das ist auch korrekt so. Selbst, wenn in sp\u00e4teren Versionen Ihres eine Datei nicht mehr existiert, die in fr\u00fcheren Versionen des Projektes noch existierte, soll diese Datei gar nicht gel\u00f6scht werden, denn es k\u00f6nnte ja sein, dass Sie irgendwann nochmal die fr\u00fchere Version anschauen wollen, die die Datei enthielt. Dieses Skript hier z.B. verwalte ich mit Git. Das bedeutet, dass alle Dateien eines Ordners (und Unterordnern) in einem sogenannten Git-Repository (oder nur Repository ) verwaltet werden. F\u00fcr dieses Skript hier k\u00f6nnte das z.B. so aussehen: Das hei\u00dft, ich erstelle zun\u00e4chst 3 Dateien: Einf\u00fchrung , Wiederholung und Git und \"sage\" Git, dass dies Version1 sein soll. Danach f\u00fcge ich 3 weitere Dateien hinzu Aufgaben , \u00dcbungen und Wrapperklassen und zusammen mit den vorherigen 3 Dateien aus Version 1 ergibt das dann Version 2 . Danach \u00e4ndere ich (f\u00fcge hinzu) die Dateien Aufgaben und \u00fcbungen und f\u00fcge au\u00dferdem neue Dateien f\u00fcr Exceptions und JUnit hinzu und \"sage\", dass das insgesamt Version 3 ergibt usw. Git verwaltet nun diese Versionen und der Vorteil ist, dass ich jede dieser Versionen separat zur Verf\u00fcgung stellen k\u00f6nnte und auch auf diesen Versionen weiterarbeiten. Wir werden in Zukunft in Bezug auf Git aber nicht mehr unbedingt von Versionen sprechen, sondern von Snapshots . Wir schauen uns das nun in einem Besipiel an.","title":"Git als Versionierungswerkzeug"},{"location":"git/#git-init-ein-repository-erstellen","text":"Angenommen, wir haben in unserem workspace folgende Ordner-Struktur: In dem workspace gibt es ein Projekt Projekt1 und darin einen src -Ordner mit unseren *.java -Dateien und einen bin -Ordner mit unseren *.class -Dateien. Wir lassen f\u00fcr dieses einf\u00fchrende Beispiel einmal Pakete weg. Diese w\u00fcrden ja als Ordner-Struktur sowohl innerhalb von src als auch von bin auftauchen. So sieht also ein typischer workspace aus. Es gibt darin noch weitere Ordner und Dateien, wie z.B. .idea , .metadata , .classpath , .project , .settings , die von unseren Entwicklungsumgebungen (Eclipse, IntelliJ, ...) angelegt wurden. Wir wollen nun unseren workspace von Git verwalten lassen. Dazu wechseln wir im Terminal in den workspace -Ordner und f\u00fchren dort das Kommando git init aus. Dieses Kommando erstellt das Git-Repository . Es muss genau einmal, n\u00e4mlich ganz am Anfang zur Erstellung des Repositorys ausgef\u00fchrt werden. Im Terminal erscheint Hinweis: Als Name f\u00fcr den initialen Branch wurde 'master' benutzt. Dieser Hinweis: Standard-Branchname kann sich \u00e4ndern. Um den Namen des initialen Branches Hinweis: zu konfigurieren, der in allen neuen Repositories verwendet werden soll und Hinweis: um diese Warnung zu unterdr\u00fccken, f\u00fchren Sie aus: Hinweis: Hinweis: git config --global init.defaultBranch <Name> Hinweis: Hinweis: H\u00e4ufig gew\u00e4hlte Namen statt 'master' sind 'main' , 'trunk' und Hinweis: 'development' . Der gerade erstellte Branch kann mit diesem Befehl Hinweis: umbenannt werden: Hinweis: Hinweis: git branch -m <Name> Leeres Git-Repository in /...IhrPfadZumWorkspaceOrdner.../workspace/.git/ initialisiert Somit wurde ein Git-Repository erstellt. Der workspace -Ordner wird nun von Git verwaltet. Dies erkennen Sie daran, dass in dem workspace -Ordner ein .git -Ordner angelegt wurde: Klicken Sie ruhig mal in den Ordner, um zu sehen, was da alles drin ist.","title":"git init - ein Repository erstellen"},{"location":"git/#gitignore-dateien-aus-der-verwaltung-ausschlieen","text":"Git w\u00fcrde nun den gesamten workspace -Ordner verwalten. Das w\u00e4re zun\u00e4chst auch gar kein Problem. Aber wenn Sie im Team zu mehreren am selben Projekt (workspace) arbeiten, dann wollen Sie bestimmte Dateien gar nicht untereinander austauschen, z.B. alle Dateien, die von Ihrer IDE erstellt wurden (z.B. .idea , .metadata , .classpath , .project , .settings ). Auch alle Dateien im bin -Ordner m\u00fcssen nicht von Git verwaltet werden, weil Sie ja stets neu durch das Compilieren erzeugt werden. Noch bevor wir nun also unsere erste Version erzeugen wollen, schlie\u00dfen wir zun\u00e4chst einige Ordner und Dateien aus der Verwaltung von Git aus. Dazu wird im workspace -Ordner eine Datei .gitignore erstellt, in die wir alle Dateien und Ordner eintragen, die wir aus der Git-Verwaltung ausschlie\u00dfen wollen. Bevor wir das machen, geben wir im Terminal in unserem workspace -Ordner einmal den Befehl git status ein. Dies wird der am meisten verwendete Befehl f\u00fcr uns sein, der mit dem Befehl bekommen wir Auskunft \u00fcber den aktuellen Status des Repositorys. Die Ausgabe derzeit ist Auf Branch master Noch keine Commits Unversionierte Dateien: ( benutzen Sie \"git add <Datei>...\" , um die \u00c4nderungen zum Commit vorzumerken ) .DS_Store .idea/ .metadata/ Projekt1/ nichts zum Commit vorgemerkt, aber es gibt unversionierte Dateien ( benutzen Sie \"git add\" zum Versionieren ) Das m\u00fcssen wir zum jetzigen Zeitpunkt noch nicht alles verstehen, aber wir sehen, dass Git derzeit die Datei .DS_Store und die Ordner .idea/ , .metadata/ und Projekt1/ verwaltet und wir ja eigentlich nur die Verwaltung von Projekt1/ w\u00fcnschen (und darin auch nicht alles). Wir erstellen uns also im workspace -Ordner eine .gitignore -Datei und geben darin ein: .DS_Store .idea .metadata Projekt1/bin Projekt1/.classpath Projekt1/.project Projekt1/.settings Damit geben wir an, dass die Datei .DS_Store ignoriert werden soll (gibt es nur unter Mac - legt der Finder automatisch zur schnelleren Suche an) sowie die Ordner .idea und .metadata . H\u00e4tten wir .idea/ und .metadata/ geschrieben, w\u00fcrde der Ordner jeweils selbst mit in der Git-Verwaltung sein, jedoch der Kontent nicht. Ansonsten soll auch noch der Ordner Projekt1/bin aus der Git-Verwaltung entfernt werden und alle Dateien und Ordner, die mit einem Punkt beginnen und im Ordner Projekt1 liegen. Wenn man alle Dateien ignorieren m\u00f6chte, die mit einem Punkt beginnen, egal in welchem ordner, dann k\u00f6nnte man auch .* in die .gitignore schreiben. Dann w\u00fcrde allerdings auch die .gitignore selbst dazugeh\u00f6ren. Diese kann und sollte man aber ruhig mit in die Git-Verwaltung aufnehmen. Eine \u00dcbersicht \u00fcber m\u00f6gliche Eintr\u00e4ge in die .gitignore findet man z.B. hier oder hier . Wenn wir jetzt erneut git status eingeben, dann ist die Ausgabe: Auf Branch master Noch keine Commits Unversionierte Dateien: ( benutzen Sie \"git add <Datei>...\" , um die \u00c4nderungen zum Commit vorzumerken ) .gitignore Projekt1/ nichts zum Commit vorgemerkt, aber es gibt unversionierte Dateien ( benutzen Sie \"git add\" zum Versionieren ) D.h. wir sehen, dass die Dateien und Ordner .DS_Store , .idea/ und .metadata/ nun nicht mehr mit verwaltet werden, daf\u00fcr aber die .gitignore . Wir haben jetzt ein Git-Repoitory , aber es ist noch leer. Wir f\u00fcgen nun Dateien diesem Repository hinzu.","title":".gitignore - Dateien aus der Verwaltung ausschlie\u00dfen"},{"location":"git/#git-add-dem-repository-dateien-hinzufugen","text":"Wir haben noch keine Ordner und Dateien in unser Repository aufgenommen, d.h. es werden noch keine \u00c4nderungen an diesen Dateien durch Git verwaltet. Um Dateien dem Repository hinzuzuf\u00fcgen, verwenden wir das Kommando git add . Wir wollen den Ordner Projekt1 und die Datei .gitignore dem Repository hinzuf\u00fcgen, um sie von nun an von Git verwalten zu lassen (d.h. ihre \u00c4nderungen zu \"protokollieren\"). Wir geben im Terminal im workspace -Ordner ein: git add .gitignore git add Projekt1 und f\u00fcgen somit den gesamten Ordner Projekt1 (aber nicht die in der .gitignore definierten Dateien und Ordner aus dem Ordner Projekt1 ) und die .gitignore -Datei dem Repository hinzu. git status ergibt nun: Auf Branch master Noch keine Commits Zum Commit vorgemerkte \u00c4nderungen: ( benutzen Sie \"git rm --cached <Datei>...\" zum Entfernen aus der Staging-Area ) neue Datei: .gitignore neue Datei: Projekt1/src/A.java neue Datei: Projekt1/src/B.java D.h. von nun an werden von Git die Dateien .gitignore , Projekt1/src/A.java und Projekt1/src/B.java verwaltet. Die Dateien A.java und B.java sind jetzt noch leer. Wann immer wir eine neue Datei in unserem workspace erstellen und wir wollen, dass sie von Git verwaltet wird, f\u00fcgen wir diese Datei mit git add <datei> dem repository hinzu! Wann immer wir eine neue Datei in unserem workspace erstellen und wir nicht wollen, dass sie von Git verwaltet wird, f\u00fcgen wir diese Datei der .gitignore -Datei hinzu! Mit dem Befehl git add . werden einfach immer alle neuen Dateien hinzugef\u00fcgt. Wir werden diesen Befehl h\u00e4ufig nutzen, um nicht alle neuen Dateien einzeln aufzulisten. Es gibt f\u00fcr add auch die Option --all ( -A ), mit der alle Dateien aus einem Ordner hinzugef\u00fcgt werden.","title":"git add - dem Repository Dateien hinzuf\u00fcgen"},{"location":"git/#git-commit-einen-snapshot-erstellen","text":"Mit git commit \"speichern\" wir das gesamte Repository. Git merkt sich den Stand aller Dateien und Ordner und den Zeitpunkt des Commits. Zus\u00e4tzlich geben wir zum git commit noch eine Commit-Nachricht an, um den Stand der Arbeit zu beschreiben. In einem Snapshot werden alle \u00c4nderungen im Vergleich zum vorherigen Snapshot gespeichert. Man kann sich also die Versionierung mit Git wie eine Reihe von Commits (Snapshots) vorstellen: Ganz am Anfang ein initiales Commit ( C0 ), dann wurde weiter gearbeitet und ein weiteres Commit ( C1 ) gesetzt und so weiter ( C2 ). Es ist ohne Probleme m\u00f6glich, wieder zum Stand von C1 oder sogar C0 \"zur\u00fcckzuspringen\" (zeigen wir sp\u00e4ter, wie). Zun\u00e4chst erstellen wir unser initiales Commit. Dazu geben wir im Terminal im workspace -Ordner ein: git commit -m \"Initiales Commit. A.java und B.java jeweils leer.\" es erscheint die Ausgabe: [ master ( Root-Commit ) 8236e8a ] Initiales Commit. A.java und B.java jeweils leer. 3 files changed, 8 insertions ( + ) create mode 100644 .gitignore create mode 100644 Projekt1/src/A.java create mode 100644 Projekt1/src/B.java Unser erstes Commit (das sogenannte Root-Commit ) wurde erstellt. Wir haben jetzt einen \"gespeicherten\" Ausgangszustand, zu dem wir immer wieder zur\u00fccksetzen k\u00f6nnten. Unser \"Entwicklungsstrang\" nennt sich Branch . Der Hauptstrang , an dem wir versuchen, alle Entwicklungen immer ordentlich zusammenzuf\u00fchren, nennt sich master -Branch. Das letzte Commit ist stets der HEAD . Derzeit ist unser HEAD also dieses initiale Commit. Die Begriffe sind in der folgenden Abbildung dargestellt: Wir \u00e4ndern nun mal die Datei Projekt1/src/A.java und f\u00fcgen dort einfach ein Zeilenkommentar // Zeile 1 hinzugefuegt // hinzu. Wenn wir nun git status aufrufen, erscheint Auf Branch master \u00c4nderungen, die nicht zum Commit vorgemerkt sind: ( benutzen Sie \"git add <Datei>...\" , um die \u00c4nderungen zum Commit vorzumerken ) ( benutzen Sie \"git restore <Datei>...\" , um die \u00c4nderungen im Arbeitsverzeichnis zu verwerfen ) ge\u00e4ndert: Projekt1/src/A.java keine \u00c4nderungen zum Commit vorgemerkt ( benutzen Sie \"git add\" und/oder \"git commit -a\" ) Wir k\u00f6nnen diese \u00c4nderung nun committen, indem wir die Option -a verwenden (oder zuvor git add Projekt1/src/A.java ): git commit -am \"in A.java Zeile 1 hinzugefuegt\" Wir erhalten die Ausgabe: [ master 44ed3a8 ] in A.java Zeile 1 hinzugefuegt 1 file changed, 2 insertions ( + ) Wir haben jetzt einen neuen HEAD , nicht mehr das Root-Commit mit der \"Nummer\" 8236e8a , sondern nun dieses zweite Commit mit der \"Nummer\" 44ed3a8 . Diese Nummern sind Hash-Werte. Tats\u00e4chlich sind diese Hash-Werte sogar l\u00e4nger. Wir k\u00f6nnen Sie uns mit git log anzeigen lassen.","title":"git commit - einen Snapshot erstellen"},{"location":"git/#git-log-und-git-show","text":"Mit git log k\u00f6nnen Sie sich alle Ihre Commits auflisten lassen. In unserem jetzigen Zustand erzeugt git log folgende Ausgabe: commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd ( HEAD -> master ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 18 :13:48 2021 +0200 in A.java Zeile 1 hinzugefuegt commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. Wenn Ihnen diese Ansicht zu un\u00fcbersichtlich ist, k\u00f6nnen Sie die Option --oneline verwenden: git log --oneline erzeugt: 44ed3a8 ( HEAD -> master ) in A.java Zeile 1 hinzugefuegt 8236e8a Initiales Commit. A.java und B.java jeweils leer.","title":"git log und git show"},{"location":"git/#git-branch-und-git-ckeckout-branches-in-git","text":"Unser Repository sieht derzeit so aus: Angenommen, wir wollen etwas ausprobieren und unabh\u00e4ngig von dem Hauptentwicklungsstrang (dem master -Branch) z.B. an Projekt1/src/B.java arbeiten, ohne aber den bisherigen Stand zu \"gef\u00e4rden\". Dazu gibt es die M\u00f6glichkeit, neue, eigene Branches zu erstellen. Diese gehen von einem Commit des master -Branches aus und k\u00f6nnen sp\u00e4ter auch wieder auf den master -Branch f\u00fchren (oder, falls unser Ausprobieren doch nicht erfolgreich war, auch nicht). Einen neuen Branch erstellen wir mit git branch <nameDesNeuenBranches> . Wir erstellen uns einen Branch tryB : git branch tryB Dabei passiert erstmal noch gar nichts. Es wird nur ein Link auf das letzte Commit (den HEAD ) erzeugt und dieser Link hei\u00dft tryB . Wenn wir jetzt einfach erstmal an Projekt1/src/A.java weiterarbeiten w\u00fcrden und die \u00c4nderungen committen, stellen wir fest, dass wir tats\u00e4chlich am master -Branch weiterarbeiten. Um das zu zeigen, \u00e4ndern wir die Datei Projekt1/src/A.java und f\u00fcgen einen weiteren Zeilenkommentar hinzu. // Zeile 1 hinzugefuegt // Zeile 2 hinzugefuegt // Wir wissen bereits, wie wir diese \u00c4nderung committen: git commit -am \"in A.java Zeile 2 hinzugefuegt\" git log ergibt: commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde ( HEAD -> master ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Sat Apr 3 09 :09:54 2021 +0200 in A.java Zeile 2 hinzugefuegt commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd ( tryB ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 18 :13:48 2021 +0200 in A.java Zeile 1 hinzugefuegt commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. Das zeigt uns, dass wir am master -Branch weitergearbeitet haben und dass HEAD auf den master -Branch zeigt. Wir sehen aber auch, dass wir auf dem zweiten Commit einen Link tryB haben. Wir wollen jetzt aber auf diesem tryB -Branch arbeiten und nutzen dazu den Befehl git checkout <branch> : git checkout tryB Damit haben wir 2 Sachen getan: arbeiten wir jetzt auf einem anderen Branch, als dem master -Branch, n\u00e4mlich dem tryB -Branch und setzen wir auf den Zustand auf, den wir mit dem Commit gespeichert hatten ( 44ed3a8 ), auf den tryB zeigt. Den 2. Punkt k\u00f6nnen wir \u00fcberpr\u00fcfen, indem wir uns die Datei Projekt1/src/A.java anschauen. Die sieht n\u00e4mlich jetzt (wieder) so aus: // Zeile 1 hinzugefuegt // Wir f\u00fcgen nun das Gleiche in die Projekt1/src/B.java ein: // Zeile 1 hinzugefuegt // und committen diese \u00c4nderung: git commit -am \"in B.java Zeile 1 hinzugefuegt\" Die Commits lassen wir uns zun\u00e4chst mit git log anzeigen: commit e754d18f0d8cb1e8593edca740fa75b84d5de30f ( HEAD -> tryB ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Sat Apr 3 09 :56:28 2021 +0200 in B.java Zeile 1 hinzugefuegt commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 18 :13:48 2021 +0200 in A.java Zeile 1 hinzugefuegt commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. Wir sehen, dass alle Commits aufgelistet werden, die bis zum aktuellen HEAD f\u00fchren. Es fehlt aber beispielsweise das Commit, das bereits f\u00fcr den master -Branch ausgef\u00fchrt wurde und in dem in Projekt1/src/A.java bereits Zeile 2 hinzugefuegt wurde. Um sich alle Commits auszugeben und sogar eine Graph-\u00e4hnliche Darstellung zu erhalten, verwenden wir git log --all --graph Wir erhalten folgende Ausgabe: * commit e754d18f0d8cb1e8593edca740fa75b84d5de30f ( HEAD -> tryB ) | Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 09 :56:28 2021 +0200 | | in B.java Zeile 1 hinzugefuegt | | * commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde ( master ) | / Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 09 :09:54 2021 +0200 | | in A.java Zeile 2 hinzugefuegt | * commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd | Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Fri Apr 2 18 :13:48 2021 +0200 | | in A.java Zeile 1 hinzugefuegt | * commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. und daraus erkennt man, dass unser Repository (die Commit-Hostorie) derzeit so aussieht:","title":"git branch und git ckeckout - Branches in Git"},{"location":"git/#git-merge-branches-zusammenfuhren","text":"Wir haben folgende Situation: ausgehend von Commit 44ed3a8 ( in A.java Zeile 1 hinzugefuegt ) haben wir auf dem master -Branch weitergearbeitet und dort ein Commit 9c869b6 ( in A.java Zeile 2 hinzugefuegt ) erstellt und parallel dazu auf dem tryB -Branch gearbeitet und dort ein Commit e754d18 ( in B.java Zeile 1 hinzugefuegt ) erstellt. Nun wollen wir beide Branches wieder zusammenf\u00fchren, um mit beiden \u00c4nderungen weiterzuarbeiten. Das Zusammenf\u00fchren von Branches erfolgt mithilfe von git merge <branchToMerge> . Wir wollen gerne den tryB -Branch in den master -Branch mergen , um dann mit dem master -Branch weiterzuarbeiten. Dazu wechseln wir zun\u00e4chst in den master -Branch. das erreichen wir, indem wir checkout verwenden: git checkout master Die Ausgabe ist Zu Branch 'master' gewechselt Nun mergen wir diesen mit dem tryB -Branch, indem wir git merge tryB eingeben. Wichtig ist, dass es sich hierbei auch um ein erzwungenes Commit (sogenanntes Merge-Commit ) handelt, da beide Branches eigene Commits enthielten. Es wird uns eine Commit-nachricht angeboten. Mit ZZ verlassen wir den vi . Wenn wir uns nun die Commit-Logs ausgeben lassen ( git log --all --graph ), dann erhalten wir folgende Ausgabe * commit 7ffabf8646580d6bb2ba289de93e6fe20b894084 ( HEAD -> master, tryB ) | \\ Merge: e754d18 9c869b6 | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 16 :21:12 2021 +0200 | | | | Merge branch 'master' into tryB | | | * commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 09 :09:54 2021 +0200 | | | | in A.java Zeile 2 hinzugefuegt | | * | commit e754d18f0d8cb1e8593edca740fa75b84d5de30f | / Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 09 :56:28 2021 +0200 | | in B.java Zeile 1 hinzugefuegt | * commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd | Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Fri Apr 2 18 :13:48 2021 +0200 | | in A.java Zeile 1 hinzugefuegt | * commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. und erkennen, dass die beiden Branches nun wieder \"vereint\" sind: Wenn wir uns A.java anschauen, dann sehen wir, dass diese Datei 2 Zeilen enth\u00e4lt und die Datei B.java eine. Beide sind also auf dem aktuellsten Stand. Wir \u00fcben Mergen an dieser Stelle nochmal und bilden 2 Branches, in dem einen erstellen wir uns eine \"Klasse\" C.java und in dem anderen eine D.java : git branch classC git branch classD git checkout classC touch Projekt1/src/C.java echo \"// Zeile 1 hinzugefuegt\" >> Projekt1/src/C.java git add Projekt1/src/C.java git commit -m \"in C.java Zeile 1 hinzugefuegt\" git checkout classD touch Projekt1/src/C.java echo \"// Zeile 1 hinzugefuegt\" >> Projekt1/src/D.java git add Projekt1/src/D.java git commit -m \"in D.java Zeile 1 hinzugefuegt\" git checkout master git merge classC Hierbei handelt es sich um ein sogenanntes Fast-Forward-Commit , da der master -Branch keine eigenen \u00c4nderungen enthielt, sondern nur die \u00c4nderungen des classC -Branches in den master -Branch eingef\u00fcgt werden m\u00fcssen. Es gibt hier keine potenziellen Konflikte. Wenn wir nun aber auch den classD -Branch in den master -Branch mergen wollen, enth\u00e4lt sowohl der master -Branch \u00c4nderungen ( C.java ) als auch der classD -Branch ( D.java ). Hierbei handelt es sich also um ein Merge-Commit : git merge classD vi \u00f6ffnet und wir k\u00f6nnen die Commit-Message \u00e4ndern oder sie so lassen. Wir beenden den vi wieder mit ZZ . git log --all --graph zeigt: * commit 15d5e0b00f2a4af5eaa4d84ba55e340f912ccb42 ( HEAD -> master ) | \\ Merge: 0d86294 01f8dfd | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 17 :12:18 2021 +0200 | | | | Merge branch 'classD' | | | * commit 01f8dfd9c68148c984db99dec980d227f1fe4044 ( classD ) | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 17 :05:46 2021 +0200 | | | | in D.java Zeile 1 hinzugefuegt | | * | commit 0d8629458ca0a5e244c121be525f8e647b5c6bd9 ( classC ) | / Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 16 :51:14 2021 +0200 | | in C.java Zeile 1 hinzugefuegt | * commit 7ffabf8646580d6bb2ba289de93e6fe20b894084 ( tryB ) | \\ Merge: e754d18 9c869b6 | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 16 :21:12 2021 +0200 | | | | Merge branch 'master' into tryB | | | * commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 09 :09:54 2021 +0200 | | | | in A.java Zeile 2 hinzugefuegt | | * | commit e754d18f0d8cb1e8593edca740fa75b84d5de30f | / Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 09 :56:28 2021 +0200 | | in B.java Zeile 1 hinzugefuegt | * commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd | Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Fri Apr 2 18 :13:48 2021 +0200 | | in A.java Zeile 1 hinzugefuegt | * commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. Die Commit-Historie unseres Repositories sieht so aus: Eine umfangreiche Beschreibung aller \u00c4nderungen in den jeweiligen Commits erhalten Sie auch durch den Befehl git show --pretty=fuller --abbrev-commit .","title":"git merge - Branches zusammenf\u00fchren"},{"location":"git/#konflikte-auflosen","text":"Gerade bei der Arbeit im Team kann es passieren, dass in verschiedenen Branches an der gleichen Datei \u00c4nderungen durchgef\u00fchrt werden. Wenn diese Branches dann \"gemerged\" werden sollen, kann Git diesen Konflikt nicht alleine aufl\u00f6sen (soll \u00c4nderung A gelten oder \u00c4nderung B oder beide?). Die Aufl\u00f6sung eines solchen Konfliktes muss durch die Entwicklerinnen geschehen. Zur Demonstration erzeugen wir uns erneut zwei Branches, changeA1 und changeA2 und f\u00fchren in beiden Branches eine \u00c4nderung an Projekt1/src/A.java durch: git branch changeA1 git branch changeA2 git checkout changeA1 echo \"// eine \u00c4nderung durch Entwicklerin A\" >> Projekt1/src/A.java git commit -am \"in A eine \u00c4nderung durch Entwicklerin A\" git checkout changeA2 echo \"// eine \u00c4nderung durch Entwicklerin B\" >> Projekt1/src/A.java git commit -am \"in A eine \u00c4nderung durch Entwicklerin B\" Wenn wir jetzt versuchen, die beiden Branches mit git merge changeA1 zu mergen, dann erhalten wir folgende Ausgabe: automatischer Merge von Projekt1/src/A.java KONFLIKT ( Inhalt ) : Merge-Konflikt in Projekt1/src/A.java Automatischer Merge fehlgeschlagen ; beheben Sie die Konflikte und committen Sie dann das Ergebnis. Git kann diesen Konflikt nicht automatisch aufl\u00f6sen. Die Ausgabe von git status hilft dabei nicht wirklich weiter: Auf Branch changeA2 Sie haben nicht zusammengef\u00fchrte Pfade. ( beheben Sie die Konflikte und f\u00fchren Sie \"git commit\" aus ) ( benutzen Sie \"git merge --abort\" , um den Merge abzubrechen ) Nicht zusammengef\u00fchrte Pfade: ( benutzen Sie \"git add/rm <Datei>...\" , um die Aufl\u00f6sung zu markieren ) von beiden ge\u00e4ndert: Projekt1/src/A.java keine \u00c4nderungen zum Commit vorgemerkt ( benutzen Sie \"git add\" und/oder \"git commit -a\" ) Mit git log --merge k\u00f6nnen wir uns die Commits anschauen, die die \u00c4nderungen enthalten, welche f\u00fcr den Konflikt sorgen: commit da1f715199e68f17ea276b07a9c3a6e88b319e8a ( HEAD -> changeA2 ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Sun Apr 4 08 :08:13 2021 +0200 in A eine \u00c4nderung durch Entwicklerin B commit 63a9a40ab267bc53f2a688a45e6813d7c15170c6 ( changeA1 ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Sun Apr 4 08 :07:25 2021 +0200 in A eine \u00c4nderung durch Entwicklerin A Der Befehl git diff zeigt uns den Konflikt ganz konkret an: diff --cc Projekt1/src/A.java index a5c84c3,a920d29..0000000 --- a/Projekt1/src/A.java +++ b/Projekt1/src/A.java @@@ -1,4 -1,4 +1,8 @@@ // Zeile 1 hinzugefuegt // Zeile 2 hinzugefuegt // ++ <<<<<< < HEAD +// eine \u00c4nderung durch Entwicklerin B ++ ======= + // eine \u00c4nderung durch Entwicklerin A ++>>>>>>> changeA1 Diese Darstellung in der Datei finden wir auch wieder, wenn wir uns die Datei Projekt1/src/A.java anschauen: // Zeile 1 hinzugefuegt // Zeile 2 hinzugefuegt // <<<<<< < HEAD // eine \u00c4nderung durch Entwicklerin B ======= // eine \u00c4nderung durch Entwicklerin A >>>>>>> changeA1 In unserer Konflikt-Datei gibt es folgende drei Eintr\u00e4ge: <<<<<<< HEAD ======= >>>>>>> changeA1 Aller Inhalt zwischen den ersten beiden Zeilen enth\u00e4lt die \u00c4nderungen des aktuellen Branches und alle \u00c4nderungen zwischen den letzten beiden Zeilen enth\u00e4lt alle \u00c4nderungen des Branches, in den gemerged werden soll ( changeA1 ). Entwicklungsumgebungen (IntelliJ, Eclipse, Atom, Visual Studio Code usw.) unterst\u00fctzen bei der Aufl\u00f6sung solcher Konflikte. Wir \u00fcbernehmen einfach beide \u00c4nderungen h\u00e4ndisch und committen diese \u00c4nderung. Projekt1/src/A.java sieht also jetzt so aus: // Zeile 1 hinzugefuegt // Zeile 2 hinzugefuegt // // eine \u00c4nderung durch Entwicklerin B // eine \u00c4nderung durch Entwicklerin A und der Commit: git commit -am \"Merge-Konflikt in A.java geloest. Aenderungen A UND B eingefuegt\" .","title":"Konflikte aufl\u00f6sen"},{"location":"git/#merge-abbrechen","text":"Sollten Sie aufgrund der Konfliktmeldung den Merge-Vorgang doch nicht durchf\u00fchren wollen, k\u00f6nnen Sie mit git merge --abort den Merge abbrechen und mit git reset die in Konflikt stehenden Dateien auf einen als funktionierend bekannten Zustand zur\u00fcckzusetzen.","title":"Merge abbrechen"},{"location":"git/#git-stash-arbeit-unterbrechen","text":"Angenommen, Sie haben bereits \u00c4nderungen durchgef\u00fchrt, diese sind aber noch nicht \"fertig\" und Sie wollen Sie deshalb noch nicht committen. Stattdessen m\u00fcssen Sie aber an anderer Stelle zun\u00e4chst noch einen BugFix erledigen. Dann k\u00f6nnen Sie Ihre gegenw\u00e4rtigen \u00c4nderungen \"stashen\" - in einen Stash-Modus setzen, also erstmal verstauen , um daran sp\u00e4ter weiterzuarbeiten: git stash Jetzt k\u00f6nnen Sie erstmal andere \u00c4nderungen durchf\u00fchren und committen und um dann wieder zu Ihren urspr\u00fcnglichen \u00c4nderungen zur\u00fcckzukehren, holen Sie diese wieder aus dem Stash-Modus: git stash pop","title":"git stash - Arbeit unterbrechen"},{"location":"git/#einige-weitere-nutzliche-befehle","text":"Angenommen, Sie haben committed, aber einige \u00c4nderungen vergessen (entweder vorher nicht geadded oder noch gar nicht ge\u00e4ndert), dann k\u00f6nnen Sie den vorherigen Commit \"\u00fcberschreiben\". git commit -m \"zu frueh committed\" // jetzt noch die Aenderungen hinzufuegen git commit --amend Angenommen, Sie haben seit dem letzten Commit \u00c4nderungen an Dateien vorgenommen, die Sie aber gerne verwerfen m\u00f6chten. Sie werden in der Literatur daf\u00fcr Befehle finden, wie z.B. git checkout HEAD oder git reset --hard . Sie sollten damit \u00e4u\u00dferst vorsichtig sein! Bei git checkout HEAD (aslo dem \"Zur\u00fccksetzen\" auf das letzte Commit) bleiben die ge\u00e4nderten Dateien \"modifiziert\". Das hilft also gar nicht wirklich. git reset --hard kann Sie unter Umst\u00e4nden auf ein Commit zur\u00fccksetzen, das noch weiter zur\u00fcck in der Historie liegt, als Sie planen. Verwenden Sie zum Zur\u00fccksetzen Ihrer \u00c4nderungen (Undo) besser git restore <dateiUndo> Geben Sie also die Datei an, die Sie ge\u00e4ndert haben und die wieder auf den Zustand des letzten Commits zur\u00fcckgesetzt werden soll. L\u00f6schen Sie niemals einfach Dateien oder Ordner in dem durch Git verwalteten Ordner (Ihrem Repository) \u00fcber den Finder oder den Dateiexplorer! Die Idee von Git ist die, dass immer nur etwas hinzukommt. Selbst, wenn Sie eine bestimmte Datei nicht mehr ben\u00f6tigen, so kann es ja doch sein, dass diese in fr\u00fcheren Versionen vorkommt. Lassen Sie sie einfach im Verzeichnis!","title":"Einige weitere n\u00fctzliche Befehle"},{"location":"git/#aliases","text":"Es ist ganz hilfreich, sich f\u00fcr einige Optionen Aliase zu definieren, da diese oft verwendet werden. Dazu nutzen Sie git config . Hier einige Beispiele von n\u00fctzlichen Aliases (aus dem Git-Buch ): git config --global alias.co checkout git config --global alias.br branch git config --global alias.ci commit git config --global alias.st status","title":"Aliases"},{"location":"git/#git-als-kollaborationswerkzeug","text":"Im vorherigen Abschnitt haben wir diskutiert, wie wir Git zur Versionsverwaltung verwenden k\u00f6nnen. Dazu haben wir ein lokales Git-Repository angelegt. Nun wollen wir betrachten, wie Git als Kollaborationswerkzeug eingesetzt werden kann, d.h. wie mehere Entwicklerinnen zusammen an einem (globalen) Git-Repository arbeiten k\u00f6nnen. Dazu ben\u00f6tigen wir einen Host (Bereitsteller netzbasierter Dienste), der ein zentrales Git-Repository zur Verf\u00fcgung stellen kann. Es gibt mehrere solcher Git-Hosts. Die bekanntesten sind: GitHub GitLab Bibucket Wir zeigen das Verwenden eines zentralen Repositories exemplarisch f\u00fcr GitHub . Sie m\u00fcssen sich in GitHub registrieren . Die Verwendung von GitHub ist kostenlos . Die Idee eines zentralen Repositorys ist die, dass daran mehrere lokale Repositories angebunden sein k\u00f6nnen: \u00dcber das zentrale Repository werden alle lokalen Repositories synchronisiert, so dass alle Repositories \u00fcber den gleichen Stand, d.h. alle Dateien und Ordner sowie die gleiche Commit-Historie verf\u00fcgen. Wichtig ist jedoch, dass man zum Entwickeln nicht permanent online sein muss. Vielmehr kann man beliebig lange offline auf dem eigenen lokalen Repository arbeiten, bis man irgendwann seine \u00c4nderungen in das zentrale Repository schreiben ( push ) bzw. dort abgelegte \u00c4nderungen aus anderen lokalen Repositories lesen ( pull ) m\u00f6chte.","title":"Git als Kollaborationswerkzeug"},{"location":"git/#ein-zentrales-repository-anlegen","text":"Sie loggen sich in GitHub (oder dem von Ihnen gew\u00e4hlten Diensteanbieter) ein und klicken auf \"New\": Dann geben Sie einen sprechenden Namen f\u00fcr das Repository ein. Sie k\u00f6nnen w\u00e4hlen, ob das Repository Public (f\u00fcr alle lesbar) oder Private (nur f\u00fcr Eingeladene lesbar) sein soll. Die darunter stehenden Checkboxen sollten Sie nicht anklicken, da Sie ein bereits existierendes lokales Repository mit diesem zentralen Repository verbinden wollen. In Ihrem lokalen Repository haben Sie ja wahrscheinlich bereits eine .gitignore -Datei. W\u00fcrden Sie diese Checkboxen markieren, m\u00fcssten Sie bereits ganz am Anfang mergen . Klicken Sie auf den Button Create repository . Das zentrale Repository ist nun erstellt. Nun m\u00fcssen wir nur noch vorgehen, wie auf der Seite angegeben: Im Terminal f\u00fchren wir im workspace -Ordner (in unserem lokalen Repository - der Ordner, der den .git -Ordner enth\u00e4lt) den Befehl git remote add origin https://github.com/jfreiheit/einfuehrung-git.git aus. https://github.com/jfreiheit/einfuehrung-git.git entspricht dabei der sogenannten Remote-URL und lautet bei Ihnen nat\u00fcrlich anders. Es ist der Pfad (die URL) zu Ihrem zentralen Git-Repository. Mit diesem Befehl verbinden wir unser lokales Git-Repository mit dem zentralen Git-Repository. Wir geben dem zentralen Git-Repository dabei den Namen origin . Den n\u00e4chsten von GitHub vorgeschlagenen Befehl git branch -M main k\u00f6nnen wir ebenfalls ausf\u00fchren. Wir wissen bereits, dass wir damit einen neuen Branch erstellen, n\u00e4mlich main . Wir verlassen also den master -Branch und wechseln zu einem neuen main -Branch. Das kann man machen, muss man aber nicht. Die Option -M steht f\u00fcr --move --force . Damit bestimmen wir, dass wir einen main -Branch erstellen, selbst wenn dieser bereits existierte. Siehe auch die Dokumentation f\u00fcr git branch . Der dritte von GitHub vorgeschlagene Befehl git push -u origin main bewirkt, dass unser komplettes lokales Git-Repository auf das zentrale Git-Repository gespielt wird. Das hei\u00dft, der aktuelle Branch main wird auf das zentrale Git-Repository origin gepushed . Nach Ausf\u00fchrung dieses Befehls ist das zentrale Repository auf dem selben Stand wie das lokale Repository.","title":"Ein zentrales Repository anlegen"},{"location":"git/#alltag-mit-git","text":"Ihr lokales Repository ist nun mit dem zentralen Repository verkn\u00fcpft. Wenn Sie jetzt \u00c4nderungen an Ihrem Code (Ihrem lokalen Repository) durchf\u00fchren und diese \u00c4nderungen auf dem zentralen Repository speichern wollen, sieht Ihr \"Alltag\" wie folgt aus.","title":"Alltag mit Git"},{"location":"git/#git-add-eine-neue-datei-hinzufugen","text":"Angenommen, Sie erstellen eine neue Klasse (Datei), z.B. Projekt1/src/E.java , dann f\u00fcgen Sie diese neue Datei mit git add <neueDatei> Ihrem lokalen Repository hinzu: git add Projekt1/src/E.java Wenn Sie sich dann mit git status den Status des Repositorys anschauen, erhalten Sie Auf Branch main Ihr Branch ist auf demselben Stand wie 'origin/main' . Zum Commit vorgemerkte \u00c4nderungen: ( benutzen Sie \"git restore --staged <Datei>...\" zum Entfernen aus der Staging-Area ) neue Datei: Projekt1/src/E.java Neue Dateien f\u00fcgen Sie mittels git add <neueDatei> dem Repository hinzu.","title":"git add - eine neue Datei hinzuf\u00fcgen"},{"location":"git/#git-commit-anderungen-speichern","text":"Angenommen, Sie haben \u00c4nderungen an Dateien hinzugef\u00fcgt, diese Dateien sind aber bereits Teil des Repositorys (wurden also bereits bei Erstellung mit git add hinzugef\u00fcgt). Dann speichern Sie diese \u00c4nderungen mit git commit -am \"Commit-Message\" . Angenommen, wir haben in Projekt1/src/E.java 2 Zeilen hinzugef\u00fcgt, dann committen wir diese \u00c4nderungen z.B. mit git commit -am \"in E.java 2 Zeilen hinzugefuegt\" Die Option -m steht daf\u00fcr, dass wir gleich die Commit-Message mit angeben. Fehlt diese Option, \u00f6ffnet sich ein vi und wir f\u00fcgen die Commit-Message nachtr\u00e4glich hinzu. Den vi verlassen wir mit ZZ . Die Option -a steht f\u00fcr add . Jede \u00c4nderung muss zun\u00e4chst hinzugef\u00fcgt werden. H\u00e4ufig sieht man daf\u00fcr die Verwendung des Befehls git add . . Das l\u00e4sst sich aber mit der Option -a auch beim Commit selbst erledigen. Wenn Sie sich dann mit git status den Status des Repositorys anschauen, erhalten Sie Auf Branch main Ihr Branch ist 1 Commit vor 'origin/main' . ( benutzen Sie \"git push\" , um lokale Commits zu publizieren ) nichts zu committen, Arbeitsverzeichnis unver\u00e4ndert \u00c4nderungen am Code (Repository) \"committen\" (speichern) Sie mittels git commit -am \"Commit-Message\" .","title":"git commit - \u00c4nderungen \"speichern\""},{"location":"git/#git-push-anderungen-auf-das-zentrale-repository-spielen","text":"Sie k\u00f6nnen beliebig lange und oft Ihr lokales Repository \u00e4ndern, wie im Abschnitt Git als Versionierungswerkzeug beschrieben. Wenn Sie Ihr lokales Repository auf Ihr zentrales Repository spielen m\u00f6chten, verwenden Sie den Befehl git push . Damit stellen Sie das zentrale Repository auf den Stand Ihres lokalen Repositorys. git push ergibt folgende Ausgabe: Objekte aufz\u00e4hlen: 8 , fertig. Z\u00e4hle Objekte: 100 % ( 8 /8 ) , fertig. Delta-Kompression verwendet bis zu 8 Threads. Komprimiere Objekte: 100 % ( 3 /3 ) , fertig. Schreibe Objekte: 100 % ( 5 /5 ) , 439 Bytes | 439 .00 KiB/s, fertig. Gesamt 5 ( Delta 1 ) , Wiederverwendet 0 ( Delta 0 ) , Pack wiederverwendet 0 remote: Resolving deltas: 100 % ( 1 /1 ) , completed with 1 local object. To https://github.com/jfreiheit/einfuehrung-git.git 15d5e0b..6ddd0dc main -> main Damit \u00fcbernimmt das zentrale Repository den Stand des lokalen Repositorys. Um das zentrale Repository auf den Stand Ihres lokalen Repositorys zu bringen, verwenden Sie git push . Das hei\u00dft, wenn Sie alleine an Ihrem zenztralen Repository arbeiten, m\u00fcssen sie sich nur folgende Befehle merken: git add <datei> // falls die Datei neu erstellt wurde und Ihrem Repository bekannt gemacht (hinzugef\u00fcgt) werden soll git commit -am \"Commit-Message\" // um die \u00c4nderungen ins lokale Repository zu \"speichern\" git push // um das zentrale Repository auf den Stand des lokalen Repositorys zu bringen So sieht einfach sieht der Alltag aus, wenn Sie alleine am (zentralen) Repository arbeiten.","title":"git push - \u00c4nderungen auf das zentrale Repository spielen"},{"location":"git/#ein-existierendes-zentrales-repository-verwenden","text":"Angenommen, jemand anderer besitzt ein zentrales Repository und m\u00f6chte den Code mit Ihnen teilen - angenommen, ich m\u00f6chte mit Ihnen den Code aus meinem Repository https://github.com/jfreiheit/einfuehrung-git.git teilen. Sie k\u00f6nnen dieses Repository klonen (kopieren), indem sie einmalig git clone https://github.com/jfreiheit/einfuehrung-git.git eingeben. Dadurch erstellen Sie sich ein lokales Repository, das einer identischen Kopie (einem Clone) des zentralen Repositorys https://github.com/jfreiheit/einfuehrung-git.git entspricht. Dieses lokale Repository ist dann bereits auch mit dem zentralen Repository verbunden. Angenommen, ich f\u00fchre nun \u00c4nderungen an diesem zentralen Repository durch und somit einige Commits. Damit diese \u00c4nderungen auch Ihrem lokalen Repository bekannt werden, f\u00fchren Sie git pull aus. Damit \"holen\" Sie sich den aktuellen Stand des zentralen Repositories.","title":"Ein existierendes zentrales Repository verwenden"},{"location":"git/#nutzliche-links-zu-git","text":"Git Dokumentation Git Buch Lerne Git mit Bitbucket Cloud Git-Tutorial: Git und die wichtigsten Befehle kennenlernen Learn Git Branching Git - Der einfache Einstieg","title":"N\u00fctzliche Links zu Git"},{"location":"hilfen/","text":"Hilfen \u00b6 Hier erl\u00e4utern wir in losem Zusammenhang einzelne Aspekte.","title":"Hilfen"},{"location":"hilfen/#hilfen","text":"Hier erl\u00e4utern wir in losem Zusammenhang einzelne Aspekte.","title":"Hilfen"},{"location":"mdarrays/","text":"Mehrdimensionale Arrays \u00b6 Arrays sind Objekte. Der Typ eines Arrays ergibt sich aus TypDerElemente[] Wir geben also den Typ der Elemente an (alle Elemente in einem Array sind vom selben Typ) und schreiben eckige Klammern [] dahinter. Dabei kann der Typ der Elemente sowohl ein Wertetyp sein als auch ein Referenztyp. Es k\u00f6nnte also sein, dass der Typ der Elemente selbst wieder ein Array ist. Wir w\u00fcrden dann f\u00fcr TypDerElemente[] f\u00fcr den Typ selbst wieder ein TypDerElemente[] einsetzen und bek\u00e4men TypDerElemente[][] . Und genau das geht auch - wir sprechen von mehrdimensionalen Arrays: Wir werden zweidimensionale Arrays betrachten. Vorstellen k\u00f6nnen wir uns gerade noch dreidimensionale, aber h\u00f6here Dimensionen sollten wir gar nicht verwenden, da dies eigentlich nur mit Fehlern behaftet sein kann. In zweidiemensionalen Arrays haben wir nun anstelle eines Indexes zwei. Man kann sich diese Indizes so verstellen, als w\u00fcrde der eine Index die Spalten nummerieren und der andere die Zeilen. Welcher Index wof\u00fcr staht, bleibt Ihnen \u00fcberlassen. Wir betrachten ein einf\u00fchrendes Beispiel: zweidimensionales Array f\u00fcr das kleine Einmaleins 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public static void main ( String [] args ) { int anzZeilen = 10 ; int anzSpalten = 10 ; int [][] einmaleins = new int [ anzZeilen ][ anzSpalten ] ; for ( int i = 0 ; i < einmaleins . length ; i ++ ) { for ( int j = 0 ; j < einmaleins [ i ] . length ; j ++ ) { einmaleins [ i ][ j ]= ( i + 1 ) * ( j + 1 ); } } } In Zeile 6 wird das zweidiensionale int -Array deklariert ( int[][] einmaleins ) und auch gleichzeitig erzeugt ( new int[anzZeilen][anzSpalten] ). Das passiert genau so, wie wir es bereits von den eindimensionalen Arrays kennen, nur dass wir nun zwei Klammerpaare ( [][] ) und zwei Indizes haben. Da wir zwei Indizes haben, haben wir auch eine verschachtelte for -Schleife, um alle Elemente des Arrays betrachten zu k\u00f6nnen. Die Wertzuweisung erfolgt in Zeile 12 . Beachten Sie, dass die Abbruchbedingung der \u00e4u\u00dferen for -Schleife die Anzahl der Zeilen ermittelt ( einmaleins.length ) und in der inneren for -Schleife die Anzahl der Spalten in jeder Zeile ( einmaleins[i].length ) abgefragt wird. Den Zugriff auf ein solches zweidimensionales Array kann man sich so vorstellen: Der erste Index gibt danach die jeweilige Zeile an und der zweite die Spalte. Das bleibt aber Ihrer Interpretation \u00fcberlassen - k\u00f6nnte auch genau andersherum sein. Manche stellen sich ja ein eindimensionales Array auch vertikal vor und andere horizontal. Wichtig ist nur, dass Sie sich f\u00fcr eine Interpretation entscheiden und diese dann auch konsistent umsetzen. Zur Festigung f\u00fcgen wir in den obigen Code noch eine Ausgabe des zweidimensionalen Arrays ein: Einmaleins mit Ausgabe 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public static void main ( String [] args ) { int anzZeilen = 10 ; int anzSpalten = 10 ; int [][] einmaleins = new int [ anzZeilen ][ anzSpalten ] ; // Wertezuweisungen for ( int i = 0 ; i < einmaleins . length ; i ++ ) { for ( int j = 0 ; j < einmaleins [ i ] . length ; j ++ ) { einmaleins [ i ][ j ]= ( i + 1 ) * ( j + 1 ); } } // Ausgabe auf Konsole for ( int i = 0 ; i < einmaleins . length ; i ++ ) { for ( int j = 0 ; j < einmaleins [ i ] . length ; j ++ ) { System . out . printf ( \"%4d\" , einmaleins [ i ][ j ] ); } System . out . println (); } } ergibt folgnde Ausgabe: 1 2 3 4 5 6 7 8 9 10 2 4 6 8 10 12 14 16 18 20 3 6 9 12 15 18 21 24 27 30 4 8 12 16 20 24 28 32 36 40 5 10 15 20 25 30 35 40 45 50 6 12 18 24 30 36 42 48 54 60 7 14 21 28 35 42 49 56 63 70 8 16 24 32 40 48 56 64 72 80 9 18 27 36 45 54 63 72 81 90 10 20 30 40 50 60 70 80 90 100 Wir werden zweidimensionale Arrays in \u00dcbung 1 noch weiter \u00fcben.","title":"Mehrdimensionale Arrays"},{"location":"mdarrays/#mehrdimensionale-arrays","text":"Arrays sind Objekte. Der Typ eines Arrays ergibt sich aus TypDerElemente[] Wir geben also den Typ der Elemente an (alle Elemente in einem Array sind vom selben Typ) und schreiben eckige Klammern [] dahinter. Dabei kann der Typ der Elemente sowohl ein Wertetyp sein als auch ein Referenztyp. Es k\u00f6nnte also sein, dass der Typ der Elemente selbst wieder ein Array ist. Wir w\u00fcrden dann f\u00fcr TypDerElemente[] f\u00fcr den Typ selbst wieder ein TypDerElemente[] einsetzen und bek\u00e4men TypDerElemente[][] . Und genau das geht auch - wir sprechen von mehrdimensionalen Arrays: Wir werden zweidimensionale Arrays betrachten. Vorstellen k\u00f6nnen wir uns gerade noch dreidimensionale, aber h\u00f6here Dimensionen sollten wir gar nicht verwenden, da dies eigentlich nur mit Fehlern behaftet sein kann. In zweidiemensionalen Arrays haben wir nun anstelle eines Indexes zwei. Man kann sich diese Indizes so verstellen, als w\u00fcrde der eine Index die Spalten nummerieren und der andere die Zeilen. Welcher Index wof\u00fcr staht, bleibt Ihnen \u00fcberlassen. Wir betrachten ein einf\u00fchrendes Beispiel: zweidimensionales Array f\u00fcr das kleine Einmaleins 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public static void main ( String [] args ) { int anzZeilen = 10 ; int anzSpalten = 10 ; int [][] einmaleins = new int [ anzZeilen ][ anzSpalten ] ; for ( int i = 0 ; i < einmaleins . length ; i ++ ) { for ( int j = 0 ; j < einmaleins [ i ] . length ; j ++ ) { einmaleins [ i ][ j ]= ( i + 1 ) * ( j + 1 ); } } } In Zeile 6 wird das zweidiensionale int -Array deklariert ( int[][] einmaleins ) und auch gleichzeitig erzeugt ( new int[anzZeilen][anzSpalten] ). Das passiert genau so, wie wir es bereits von den eindimensionalen Arrays kennen, nur dass wir nun zwei Klammerpaare ( [][] ) und zwei Indizes haben. Da wir zwei Indizes haben, haben wir auch eine verschachtelte for -Schleife, um alle Elemente des Arrays betrachten zu k\u00f6nnen. Die Wertzuweisung erfolgt in Zeile 12 . Beachten Sie, dass die Abbruchbedingung der \u00e4u\u00dferen for -Schleife die Anzahl der Zeilen ermittelt ( einmaleins.length ) und in der inneren for -Schleife die Anzahl der Spalten in jeder Zeile ( einmaleins[i].length ) abgefragt wird. Den Zugriff auf ein solches zweidimensionales Array kann man sich so vorstellen: Der erste Index gibt danach die jeweilige Zeile an und der zweite die Spalte. Das bleibt aber Ihrer Interpretation \u00fcberlassen - k\u00f6nnte auch genau andersherum sein. Manche stellen sich ja ein eindimensionales Array auch vertikal vor und andere horizontal. Wichtig ist nur, dass Sie sich f\u00fcr eine Interpretation entscheiden und diese dann auch konsistent umsetzen. Zur Festigung f\u00fcgen wir in den obigen Code noch eine Ausgabe des zweidimensionalen Arrays ein: Einmaleins mit Ausgabe 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public static void main ( String [] args ) { int anzZeilen = 10 ; int anzSpalten = 10 ; int [][] einmaleins = new int [ anzZeilen ][ anzSpalten ] ; // Wertezuweisungen for ( int i = 0 ; i < einmaleins . length ; i ++ ) { for ( int j = 0 ; j < einmaleins [ i ] . length ; j ++ ) { einmaleins [ i ][ j ]= ( i + 1 ) * ( j + 1 ); } } // Ausgabe auf Konsole for ( int i = 0 ; i < einmaleins . length ; i ++ ) { for ( int j = 0 ; j < einmaleins [ i ] . length ; j ++ ) { System . out . printf ( \"%4d\" , einmaleins [ i ][ j ] ); } System . out . println (); } } ergibt folgnde Ausgabe: 1 2 3 4 5 6 7 8 9 10 2 4 6 8 10 12 14 16 18 20 3 6 9 12 15 18 21 24 27 30 4 8 12 16 20 24 28 32 36 40 5 10 15 20 25 30 35 40 45 50 6 12 18 24 30 36 42 48 54 60 7 14 21 28 35 42 49 56 63 70 8 16 24 32 40 48 56 64 72 80 9 18 27 36 45 54 63 72 81 90 10 20 30 40 50 60 70 80 90 100 Wir werden zweidimensionale Arrays in \u00dcbung 1 noch weiter \u00fcben.","title":"Mehrdimensionale Arrays"},{"location":"uebungen/","text":"\u00dcbungen \u00b6 \u00dcbung 1 (Git) \u00b6 \u00dcbung 1 Erstellen Sie sich einen GitHub-Account (oder w\u00e4hlen Sie einen anderen Git-Diensteanbieter) Erstellen Sie sich dort ein zentrales Repository Richten Sie Ihren workspace , in dem Sie alle Ihre Entwicklungen in diesem Semester durchf\u00fchren wollen (\u00dcbungen, Aufgaben, ...) als lokales Git-Repository ein Synchroniseren Sie Ihr lokales und Ihr zentrales Git-Repository \u00dcbung 2 (enum und zweidimensionale Arrays) \u00b6 \u00dcbung 2 Gegeben ist die folgende Klasse TicTacToe : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package uebungen.uebung2 ; public class TicTacToe { enum State { EMPTY , RED , BLACK }; State [][] field ; public TicTacToe () { field = new State [ 3 ][ 3 ] ; for ( int i = 0 ; i < field . length ; i ++ ) for ( int j = 0 ; j < field [ i ] . length ; j ++ ) field [ i ][ j ]= State . EMPTY ; } public void makeMove ( int i , int j , State player ) { if ( field [ i ][ j ]== State . EMPTY && player != State . EMPTY ) field [ i ][ j ]= player ; } } F\u00fcgen Sie alle notwendigen Klammern { } ein, so dass die Anweisungsbl\u00f6cke korrekt geklammert sind. Erweitern Sie die Klasse TicTacToe um eine print() -Methode, die das Spielfeld auf die Konsole ausgibt (Setzen Sie z.B. f\u00fcr den Player RED ein x und f\u00fcr den Player Black ein o und f\u00fcr EMPTY ein Leerzeichen oder ein - ). Die Ausgabe nach jeweils 2 Z\u00fcgen von RED und BLACK k\u00f6nnte dann z.B. so aussehen: - o o - x - - - x Erweitern Sie die Klasse TicTacToe um eine gewonnen() -Methode ( true , wenn ein Spieler drei Felder horizontal, diagonal oder vertikal belegt hat; ansonsten false ). Erweitern Sie die Klasse TicTacToe um eine unentschieden() -Methode ( true , wenn alle Felder besetzt sind, aber kein Spieler gewonnen hat; ansonsten false ). Erstellen Sie eine Test-Klasse mit main() -Methode. Erstellen sie darin ein Objekt der Klasse TicTacToe . F\u00fchren Sie Z\u00fcge aus ( makeMove() ) und pr\u00fcfen Sie, ob gewonnen wurde oder unentschieden ist (mit entsprechenden Ausgaben). F\u00fcr 6. m\u00fcssen Sie in der Testklasse Ihr enum State importieren. Warum ist das so? Was k\u00f6nnten Sie machen, damit das nicht notwendig ist? Zusatz: Sie k\u00f6nnen die Klasse TicTacToe beliebig erweitern, z.B.: um Ausgaben, wenn gewonnen bzw. es unentschieden ist, um Fehler in den Indizes i und j bei der makeMove() -Methode abzufangen, eine Methode spielen() implementieren, die zuf\u00e4llig f\u00fcr die Spieler die Steine setzt usw. Viel Spa\u00df!","title":"\u00dcbungen"},{"location":"uebungen/#ubungen","text":"","title":"\u00dcbungen"},{"location":"uebungen/#ubung-1-git","text":"\u00dcbung 1 Erstellen Sie sich einen GitHub-Account (oder w\u00e4hlen Sie einen anderen Git-Diensteanbieter) Erstellen Sie sich dort ein zentrales Repository Richten Sie Ihren workspace , in dem Sie alle Ihre Entwicklungen in diesem Semester durchf\u00fchren wollen (\u00dcbungen, Aufgaben, ...) als lokales Git-Repository ein Synchroniseren Sie Ihr lokales und Ihr zentrales Git-Repository","title":"\u00dcbung 1 (Git)"},{"location":"uebungen/#ubung-2-enum-und-zweidimensionale-arrays","text":"\u00dcbung 2 Gegeben ist die folgende Klasse TicTacToe : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package uebungen.uebung2 ; public class TicTacToe { enum State { EMPTY , RED , BLACK }; State [][] field ; public TicTacToe () { field = new State [ 3 ][ 3 ] ; for ( int i = 0 ; i < field . length ; i ++ ) for ( int j = 0 ; j < field [ i ] . length ; j ++ ) field [ i ][ j ]= State . EMPTY ; } public void makeMove ( int i , int j , State player ) { if ( field [ i ][ j ]== State . EMPTY && player != State . EMPTY ) field [ i ][ j ]= player ; } } F\u00fcgen Sie alle notwendigen Klammern { } ein, so dass die Anweisungsbl\u00f6cke korrekt geklammert sind. Erweitern Sie die Klasse TicTacToe um eine print() -Methode, die das Spielfeld auf die Konsole ausgibt (Setzen Sie z.B. f\u00fcr den Player RED ein x und f\u00fcr den Player Black ein o und f\u00fcr EMPTY ein Leerzeichen oder ein - ). Die Ausgabe nach jeweils 2 Z\u00fcgen von RED und BLACK k\u00f6nnte dann z.B. so aussehen: - o o - x - - - x Erweitern Sie die Klasse TicTacToe um eine gewonnen() -Methode ( true , wenn ein Spieler drei Felder horizontal, diagonal oder vertikal belegt hat; ansonsten false ). Erweitern Sie die Klasse TicTacToe um eine unentschieden() -Methode ( true , wenn alle Felder besetzt sind, aber kein Spieler gewonnen hat; ansonsten false ). Erstellen Sie eine Test-Klasse mit main() -Methode. Erstellen sie darin ein Objekt der Klasse TicTacToe . F\u00fchren Sie Z\u00fcge aus ( makeMove() ) und pr\u00fcfen Sie, ob gewonnen wurde oder unentschieden ist (mit entsprechenden Ausgaben). F\u00fcr 6. m\u00fcssen Sie in der Testklasse Ihr enum State importieren. Warum ist das so? Was k\u00f6nnten Sie machen, damit das nicht notwendig ist? Zusatz: Sie k\u00f6nnen die Klasse TicTacToe beliebig erweitern, z.B.: um Ausgaben, wenn gewonnen bzw. es unentschieden ist, um Fehler in den Indizes i und j bei der makeMove() -Methode abzufangen, eine Methode spielen() implementieren, die zuf\u00e4llig f\u00fcr die Spieler die Steine setzt usw. Viel Spa\u00df!","title":"\u00dcbung 2 (enum und zweidimensionale Arrays)"},{"location":"wiederholung/","text":"Wiederholung \u00b6 Datentypen \u00b6 Wertetypen \u00b6 es wird der konkrete Wert in der Variablen gespeichert belegen abh\u00e4ngig vom Datentyp unterschiedlich viel Arbeitsspeicher \u2192 unterschiedliche Wertebereiche Beispiele Wertetypen // boolean f\u00fcr Wahrheitswerte true und false boolean x = false ; // mit false initialisiert boolean wahr = true ; // Schluesselwort true boolean falsch = ! wahr ; // Enthaelt den Wert false // byte, short, int, long f\u00fcr ganze Zahlen byte a = 0 ; // mit 0 initialisiert short b = 124 ; // Zuweisung einer ganzen Zahl int c = a + b ; // Wertebereich immer beachten! long lo = c * 200 ; // l nicht als Variablenname verwenden // char f\u00fcr ein einzelnes Zeichen - einfache Anfuehrungszeichen! char zeichen = 'c' ; // Doppelte \" f\u00fcr Strings! // float und double f\u00fcr Flie\u00dfkommazahlen float f = 0.0f ; // Wird mit 0.0 initialisiert double d = 100.25 ; // Dezimalpunkt statt Dezimalkomma!! Referenztypen \u00b6 es wird eine Referenz auf ein Objekt gespeichert Objekte besitzen Eigenschaften: Methoden (Verhalten) und Variablen (Zustand) Zugriff auf Methoden und Variablen \u00fcber den Punkt-Operator Beispiele Referenztypen // Schluesselwort class um neue Klasse (Typ) zu definieren public class Power { int base ; // Objektvariablen, f\u00fcr jedes Objekt int exp ; // existieren Kopien im Arbeitsspeicher // Objektmethode public void print () { System . out . println ( this . base + \"^\" + this . exp ); } } // irgendwo im Hauptprogramm public static void main ( String [] args ) { Power p1 = new Power ( 2 , 4 ); Power p2 = new Power ( 2 , 4 ); p1 . print (); p2 . print (); boolean equal = ( p1 == p2 ); // true oder false ? } Datenstrukturen \u00b6 Variablen \u00b6 einfachste Datenstruktur \u2192 speichern genau einen Wert (kann auch Referenz auf ein Objekt sein) sind von einem Datentyp (Wertetyp oder Referenztyp) haben einen Namen besitzen einen Wert Wert kann sich bei Variablen zur Laufzeit \u00e4ndern (Wertzuweisungsoperator =) Wert von Konstanten kann nicht mehr ge\u00e4ndert werden (final) besitzen einen G\u00fcltigkeitsbereich (den sogenannten Scope) Scope einer Variable: der Anweisungsblock, in dem die Variable deklariert wurde lokale Variable: in einer Methode deklariert \u2192 dort lokal globale Variable: in einer Klasse deklariert \u2192 dort global Beispiele Variablen int zahlen = 0 ; // konventionelle Variable final float PI = 3.14516f ; // Konstante // Erzeugen eines neuen Feldes (Arrays) und Zuweisen der Referenz int [] zahlenFeld = new int [ 100 ] ; // Klassen mit Objekt- und Klassenvariablen public class Power { int base ; // Objektvariablen, f\u00fcr jedes Objekt int exp ; // existieren Kopien im Arbeitsspeicher public String toString () { // lokale Variable --> nur in der Methode gueltig String output = this . base + \"^\" + this . exp ; return output ; } // Variablen sollten mit einem Kleinbuchstaben beginnen // Konstanten sollten nur mit Gro\u00dfbuchstaben benannt werden Arrays \u00b6 Arrays sind Objekte (Referenztypen) speichern eine festgelegte Anzahl von Werten eines festgelegten Datentyps (k\u00f6nnen Werte- und Referenztypen sein) besitzen Methoden (z.B. sort() ) und Variablen (z.B. length ) k\u00f6nnen auch mehrdimensional sein Zugriff auf Elemente mit eckigen Klammern unter Verwndung des Indexes Beispiele Arrays // Einfache Deklaration -> nur Datentyp bekannt, keine Laenge int [] zahlen ; // Eckige Klammern f\u00fcr Array-Datentyp // Erzeugen eines neuen Feldes und Zuweisen der Referenz zahlen = new int [ 100 ] ; // new-Operator, hier: Angabe der Laenge // Explizite Initialisierung bei der Deklaration // Bei Initialisiert mit Werten --> keine Laengenangabe noetig float [] werte = new float [ 10 ] ; // Platz f\u00fcr 10 Werte double [] fib = { 1.0 , 2.0 , 3.0 }; // Werte in {}-Klammern // Mehrdimensionale Felder int [][] hdBild = new int [ 1920 ][ 1080 ] ; // Felder k\u00f6nnen f\u00fcr alle Datentypen verwendet werden Power [] potenzen = new Power [ 5 ] ; // Noch keine Objekte enthalten potenzen [ 0 ] = new Power ( 2 , 4 ); // Zuweisung Objekt an Index 0 Literale \u00b6 sind Werte sind von einem bestimmten Datentyp (kann auch ein Referenztyp sein) keine ausf\u00fchrbare Einheit \u2192 kein Ausdruck \u2192 k\u00f6nnen nicht alleine stehen meistens auf der rechten Seite einer Wertzuweisung als Parameterwert bei Aufruf einer Methode als Vergleichswert bei logischen Ausdr\u00fccken Beispiele Literale 100 true 'a' \"hallo\" { 1 , 2 , 3 , 4 } 5.5 Ausdr\u00fccke \u00b6 kleinste ausf\u00fchrbare Einheit eines Programms z.B.: Zuweisung numerische Berechnung logische Bedingung Operatoren: arithmetisch: +, -, *, /, %, ++, -- relational: ==, !=, <, >, <=, >= logisch: !, &&, || Zuweisung: =, +=, -=, *=, /=, %= sonstige: a?b:c, typecast, new, instanceof, . Anweisungen \u00b6 Einzelanweisung ; Block {} Deklaration Typ Methode , Typ Variable Ausdruck Bedingung if() else switch() case Schleifen for while do while Exceptions try catch() Assertions assert Beispiele Anweisungen // Bloecke immer zwischen geschweiften Klammern { // Anweisung 1... // Anweisung 2... } // Definition und Deklaration int a ; float b = 1.0f ; // Einfacher Ausdruck a = 1010 ; // Bedingungen if ( a == 1010 ) // if-Zweig muss immer vorhanden sein { // Anweisungen... } else if ( a == 1011 ) // 0 - beliebig viele else-if-Zweige { // Anweisungen... } else // 0 - 1 else-Zweig { // Anweisungen... } switch ( a ) // zu pruefende Variable in Klammern { case 1010 : { b *= 2.0 ; break ; } // beliebig viele case-Zweige case 1011 : { b *= 3.0 ; break ; } // break nicht vergessen default : { b = 0.0f ; } // Zweig f\u00fcr alle anderen Werte } int [] meinFeld = { 1 , 2 , 3 , 4 , 5 }; // for-Schleife // 1. Initialisierung // 2. Schleifen-Bedingung // 3. Anweisungen nach Schleifendurchlauf // Schleifen-Anweisungen als Block hinter for for ( int index = 0 ; index < meinFeld . length ; index ++ ) { System . out . println ( meinFeld [ index ] ); } // while-Schleife // Nur Schleifen-Bedingung angeben // Auf Endlos-Schleifen achten while ( index < meinFeld . length ) { System . out . println ( meinFeld [ index ] ); index ++ ; } Methoden \u00b6 wiederverwendbare und/oder logisch abgeschlossene Programmteile sollten in Methoden zusammengefasst werden Methoden besitzen einen Namen (im Scope eindeutig), keinen, einen oder mehrere Parameter und einen R\u00fcckgabetyp (evtl. void ) Aufruf einer Methode durch Namen und runde Klammern, in welche Werte f\u00fcr die Parameter \u00fcbergeben werden bei Aufruf einer Methode werden alle Anweisungen abgearbeitet, die in der Methode definiert (implementiert) wurden (bis zum return ) werden Methoden mit R\u00fcckgabetyp (also nicht void ) aufgerufen, entspricht ihr Aufruf einem konkreten Wert (R\u00fcckgabewert) Methodenstack/Call stack public static int multiply ( int a , int b ) { return a * b ; } public static int square ( int n ) { return multiply ( n , n ); } public static void printSquare ( int n ) { int squared = square ( n ); System . out . println ( n + \" x \" + n + \" = \" + squared ); } public static void main ( String [] args ) { printSquare ( 4 ); } Vererbung \u00b6 Weitergabe aller Methoden und Objekte einer Elternklasse (Basisklasse) an eine Kindklasse (Subklasse) Schl\u00fcsselwort extends jede Klasse (bis auf Object ) besitzt genau eine Elternklasse; ist keine angegeben, ist es automatisch Object Vererebung beschreibt \u201eis-a\u201c-Beziehung Methoden der Elternklasse k\u00f6nnen \u00fcberschrieben werden (wenn sie nicht als final definiert wurden) \u2192 @Override verwenden Originalmethode kann mit Schl\u00fcsselwort super aufgerufen werden Konstruktoren \u00b6 besondere Objektmethoden, die beim Erzeugen des Objektes aufgerufen werden gleicher Name wie die Klasse, keinen R\u00fcckgabetyp angeben (auch nicht void ) wird kein Konstruktor definiert, steht automatisch (implizit) ein parameterloser Konstruktor zur Verf\u00fcgung (einzige Ausnahme: in der Elternklasse existieren nur parametrisierte Konstruktoren) Aufruf von this und super m\u00f6glich werden nicht vererbt Beispiele Konstruktoren public class Power { int base ; int exp ; public Power () { this ( 1 , 0 ); // Aufruf des Konstruktors in Zeile 15 } public Power ( int base ) { this ( base , 0 ); // Aufruf des Konstruktors in Zeile 15 } public Power ( int base , int exp ) { this . base = base ; // Parameterwerte f\u00fcr base und int this . exp = exp ; // auf Objektvariablen sichern } } public static void main ( String [] args ) { Power p1 = new Power (); // p1.base = 1, p1.exp = 0 Power p2 = new Power ( 10 ); // p2.base = 10, p2.exp = 0 Power p3 = new Power ( 10 , 5 ); // p3.base = 10, p3.exp = 5 } Access Controller (Zugriffsmodifizierer) \u00b6 Steuerung der Lebensdauer, Sichtbarkeit und Ver\u00e4nderbarkeit von Klassen, Methoden und Variablen \u2013 Prinzip der Datenkapselung Klassen public Zugriff von au\u00dferhalb des Paketes (default) Zugriff nur innerhalb des Paketes final von der Klasse k\u00f6nnen keine Klassen erben abstract Klasse besitzt Methoden, die keinen Methodenrumpf besitzen (nicht implementiert sind) Variablen und Methoden (wenn Klasse public ) public Zugriff von \u00fcberall (bei Variablen vermeiden!) protected Zugriff aus Klasse und Kindklasse (default) Zugriff aus Klasse und Paket private Zugriff nur aus Klasse","title":"Wiederholung"},{"location":"wiederholung/#wiederholung","text":"","title":"Wiederholung"},{"location":"wiederholung/#datentypen","text":"","title":"Datentypen"},{"location":"wiederholung/#wertetypen","text":"es wird der konkrete Wert in der Variablen gespeichert belegen abh\u00e4ngig vom Datentyp unterschiedlich viel Arbeitsspeicher \u2192 unterschiedliche Wertebereiche Beispiele Wertetypen // boolean f\u00fcr Wahrheitswerte true und false boolean x = false ; // mit false initialisiert boolean wahr = true ; // Schluesselwort true boolean falsch = ! wahr ; // Enthaelt den Wert false // byte, short, int, long f\u00fcr ganze Zahlen byte a = 0 ; // mit 0 initialisiert short b = 124 ; // Zuweisung einer ganzen Zahl int c = a + b ; // Wertebereich immer beachten! long lo = c * 200 ; // l nicht als Variablenname verwenden // char f\u00fcr ein einzelnes Zeichen - einfache Anfuehrungszeichen! char zeichen = 'c' ; // Doppelte \" f\u00fcr Strings! // float und double f\u00fcr Flie\u00dfkommazahlen float f = 0.0f ; // Wird mit 0.0 initialisiert double d = 100.25 ; // Dezimalpunkt statt Dezimalkomma!!","title":"Wertetypen"},{"location":"wiederholung/#referenztypen","text":"es wird eine Referenz auf ein Objekt gespeichert Objekte besitzen Eigenschaften: Methoden (Verhalten) und Variablen (Zustand) Zugriff auf Methoden und Variablen \u00fcber den Punkt-Operator Beispiele Referenztypen // Schluesselwort class um neue Klasse (Typ) zu definieren public class Power { int base ; // Objektvariablen, f\u00fcr jedes Objekt int exp ; // existieren Kopien im Arbeitsspeicher // Objektmethode public void print () { System . out . println ( this . base + \"^\" + this . exp ); } } // irgendwo im Hauptprogramm public static void main ( String [] args ) { Power p1 = new Power ( 2 , 4 ); Power p2 = new Power ( 2 , 4 ); p1 . print (); p2 . print (); boolean equal = ( p1 == p2 ); // true oder false ? }","title":"Referenztypen"},{"location":"wiederholung/#datenstrukturen","text":"","title":"Datenstrukturen"},{"location":"wiederholung/#variablen","text":"einfachste Datenstruktur \u2192 speichern genau einen Wert (kann auch Referenz auf ein Objekt sein) sind von einem Datentyp (Wertetyp oder Referenztyp) haben einen Namen besitzen einen Wert Wert kann sich bei Variablen zur Laufzeit \u00e4ndern (Wertzuweisungsoperator =) Wert von Konstanten kann nicht mehr ge\u00e4ndert werden (final) besitzen einen G\u00fcltigkeitsbereich (den sogenannten Scope) Scope einer Variable: der Anweisungsblock, in dem die Variable deklariert wurde lokale Variable: in einer Methode deklariert \u2192 dort lokal globale Variable: in einer Klasse deklariert \u2192 dort global Beispiele Variablen int zahlen = 0 ; // konventionelle Variable final float PI = 3.14516f ; // Konstante // Erzeugen eines neuen Feldes (Arrays) und Zuweisen der Referenz int [] zahlenFeld = new int [ 100 ] ; // Klassen mit Objekt- und Klassenvariablen public class Power { int base ; // Objektvariablen, f\u00fcr jedes Objekt int exp ; // existieren Kopien im Arbeitsspeicher public String toString () { // lokale Variable --> nur in der Methode gueltig String output = this . base + \"^\" + this . exp ; return output ; } // Variablen sollten mit einem Kleinbuchstaben beginnen // Konstanten sollten nur mit Gro\u00dfbuchstaben benannt werden","title":"Variablen"},{"location":"wiederholung/#arrays","text":"Arrays sind Objekte (Referenztypen) speichern eine festgelegte Anzahl von Werten eines festgelegten Datentyps (k\u00f6nnen Werte- und Referenztypen sein) besitzen Methoden (z.B. sort() ) und Variablen (z.B. length ) k\u00f6nnen auch mehrdimensional sein Zugriff auf Elemente mit eckigen Klammern unter Verwndung des Indexes Beispiele Arrays // Einfache Deklaration -> nur Datentyp bekannt, keine Laenge int [] zahlen ; // Eckige Klammern f\u00fcr Array-Datentyp // Erzeugen eines neuen Feldes und Zuweisen der Referenz zahlen = new int [ 100 ] ; // new-Operator, hier: Angabe der Laenge // Explizite Initialisierung bei der Deklaration // Bei Initialisiert mit Werten --> keine Laengenangabe noetig float [] werte = new float [ 10 ] ; // Platz f\u00fcr 10 Werte double [] fib = { 1.0 , 2.0 , 3.0 }; // Werte in {}-Klammern // Mehrdimensionale Felder int [][] hdBild = new int [ 1920 ][ 1080 ] ; // Felder k\u00f6nnen f\u00fcr alle Datentypen verwendet werden Power [] potenzen = new Power [ 5 ] ; // Noch keine Objekte enthalten potenzen [ 0 ] = new Power ( 2 , 4 ); // Zuweisung Objekt an Index 0","title":"Arrays"},{"location":"wiederholung/#literale","text":"sind Werte sind von einem bestimmten Datentyp (kann auch ein Referenztyp sein) keine ausf\u00fchrbare Einheit \u2192 kein Ausdruck \u2192 k\u00f6nnen nicht alleine stehen meistens auf der rechten Seite einer Wertzuweisung als Parameterwert bei Aufruf einer Methode als Vergleichswert bei logischen Ausdr\u00fccken Beispiele Literale 100 true 'a' \"hallo\" { 1 , 2 , 3 , 4 } 5.5","title":"Literale"},{"location":"wiederholung/#ausdrucke","text":"kleinste ausf\u00fchrbare Einheit eines Programms z.B.: Zuweisung numerische Berechnung logische Bedingung Operatoren: arithmetisch: +, -, *, /, %, ++, -- relational: ==, !=, <, >, <=, >= logisch: !, &&, || Zuweisung: =, +=, -=, *=, /=, %= sonstige: a?b:c, typecast, new, instanceof, .","title":"Ausdr\u00fccke"},{"location":"wiederholung/#anweisungen","text":"Einzelanweisung ; Block {} Deklaration Typ Methode , Typ Variable Ausdruck Bedingung if() else switch() case Schleifen for while do while Exceptions try catch() Assertions assert Beispiele Anweisungen // Bloecke immer zwischen geschweiften Klammern { // Anweisung 1... // Anweisung 2... } // Definition und Deklaration int a ; float b = 1.0f ; // Einfacher Ausdruck a = 1010 ; // Bedingungen if ( a == 1010 ) // if-Zweig muss immer vorhanden sein { // Anweisungen... } else if ( a == 1011 ) // 0 - beliebig viele else-if-Zweige { // Anweisungen... } else // 0 - 1 else-Zweig { // Anweisungen... } switch ( a ) // zu pruefende Variable in Klammern { case 1010 : { b *= 2.0 ; break ; } // beliebig viele case-Zweige case 1011 : { b *= 3.0 ; break ; } // break nicht vergessen default : { b = 0.0f ; } // Zweig f\u00fcr alle anderen Werte } int [] meinFeld = { 1 , 2 , 3 , 4 , 5 }; // for-Schleife // 1. Initialisierung // 2. Schleifen-Bedingung // 3. Anweisungen nach Schleifendurchlauf // Schleifen-Anweisungen als Block hinter for for ( int index = 0 ; index < meinFeld . length ; index ++ ) { System . out . println ( meinFeld [ index ] ); } // while-Schleife // Nur Schleifen-Bedingung angeben // Auf Endlos-Schleifen achten while ( index < meinFeld . length ) { System . out . println ( meinFeld [ index ] ); index ++ ; }","title":"Anweisungen"},{"location":"wiederholung/#methoden","text":"wiederverwendbare und/oder logisch abgeschlossene Programmteile sollten in Methoden zusammengefasst werden Methoden besitzen einen Namen (im Scope eindeutig), keinen, einen oder mehrere Parameter und einen R\u00fcckgabetyp (evtl. void ) Aufruf einer Methode durch Namen und runde Klammern, in welche Werte f\u00fcr die Parameter \u00fcbergeben werden bei Aufruf einer Methode werden alle Anweisungen abgearbeitet, die in der Methode definiert (implementiert) wurden (bis zum return ) werden Methoden mit R\u00fcckgabetyp (also nicht void ) aufgerufen, entspricht ihr Aufruf einem konkreten Wert (R\u00fcckgabewert) Methodenstack/Call stack public static int multiply ( int a , int b ) { return a * b ; } public static int square ( int n ) { return multiply ( n , n ); } public static void printSquare ( int n ) { int squared = square ( n ); System . out . println ( n + \" x \" + n + \" = \" + squared ); } public static void main ( String [] args ) { printSquare ( 4 ); }","title":"Methoden"},{"location":"wiederholung/#vererbung","text":"Weitergabe aller Methoden und Objekte einer Elternklasse (Basisklasse) an eine Kindklasse (Subklasse) Schl\u00fcsselwort extends jede Klasse (bis auf Object ) besitzt genau eine Elternklasse; ist keine angegeben, ist es automatisch Object Vererebung beschreibt \u201eis-a\u201c-Beziehung Methoden der Elternklasse k\u00f6nnen \u00fcberschrieben werden (wenn sie nicht als final definiert wurden) \u2192 @Override verwenden Originalmethode kann mit Schl\u00fcsselwort super aufgerufen werden","title":"Vererbung"},{"location":"wiederholung/#konstruktoren","text":"besondere Objektmethoden, die beim Erzeugen des Objektes aufgerufen werden gleicher Name wie die Klasse, keinen R\u00fcckgabetyp angeben (auch nicht void ) wird kein Konstruktor definiert, steht automatisch (implizit) ein parameterloser Konstruktor zur Verf\u00fcgung (einzige Ausnahme: in der Elternklasse existieren nur parametrisierte Konstruktoren) Aufruf von this und super m\u00f6glich werden nicht vererbt Beispiele Konstruktoren public class Power { int base ; int exp ; public Power () { this ( 1 , 0 ); // Aufruf des Konstruktors in Zeile 15 } public Power ( int base ) { this ( base , 0 ); // Aufruf des Konstruktors in Zeile 15 } public Power ( int base , int exp ) { this . base = base ; // Parameterwerte f\u00fcr base und int this . exp = exp ; // auf Objektvariablen sichern } } public static void main ( String [] args ) { Power p1 = new Power (); // p1.base = 1, p1.exp = 0 Power p2 = new Power ( 10 ); // p2.base = 10, p2.exp = 0 Power p3 = new Power ( 10 , 5 ); // p3.base = 10, p3.exp = 5 }","title":"Konstruktoren"},{"location":"wiederholung/#access-controller-zugriffsmodifizierer","text":"Steuerung der Lebensdauer, Sichtbarkeit und Ver\u00e4nderbarkeit von Klassen, Methoden und Variablen \u2013 Prinzip der Datenkapselung Klassen public Zugriff von au\u00dferhalb des Paketes (default) Zugriff nur innerhalb des Paketes final von der Klasse k\u00f6nnen keine Klassen erben abstract Klasse besitzt Methoden, die keinen Methodenrumpf besitzen (nicht implementiert sind) Variablen und Methoden (wenn Klasse public ) public Zugriff von \u00fcberall (bei Variablen vermeiden!) protected Zugriff aus Klasse und Kindklasse (default) Zugriff aus Klasse und Paket private Zugriff nur aus Klasse","title":"Access Controller (Zugriffsmodifizierer)"}]}