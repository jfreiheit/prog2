{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Programmieren II \u00b6 Herzlich willkommen zur Programmieren II -Veranstaltung! Wir haben in Programmieren I unter Verwendung der Programmiersprache Java bereits wesentliche Konzepte kennengelernt, die f\u00fcr das Verst\u00e4ndnis mordenen Programmierens notwendig sind. Diese Kenntnisse wollen wir nun erweitern und vertiefen. Wir werden Git kennenlernen, Exceptions, Wrapper-Klassen, Interfaces und Collections. Wir besch\u00e4ftigen uns intensiv mit dem Testen von Programmen und erzeugen uns eigene Nutzeroberfl\u00e4chen. Hier einige Tipps, damit Sie die Veranstaltung erfolgreich durchf\u00fchren und Sie dabei auch Spa\u00df haben: L\u00f6sen Sie alle \u00dcbungsaufgaben selbst\u00e4ndig! Es ist kein Problem, wenn Sie f\u00fcr das Bew\u00e4ltigen der \u00dcbungen etwas l\u00e4nger ben\u00f6tigen. Sollten Sie es gar nicht alleine schaffen, ist das auch kein Problem. Wichtig ist dann, dass Sie sich die L\u00f6sung anschauen und es erneut selbst\u00e4ndig versuchen. H\u00f6ren Sie nicht auf, bis Sie es geschafft haben! Sie k\u00f6nnen die Hausaufgaben zu zweit l\u00f6sen. Achten Sie aber darauf, dass Sie Ihre gemeinsame L\u00f6sung vollst\u00e4ndig verstanden haben und dass Sie sie danach auch alleine erstellen k\u00f6nnen. Sie k\u00f6nnen beim L\u00f6sen der Hausaufgaben beliebig kreativ sein! Die Aufgabenstellung gibt Ihnen Anhaltspunkte f\u00fcr eine eventuelle L\u00f6sung. Sie k\u00f6nnen es aber auch ganz anders machen! Die Klausurvorbereitung beginnt mit Beginn der Veranstaltung. Es ist nicht m\u00f6glich, die Klausur am Ende des Semesters zu bestehen, wenn Sie nicht das ganze Semester \u00fcber intensiv programmieren. Die \u00dcbungsaufgaben sind \"kleine\" Aufgaben, um das in der Vorlesung vermittelte Wissen direkt anzuwenden. F\u00fcr die L\u00f6sung der Hausaufgaben ist bereits ein gewisses Abstraktionsniveau erforderlich, um zu erkennen, dass das in der Vorlesung vermittelte Wissen daf\u00fcr ausreichend ist. Programmieren lernt man nur durch Programmieren. Sie m\u00fcssen es tun. Das Lesen von B\u00fcchern oder das \"Anschauen\" von Code gen\u00fcgt nicht. Eine Sprache lernt man auch nur durch Sprechen. Sie m\u00fcssen programmieren, programmieren, prohgrammieren... Lassen Sie sich durch Fehler nicht verunsichern, sondern analysieren Sie Ihre Fehler. Bis zur Klausur sollten Sie alle Fehler einmal gemacht haben. Wenn Sie sich \u00fcberlegen, warum das jeweils ein Fehler war, dann werden Sie diesen Fehler nicht wiederholen und haben durch die Reflektion eine Menge gelernt. Fehler zu machen (und dar\u00fcber zu reflektieren) geh\u00f6rt zu den besten Lernmethoden des Programmierens. Haben Sie Spa\u00df! Je mehr Sie das Programmieren lernen, je mehr Spa\u00df werden Sie haben. Wir versuchen, dass Sie das genaze Semester \u00fcber Spa\u00df am Programmieren haben werden. Sollte es Ihnen zwischendurch keinen Spa\u00df mehr machen, geben Sie mir sofort Bescheid! Viel Erfolg! Und viel Spa\u00df! Organisatorisches \u00b6 Der (Corona-)Plan zur Durchf\u00fchrung der Veranstaltung ist derzeit wie folgt: Themen werden ausf\u00fchrlich in diesem Skript beschrieben und anhand von Videos eingef\u00fchrt und verdeutlicht, das Skript und die Videos werden (sp\u00e4testens) freitags hochgeladen, das hei\u00dft, \"Vorlesungen\" finden asynchron statt (im Selbststudium), zusammen mit dem Skript und den Videos werden sowohl die \u00dcbung als auch die Aufgabe hochgeladen, die \u00dcbung (und die vergangene Aufgabe) werden donnerstags (8:00 Uhr und nochmal 14:00 Uhr) besprochen (Sie k\u00f6nnen frei w\u00e4hlen, welche der beiden \u00dcbungen Sie w\u00e4hlen), bei Bedarf k\u00f6nnen wir auch gerne jederzeit eine Synchron-Video-Vorlesung einschieben, um Fragen zu erkl\u00e4ren, die Veranstaltung wird durch ein Tutorium unterst\u00fctzt, sollten Sie W\u00fcnsche haben, diesen Plan zu \u00e4ndern, kommen Sie gerne auf mich zu Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen die Aufgaben l\u00f6sen und zu den jeweiligen Fristen auf GitHub hochladen. Wenn Sie alle Aufgaben fristgerecht hochgeladen haben, d\u00fcrfen Sie an der Klausur teilnehmen. Es werden insgesamt wahrscheinlich 10 Aufgaben sein, die Sie selbst\u00e4ndig l\u00f6sen und hochladen m\u00fcssen. Sie k\u00f6nnen die Aufgaben auch zu zweit l\u00f6sen. Laden Sie dann aber bitte beide jeweils die L\u00f6sung hoch. Am Ende des Semesters schreiben wir eine Klausur (am Rechner). Diese Klausur wird bewertet und entspricht der Note f\u00fcr das gesamte \"Programmieren\"-Modul. Unter Aufgaben sind die Aufgaben beschrieben, die Sie in jeder Woche ausf\u00fchren sollen. Damit Sie dies erfolgreich erledigen k\u00f6nnen, ist jeweils angegeben, welche Themen Sie daf\u00fcr durcharbeiten m\u00fcssen. Das Durcharbeiten der jeweiligen Themen entspricht jeweils einer Vorlesung. Diese wird also selbst\u00e4ndig durchgef\u00fchrt. Daneben gibt es jede Woche (zu jedem Thema) \u00dcbungen , die wir in den \u00dcbungszeiten besprechen. Diese dienen der Anwendung und der Festigung der erlangten Kenntnisse. Die \u00dcbungen sind kleine Aufgaben, an denen Sie das neue Wissen anwenden sollen. Die \u00dcbungen dienen der Bef\u00e4higung, die (gr\u00f6\u00dferen) Aufgaben l\u00f6sen zu k\u00f6nnen. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Au\u00dferdem lernen Sie beim Beantworten der Fragen nochmals deutlich mehr. Das w\u00e4re super, wenn das klappt! Grober Inhalt (kann sich noch \u00e4ndern) \u00b6 Wir besch\u00e4ftigen uns dieses Semester mit weiteren Konzepten der Programmierung. Wir lernen weitere Datenstrukturen kennen (Collections), werden lernen, mit Exceptions umzugehen und implementieren Tests. Wir besch\u00e4ftigen uns mit Grafischen Nutzeroberfl\u00e4chen (GUIs) und lernen, Nutzereignisse zu behandeln. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Die Vorlesungsvideos finden Sie darunter f\u00fcr die einzelnen Wochen (unter Inhalte ). Woche Themen (Vorlesung) \u00dcbung Aufgabe Abgabe Aufgabe bis 1. 05.-09.04.2021 Einf\u00fchrung und Organisatorisches, Wiederholung - - - 1. 12.-16.04.2021 Git \u00dcbung 1 Aufgabe 1 25.04.2021 2. 19.-23.04.2021 Enumerations und Exceptions \u00dcbung 2 Aufgabe 2 02.05.2021 3. 26.-30.04.2021 Testen mit JUnit \u00dcbung 3 Aufgabe 3 09.05.2021 4. 03.-07.05.2021 Collections (List und Set) \u00dcbung 4 Aufgabe 4 16.05.2021 5. 10.-14.05.2021 Wrapper-Klassen (boxing und unboxing) \u00dcbung 5 Aufgabe 5 23.05.2021 6. 17.-21.05.2021 Collections (Map) \u00dcbung 6 - - 7. 24.-28.05.2021 Abstrakte Klassen + Interfaces \u00dcbung 7 Aufgabe 6 06.06.2021 8. 31.-04.06.2021 GUI Einf\u00fchrung \u00dcbung 8 Aufgabe 7 13.06.2021 9. 07.-11.06.2021 GUI Ereignisse \u00dcbung 9 Aufgabe 8 20.06.2021 10. 14.-18.06.2021 Graphics \u00dcbung 10 Aufgabe 9 04.07.2021 12. 21.-25.06.2021 Mausereignisse \u00dcbung 11 Aufgabe 10 11.07.2021 13. 28.-02.07.2021 Klausurvorbereitung \u00dcbung 12 - - 14. 05.-09.07.2021 Klausurvorbereitung \u00dcbung 13 - - 15. 12.-16.07.2021 Klausurvorbereitung - - - Inhalte \u00b6 05.-09.04.2021 - Einf\u00fchrung und Organisatorisches + Wiederholung siehe Organisatorisches siehe Wiederholung siehe Aufgabe 1 12.-16.04.2021 - Git siehe Git Video zu Git siehe \u00dcbung 1 siehe Aufgabe 2 19.-23.04.2021 - Enum und Exceptions siehe Mehrdimensionale Arrays und Aufz\u00e4hlungstypen Video zu Mehrdimensionale Arrays und Aufz\u00e4hlungstypen siehe Exceptions Video zu Exceptions - das ist Teil 1 (Einf\u00fchrung) noch ein Video zu Exceptions - das ist Teil 2 (eigene Exceptions) siehe \u00dcbung 2 siehe Aufgabe 3 26.-30.04.2021 - Testen mit JUnit siehe auch Teil 2 des Videos zu Exceptions (unter 19.-23.04.2021 - Enum und Exceptions eins dr\u00fcber) - das kam erst diese Woche hinzu, deshalb hier der Verweis, geh\u00f6rt aber thematisch in die Woche davor, deshalb dort siehe JUnit-Tests siehe Video zu JUnit-Tests siehe \u00dcbung 3 siehe Aufgabe 4 Video aus der Vorlesung vom 28.04.2021 Quellcode aus der Vorlesung vom 28.04.2021 MyMath.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 package vorlesungen.testen ; public class MyMath { public static int abs ( int number ) { if ( number < 0 ) { return - number ; } else { return number ; } } public static double abs ( double number ) { if ( number < 0 ) { return - number ; } else { return number ; } } public static double sqrt ( double number ) { double a = number ; double b = 1.0 ; final double AREA = number ; final double ERROR = 0.000001 ; while ( abs ( a - b ) >= ERROR ) { a = ( a + b ) / 2.0 ; b = AREA / a ; } return a ; } public static int ggT ( int a , int b ) { while ( b != 0 ) { int rest = a % b ; a = b ; b = rest ; } return a ; } } MyMathTest.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 package vorlesungen.testen ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.Test ; class MyMathTest { @Test void testAbs3 () { int result = MyMath . abs ( 3 ); assertEquals ( 3 , result , \"abs(3) not 3\" ); } @Test void testAbsMinus3 () { int result = MyMath . abs ( - 3 ); assertEquals ( 3 , result , \"abs(-3) not 3\" ); } @Test void testSqrt9 () { double result = MyMath . sqrt ( 9.0 ); assertEquals ( 3.0 , result , 0.00001 ); } @Test void testSqrt25 () { double result = MyMath . sqrt ( 25.0 ); assertTrue ( MyMath . abs ( 5.0 - result ) <= 0.00001 ); } @Test void testGgT44und12 () { int result = MyMath . ggT ( 44 , 12 ); assertEquals ( 4 , result , \"ggT of 44 and 12 not 4\" ); } } module-info.java 1 2 3 4 module SoSe2021 { requires java . desktop ; requires org . junit . jupiter . api ; } 03.-07.05.2021 - Collections (List und Set) siehe Collections siehe Video zu Collections - Vorlesung 05.05.2021 Quellcode aus der Vorlesung vom 05.05.2021 ListenUndMengen.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 package vorlesungen.listenmengen ; import java.util.* ; /* * Collections: aehnlich wie Arrays, viele Elemente speichern * keine feste Laenge * wir koennen nur Referenztypen speichern (also nicht int, boolean, char, double, ...) * Elemente verschiedenen Typs speicherbar --> gar nicht gut, deshalb Typisieren * Arten von Collections: List (wie Arrays), Set (keine Doppelungen), Stack, Queue * Map (2-spaltige Tabellen Schl\u00fcssel-/Werte-Paare) */ public class ListenUndMengen { public static void main ( String [] args ) { System . out . printf ( \"%n%n-------------- Listen ------------------%n%n\" ); Set < String > set1 = new HashSet <> (); Set < String > set2 = new TreeSet <> (); String s1 = \"erster\" ; String s2 = \"zweiter\" ; String s3 = \"dritter\" ; String s4 = \"zweiter\" ; Integer i1 = 1 ; System . out . println ( set1 . add ( s1 )); System . out . println ( set1 . add ( s2 )); System . out . println ( set1 . add ( s3 )); System . out . println ( set1 . add ( s4 )); // System.out.println(set1.add(i1)); System . out . println ( set1 . size ()); Iterator < String > it = set1 . iterator (); while ( it . hasNext ()) { System . out . println ( it . next ()); } System . out . println (); for ( String element : set1 ) { System . out . println ( element ); } System . out . println ( set1 . remove ( \"erster\" )); System . out . println ( set1 . remove ( \"vierter\" )); System . out . println (); for ( String element : set1 ) { System . out . println ( element ); } System . out . printf ( \"%n%n-------------- Listen ------------------%n%n\" ); List < String > l1 = new ArrayList <> (); List < String > l2 = new LinkedList <> (); l1 . add ( s1 ); l1 . add ( s2 ); l1 . add ( s3 ); l1 . add ( s4 ); for ( String s : l1 ) { System . out . println ( s ); } System . out . println ( l1 . size ()); System . out . println ( l1 . remove ( \"zweiter\" )); System . out . println ( l1 . remove ( \"vierter\" )); for ( String s : l1 ) { System . out . println ( s ); } System . out . println (); System . out . println ( \"geloescht : \" + l1 . remove ( 1 )); for ( String s : l1 ) { System . out . println ( s ); } System . out . println (); l2 . add ( \"neu\" ); l2 . add ( \"alt\" ); for ( String s : l2 ) { System . out . println ( s ); } System . out . println (); l1 . addAll ( l2 ); for ( String s : l1 ) { System . out . println ( s ); } System . out . println (); l1 . removeAll ( l2 ); for ( String s : l1 ) { System . out . println ( s ); } } } siehe \u00dcbung 5 siehe Aufgabe 5 10.-14.05.2021 - Wrapper-Klassen (boxing und unboxing) siehe Wrapper-Klassen siehe Video zu Wrapper-Klassen - Vorlesung 12.05.2021 diese Woche keine neue \u00dcbung (Donnerstag ist Feiertag) diese Woche keine neue Aufgabe (M\u00f6glichkeit, bisher \"Liegengebliebenes\" aufzuarbeiten) L\u00f6sungen f\u00fcr Aufgaben 1 - 3 hochgeladen 17.-21.05.2021 - Collections (Map) siehe Maps siehe Video zu Maps - Vorlesung 19.05.2021 Quellcode aus der Vorlesung vom 19.05.2021 Maps.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 package vorlesungen.maps ; import java.util.* ; public class Maps { public static void main ( String [] args ) { /* * in Maps speichern wir Schluessel-Werte-Paare * Schluessel sind eindeutig, Schluesseltyp K * Werte koennen sich doppel, Wertetyp V * statt add(), addAll() hier put(), putAll() */ Map < String , Integer > mapA = new HashMap <> (); mapA . put ( \"A\" , 1 ); mapA . put ( \"B\" , 2 ); mapA . put ( \"C\" , 3 ); /* * ein einzelnes Schluessel-Werte-Paar ist vom * Typ Map.Entry * typisiert: Map.Entry<K,V> * unser Beispiel: Map.Entry<String, Integer> */ /* * leider nicht iterator(), sondern entrySet() * entrySet() erzeugt eine Set von lauter Schluessel-Werte-Paaren */ // Variante 1 Set < Map . Entry < String , Integer >> allEntriesFromMapA = mapA . entrySet (); for ( Map . Entry < String , Integer > entry : allEntriesFromMapA ) { System . out . println ( \"Schluessel : \" + entry . getKey () + \" Wert : \" + entry . getValue ()); } System . out . println ( allEntriesFromMapA . size ()); // Iterator<Map.Entry<String, Integer>> it = allEntriesFromMapA.iterator(); System . out . println (); // Variante 2 for ( Map . Entry < String , Integer > entry : mapA . entrySet ()) { System . out . println ( \"Schluessel : \" + entry . getKey () + \" Wert : \" + entry . getValue ()); } System . out . println ( mapA . containsKey ( \"B\" )); System . out . println ( mapA . containsKey ( \"D\" )); System . out . println ( mapA . get ( \"B\" )); System . out . printf ( \"%n%n------------ alle keys von mapA ---------------%n%n\" ); Set < String > allKeys = mapA . keySet (); for ( String key : allKeys ) { System . out . println ( \"key : \" + key ); } System . out . printf ( \"%n%n------------ mapA ---------------%n%n\" ); mapA . put ( \"B\" , 5 ); for ( Map . Entry < String , Integer > entry : mapA . entrySet ()) { System . out . println ( \"Schluessel : \" + entry . getKey () + \" Wert : \" + entry . getValue ()); } System . out . printf ( \"%n%n------------ mapB ---------------%n%n\" ); Map < String , Integer > mapB = new HashMap <> (); mapB . put ( \"B\" , 6 ); mapB . put ( \"D\" , 7 ); for ( Map . Entry < String , Integer > entry : mapB . entrySet ()) { System . out . println ( \"Schluessel : \" + entry . getKey () + \" Wert : \" + entry . getValue ()); } mapA . putAll ( mapB ); System . out . printf ( \"%n%n------------ mapA ---------------%n%n\" ); for ( Map . Entry < String , Integer > entry : mapA . entrySet ()) { System . out . println ( \"Schluessel : \" + entry . getKey () + \" Wert : \" + entry . getValue ()); } mapA . put ( \"E\" , 1 ); System . out . printf ( \"%n%n------------ alle values von mapA ---------------%n%n\" ); Collection < Integer > allValues = mapA . values (); for ( Integer val : allValues ) { System . out . println ( \"value : \" + val ); } } } siehe \u00dcbung 6 siehe Aufgabe 6 24.-28.05.2021 - Abstrakte Klassen und Interfaces siehe Abstrakte Klassen und Interfaces siehe Video zu Abstrakte Klassen und Interfaces - Vorlesung 26.05.2021 Quellcode aus der Vorlesung vom 26.05.2021 Shape.java 1 2 3 4 5 public abstract class Shape { public abstract double perimeter (); public abstract double area (); } Rectangle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public class Rectangle extends Shape implements Comparable < Rectangle > { private int width ; private int height ; public Rectangle ( int width , int height ) { this . width = width ; this . height = height ; } @Override public double perimeter () { return ( 2.0 * ( this . width + this . height )); } @Override public double area () { return this . width * this . height ; } @Override public int compareTo ( Rectangle o ) { /* * this > o --> positiver int-Wert * this < o --> negativer int-Wert * this == o --> 0 */ return (( this . width + this . height ) - ( o . width + o . height )); } } Circle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class Circle extends Shape { private double radius ; public Circle ( double radius ) { this . radius = radius ; } @Override public double perimeter () { return Math . PI * 2.0 * this . radius ; } @Override public double area () { return Math . PI * this . radius * this . radius ; } } TestShape.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 public class TestShape { public static void printPerimeter ( Shape s ) { System . out . printf ( \"perimeter : %.2f cm%n\" , s . perimeter ()); } public static void printArea ( Shape s ) { System . out . printf ( \"area : %.2f cm%n\" , s . area ()); } public static void sortieren ( Comparable [] unsorted ) { for ( int bubble = 1 ; bubble < unsorted . length ; bubble ++ ) { for ( int index = 0 ; index < unsorted . length - bubble ; index ++ ) { if ( unsorted [ index ] . compareTo ( unsorted [ index + 1 ] ) > 0 ) { Comparable tmp = unsorted [ index ] ; unsorted [ index ] = unsorted [ index + 1 ] ; unsorted [ index + 1 ] = tmp ; } } } } public static void main ( String [] args ) { Shape s1 = new Rectangle ( 10 , 20 ); System . out . println ( s1 . perimeter ()); System . out . println ( s1 . area ()); Shape s2 = new Circle ( 1.0 ); System . out . println ( s2 . perimeter ()); System . out . println ( s2 . area ()); printPerimeter ( new Rectangle ( 5 , 15 )); printPerimeter ( new Circle ( 5.0 )); System . out . println ( \"A\" . compareTo ( \"B\" )); System . out . println ( \"B\" . compareTo ( \"A\" )); System . out . println ( \"A\" . compareTo ( \"A\" )); Rectangle [] rectArr = new Rectangle [ 6 ] ; rectArr [ 0 ] = new Rectangle ( 9 , 13 ); rectArr [ 1 ] = new Rectangle ( 4 , 17 ); rectArr [ 2 ] = new Rectangle ( 12 , 5 ); rectArr [ 3 ] = new Rectangle ( 8 , 9 ); rectArr [ 4 ] = new Rectangle ( 10 , 11 ); rectArr [ 5 ] = new Rectangle ( 5 , 15 ); System . out . printf ( \"%n%n------------------------ unsortiert --------------------------%n%n\" ); sortieren ( rectArr ); } } siehe \u00dcbung 7 siehe Aufgabe 7 31.-04.06.2021 - GUI Einf\u00fchrung siehe Grafical User Interfaces siehe Video zu Grafical User Interfaces - Vorlesung 02.06.2021 Quellcode aus der Vorlesung vom 02.06.2021 MyFirstWindow.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.FlowLayout ; import java.awt.GridLayout ; import javax.swing.JButton ; import javax.swing.JCheckBox ; import javax.swing.JFrame ; import javax.swing.JLabel ; import javax.swing.JPanel ; import javax.swing.JRadioButton ; import javax.swing.JTextField ; public class MyFirstWindow extends JFrame { public MyFirstWindow () { super (); // Konstruktor von JFrame this . setTitle ( \"My first window\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel content = this . initContent (); this . getContentPane (). add ( content ); // this.getContentPane().setBackground(Color.CYAN); this . setSize ( 400 , 300 ); this . setLocation ( 200 , 100 ); this . setVisible ( true ); } /* * FlowLayout - alles nebeneinander, so lange es passt, sonst untereinander (Standardlayout JPanel) * GridLayout - Gitterstruktur (Zeilen und Spalten) * BorderLayout - Norden, Sueden, Osten, Westen, Center (Stanfdardlayout eines JFrame) */ private JPanel initContent () { JPanel mainPanel = new JPanel (); mainPanel . setLayout ( new BorderLayout ()); JPanel center = new JPanel (); center . setLayout ( new GridLayout ( 3 , 2 )); JButton cb1 = new JButton ( \"EAST\" ); JButton cb2 = new JButton ( \"WEST\" ); JButton cb3 = new JButton ( \"NORTH\" ); JButton cb4 = new JButton ( \"SOUTH\" ); JButton cb5 = new JButton ( \"CENTER\" ); center . add ( cb1 ); center . add ( cb2 ); center . add ( cb3 ); center . add ( cb4 ); center . add ( cb5 ); JButton b1 = new JButton ( \"EAST\" ); JButton b2 = new JButton ( \"WEST\" ); JButton b3 = new JButton ( \"NORTH\" ); JButton b4 = new JButton ( \"SOUTH\" ); JButton b5 = new JButton ( \"CENTER\" ); mainPanel . add ( b1 , BorderLayout . EAST ); mainPanel . add ( center , BorderLayout . CENTER ); mainPanel . add ( b3 , BorderLayout . NORTH ); mainPanel . add ( b4 , BorderLayout . SOUTH ); mainPanel . add ( b2 , BorderLayout . WEST ); /* mainPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 30, 40)); JButton b1 = new JButton(\"EAST\"); JButton b2 = new JButton(\"WEST\"); JButton b3 = new JButton(\"NORTH\"); JButton b4 = new JButton(\"SOUTH\"); JButton b5 = new JButton(\"CENTER\"); mainPanel.add(b1); mainPanel.add(b2); mainPanel.add(b3); mainPanel.add(b4); mainPanel.add(b5); */ /* mainPanel.setLayout(new BorderLayout()); JButton b1 = new JButton(\"EAST\"); JButton b2 = new JButton(\"WEST\"); JButton b3 = new JButton(\"NORTH\"); JButton b4 = new JButton(\"SOUTH\"); JButton b5 = new JButton(\"CENTER\"); JLabel l1 = new JLabel(\"Test\"); JPanel east = new JPanel(); east.setLayout(new FlowLayout()); east.add(b1); east.add(l1); mainPanel.add(east, BorderLayout.EAST); mainPanel.add(b2, BorderLayout.WEST); mainPanel.add(b3, BorderLayout.NORTH); mainPanel.add(b4, BorderLayout.SOUTH); mainPanel.add(b5, BorderLayout.CENTER); */ /* // hier weitere Container oder Steuerelemente hinzufuegen JLabel label = new JLabel(\"Name : \"); JTextField input = new JTextField(10); JButton button = new JButton(\"Klick mich!\"); JCheckBox cb = new JCheckBox(); JRadioButton rb = new JRadioButton(); mainPanel.add(label); mainPanel.add(input); mainPanel.add(button); mainPanel.add(cb); mainPanel.add(rb); */ return mainPanel ; } public static void main ( String [] args ) { new MyFirstWindow (); } } siehe \u00dcbung 8 siehe Aufgabe 8 07.-11.06.2021 - GUI Ereignisse siehe GUI Ereignisse siehe Video zu GUI Ereignisse - Vorlesung 09.06.2021 Quellcode aus der Vorlesung vom 09.06.2021 Ereignisbehandlung.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 import java.awt.BorderLayout ; import java.awt.Font ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.* ; public class Ereignisbehandlung extends JFrame implements ActionListener { Integer anzKlicks = 0 ; JLabel unten ; public Ereignisbehandlung (){ super (); this . setTitle ( \"Ereignisbehandlung\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel content = this . initContent (); this . getContentPane (). add ( content ); this . setSize ( 200 , 150 ); this . setLocation ( 200 , 100 ); this . setVisible ( true ); } public JPanel initContent () { JPanel mainPanel = new JPanel (); mainPanel . setLayout ( new BorderLayout ()); JPanel oben = new JPanel (); JButton minus = new JButton ( \"-\" ); JButton plus = new JButton ( \"+\" ); oben . add ( minus ); oben . add ( plus ); plus . addActionListener ( this ); minus . addActionListener ( this ); this . unten = new JLabel ( this . anzKlicks . toString ()); this . unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 48 )); this . unten . setHorizontalAlignment ( JLabel . CENTER ); mainPanel . add ( oben , BorderLayout . NORTH ); mainPanel . add ( unten , BorderLayout . CENTER ); return mainPanel ; } public static void main ( String [] args ) { new Ereignisbehandlung (); } @Override public void actionPerformed ( ActionEvent e ) { Object quelle = e . getSource (); // hat ActionEvent ausgeloest if ( quelle instanceof JButton ) { JButton button = ( JButton ) quelle ; if ( button . getText (). equals ( \"-\" )) { this . anzKlicks -- ; System . out . println ( \"Minus-Button geklickt ... \" + this . anzKlicks ); } else if ( button . getText (). equals ( \"+\" )) { this . anzKlicks ++ ; System . out . println ( \"Plus-Button geklickt ... \" + this . anzKlicks ); } this . unten . setText ( this . anzKlicks . toString ()); } } } siehe \u00dcbung 9 siehe Aufgabe 9 14.-18.06.2021 - Graphics siehe GUI Graphics siehe Video zu GUI Graphics - Vorlesung 16.06.2021 Quellcode aus der Vorlesung vom 16.06.2021 Ereignisbehandlung.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 import java.awt.BorderLayout ; import java.awt.Font ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.* ; public class Ereignisbehandlung extends JFrame { private Integer anzKlicks = 0 ; private JLabel unten ; public Ereignisbehandlung (){ super (); this . setTitle ( \"Ereignisbehandlung\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel content = this . initContent (); this . getContentPane (). add ( content ); this . setSize ( 200 , 150 ); this . setLocation ( 200 , 100 ); this . setVisible ( true ); } public JPanel initContent () { JPanel mainPanel = new JPanel (); mainPanel . setLayout ( new BorderLayout ()); JPanel oben = new JPanel (); JButton minus = new JButton ( \"-\" ); JButton plus = new JButton ( \"+\" ); oben . add ( minus ); oben . add ( plus ); // ActionHandler ah = new ActionHandler(); plus . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Ereignisbehandlung . this . anzKlicks ++ ; Ereignisbehandlung . this . unten . setText ( Ereignisbehandlung . this . anzKlicks . toString ()); } }); minus . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Ereignisbehandlung . this . anzKlicks -- ; Ereignisbehandlung . this . unten . setText ( Ereignisbehandlung . this . anzKlicks . toString ()); } }); this . unten = new JLabel ( this . anzKlicks . toString ()); this . unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 48 )); this . unten . setHorizontalAlignment ( JLabel . CENTER ); mainPanel . add ( oben , BorderLayout . NORTH ); mainPanel . add ( unten , BorderLayout . CENTER ); return mainPanel ; } /* public class ActionHandler implements ActionListener { @Override public void actionPerformed(ActionEvent e) { Object quelle = e.getSource(); // hat ActionEvent ausgeloest if(quelle instanceof JButton) { JButton button = (JButton)quelle; if(button.getText().equals(\"-\")) { Ereignisbehandlung.this.anzKlicks--; System.out.println(\"Minus-Button geklickt ... \" + Ereignisbehandlung.this.anzKlicks); } else if(button.getText().equals(\"+\")) { Ereignisbehandlung.this.anzKlicks++; System.out.println(\"Plus-Button geklickt ... \" + Ereignisbehandlung.this.anzKlicks); } Ereignisbehandlung.this.unten.setText(Ereignisbehandlung.this.anzKlicks.toString()); } } } */ public static void main ( String [] args ) { new Ereignisbehandlung (); } } Zeichnen.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Shape ; import java.awt.geom.Arc2D ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; import javax.swing.JTextField ; public class Zeichnen extends JFrame { public Zeichnen (){ super (); this . setTitle ( \"Wir zeichnen!\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel oben = new JPanel (); JTextField tf = new JTextField ( 10 ); oben . add ( tf ); this . getContentPane (). add ( oben , BorderLayout . NORTH ); Canvas content = new Canvas (); this . getContentPane (). add ( content , BorderLayout . CENTER ); JPanel unten = new JPanel (); JButton but1 = new JButton ( \"ok\" ); unten . add ( but1 ); this . getContentPane (). add ( unten , BorderLayout . SOUTH ); this . setSize ( 500 , 500 ); this . setLocation ( 200 , 100 ); this . setVisible ( true ); } public class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; g2 . setColor ( new Color ( 127 , 127 , 0 )); g2 . fillRect ( 20 , 80 , 400 , 400 ); Shape arc = new Arc2D . Double ( 40 , 30 , 300 , 300 , 90 , - 180 , Arc2D . PIE ); g2 . draw ( arc ); } } public static void main ( String [] args ) { new Zeichnen (); } } siehe \u00dcbung 10 siehe Aufgabe 10 21.-25.06.2021 - Mausereignisse siehe Mausereignisse siehe Video zu Mausereignisse - Vorlesung 23.06.2021 Quellcode aus der Vorlesung vom 23.06.2021 Mausereignisse.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.ArrayList ; import java.util.List ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Mausereignisse extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; List < Point > points ; Linie aktuelleLinie ; List < Linie > linien ; public Mausereignisse () { super (); this . setTitle ( \"Mausereignisse\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas ); this . points = new ArrayList <> (); this . linien = new ArrayList <> (); this . setSize ( 400 , 400 ); this . setLocation ( 1000 , 100 ); this . setVisible ( true ); } private class Canvas extends JPanel { final static int DURCHMESSER = 20 ; @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen for ( Point p : Mausereignisse . this . points ) { if ( p . x > this . getWidth () / 2 ) { g2 . setColor ( Color . RED ); } else { g2 . setColor ( Color . BLUE ); } g2 . fillOval ( p . x , p . y , DURCHMESSER , DURCHMESSER ); } g2 . setColor ( Color . GREEN ); for ( Linie l : Mausereignisse . this . linien ) { int x1 = l . getXStart (); int y1 = l . getYStart (); int x2 = l . getXEnde (); int y2 = l . getYEnde (); g2 . drawLine ( x1 , y1 , x2 , y2 ); } if ( Mausereignisse . this . aktuelleLinie != null ) { int x1 = Mausereignisse . this . aktuelleLinie . getXStart (); int y1 = Mausereignisse . this . aktuelleLinie . getYStart (); int x2 = Mausereignisse . this . aktuelleLinie . getXEnde (); int y2 = Mausereignisse . this . aktuelleLinie . getYEnde (); g2 . drawLine ( x1 , y1 , x2 , y2 ); } } } public static void main ( String [] args ) { new Mausereignisse (); } @Override public void mouseClicked ( MouseEvent e ) { /* int x = e.getX(); int y = e.getY(); System.out.println(\"mouseClicked bei [x=\" + p.x +\", y=\" +p.y +\"]\"); System.out.println(\"mouseClicked bei [x=\" + x +\", y=\" +y +\"]\"); */ } @Override public void mousePressed ( MouseEvent e ) { Point p = e . getPoint (); // p.x p.y this . points . add ( p ); this . aktuelleLinie = new Linie ( p , p ); this . canvas . repaint (); // ruft paintComponent() von canvas auf System . out . println ( \"mousePressed\" ); } @Override public void mouseReleased ( MouseEvent e ) { System . out . println ( \"mouseReleased\" ); this . linien . add ( this . aktuelleLinie ); this . canvas . repaint (); } @Override public void mouseEntered ( MouseEvent e ) { System . out . println ( \"mouseEntered\" ); } @Override public void mouseExited ( MouseEvent e ) { System . out . println ( \"mouseExited\" ); } @Override public void mouseDragged ( MouseEvent e ) { Point p = e . getPoint (); this . aktuelleLinie . setEnde ( p ); this . canvas . repaint (); // System.out.println(\"mouseDragged\"); } @Override public void mouseMoved ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); // System.out.println(\"mouseMoved bei [x=\" + x + \", y= \" + y + \"]\"); } } Linie.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 public class Linie { private Point start ; private Point ende ; public Linie ( Point start , Point ende ) { this . start = start ; this . ende = ende ; } public int getXStart () { return this . start . x ; } public int getYStart () { return this . start . y ; } public int getXEnde () { return this . ende . x ; } public int getYEnde () { return this . ende . y ; } public void setEnde ( Point ende ) { this . ende = ende ; } } siehe \u00dcbung 11 keine neuen Aufgaben mehr, jetzt nur noch Klausurvorbereitung, sowohl in den Vorlesungen, als auch in den \u00dcbungen 28.-02.07.2021 - Klausurvorbereitung siehe Klausurvorbereitung siehe Video zu Klausurvorbereitung - Vorlesung 30.06.2021 Quellcode aus der Vorlesung vom 30.06.2021 KV1.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 import java.awt.* ; import java.util.Random ; import javax.swing.* ; public class KV1 extends JFrame { Canvas canvas ; public KV1 () { super (); this . setTitle ( \"Klausurvorbereitung 1\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . setSize ( 400 , 400 ); this . setLocation ( 200 , 100 ); this . setVisible ( true ); } class Canvas extends JPanel { final static int DURCHMESSER = 3 ; final static int ANZAHL_PUNKTE = 10000 ; @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; int widthCanvas = this . getWidth (); int heightCanvas = this . getHeight (); System . out . println ( \"w = \" + widthCanvas + \", h = \" + heightCanvas ); //g2.drawLine(0, 0, widthCanvas, heightCanvas); //g2.drawLine(widthCanvas, 0, 0, heightCanvas); int x1 = 0 , seite = 0 , y1 = 0 ; if ( widthCanvas < heightCanvas ) { x1 = ( int )( widthCanvas * 0.05 ); seite = ( int )( widthCanvas * 0.9 ); y1 = ( heightCanvas - seite ) / 2 ; } else { y1 = ( int )( heightCanvas * 0.05 ); seite = ( int )( heightCanvas * 0.9 ); x1 = ( widthCanvas - seite ) / 2 ; } g2 . setStroke ( new BasicStroke ( 3.0f )); g2 . drawRect ( x1 , y1 , seite , seite ); g2 . drawArc ( x1 , y1 , seite * 2 , seite * 2 , 90 , 90 ); // g2.fillOval(30, 40, DURCHMESSER, DURCHMESSER); // g2.fillOval(130, 140, DURCHMESSER, DURCHMESSER); Random r = new Random (); int xm = x1 + seite ; int ym = y1 + seite ; for ( int i = 0 ; i < ANZAHL_PUNKTE ; i ++ ) { int x = r . nextInt ( seite - DURCHMESSER ) + x1 ; int y = r . nextInt ( seite - DURCHMESSER ) + y1 ; // (x-xm)^2 + (y-ym)^2 = r^2 if ((( x - xm ) * ( x - xm ) + ( y - ym ) * ( y - ym ) <= seite * seite )) { g2 . setColor ( Color . RED ); } else { g2 . setColor ( Color . BLUE ); } g2 . fillOval ( x , y , DURCHMESSER , DURCHMESSER ); } } } public static void main ( String [] args ) { new KV1 (); } } siehe \u00dcbung 12 12.-16.07.2021 - Klausurvorbereitung siehe Klausurvorbereitung siehe Video zu Klausurvorbereitung - Vorlesung 14.07.2021 Quellcode aus der Vorlesung vom 14.07.2021 RechteckeAnordnen.javaimport java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Font ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.ArrayList ; import java.util.List ; import javax.swing.BorderFactory ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JLabel ; import javax.swing.JPanel ; public class RechteckeAnordnen extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; JLabel fixLabel ; MyRectangle curRect ; Point remember ; boolean move = false ; List < MyRectangle > fixierteRect ; public RechteckeAnordnen () { super (); this . setTitle ( \"Rechtecke fixieren\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . fixierteRect = new ArrayList <> (); this . canvas = new Canvas (); this . canvas . setBorder ( BorderFactory . createLineBorder ( Color . BLACK )); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); // von den folgenden vier Zeilen werden eventuell eine oder mehrere oder alle auskommentiert this . getContentPane (). add ( this . initNorth (), BorderLayout . NORTH ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } // start inner class private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int widthPanel = this . getWidth (); int heightPanel = this . getHeight (); g2 . drawLine ( widthPanel / 2 , 0 , widthPanel / 2 , heightPanel ); g2 . drawLine ( 0 , heightPanel / 2 , widthPanel , heightPanel / 2 ); for ( MyRectangle mr : RechteckeAnordnen . this . fixierteRect ) { int x = mr . getX (); int y = mr . getY (); int width = mr . getWidth (); int height = mr . getHeight (); Color curColor = mr . getColor (); g2 . setColor ( curColor ); g2 . fillRect ( x , y , width , height ); } if ( RechteckeAnordnen . this . curRect != null ) { int x = RechteckeAnordnen . this . curRect . getX (); int y = RechteckeAnordnen . this . curRect . getY (); int width = RechteckeAnordnen . this . curRect . getWidth (); int height = RechteckeAnordnen . this . curRect . getHeight (); Color curColor = RechteckeAnordnen . this . curRect . getColor (); g2 . setColor ( curColor ); g2 . fillRect ( x , y , width , height ); } } } // ende innere Klasse private JPanel initNorth () { JPanel north = new JPanel (); this . fixLabel = new JLabel ( \"0 Rechtecke fixiert\" ); this . fixLabel . setFont ( new Font ( \"Verdana\" , Font . ITALIC , 16 )); north . add ( this . fixLabel ); return north ; } private JPanel initSouth () { JPanel south = new JPanel (); JButton btnClear = new JButton ( \"clear\" ); btnClear . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { RechteckeAnordnen . this . curRect = null ; RechteckeAnordnen . this . fixierteRect . clear (); RechteckeAnordnen . this . move = false ; RechteckeAnordnen . this . fixLabel . setText ( \"0 Rechtecke fixiert\" ); RechteckeAnordnen . this . canvas . repaint (); } }); south . add ( btnClear ); JButton btnRect = new JButton ( \"rectangle\" ); btnRect . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { int widthCanvas = RechteckeAnordnen . this . canvas . getWidth (); int heightCanvas = RechteckeAnordnen . this . canvas . getHeight (); int widthRect = widthCanvas / 2 ; int heightRect = heightCanvas / 2 ; int xRect = widthCanvas / 4 ; int yRect = heightCanvas / 4 ; Color curColor ; switch ( RechteckeAnordnen . this . fixierteRect . size ()) { case 0 : curColor = Color . GREEN ; break ; case 1 : curColor = Color . RED ; break ; case 2 : curColor = Color . YELLOW ; break ; case 3 : curColor = Color . DARK_GRAY ; break ; default : curColor = Color . WHITE ; } RechteckeAnordnen . this . curRect = new MyRectangle ( xRect , yRect , widthRect , heightRect , curColor ); RechteckeAnordnen . this . canvas . repaint (); } }); south . add ( btnRect ); return south ; } public static void main ( String [] args ) { new RechteckeAnordnen (); } @Override public void mouseDragged ( MouseEvent e ) { if ( this . move ) { // bewegen int x = e . getX (); int y = e . getY (); int xLast = this . remember . x ; int yLast = this . remember . y ; int xDiff = x - xLast ; int yDiff = y - yLast ; this . curRect . move ( xDiff , yDiff ); this . remember = e . getPoint (); // fixieren int xRect = this . curRect . getX (); int yRect = this . curRect . getY (); final int ABSTAND = 25 ; int xGoal = 0 ; int yGoal = 0 ; int widthCanvas = this . canvas . getWidth (); int heightCanvas = this . canvas . getHeight (); switch ( this . fixierteRect . size ()) { case 0 : xGoal = 0 ; yGoal = 0 ; break ; case 1 : xGoal = widthCanvas / 2 ; yGoal = 0 ; break ; case 2 : xGoal = 0 ; yGoal = heightCanvas / 2 ; break ; case 3 : xGoal = widthCanvas / 2 ; yGoal = heightCanvas / 2 ; break ; } if ( Math . abs ( xRect - xGoal ) < ABSTAND && Math . abs ( yRect - yGoal ) < ABSTAND ) { this . curRect . setFix ( true ); this . curRect . setX ( xGoal ); this . curRect . setY ( yGoal ); this . fixierteRect . add ( this . curRect ); int anzFix = this . fixierteRect . size (); if ( anzFix == 1 ) { this . fixLabel . setText ( anzFix + \" Rechteck fixiert\" ); } else if ( anzFix == 4 ) { this . fixLabel . setFont ( new Font ( \"Verdana\" , Font . ITALIC | Font . BOLD , 18 )); this . fixLabel . setText ( anzFix + \" Rechtecke fixiert -- Ende\" ); } else { this . fixLabel . setText ( anzFix + \" Rechtecke fixiert\" ); } this . curRect = null ; this . move = false ; } this . canvas . repaint (); } } @Override public void mouseMoved ( MouseEvent e ) { // TODO Auto-generated method stub } @Override public void mouseClicked ( MouseEvent e ) { // TODO Auto-generated method stub } @Override public void mousePressed ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); if ( this . curRect != null && ! this . curRect . isFix () && this . curRect . inside ( x , y )) { this . remember = new Point ( x , y ); this . move = true ; } } @Override public void mouseReleased ( MouseEvent e ) { this . move = false ; } @Override public void mouseEntered ( MouseEvent e ) { // TODO Auto-generated method stub } @Override public void mouseExited ( MouseEvent e ) { // TODO Auto-generated method stub } } MyRectangle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 import java.awt.Color ; public class MyRectangle { private int x ; private int y ; private int width ; private int height ; private Color color ; private boolean fix ; public MyRectangle ( int x , int y , int width , int height , Color color ) { this . x = x ; this . y = y ; this . width = width ; this . height = height ; this . color = color ; this . fix = false ; } public int getX () { return this . x ; } public int getY () { return this . y ; } public int getWidth () { return this . width ; } public int getHeight () { return this . height ; } public Color getColor () { return this . color ; } public boolean inside ( int x , int y ) { return ( x >= this . x && x <= this . x + this . width && y >= this . y && y <= this . y + this . height ); } public void move ( int xDiff , int yDiff ) { this . x = this . x + xDiff ; this . y = this . y + yDiff ; } public boolean isFix () { return this . fix ; } public void setFix ( boolean fix ) { this . fix = fix ; } public void setX ( int x ) { this . x = x ; } public void setY ( int y ) { this . y = y ; } } siehe \u00dcbung 14","title":"Home"},{"location":"#programmieren-ii","text":"Herzlich willkommen zur Programmieren II -Veranstaltung! Wir haben in Programmieren I unter Verwendung der Programmiersprache Java bereits wesentliche Konzepte kennengelernt, die f\u00fcr das Verst\u00e4ndnis mordenen Programmierens notwendig sind. Diese Kenntnisse wollen wir nun erweitern und vertiefen. Wir werden Git kennenlernen, Exceptions, Wrapper-Klassen, Interfaces und Collections. Wir besch\u00e4ftigen uns intensiv mit dem Testen von Programmen und erzeugen uns eigene Nutzeroberfl\u00e4chen. Hier einige Tipps, damit Sie die Veranstaltung erfolgreich durchf\u00fchren und Sie dabei auch Spa\u00df haben: L\u00f6sen Sie alle \u00dcbungsaufgaben selbst\u00e4ndig! Es ist kein Problem, wenn Sie f\u00fcr das Bew\u00e4ltigen der \u00dcbungen etwas l\u00e4nger ben\u00f6tigen. Sollten Sie es gar nicht alleine schaffen, ist das auch kein Problem. Wichtig ist dann, dass Sie sich die L\u00f6sung anschauen und es erneut selbst\u00e4ndig versuchen. H\u00f6ren Sie nicht auf, bis Sie es geschafft haben! Sie k\u00f6nnen die Hausaufgaben zu zweit l\u00f6sen. Achten Sie aber darauf, dass Sie Ihre gemeinsame L\u00f6sung vollst\u00e4ndig verstanden haben und dass Sie sie danach auch alleine erstellen k\u00f6nnen. Sie k\u00f6nnen beim L\u00f6sen der Hausaufgaben beliebig kreativ sein! Die Aufgabenstellung gibt Ihnen Anhaltspunkte f\u00fcr eine eventuelle L\u00f6sung. Sie k\u00f6nnen es aber auch ganz anders machen! Die Klausurvorbereitung beginnt mit Beginn der Veranstaltung. Es ist nicht m\u00f6glich, die Klausur am Ende des Semesters zu bestehen, wenn Sie nicht das ganze Semester \u00fcber intensiv programmieren. Die \u00dcbungsaufgaben sind \"kleine\" Aufgaben, um das in der Vorlesung vermittelte Wissen direkt anzuwenden. F\u00fcr die L\u00f6sung der Hausaufgaben ist bereits ein gewisses Abstraktionsniveau erforderlich, um zu erkennen, dass das in der Vorlesung vermittelte Wissen daf\u00fcr ausreichend ist. Programmieren lernt man nur durch Programmieren. Sie m\u00fcssen es tun. Das Lesen von B\u00fcchern oder das \"Anschauen\" von Code gen\u00fcgt nicht. Eine Sprache lernt man auch nur durch Sprechen. Sie m\u00fcssen programmieren, programmieren, prohgrammieren... Lassen Sie sich durch Fehler nicht verunsichern, sondern analysieren Sie Ihre Fehler. Bis zur Klausur sollten Sie alle Fehler einmal gemacht haben. Wenn Sie sich \u00fcberlegen, warum das jeweils ein Fehler war, dann werden Sie diesen Fehler nicht wiederholen und haben durch die Reflektion eine Menge gelernt. Fehler zu machen (und dar\u00fcber zu reflektieren) geh\u00f6rt zu den besten Lernmethoden des Programmierens. Haben Sie Spa\u00df! Je mehr Sie das Programmieren lernen, je mehr Spa\u00df werden Sie haben. Wir versuchen, dass Sie das genaze Semester \u00fcber Spa\u00df am Programmieren haben werden. Sollte es Ihnen zwischendurch keinen Spa\u00df mehr machen, geben Sie mir sofort Bescheid! Viel Erfolg! Und viel Spa\u00df!","title":"Programmieren II"},{"location":"#organisatorisches","text":"Der (Corona-)Plan zur Durchf\u00fchrung der Veranstaltung ist derzeit wie folgt: Themen werden ausf\u00fchrlich in diesem Skript beschrieben und anhand von Videos eingef\u00fchrt und verdeutlicht, das Skript und die Videos werden (sp\u00e4testens) freitags hochgeladen, das hei\u00dft, \"Vorlesungen\" finden asynchron statt (im Selbststudium), zusammen mit dem Skript und den Videos werden sowohl die \u00dcbung als auch die Aufgabe hochgeladen, die \u00dcbung (und die vergangene Aufgabe) werden donnerstags (8:00 Uhr und nochmal 14:00 Uhr) besprochen (Sie k\u00f6nnen frei w\u00e4hlen, welche der beiden \u00dcbungen Sie w\u00e4hlen), bei Bedarf k\u00f6nnen wir auch gerne jederzeit eine Synchron-Video-Vorlesung einschieben, um Fragen zu erkl\u00e4ren, die Veranstaltung wird durch ein Tutorium unterst\u00fctzt, sollten Sie W\u00fcnsche haben, diesen Plan zu \u00e4ndern, kommen Sie gerne auf mich zu Zur erfolgreichen Durchf\u00fchrung der Veranstaltung m\u00fcssen die Aufgaben l\u00f6sen und zu den jeweiligen Fristen auf GitHub hochladen. Wenn Sie alle Aufgaben fristgerecht hochgeladen haben, d\u00fcrfen Sie an der Klausur teilnehmen. Es werden insgesamt wahrscheinlich 10 Aufgaben sein, die Sie selbst\u00e4ndig l\u00f6sen und hochladen m\u00fcssen. Sie k\u00f6nnen die Aufgaben auch zu zweit l\u00f6sen. Laden Sie dann aber bitte beide jeweils die L\u00f6sung hoch. Am Ende des Semesters schreiben wir eine Klausur (am Rechner). Diese Klausur wird bewertet und entspricht der Note f\u00fcr das gesamte \"Programmieren\"-Modul. Unter Aufgaben sind die Aufgaben beschrieben, die Sie in jeder Woche ausf\u00fchren sollen. Damit Sie dies erfolgreich erledigen k\u00f6nnen, ist jeweils angegeben, welche Themen Sie daf\u00fcr durcharbeiten m\u00fcssen. Das Durcharbeiten der jeweiligen Themen entspricht jeweils einer Vorlesung. Diese wird also selbst\u00e4ndig durchgef\u00fchrt. Daneben gibt es jede Woche (zu jedem Thema) \u00dcbungen , die wir in den \u00dcbungszeiten besprechen. Diese dienen der Anwendung und der Festigung der erlangten Kenntnisse. Die \u00dcbungen sind kleine Aufgaben, an denen Sie das neue Wissen anwenden sollen. Die \u00dcbungen dienen der Bef\u00e4higung, die (gr\u00f6\u00dferen) Aufgaben l\u00f6sen zu k\u00f6nnen. F\u00fcr die Kommunikation untereinander verwenden wir Slack . Dort k\u00f6nnen Sie alle inhaltlichen und organisatorischen Fragen stellen. Ich f\u00e4nde es gut, wenn ich dort m\u00f6glichst wenig Fragen - zumindest die inhaltlichen - beantworten m\u00fcsste, sondern eine Art internes Diskussionsforum entsteht. Es ist sehr gew\u00fcnscht, dort Fragen zu stellen und noch mehr gew\u00fcnscht, diese von Ihnen dort beantwortet zu sehen. Damit w\u00e4re allen geholfen und ich kann besser erkennen, wo noch Nachhol- bzw. Erl\u00e4uterungsbedarf bei den meisten besteht. Au\u00dferdem lernen Sie beim Beantworten der Fragen nochmals deutlich mehr. Das w\u00e4re super, wenn das klappt!","title":"Organisatorisches"},{"location":"#grober-inhalt-kann-sich-noch-andern","text":"Wir besch\u00e4ftigen uns dieses Semester mit weiteren Konzepten der Programmierung. Wir lernen weitere Datenstrukturen kennen (Collections), werden lernen, mit Exceptions umzugehen und implementieren Tests. Wir besch\u00e4ftigen uns mit Grafischen Nutzeroberfl\u00e4chen (GUIs) und lernen, Nutzereignisse zu behandeln. Nachfolgend der vorl\u00e4ufige Wochenplan (wird eventuell angepasst). Die Vorlesungsvideos finden Sie darunter f\u00fcr die einzelnen Wochen (unter Inhalte ). Woche Themen (Vorlesung) \u00dcbung Aufgabe Abgabe Aufgabe bis 1. 05.-09.04.2021 Einf\u00fchrung und Organisatorisches, Wiederholung - - - 1. 12.-16.04.2021 Git \u00dcbung 1 Aufgabe 1 25.04.2021 2. 19.-23.04.2021 Enumerations und Exceptions \u00dcbung 2 Aufgabe 2 02.05.2021 3. 26.-30.04.2021 Testen mit JUnit \u00dcbung 3 Aufgabe 3 09.05.2021 4. 03.-07.05.2021 Collections (List und Set) \u00dcbung 4 Aufgabe 4 16.05.2021 5. 10.-14.05.2021 Wrapper-Klassen (boxing und unboxing) \u00dcbung 5 Aufgabe 5 23.05.2021 6. 17.-21.05.2021 Collections (Map) \u00dcbung 6 - - 7. 24.-28.05.2021 Abstrakte Klassen + Interfaces \u00dcbung 7 Aufgabe 6 06.06.2021 8. 31.-04.06.2021 GUI Einf\u00fchrung \u00dcbung 8 Aufgabe 7 13.06.2021 9. 07.-11.06.2021 GUI Ereignisse \u00dcbung 9 Aufgabe 8 20.06.2021 10. 14.-18.06.2021 Graphics \u00dcbung 10 Aufgabe 9 04.07.2021 12. 21.-25.06.2021 Mausereignisse \u00dcbung 11 Aufgabe 10 11.07.2021 13. 28.-02.07.2021 Klausurvorbereitung \u00dcbung 12 - - 14. 05.-09.07.2021 Klausurvorbereitung \u00dcbung 13 - - 15. 12.-16.07.2021 Klausurvorbereitung - - -","title":"Grober Inhalt (kann sich noch \u00e4ndern)"},{"location":"#inhalte","text":"05.-09.04.2021 - Einf\u00fchrung und Organisatorisches + Wiederholung siehe Organisatorisches siehe Wiederholung siehe Aufgabe 1 12.-16.04.2021 - Git siehe Git Video zu Git siehe \u00dcbung 1 siehe Aufgabe 2 19.-23.04.2021 - Enum und Exceptions siehe Mehrdimensionale Arrays und Aufz\u00e4hlungstypen Video zu Mehrdimensionale Arrays und Aufz\u00e4hlungstypen siehe Exceptions Video zu Exceptions - das ist Teil 1 (Einf\u00fchrung) noch ein Video zu Exceptions - das ist Teil 2 (eigene Exceptions) siehe \u00dcbung 2 siehe Aufgabe 3 26.-30.04.2021 - Testen mit JUnit siehe auch Teil 2 des Videos zu Exceptions (unter 19.-23.04.2021 - Enum und Exceptions eins dr\u00fcber) - das kam erst diese Woche hinzu, deshalb hier der Verweis, geh\u00f6rt aber thematisch in die Woche davor, deshalb dort siehe JUnit-Tests siehe Video zu JUnit-Tests siehe \u00dcbung 3 siehe Aufgabe 4 Video aus der Vorlesung vom 28.04.2021 Quellcode aus der Vorlesung vom 28.04.2021 MyMath.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 package vorlesungen.testen ; public class MyMath { public static int abs ( int number ) { if ( number < 0 ) { return - number ; } else { return number ; } } public static double abs ( double number ) { if ( number < 0 ) { return - number ; } else { return number ; } } public static double sqrt ( double number ) { double a = number ; double b = 1.0 ; final double AREA = number ; final double ERROR = 0.000001 ; while ( abs ( a - b ) >= ERROR ) { a = ( a + b ) / 2.0 ; b = AREA / a ; } return a ; } public static int ggT ( int a , int b ) { while ( b != 0 ) { int rest = a % b ; a = b ; b = rest ; } return a ; } } MyMathTest.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 package vorlesungen.testen ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.Test ; class MyMathTest { @Test void testAbs3 () { int result = MyMath . abs ( 3 ); assertEquals ( 3 , result , \"abs(3) not 3\" ); } @Test void testAbsMinus3 () { int result = MyMath . abs ( - 3 ); assertEquals ( 3 , result , \"abs(-3) not 3\" ); } @Test void testSqrt9 () { double result = MyMath . sqrt ( 9.0 ); assertEquals ( 3.0 , result , 0.00001 ); } @Test void testSqrt25 () { double result = MyMath . sqrt ( 25.0 ); assertTrue ( MyMath . abs ( 5.0 - result ) <= 0.00001 ); } @Test void testGgT44und12 () { int result = MyMath . ggT ( 44 , 12 ); assertEquals ( 4 , result , \"ggT of 44 and 12 not 4\" ); } } module-info.java 1 2 3 4 module SoSe2021 { requires java . desktop ; requires org . junit . jupiter . api ; } 03.-07.05.2021 - Collections (List und Set) siehe Collections siehe Video zu Collections - Vorlesung 05.05.2021 Quellcode aus der Vorlesung vom 05.05.2021 ListenUndMengen.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 package vorlesungen.listenmengen ; import java.util.* ; /* * Collections: aehnlich wie Arrays, viele Elemente speichern * keine feste Laenge * wir koennen nur Referenztypen speichern (also nicht int, boolean, char, double, ...) * Elemente verschiedenen Typs speicherbar --> gar nicht gut, deshalb Typisieren * Arten von Collections: List (wie Arrays), Set (keine Doppelungen), Stack, Queue * Map (2-spaltige Tabellen Schl\u00fcssel-/Werte-Paare) */ public class ListenUndMengen { public static void main ( String [] args ) { System . out . printf ( \"%n%n-------------- Listen ------------------%n%n\" ); Set < String > set1 = new HashSet <> (); Set < String > set2 = new TreeSet <> (); String s1 = \"erster\" ; String s2 = \"zweiter\" ; String s3 = \"dritter\" ; String s4 = \"zweiter\" ; Integer i1 = 1 ; System . out . println ( set1 . add ( s1 )); System . out . println ( set1 . add ( s2 )); System . out . println ( set1 . add ( s3 )); System . out . println ( set1 . add ( s4 )); // System.out.println(set1.add(i1)); System . out . println ( set1 . size ()); Iterator < String > it = set1 . iterator (); while ( it . hasNext ()) { System . out . println ( it . next ()); } System . out . println (); for ( String element : set1 ) { System . out . println ( element ); } System . out . println ( set1 . remove ( \"erster\" )); System . out . println ( set1 . remove ( \"vierter\" )); System . out . println (); for ( String element : set1 ) { System . out . println ( element ); } System . out . printf ( \"%n%n-------------- Listen ------------------%n%n\" ); List < String > l1 = new ArrayList <> (); List < String > l2 = new LinkedList <> (); l1 . add ( s1 ); l1 . add ( s2 ); l1 . add ( s3 ); l1 . add ( s4 ); for ( String s : l1 ) { System . out . println ( s ); } System . out . println ( l1 . size ()); System . out . println ( l1 . remove ( \"zweiter\" )); System . out . println ( l1 . remove ( \"vierter\" )); for ( String s : l1 ) { System . out . println ( s ); } System . out . println (); System . out . println ( \"geloescht : \" + l1 . remove ( 1 )); for ( String s : l1 ) { System . out . println ( s ); } System . out . println (); l2 . add ( \"neu\" ); l2 . add ( \"alt\" ); for ( String s : l2 ) { System . out . println ( s ); } System . out . println (); l1 . addAll ( l2 ); for ( String s : l1 ) { System . out . println ( s ); } System . out . println (); l1 . removeAll ( l2 ); for ( String s : l1 ) { System . out . println ( s ); } } } siehe \u00dcbung 5 siehe Aufgabe 5 10.-14.05.2021 - Wrapper-Klassen (boxing und unboxing) siehe Wrapper-Klassen siehe Video zu Wrapper-Klassen - Vorlesung 12.05.2021 diese Woche keine neue \u00dcbung (Donnerstag ist Feiertag) diese Woche keine neue Aufgabe (M\u00f6glichkeit, bisher \"Liegengebliebenes\" aufzuarbeiten) L\u00f6sungen f\u00fcr Aufgaben 1 - 3 hochgeladen 17.-21.05.2021 - Collections (Map) siehe Maps siehe Video zu Maps - Vorlesung 19.05.2021 Quellcode aus der Vorlesung vom 19.05.2021 Maps.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 package vorlesungen.maps ; import java.util.* ; public class Maps { public static void main ( String [] args ) { /* * in Maps speichern wir Schluessel-Werte-Paare * Schluessel sind eindeutig, Schluesseltyp K * Werte koennen sich doppel, Wertetyp V * statt add(), addAll() hier put(), putAll() */ Map < String , Integer > mapA = new HashMap <> (); mapA . put ( \"A\" , 1 ); mapA . put ( \"B\" , 2 ); mapA . put ( \"C\" , 3 ); /* * ein einzelnes Schluessel-Werte-Paar ist vom * Typ Map.Entry * typisiert: Map.Entry<K,V> * unser Beispiel: Map.Entry<String, Integer> */ /* * leider nicht iterator(), sondern entrySet() * entrySet() erzeugt eine Set von lauter Schluessel-Werte-Paaren */ // Variante 1 Set < Map . Entry < String , Integer >> allEntriesFromMapA = mapA . entrySet (); for ( Map . Entry < String , Integer > entry : allEntriesFromMapA ) { System . out . println ( \"Schluessel : \" + entry . getKey () + \" Wert : \" + entry . getValue ()); } System . out . println ( allEntriesFromMapA . size ()); // Iterator<Map.Entry<String, Integer>> it = allEntriesFromMapA.iterator(); System . out . println (); // Variante 2 for ( Map . Entry < String , Integer > entry : mapA . entrySet ()) { System . out . println ( \"Schluessel : \" + entry . getKey () + \" Wert : \" + entry . getValue ()); } System . out . println ( mapA . containsKey ( \"B\" )); System . out . println ( mapA . containsKey ( \"D\" )); System . out . println ( mapA . get ( \"B\" )); System . out . printf ( \"%n%n------------ alle keys von mapA ---------------%n%n\" ); Set < String > allKeys = mapA . keySet (); for ( String key : allKeys ) { System . out . println ( \"key : \" + key ); } System . out . printf ( \"%n%n------------ mapA ---------------%n%n\" ); mapA . put ( \"B\" , 5 ); for ( Map . Entry < String , Integer > entry : mapA . entrySet ()) { System . out . println ( \"Schluessel : \" + entry . getKey () + \" Wert : \" + entry . getValue ()); } System . out . printf ( \"%n%n------------ mapB ---------------%n%n\" ); Map < String , Integer > mapB = new HashMap <> (); mapB . put ( \"B\" , 6 ); mapB . put ( \"D\" , 7 ); for ( Map . Entry < String , Integer > entry : mapB . entrySet ()) { System . out . println ( \"Schluessel : \" + entry . getKey () + \" Wert : \" + entry . getValue ()); } mapA . putAll ( mapB ); System . out . printf ( \"%n%n------------ mapA ---------------%n%n\" ); for ( Map . Entry < String , Integer > entry : mapA . entrySet ()) { System . out . println ( \"Schluessel : \" + entry . getKey () + \" Wert : \" + entry . getValue ()); } mapA . put ( \"E\" , 1 ); System . out . printf ( \"%n%n------------ alle values von mapA ---------------%n%n\" ); Collection < Integer > allValues = mapA . values (); for ( Integer val : allValues ) { System . out . println ( \"value : \" + val ); } } } siehe \u00dcbung 6 siehe Aufgabe 6 24.-28.05.2021 - Abstrakte Klassen und Interfaces siehe Abstrakte Klassen und Interfaces siehe Video zu Abstrakte Klassen und Interfaces - Vorlesung 26.05.2021 Quellcode aus der Vorlesung vom 26.05.2021 Shape.java 1 2 3 4 5 public abstract class Shape { public abstract double perimeter (); public abstract double area (); } Rectangle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public class Rectangle extends Shape implements Comparable < Rectangle > { private int width ; private int height ; public Rectangle ( int width , int height ) { this . width = width ; this . height = height ; } @Override public double perimeter () { return ( 2.0 * ( this . width + this . height )); } @Override public double area () { return this . width * this . height ; } @Override public int compareTo ( Rectangle o ) { /* * this > o --> positiver int-Wert * this < o --> negativer int-Wert * this == o --> 0 */ return (( this . width + this . height ) - ( o . width + o . height )); } } Circle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class Circle extends Shape { private double radius ; public Circle ( double radius ) { this . radius = radius ; } @Override public double perimeter () { return Math . PI * 2.0 * this . radius ; } @Override public double area () { return Math . PI * this . radius * this . radius ; } } TestShape.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 public class TestShape { public static void printPerimeter ( Shape s ) { System . out . printf ( \"perimeter : %.2f cm%n\" , s . perimeter ()); } public static void printArea ( Shape s ) { System . out . printf ( \"area : %.2f cm%n\" , s . area ()); } public static void sortieren ( Comparable [] unsorted ) { for ( int bubble = 1 ; bubble < unsorted . length ; bubble ++ ) { for ( int index = 0 ; index < unsorted . length - bubble ; index ++ ) { if ( unsorted [ index ] . compareTo ( unsorted [ index + 1 ] ) > 0 ) { Comparable tmp = unsorted [ index ] ; unsorted [ index ] = unsorted [ index + 1 ] ; unsorted [ index + 1 ] = tmp ; } } } } public static void main ( String [] args ) { Shape s1 = new Rectangle ( 10 , 20 ); System . out . println ( s1 . perimeter ()); System . out . println ( s1 . area ()); Shape s2 = new Circle ( 1.0 ); System . out . println ( s2 . perimeter ()); System . out . println ( s2 . area ()); printPerimeter ( new Rectangle ( 5 , 15 )); printPerimeter ( new Circle ( 5.0 )); System . out . println ( \"A\" . compareTo ( \"B\" )); System . out . println ( \"B\" . compareTo ( \"A\" )); System . out . println ( \"A\" . compareTo ( \"A\" )); Rectangle [] rectArr = new Rectangle [ 6 ] ; rectArr [ 0 ] = new Rectangle ( 9 , 13 ); rectArr [ 1 ] = new Rectangle ( 4 , 17 ); rectArr [ 2 ] = new Rectangle ( 12 , 5 ); rectArr [ 3 ] = new Rectangle ( 8 , 9 ); rectArr [ 4 ] = new Rectangle ( 10 , 11 ); rectArr [ 5 ] = new Rectangle ( 5 , 15 ); System . out . printf ( \"%n%n------------------------ unsortiert --------------------------%n%n\" ); sortieren ( rectArr ); } } siehe \u00dcbung 7 siehe Aufgabe 7 31.-04.06.2021 - GUI Einf\u00fchrung siehe Grafical User Interfaces siehe Video zu Grafical User Interfaces - Vorlesung 02.06.2021 Quellcode aus der Vorlesung vom 02.06.2021 MyFirstWindow.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.FlowLayout ; import java.awt.GridLayout ; import javax.swing.JButton ; import javax.swing.JCheckBox ; import javax.swing.JFrame ; import javax.swing.JLabel ; import javax.swing.JPanel ; import javax.swing.JRadioButton ; import javax.swing.JTextField ; public class MyFirstWindow extends JFrame { public MyFirstWindow () { super (); // Konstruktor von JFrame this . setTitle ( \"My first window\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel content = this . initContent (); this . getContentPane (). add ( content ); // this.getContentPane().setBackground(Color.CYAN); this . setSize ( 400 , 300 ); this . setLocation ( 200 , 100 ); this . setVisible ( true ); } /* * FlowLayout - alles nebeneinander, so lange es passt, sonst untereinander (Standardlayout JPanel) * GridLayout - Gitterstruktur (Zeilen und Spalten) * BorderLayout - Norden, Sueden, Osten, Westen, Center (Stanfdardlayout eines JFrame) */ private JPanel initContent () { JPanel mainPanel = new JPanel (); mainPanel . setLayout ( new BorderLayout ()); JPanel center = new JPanel (); center . setLayout ( new GridLayout ( 3 , 2 )); JButton cb1 = new JButton ( \"EAST\" ); JButton cb2 = new JButton ( \"WEST\" ); JButton cb3 = new JButton ( \"NORTH\" ); JButton cb4 = new JButton ( \"SOUTH\" ); JButton cb5 = new JButton ( \"CENTER\" ); center . add ( cb1 ); center . add ( cb2 ); center . add ( cb3 ); center . add ( cb4 ); center . add ( cb5 ); JButton b1 = new JButton ( \"EAST\" ); JButton b2 = new JButton ( \"WEST\" ); JButton b3 = new JButton ( \"NORTH\" ); JButton b4 = new JButton ( \"SOUTH\" ); JButton b5 = new JButton ( \"CENTER\" ); mainPanel . add ( b1 , BorderLayout . EAST ); mainPanel . add ( center , BorderLayout . CENTER ); mainPanel . add ( b3 , BorderLayout . NORTH ); mainPanel . add ( b4 , BorderLayout . SOUTH ); mainPanel . add ( b2 , BorderLayout . WEST ); /* mainPanel.setLayout(new FlowLayout(FlowLayout.CENTER, 30, 40)); JButton b1 = new JButton(\"EAST\"); JButton b2 = new JButton(\"WEST\"); JButton b3 = new JButton(\"NORTH\"); JButton b4 = new JButton(\"SOUTH\"); JButton b5 = new JButton(\"CENTER\"); mainPanel.add(b1); mainPanel.add(b2); mainPanel.add(b3); mainPanel.add(b4); mainPanel.add(b5); */ /* mainPanel.setLayout(new BorderLayout()); JButton b1 = new JButton(\"EAST\"); JButton b2 = new JButton(\"WEST\"); JButton b3 = new JButton(\"NORTH\"); JButton b4 = new JButton(\"SOUTH\"); JButton b5 = new JButton(\"CENTER\"); JLabel l1 = new JLabel(\"Test\"); JPanel east = new JPanel(); east.setLayout(new FlowLayout()); east.add(b1); east.add(l1); mainPanel.add(east, BorderLayout.EAST); mainPanel.add(b2, BorderLayout.WEST); mainPanel.add(b3, BorderLayout.NORTH); mainPanel.add(b4, BorderLayout.SOUTH); mainPanel.add(b5, BorderLayout.CENTER); */ /* // hier weitere Container oder Steuerelemente hinzufuegen JLabel label = new JLabel(\"Name : \"); JTextField input = new JTextField(10); JButton button = new JButton(\"Klick mich!\"); JCheckBox cb = new JCheckBox(); JRadioButton rb = new JRadioButton(); mainPanel.add(label); mainPanel.add(input); mainPanel.add(button); mainPanel.add(cb); mainPanel.add(rb); */ return mainPanel ; } public static void main ( String [] args ) { new MyFirstWindow (); } } siehe \u00dcbung 8 siehe Aufgabe 8 07.-11.06.2021 - GUI Ereignisse siehe GUI Ereignisse siehe Video zu GUI Ereignisse - Vorlesung 09.06.2021 Quellcode aus der Vorlesung vom 09.06.2021 Ereignisbehandlung.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 import java.awt.BorderLayout ; import java.awt.Font ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.* ; public class Ereignisbehandlung extends JFrame implements ActionListener { Integer anzKlicks = 0 ; JLabel unten ; public Ereignisbehandlung (){ super (); this . setTitle ( \"Ereignisbehandlung\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel content = this . initContent (); this . getContentPane (). add ( content ); this . setSize ( 200 , 150 ); this . setLocation ( 200 , 100 ); this . setVisible ( true ); } public JPanel initContent () { JPanel mainPanel = new JPanel (); mainPanel . setLayout ( new BorderLayout ()); JPanel oben = new JPanel (); JButton minus = new JButton ( \"-\" ); JButton plus = new JButton ( \"+\" ); oben . add ( minus ); oben . add ( plus ); plus . addActionListener ( this ); minus . addActionListener ( this ); this . unten = new JLabel ( this . anzKlicks . toString ()); this . unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 48 )); this . unten . setHorizontalAlignment ( JLabel . CENTER ); mainPanel . add ( oben , BorderLayout . NORTH ); mainPanel . add ( unten , BorderLayout . CENTER ); return mainPanel ; } public static void main ( String [] args ) { new Ereignisbehandlung (); } @Override public void actionPerformed ( ActionEvent e ) { Object quelle = e . getSource (); // hat ActionEvent ausgeloest if ( quelle instanceof JButton ) { JButton button = ( JButton ) quelle ; if ( button . getText (). equals ( \"-\" )) { this . anzKlicks -- ; System . out . println ( \"Minus-Button geklickt ... \" + this . anzKlicks ); } else if ( button . getText (). equals ( \"+\" )) { this . anzKlicks ++ ; System . out . println ( \"Plus-Button geklickt ... \" + this . anzKlicks ); } this . unten . setText ( this . anzKlicks . toString ()); } } } siehe \u00dcbung 9 siehe Aufgabe 9 14.-18.06.2021 - Graphics siehe GUI Graphics siehe Video zu GUI Graphics - Vorlesung 16.06.2021 Quellcode aus der Vorlesung vom 16.06.2021 Ereignisbehandlung.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 import java.awt.BorderLayout ; import java.awt.Font ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.* ; public class Ereignisbehandlung extends JFrame { private Integer anzKlicks = 0 ; private JLabel unten ; public Ereignisbehandlung (){ super (); this . setTitle ( \"Ereignisbehandlung\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel content = this . initContent (); this . getContentPane (). add ( content ); this . setSize ( 200 , 150 ); this . setLocation ( 200 , 100 ); this . setVisible ( true ); } public JPanel initContent () { JPanel mainPanel = new JPanel (); mainPanel . setLayout ( new BorderLayout ()); JPanel oben = new JPanel (); JButton minus = new JButton ( \"-\" ); JButton plus = new JButton ( \"+\" ); oben . add ( minus ); oben . add ( plus ); // ActionHandler ah = new ActionHandler(); plus . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Ereignisbehandlung . this . anzKlicks ++ ; Ereignisbehandlung . this . unten . setText ( Ereignisbehandlung . this . anzKlicks . toString ()); } }); minus . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Ereignisbehandlung . this . anzKlicks -- ; Ereignisbehandlung . this . unten . setText ( Ereignisbehandlung . this . anzKlicks . toString ()); } }); this . unten = new JLabel ( this . anzKlicks . toString ()); this . unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 48 )); this . unten . setHorizontalAlignment ( JLabel . CENTER ); mainPanel . add ( oben , BorderLayout . NORTH ); mainPanel . add ( unten , BorderLayout . CENTER ); return mainPanel ; } /* public class ActionHandler implements ActionListener { @Override public void actionPerformed(ActionEvent e) { Object quelle = e.getSource(); // hat ActionEvent ausgeloest if(quelle instanceof JButton) { JButton button = (JButton)quelle; if(button.getText().equals(\"-\")) { Ereignisbehandlung.this.anzKlicks--; System.out.println(\"Minus-Button geklickt ... \" + Ereignisbehandlung.this.anzKlicks); } else if(button.getText().equals(\"+\")) { Ereignisbehandlung.this.anzKlicks++; System.out.println(\"Plus-Button geklickt ... \" + Ereignisbehandlung.this.anzKlicks); } Ereignisbehandlung.this.unten.setText(Ereignisbehandlung.this.anzKlicks.toString()); } } } */ public static void main ( String [] args ) { new Ereignisbehandlung (); } } Zeichnen.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Shape ; import java.awt.geom.Arc2D ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; import javax.swing.JTextField ; public class Zeichnen extends JFrame { public Zeichnen (){ super (); this . setTitle ( \"Wir zeichnen!\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel oben = new JPanel (); JTextField tf = new JTextField ( 10 ); oben . add ( tf ); this . getContentPane (). add ( oben , BorderLayout . NORTH ); Canvas content = new Canvas (); this . getContentPane (). add ( content , BorderLayout . CENTER ); JPanel unten = new JPanel (); JButton but1 = new JButton ( \"ok\" ); unten . add ( but1 ); this . getContentPane (). add ( unten , BorderLayout . SOUTH ); this . setSize ( 500 , 500 ); this . setLocation ( 200 , 100 ); this . setVisible ( true ); } public class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; g2 . setColor ( new Color ( 127 , 127 , 0 )); g2 . fillRect ( 20 , 80 , 400 , 400 ); Shape arc = new Arc2D . Double ( 40 , 30 , 300 , 300 , 90 , - 180 , Arc2D . PIE ); g2 . draw ( arc ); } } public static void main ( String [] args ) { new Zeichnen (); } } siehe \u00dcbung 10 siehe Aufgabe 10 21.-25.06.2021 - Mausereignisse siehe Mausereignisse siehe Video zu Mausereignisse - Vorlesung 23.06.2021 Quellcode aus der Vorlesung vom 23.06.2021 Mausereignisse.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.ArrayList ; import java.util.List ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Mausereignisse extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; List < Point > points ; Linie aktuelleLinie ; List < Linie > linien ; public Mausereignisse () { super (); this . setTitle ( \"Mausereignisse\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas ); this . points = new ArrayList <> (); this . linien = new ArrayList <> (); this . setSize ( 400 , 400 ); this . setLocation ( 1000 , 100 ); this . setVisible ( true ); } private class Canvas extends JPanel { final static int DURCHMESSER = 20 ; @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen for ( Point p : Mausereignisse . this . points ) { if ( p . x > this . getWidth () / 2 ) { g2 . setColor ( Color . RED ); } else { g2 . setColor ( Color . BLUE ); } g2 . fillOval ( p . x , p . y , DURCHMESSER , DURCHMESSER ); } g2 . setColor ( Color . GREEN ); for ( Linie l : Mausereignisse . this . linien ) { int x1 = l . getXStart (); int y1 = l . getYStart (); int x2 = l . getXEnde (); int y2 = l . getYEnde (); g2 . drawLine ( x1 , y1 , x2 , y2 ); } if ( Mausereignisse . this . aktuelleLinie != null ) { int x1 = Mausereignisse . this . aktuelleLinie . getXStart (); int y1 = Mausereignisse . this . aktuelleLinie . getYStart (); int x2 = Mausereignisse . this . aktuelleLinie . getXEnde (); int y2 = Mausereignisse . this . aktuelleLinie . getYEnde (); g2 . drawLine ( x1 , y1 , x2 , y2 ); } } } public static void main ( String [] args ) { new Mausereignisse (); } @Override public void mouseClicked ( MouseEvent e ) { /* int x = e.getX(); int y = e.getY(); System.out.println(\"mouseClicked bei [x=\" + p.x +\", y=\" +p.y +\"]\"); System.out.println(\"mouseClicked bei [x=\" + x +\", y=\" +y +\"]\"); */ } @Override public void mousePressed ( MouseEvent e ) { Point p = e . getPoint (); // p.x p.y this . points . add ( p ); this . aktuelleLinie = new Linie ( p , p ); this . canvas . repaint (); // ruft paintComponent() von canvas auf System . out . println ( \"mousePressed\" ); } @Override public void mouseReleased ( MouseEvent e ) { System . out . println ( \"mouseReleased\" ); this . linien . add ( this . aktuelleLinie ); this . canvas . repaint (); } @Override public void mouseEntered ( MouseEvent e ) { System . out . println ( \"mouseEntered\" ); } @Override public void mouseExited ( MouseEvent e ) { System . out . println ( \"mouseExited\" ); } @Override public void mouseDragged ( MouseEvent e ) { Point p = e . getPoint (); this . aktuelleLinie . setEnde ( p ); this . canvas . repaint (); // System.out.println(\"mouseDragged\"); } @Override public void mouseMoved ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); // System.out.println(\"mouseMoved bei [x=\" + x + \", y= \" + y + \"]\"); } } Linie.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 public class Linie { private Point start ; private Point ende ; public Linie ( Point start , Point ende ) { this . start = start ; this . ende = ende ; } public int getXStart () { return this . start . x ; } public int getYStart () { return this . start . y ; } public int getXEnde () { return this . ende . x ; } public int getYEnde () { return this . ende . y ; } public void setEnde ( Point ende ) { this . ende = ende ; } } siehe \u00dcbung 11 keine neuen Aufgaben mehr, jetzt nur noch Klausurvorbereitung, sowohl in den Vorlesungen, als auch in den \u00dcbungen 28.-02.07.2021 - Klausurvorbereitung siehe Klausurvorbereitung siehe Video zu Klausurvorbereitung - Vorlesung 30.06.2021 Quellcode aus der Vorlesung vom 30.06.2021 KV1.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 import java.awt.* ; import java.util.Random ; import javax.swing.* ; public class KV1 extends JFrame { Canvas canvas ; public KV1 () { super (); this . setTitle ( \"Klausurvorbereitung 1\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . setSize ( 400 , 400 ); this . setLocation ( 200 , 100 ); this . setVisible ( true ); } class Canvas extends JPanel { final static int DURCHMESSER = 3 ; final static int ANZAHL_PUNKTE = 10000 ; @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; int widthCanvas = this . getWidth (); int heightCanvas = this . getHeight (); System . out . println ( \"w = \" + widthCanvas + \", h = \" + heightCanvas ); //g2.drawLine(0, 0, widthCanvas, heightCanvas); //g2.drawLine(widthCanvas, 0, 0, heightCanvas); int x1 = 0 , seite = 0 , y1 = 0 ; if ( widthCanvas < heightCanvas ) { x1 = ( int )( widthCanvas * 0.05 ); seite = ( int )( widthCanvas * 0.9 ); y1 = ( heightCanvas - seite ) / 2 ; } else { y1 = ( int )( heightCanvas * 0.05 ); seite = ( int )( heightCanvas * 0.9 ); x1 = ( widthCanvas - seite ) / 2 ; } g2 . setStroke ( new BasicStroke ( 3.0f )); g2 . drawRect ( x1 , y1 , seite , seite ); g2 . drawArc ( x1 , y1 , seite * 2 , seite * 2 , 90 , 90 ); // g2.fillOval(30, 40, DURCHMESSER, DURCHMESSER); // g2.fillOval(130, 140, DURCHMESSER, DURCHMESSER); Random r = new Random (); int xm = x1 + seite ; int ym = y1 + seite ; for ( int i = 0 ; i < ANZAHL_PUNKTE ; i ++ ) { int x = r . nextInt ( seite - DURCHMESSER ) + x1 ; int y = r . nextInt ( seite - DURCHMESSER ) + y1 ; // (x-xm)^2 + (y-ym)^2 = r^2 if ((( x - xm ) * ( x - xm ) + ( y - ym ) * ( y - ym ) <= seite * seite )) { g2 . setColor ( Color . RED ); } else { g2 . setColor ( Color . BLUE ); } g2 . fillOval ( x , y , DURCHMESSER , DURCHMESSER ); } } } public static void main ( String [] args ) { new KV1 (); } } siehe \u00dcbung 12 12.-16.07.2021 - Klausurvorbereitung siehe Klausurvorbereitung siehe Video zu Klausurvorbereitung - Vorlesung 14.07.2021 Quellcode aus der Vorlesung vom 14.07.2021 RechteckeAnordnen.javaimport java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Font ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.ArrayList ; import java.util.List ; import javax.swing.BorderFactory ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JLabel ; import javax.swing.JPanel ; public class RechteckeAnordnen extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; JLabel fixLabel ; MyRectangle curRect ; Point remember ; boolean move = false ; List < MyRectangle > fixierteRect ; public RechteckeAnordnen () { super (); this . setTitle ( \"Rechtecke fixieren\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . fixierteRect = new ArrayList <> (); this . canvas = new Canvas (); this . canvas . setBorder ( BorderFactory . createLineBorder ( Color . BLACK )); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); // von den folgenden vier Zeilen werden eventuell eine oder mehrere oder alle auskommentiert this . getContentPane (). add ( this . initNorth (), BorderLayout . NORTH ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } // start inner class private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int widthPanel = this . getWidth (); int heightPanel = this . getHeight (); g2 . drawLine ( widthPanel / 2 , 0 , widthPanel / 2 , heightPanel ); g2 . drawLine ( 0 , heightPanel / 2 , widthPanel , heightPanel / 2 ); for ( MyRectangle mr : RechteckeAnordnen . this . fixierteRect ) { int x = mr . getX (); int y = mr . getY (); int width = mr . getWidth (); int height = mr . getHeight (); Color curColor = mr . getColor (); g2 . setColor ( curColor ); g2 . fillRect ( x , y , width , height ); } if ( RechteckeAnordnen . this . curRect != null ) { int x = RechteckeAnordnen . this . curRect . getX (); int y = RechteckeAnordnen . this . curRect . getY (); int width = RechteckeAnordnen . this . curRect . getWidth (); int height = RechteckeAnordnen . this . curRect . getHeight (); Color curColor = RechteckeAnordnen . this . curRect . getColor (); g2 . setColor ( curColor ); g2 . fillRect ( x , y , width , height ); } } } // ende innere Klasse private JPanel initNorth () { JPanel north = new JPanel (); this . fixLabel = new JLabel ( \"0 Rechtecke fixiert\" ); this . fixLabel . setFont ( new Font ( \"Verdana\" , Font . ITALIC , 16 )); north . add ( this . fixLabel ); return north ; } private JPanel initSouth () { JPanel south = new JPanel (); JButton btnClear = new JButton ( \"clear\" ); btnClear . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { RechteckeAnordnen . this . curRect = null ; RechteckeAnordnen . this . fixierteRect . clear (); RechteckeAnordnen . this . move = false ; RechteckeAnordnen . this . fixLabel . setText ( \"0 Rechtecke fixiert\" ); RechteckeAnordnen . this . canvas . repaint (); } }); south . add ( btnClear ); JButton btnRect = new JButton ( \"rectangle\" ); btnRect . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { int widthCanvas = RechteckeAnordnen . this . canvas . getWidth (); int heightCanvas = RechteckeAnordnen . this . canvas . getHeight (); int widthRect = widthCanvas / 2 ; int heightRect = heightCanvas / 2 ; int xRect = widthCanvas / 4 ; int yRect = heightCanvas / 4 ; Color curColor ; switch ( RechteckeAnordnen . this . fixierteRect . size ()) { case 0 : curColor = Color . GREEN ; break ; case 1 : curColor = Color . RED ; break ; case 2 : curColor = Color . YELLOW ; break ; case 3 : curColor = Color . DARK_GRAY ; break ; default : curColor = Color . WHITE ; } RechteckeAnordnen . this . curRect = new MyRectangle ( xRect , yRect , widthRect , heightRect , curColor ); RechteckeAnordnen . this . canvas . repaint (); } }); south . add ( btnRect ); return south ; } public static void main ( String [] args ) { new RechteckeAnordnen (); } @Override public void mouseDragged ( MouseEvent e ) { if ( this . move ) { // bewegen int x = e . getX (); int y = e . getY (); int xLast = this . remember . x ; int yLast = this . remember . y ; int xDiff = x - xLast ; int yDiff = y - yLast ; this . curRect . move ( xDiff , yDiff ); this . remember = e . getPoint (); // fixieren int xRect = this . curRect . getX (); int yRect = this . curRect . getY (); final int ABSTAND = 25 ; int xGoal = 0 ; int yGoal = 0 ; int widthCanvas = this . canvas . getWidth (); int heightCanvas = this . canvas . getHeight (); switch ( this . fixierteRect . size ()) { case 0 : xGoal = 0 ; yGoal = 0 ; break ; case 1 : xGoal = widthCanvas / 2 ; yGoal = 0 ; break ; case 2 : xGoal = 0 ; yGoal = heightCanvas / 2 ; break ; case 3 : xGoal = widthCanvas / 2 ; yGoal = heightCanvas / 2 ; break ; } if ( Math . abs ( xRect - xGoal ) < ABSTAND && Math . abs ( yRect - yGoal ) < ABSTAND ) { this . curRect . setFix ( true ); this . curRect . setX ( xGoal ); this . curRect . setY ( yGoal ); this . fixierteRect . add ( this . curRect ); int anzFix = this . fixierteRect . size (); if ( anzFix == 1 ) { this . fixLabel . setText ( anzFix + \" Rechteck fixiert\" ); } else if ( anzFix == 4 ) { this . fixLabel . setFont ( new Font ( \"Verdana\" , Font . ITALIC | Font . BOLD , 18 )); this . fixLabel . setText ( anzFix + \" Rechtecke fixiert -- Ende\" ); } else { this . fixLabel . setText ( anzFix + \" Rechtecke fixiert\" ); } this . curRect = null ; this . move = false ; } this . canvas . repaint (); } } @Override public void mouseMoved ( MouseEvent e ) { // TODO Auto-generated method stub } @Override public void mouseClicked ( MouseEvent e ) { // TODO Auto-generated method stub } @Override public void mousePressed ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); if ( this . curRect != null && ! this . curRect . isFix () && this . curRect . inside ( x , y )) { this . remember = new Point ( x , y ); this . move = true ; } } @Override public void mouseReleased ( MouseEvent e ) { this . move = false ; } @Override public void mouseEntered ( MouseEvent e ) { // TODO Auto-generated method stub } @Override public void mouseExited ( MouseEvent e ) { // TODO Auto-generated method stub } } MyRectangle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 import java.awt.Color ; public class MyRectangle { private int x ; private int y ; private int width ; private int height ; private Color color ; private boolean fix ; public MyRectangle ( int x , int y , int width , int height , Color color ) { this . x = x ; this . y = y ; this . width = width ; this . height = height ; this . color = color ; this . fix = false ; } public int getX () { return this . x ; } public int getY () { return this . y ; } public int getWidth () { return this . width ; } public int getHeight () { return this . height ; } public Color getColor () { return this . color ; } public boolean inside ( int x , int y ) { return ( x >= this . x && x <= this . x + this . width && y >= this . y && y <= this . y + this . height ); } public void move ( int xDiff , int yDiff ) { this . x = this . x + xDiff ; this . y = this . y + yDiff ; } public boolean isFix () { return this . fix ; } public void setFix ( boolean fix ) { this . fix = fix ; } public void setX ( int x ) { this . x = x ; } public void setY ( int y ) { this . y = y ; } } siehe \u00dcbung 14","title":"Inhalte"},{"location":"abstrakt/","text":"Abstrakte Klassen \u00b6 Abstrakte Klassen haben wir bereits verwendet, ohne bis her zu wissen, worum es sich dabei handelt. Wenn wir uns nochmal die \"Vererbungshierarchie\" von Collection anschauen, dann finden wir darin Interfaces : die Klassen Collection , List , Set , SortedSet und NavigableSet sind solche Interfaces (dazu kommen wir in der n\u00e4chsten Lektion) und Abtrakte Klassen : die Klassen AbstractCollection , AbstractList und AbstractSet sind solche abstrakten Klassen (die schauen wir uns jetzt an) Klassen - allgemein \u00b6 Wir haben uns bis jetzt Klassen erstellt, um sie als einen neuen (Referenz-)Typ zu verwenden, um von diesen Klassen zu erben und somit alle Eigenschaften (Variablen und Methoden) dieser Klasse wiederzuverwenden und um daraus Objekte zu erzeugen. Diese Objekte weisen alle die gleichen Eigenschaften (Variablen und Methoden) auf. Diese Eigenschaften sind entweder in der Klasse definiert, von der wir Objekte erzeugen oder sie wurden in dieser Klasse von einer anderen Klasse geerbt. Angenommen, in der Klasse wurde eine Methode implementiert public void eineImplementierteMethode () { // Anweisungen } , dann konnten alle Objekte, die wir von dieser Klasse erzeugt haben, diese Methode aufrufen und ausf\u00fchren refVariable.eineImplementierteMethode(); . Klassen - abstrakt \u00b6 Abstrakte Klassen sind etwas anders. Von ihnen k\u00f6nnen wir keine Objekte erzeugen . Das hei\u00dft, f\u00fcr abstrakte Klassen gelten nur die beiden ersten Punkte der oberen Aufz\u00e4hlung. Abstrakte Klassen werden erstellt, um sie als einen neuen (Referenz-)Typ zu verwenden, um von diesen Klassen alle Eigenschaften erben zu lassen. Der dritte obere Punkt gilt nicht ! Wir k\u00f6nnen von abstrakten Klassen keine Objekte erzeugen . Eine abstrakte Klasse enth\u00e4lt eine oder mehrere abstrakte Methoden. Oder besser andersherum: Eine Klasse, die eine oder mehrere abstrakte Methoden enth\u00e4lt, ist eine abstrakte Klasse. Abstrakte Methoden \u00b6 Abstrakte Methoden sind Methoden, die nicht implementiert sind, d.h. sie haben keinen Methodenrumpf. Eine abstrakte Methode besteht nur aus einem Methodenkopf (gefolgt von einem Semikolon): public abstract void eineAbstrakteMethode (); Das Schl\u00fcsselwort abstract gibt an, dass die Methode nicht implementiert wird, sondern nur abstrakt beschreibt, wie der Name der Methode lautet, welche Parameter die Methode erwartet, wie der R\u00fcckgabetyp der Methode ist und wie der Sichtbarkeitsmodifizierer dieser Methode ist. Prinzipiell ist f\u00fcr abstrakte Methoden zu beachten, dass sie das Schl\u00fcsselwort abstract im Methodenkopf deklarieren und dass abstrakte Methode keinen Methodenrumpf hat, also keine { } . Die Deklaration einer abstrakten Methode endet aber mit einem Semikolon! Verwendung abstrakter Klassen \u00b6 Eine Klasse, die eine oder mehrere abstrakte Methoden enth\u00e4lt, ist eine abstrakte Klasse. Abtrakte Klassen dienen als Typ und als Basisklasse, d.h. von abstrakten Klassen wird geerbt. Von abstrakten Klassen abgeleitete Klassen (also Klassen, die von einer abstrakten Klasse erben), m\u00fcssen die geerbten Methoden implementieren (ansonsten w\u00e4ren sie selbst wieder abstrakt)! Ein Beispiel - die abstrakte Klasse Shape \u00b6 Wir erstellen uns eine abstrakte Klasse Shape , welche zwei abstrakte Methoden enth\u00e4lt, perimeter() und area() . public abstract class Shape { public abstract double perimeter (); public abstract double area (); } Beachten Sie, dass eine Klasse selbst als abstract deklariert werden muss, wenn sie abstrakte Methoden enth\u00e4lt. Deshalb enth\u00e4lt die Klassendeklaration in Zeile 1 ebanfalls das Schl\u00fcsselwort abstract . Sie liesse sich auch sonst gar nicht compilieren. Rectangle erbt von Shape \u00b6 Shape kann nun bereits als Typ verwendet werden. Es lassen sich aber keine Objekte von der Klasse Shape erzeugen. Vielmehr ist die Klasse Shape auch dazu da, um von ihr zu erben. Wir erzeugen uns deshalb eine Klasse Rectangle , die von Shape erbt. Wenn wir nun schreiben: 1 2 3 4 public class Rectangle extends Shape { } dann ist Rectangle rot unterstrichen und Eclipse bietet uns zwei QuickFixes an: Add unimplemnted methods oder Make type Rectangle abstract Durch das Erben von Shape haben wir auch die beiden abstrakten Methoden perimeter() und area() geerbt. Wir haben nun entweder die M\u00f6glichkeit, diese Methoden zu implementieren oder die Klasse Rectangle ist selbst eine abstrakte Klasse. Wir w\u00e4hlen QuickFix 1 und lassen die Methoden hinzuf\u00fcgen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class Rectangle extends Shape { @Override public double perimeter () { // TODO Auto-generated method stub return 0 ; } @Override public double area () { // TODO Auto-generated method stub return 0 ; } } Eclipse f\u00fcgt die zu implementierenden Methoden genau so ein, wie wir sie geerbt haben (also als public und mit R\u00fcckgabetyp double sowie den in Shape definierten Namen). Nun sind die beiden Methoden aber jeweils implementiert (aber noch nicht richtig - TODO ). Da beide Methoden nun einen Methodenrumpf enthalten (Zeilen 6-9 und 13-16 ), sind sie nicht mehr abstrakt und somit ist auch die Klasse Rectangle keine abstrakte Klasse. Eine sinnvolle Implementierung der Klasse Rectangle sieht z.B. so aus, dass wir zwei Objektvariablen definieren, die die Breite und H\u00f6he eines Rechtecks beschreiben, dass wir einen parametrisierten Konstruktor hinzuf\u00fcgen und dass wir unter Verwendung der Werte der Objektvariablen die Methoden perimeter() und area() sinnvoll implementieren: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class Rectangle extends Shape { private int width , height ; public Rectangle ( int width , int height ) { this . width = width ; this . height = height ; } @Override public double perimeter () { return ( 2.0 * ( this . width + this . height )); } @Override public double area () { return ( this . width * this . height ); } } Nat\u00fcrlich k\u00f6nnte (und sollte) die Klasse auch noch um geeignete Implementierungen f\u00fcr mindestens die von Object geerbten Methoden equals() und toString() enthalten. Circle erbt von Shape \u00b6 Wir k\u00f6nnen beliebig oft von der Klasse Shape erben, d.h. wir k\u00f6nnen nun beliebig viele Klasse erstellen, die von der Klasse Shape erben. F\u00fcr jede dieser Klassen gilt nun: ein Objekt dieser Klasse (z.B. ein Objekt der Klasse Rectangle ) \"besitzt\" die Methoden perimeter() und area() , ein Objekt dieser Klasse ist auch vom (Laufzeit-)Typ Shape . Wir erzeugen uns eine weitere Klasse, um diese Tatsachen n\u00e4her zu betrachten: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class Circle extends Shape { private double radius ; public Circle ( double radius ) { this . radius = radius ; } @Override public double perimeter () { return Math . PI * 2.0 * this . radius ; } @Override public double area () { return Math . PI * this . radius * this . radius ; } } Testen der Klassen \u00b6 Beispielsweise k\u00f6nnte nun in einer beliebigen Klasse eine Methode implementiert werden, in der ein Shape als Parameter verwendet wird und die f\u00fcr dieses Shape die Methode perimeter() oder area() aufruft. Es ist ja sicher, dass jedes Objekt vom Typ Shape diese Methoden als Eigenschaft \"besitzt\". Betrachten wir folgende TestklasseShape : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 public class TestklasseShape { public static void printPerimeter ( Shape s ) { System . out . printf ( \"perimeter : %.2f cm%n\" , s . perimeter ()); } public static void printArea ( Shape s ) { System . out . printf ( \"area : %.2f cm%n\" , s . area ()); } public static double sumPerimeters ( Shape [] shapes ) { double sum = 0.0 ; for ( Shape s : shapes ) { sum += s . perimeter (); } return sum ; } public static double sumAreas ( Shape [] shapes ) { double sum = 0.0 ; for ( Shape s : shapes ) { sum += s . area (); } return sum ; } public static void main ( String [] args ) { Shape s1 = new Rectangle ( 10 , 20 ); Shape s2 = new Circle ( 6.0 ); printPerimeter ( s1 ); printPerimeter ( s2 ); printArea ( s1 ); printArea ( s2 ); Shape [] shapes = new Shape [ 4 ] ; shapes [ 0 ] = s1 ; shapes [ 1 ] = s2 ; shapes [ 2 ] = new Rectangle ( 5 , 15 ); shapes [ 3 ] = new Circle ( 10.0 ); System . out . printf ( \"sum of perimeters : %.2f cm%n\" , sumPerimeters ( shapes )); System . out . printf ( \"sum of areas : %.2f cm%n\" , sumAreas ( shapes )); } } In dieser Testklasse sind vier Methoden implementiert, die als Parameter entweder Objekte vom Typ Shape oder vom Typ Shape[] erwarten. Von Objekten, die vom (Laufzeit-)Typ Shape sind, wissen wir, dass sie die Methoden perimeter() bzw. area() als Eigenschaften besitzen. Deshalb k\u00f6nnen wir diese Methoden auch in den jeweiligen Methoden f\u00fcr die Shape -Objekte aufrufen. Abstrakte Klassen fungieren also ein ein Muster f\u00fcr Klassen, die von den abstrakten Klassen erben, denn die abgeleiteten Klassen m\u00fcssen genau diese Methoden implementieren, die von den abstrakten Klassen vorgegeben sind. Ohne jetzt wirklich zu wissen, welche konkreten Klassen von dieser abstrakten Klasse erben und auch, ohne wirklich zu wissen, von welcher konkreten Klasse die Objekte erzeugt wurden (z.B. Rectangle oder Circle ), so wissen wir doch, dass diese Objekte zumindest \u00fcber die Methoden perimeter() und area() verf\u00fcgen. Beispiele aus den Java-Paketen \u00b6 In Java finden sich sehr viele abstrakte Klassen. Wir betrachten im Folgenden einige, zu denen wir bereits einen Bezug haben. Die abstrakte Klasse Number \u00b6 Die Klasse Number aus dem java.lang -Paket ist eine abstrakte Klasse. In dieser Klasse sind folgende abstrakte Methoden definiert: abstract double doubleValue() abstract float floatValue() abstract int intValue() abstract long longValue() Alle numerischen Wrapper-Klassen erben von Number , d.h. die Klassen Byte , Double , Float , Integer , Long und Short sind von Number abgeleitet. Das bedeutet, dass alle Objekte dieser konkreten Wrapper-Klassen auch vom Typ Number sind und somit die Methoden doubleValue() , floatValue() , intValue() und longValue() als Eigenschaften besitzen. Wir k\u00f6nnen also f\u00fcr alle solche Objekte diese Methoden aufrufen. Abstrakte Klassen f\u00fcr Collections \u00b6 Beispiele f\u00fcr abstrakte Klassen finden wir auch im java.util -Paket f\u00fcr die Collections. Beispielsweise definiert die abstrakte Klasse AbstractCollection eine Reihe uns bereits bekannter Methoden, wie z.B. add() , addAll() , clear() , contains() , isEmpty() , iterator() , remove() usw. Alle Klassen, die von dieser Klasse erben, wie z.B. AbstractList und AbstractSet verf\u00fcgen also ebenfalls \u00fcber diese Methoden. Beachten Sie, dass diese beiden Klassen AbstractList und AbstractSet ebenfalls abstrakt sind! Von AbstractSet erben z.B. die Klassen HashSet , TreeSet und EnumSet . Erst von diesen konkreten Klassen k\u00f6nnen tats\u00e4chlich Objekte erzeugt werden. Alle diese Objekte besitzen aber (nat\u00fcrlich) die bereits in AbstractCollection definierten Methoden. Success Wir kennen jetzt abstrakte Klassen. Abstrakte Klassen sind Klassen, die abstrakte Methoden enthalten. Abstrakte Methoden sind Methoden, die nicht implementiert sind. Von abstrakten Klassen k\u00f6nnen wir keine Objekte erzeugen. Abstrakte Klassen dienen uns als Typen und wir k\u00f6nnen von abstrakten Klassen erben. Eine Klasse, die von einer abstrakten Klasse erbt, muss die geerbten abstrakten Methoden implementieren (oder sie ist selbst wieder abstrakt). Alle Klassen, die von einer abstrakten Klasse erben, implementieren also die Methoden genau so, wie sie von der abstrakten Klasse vorgegeben wurden, also mit der Methodensignatur (Name der Methode, Parameter, R\u00fcckgabetyp und Sichtbarkeitsmodifizierer). Jedes Objekt einer Klasse, welche von der abstrakten Klasse geerbt hat, ist auch vom Typ der abstrakten Klasse.","title":"Abstrakte Klassen"},{"location":"abstrakt/#abstrakte-klassen","text":"Abstrakte Klassen haben wir bereits verwendet, ohne bis her zu wissen, worum es sich dabei handelt. Wenn wir uns nochmal die \"Vererbungshierarchie\" von Collection anschauen, dann finden wir darin Interfaces : die Klassen Collection , List , Set , SortedSet und NavigableSet sind solche Interfaces (dazu kommen wir in der n\u00e4chsten Lektion) und Abtrakte Klassen : die Klassen AbstractCollection , AbstractList und AbstractSet sind solche abstrakten Klassen (die schauen wir uns jetzt an)","title":"Abstrakte Klassen"},{"location":"abstrakt/#klassen-allgemein","text":"Wir haben uns bis jetzt Klassen erstellt, um sie als einen neuen (Referenz-)Typ zu verwenden, um von diesen Klassen zu erben und somit alle Eigenschaften (Variablen und Methoden) dieser Klasse wiederzuverwenden und um daraus Objekte zu erzeugen. Diese Objekte weisen alle die gleichen Eigenschaften (Variablen und Methoden) auf. Diese Eigenschaften sind entweder in der Klasse definiert, von der wir Objekte erzeugen oder sie wurden in dieser Klasse von einer anderen Klasse geerbt. Angenommen, in der Klasse wurde eine Methode implementiert public void eineImplementierteMethode () { // Anweisungen } , dann konnten alle Objekte, die wir von dieser Klasse erzeugt haben, diese Methode aufrufen und ausf\u00fchren refVariable.eineImplementierteMethode(); .","title":"Klassen - allgemein"},{"location":"abstrakt/#klassen-abstrakt","text":"Abstrakte Klassen sind etwas anders. Von ihnen k\u00f6nnen wir keine Objekte erzeugen . Das hei\u00dft, f\u00fcr abstrakte Klassen gelten nur die beiden ersten Punkte der oberen Aufz\u00e4hlung. Abstrakte Klassen werden erstellt, um sie als einen neuen (Referenz-)Typ zu verwenden, um von diesen Klassen alle Eigenschaften erben zu lassen. Der dritte obere Punkt gilt nicht ! Wir k\u00f6nnen von abstrakten Klassen keine Objekte erzeugen . Eine abstrakte Klasse enth\u00e4lt eine oder mehrere abstrakte Methoden. Oder besser andersherum: Eine Klasse, die eine oder mehrere abstrakte Methoden enth\u00e4lt, ist eine abstrakte Klasse.","title":"Klassen - abstrakt"},{"location":"abstrakt/#abstrakte-methoden","text":"Abstrakte Methoden sind Methoden, die nicht implementiert sind, d.h. sie haben keinen Methodenrumpf. Eine abstrakte Methode besteht nur aus einem Methodenkopf (gefolgt von einem Semikolon): public abstract void eineAbstrakteMethode (); Das Schl\u00fcsselwort abstract gibt an, dass die Methode nicht implementiert wird, sondern nur abstrakt beschreibt, wie der Name der Methode lautet, welche Parameter die Methode erwartet, wie der R\u00fcckgabetyp der Methode ist und wie der Sichtbarkeitsmodifizierer dieser Methode ist. Prinzipiell ist f\u00fcr abstrakte Methoden zu beachten, dass sie das Schl\u00fcsselwort abstract im Methodenkopf deklarieren und dass abstrakte Methode keinen Methodenrumpf hat, also keine { } . Die Deklaration einer abstrakten Methode endet aber mit einem Semikolon!","title":"Abstrakte Methoden"},{"location":"abstrakt/#verwendung-abstrakter-klassen","text":"Eine Klasse, die eine oder mehrere abstrakte Methoden enth\u00e4lt, ist eine abstrakte Klasse. Abtrakte Klassen dienen als Typ und als Basisklasse, d.h. von abstrakten Klassen wird geerbt. Von abstrakten Klassen abgeleitete Klassen (also Klassen, die von einer abstrakten Klasse erben), m\u00fcssen die geerbten Methoden implementieren (ansonsten w\u00e4ren sie selbst wieder abstrakt)!","title":"Verwendung abstrakter Klassen"},{"location":"abstrakt/#ein-beispiel-die-abstrakte-klasse-shape","text":"Wir erstellen uns eine abstrakte Klasse Shape , welche zwei abstrakte Methoden enth\u00e4lt, perimeter() und area() . public abstract class Shape { public abstract double perimeter (); public abstract double area (); } Beachten Sie, dass eine Klasse selbst als abstract deklariert werden muss, wenn sie abstrakte Methoden enth\u00e4lt. Deshalb enth\u00e4lt die Klassendeklaration in Zeile 1 ebanfalls das Schl\u00fcsselwort abstract . Sie liesse sich auch sonst gar nicht compilieren.","title":"Ein Beispiel - die abstrakte Klasse Shape"},{"location":"abstrakt/#rectangle-erbt-von-shape","text":"Shape kann nun bereits als Typ verwendet werden. Es lassen sich aber keine Objekte von der Klasse Shape erzeugen. Vielmehr ist die Klasse Shape auch dazu da, um von ihr zu erben. Wir erzeugen uns deshalb eine Klasse Rectangle , die von Shape erbt. Wenn wir nun schreiben: 1 2 3 4 public class Rectangle extends Shape { } dann ist Rectangle rot unterstrichen und Eclipse bietet uns zwei QuickFixes an: Add unimplemnted methods oder Make type Rectangle abstract Durch das Erben von Shape haben wir auch die beiden abstrakten Methoden perimeter() und area() geerbt. Wir haben nun entweder die M\u00f6glichkeit, diese Methoden zu implementieren oder die Klasse Rectangle ist selbst eine abstrakte Klasse. Wir w\u00e4hlen QuickFix 1 und lassen die Methoden hinzuf\u00fcgen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 public class Rectangle extends Shape { @Override public double perimeter () { // TODO Auto-generated method stub return 0 ; } @Override public double area () { // TODO Auto-generated method stub return 0 ; } } Eclipse f\u00fcgt die zu implementierenden Methoden genau so ein, wie wir sie geerbt haben (also als public und mit R\u00fcckgabetyp double sowie den in Shape definierten Namen). Nun sind die beiden Methoden aber jeweils implementiert (aber noch nicht richtig - TODO ). Da beide Methoden nun einen Methodenrumpf enthalten (Zeilen 6-9 und 13-16 ), sind sie nicht mehr abstrakt und somit ist auch die Klasse Rectangle keine abstrakte Klasse. Eine sinnvolle Implementierung der Klasse Rectangle sieht z.B. so aus, dass wir zwei Objektvariablen definieren, die die Breite und H\u00f6he eines Rechtecks beschreiben, dass wir einen parametrisierten Konstruktor hinzuf\u00fcgen und dass wir unter Verwendung der Werte der Objektvariablen die Methoden perimeter() und area() sinnvoll implementieren: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class Rectangle extends Shape { private int width , height ; public Rectangle ( int width , int height ) { this . width = width ; this . height = height ; } @Override public double perimeter () { return ( 2.0 * ( this . width + this . height )); } @Override public double area () { return ( this . width * this . height ); } } Nat\u00fcrlich k\u00f6nnte (und sollte) die Klasse auch noch um geeignete Implementierungen f\u00fcr mindestens die von Object geerbten Methoden equals() und toString() enthalten.","title":"Rectangle erbt von Shape"},{"location":"abstrakt/#circle-erbt-von-shape","text":"Wir k\u00f6nnen beliebig oft von der Klasse Shape erben, d.h. wir k\u00f6nnen nun beliebig viele Klasse erstellen, die von der Klasse Shape erben. F\u00fcr jede dieser Klassen gilt nun: ein Objekt dieser Klasse (z.B. ein Objekt der Klasse Rectangle ) \"besitzt\" die Methoden perimeter() und area() , ein Objekt dieser Klasse ist auch vom (Laufzeit-)Typ Shape . Wir erzeugen uns eine weitere Klasse, um diese Tatsachen n\u00e4her zu betrachten: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class Circle extends Shape { private double radius ; public Circle ( double radius ) { this . radius = radius ; } @Override public double perimeter () { return Math . PI * 2.0 * this . radius ; } @Override public double area () { return Math . PI * this . radius * this . radius ; } }","title":"Circle erbt von Shape"},{"location":"abstrakt/#testen-der-klassen","text":"Beispielsweise k\u00f6nnte nun in einer beliebigen Klasse eine Methode implementiert werden, in der ein Shape als Parameter verwendet wird und die f\u00fcr dieses Shape die Methode perimeter() oder area() aufruft. Es ist ja sicher, dass jedes Objekt vom Typ Shape diese Methoden als Eigenschaft \"besitzt\". Betrachten wir folgende TestklasseShape : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 public class TestklasseShape { public static void printPerimeter ( Shape s ) { System . out . printf ( \"perimeter : %.2f cm%n\" , s . perimeter ()); } public static void printArea ( Shape s ) { System . out . printf ( \"area : %.2f cm%n\" , s . area ()); } public static double sumPerimeters ( Shape [] shapes ) { double sum = 0.0 ; for ( Shape s : shapes ) { sum += s . perimeter (); } return sum ; } public static double sumAreas ( Shape [] shapes ) { double sum = 0.0 ; for ( Shape s : shapes ) { sum += s . area (); } return sum ; } public static void main ( String [] args ) { Shape s1 = new Rectangle ( 10 , 20 ); Shape s2 = new Circle ( 6.0 ); printPerimeter ( s1 ); printPerimeter ( s2 ); printArea ( s1 ); printArea ( s2 ); Shape [] shapes = new Shape [ 4 ] ; shapes [ 0 ] = s1 ; shapes [ 1 ] = s2 ; shapes [ 2 ] = new Rectangle ( 5 , 15 ); shapes [ 3 ] = new Circle ( 10.0 ); System . out . printf ( \"sum of perimeters : %.2f cm%n\" , sumPerimeters ( shapes )); System . out . printf ( \"sum of areas : %.2f cm%n\" , sumAreas ( shapes )); } } In dieser Testklasse sind vier Methoden implementiert, die als Parameter entweder Objekte vom Typ Shape oder vom Typ Shape[] erwarten. Von Objekten, die vom (Laufzeit-)Typ Shape sind, wissen wir, dass sie die Methoden perimeter() bzw. area() als Eigenschaften besitzen. Deshalb k\u00f6nnen wir diese Methoden auch in den jeweiligen Methoden f\u00fcr die Shape -Objekte aufrufen. Abstrakte Klassen fungieren also ein ein Muster f\u00fcr Klassen, die von den abstrakten Klassen erben, denn die abgeleiteten Klassen m\u00fcssen genau diese Methoden implementieren, die von den abstrakten Klassen vorgegeben sind. Ohne jetzt wirklich zu wissen, welche konkreten Klassen von dieser abstrakten Klasse erben und auch, ohne wirklich zu wissen, von welcher konkreten Klasse die Objekte erzeugt wurden (z.B. Rectangle oder Circle ), so wissen wir doch, dass diese Objekte zumindest \u00fcber die Methoden perimeter() und area() verf\u00fcgen.","title":"Testen der Klassen"},{"location":"abstrakt/#beispiele-aus-den-java-paketen","text":"In Java finden sich sehr viele abstrakte Klassen. Wir betrachten im Folgenden einige, zu denen wir bereits einen Bezug haben.","title":"Beispiele aus den Java-Paketen"},{"location":"abstrakt/#die-abstrakte-klasse-number","text":"Die Klasse Number aus dem java.lang -Paket ist eine abstrakte Klasse. In dieser Klasse sind folgende abstrakte Methoden definiert: abstract double doubleValue() abstract float floatValue() abstract int intValue() abstract long longValue() Alle numerischen Wrapper-Klassen erben von Number , d.h. die Klassen Byte , Double , Float , Integer , Long und Short sind von Number abgeleitet. Das bedeutet, dass alle Objekte dieser konkreten Wrapper-Klassen auch vom Typ Number sind und somit die Methoden doubleValue() , floatValue() , intValue() und longValue() als Eigenschaften besitzen. Wir k\u00f6nnen also f\u00fcr alle solche Objekte diese Methoden aufrufen.","title":"Die abstrakte Klasse Number"},{"location":"abstrakt/#abstrakte-klassen-fur-collections","text":"Beispiele f\u00fcr abstrakte Klassen finden wir auch im java.util -Paket f\u00fcr die Collections. Beispielsweise definiert die abstrakte Klasse AbstractCollection eine Reihe uns bereits bekannter Methoden, wie z.B. add() , addAll() , clear() , contains() , isEmpty() , iterator() , remove() usw. Alle Klassen, die von dieser Klasse erben, wie z.B. AbstractList und AbstractSet verf\u00fcgen also ebenfalls \u00fcber diese Methoden. Beachten Sie, dass diese beiden Klassen AbstractList und AbstractSet ebenfalls abstrakt sind! Von AbstractSet erben z.B. die Klassen HashSet , TreeSet und EnumSet . Erst von diesen konkreten Klassen k\u00f6nnen tats\u00e4chlich Objekte erzeugt werden. Alle diese Objekte besitzen aber (nat\u00fcrlich) die bereits in AbstractCollection definierten Methoden. Success Wir kennen jetzt abstrakte Klassen. Abstrakte Klassen sind Klassen, die abstrakte Methoden enthalten. Abstrakte Methoden sind Methoden, die nicht implementiert sind. Von abstrakten Klassen k\u00f6nnen wir keine Objekte erzeugen. Abstrakte Klassen dienen uns als Typen und wir k\u00f6nnen von abstrakten Klassen erben. Eine Klasse, die von einer abstrakten Klasse erbt, muss die geerbten abstrakten Methoden implementieren (oder sie ist selbst wieder abstrakt). Alle Klassen, die von einer abstrakten Klasse erben, implementieren also die Methoden genau so, wie sie von der abstrakten Klasse vorgegeben wurden, also mit der Methodensignatur (Name der Methode, Parameter, R\u00fcckgabetyp und Sichtbarkeitsmodifizierer). Jedes Objekt einer Klasse, welche von der abstrakten Klasse geerbt hat, ist auch vom Typ der abstrakten Klasse.","title":"Abstrakte Klassen f\u00fcr Collections"},{"location":"aufgaben/","text":"Aufgaben \u00b6 Aufgabe 1 (W\u00fcrfelspiel) \u00b6 Aufgabe 1 Vorbereitung (Selbstudium) Informieren Sie sich \u00fcber die Klasse JOptionPane aus dem Paket javax.swing (z.B. hier oder hier oder hier ) Sollten Sie mit dem Java-Modulsystem arbeiten, d.h. sollten Sie in Ihrem Java-Projekt eine Datei module-info.java haben, dann m\u00fcssen Sie in diese Datei (in den Anweisungsblock) die Anweisung requires java.desktop; einf\u00fcgen - das ist das Modul, in dem sich das Paket javax.swing befindet. Rufen Sie jeweils die statischen Methoden showConfirmDialog() , showInputDialog() , showMessageDialog() und showOptionDialog() auf und werten Sie jeweils die Nutzereingabe aus (Bei showInputDialog() ist die R\u00fcckgabe ein String , ansonsten ist die R\u00fcckgabe ein int , der mit folgenden Optionen verglichen werden kann: JOptionPane.YES_OPTION , JOptionPane.NO_OPTION , JOptionPane.CANCEL_OPTION , JOptionPane.OK_OPTION , JOptionPane.CLOSED_OPTION Erstellen Sie insbesondere folgenden Dialog und pr\u00fcfen Sie, ob der Nein - oder der Ja -Button gedr\u00fcckt wurde (im Beispiel steht A f\u00fcr den Namen eines Spielers \u2013 siehe Aufgabe unten): Aufgabe Implementieren Sie folgendes W\u00fcrfelspiel: An dem Spiel k\u00f6nnen beliebig viele Spieler teilnehmen. Die Spieler sind nacheinander an der Reihe. Wenn ein Spieler an der Reihe ist, dann befindet er sich in einem Versuch . In einem Versuch kann der Spieler so lange w\u00fcrfeln, bis er entweder eine 6 w\u00fcrfelt oder er den Versuch freiwillig beendet. Hat der Spieler eine 6 gew\u00fcrfelt, wird der gesamte Versuch mit 0 Punkten bewertet. Hat der Spieler den Versuch freiwillig beendet, wird die in dem Versuch erzielte Summe aus sein Punktekonto addiert (gespeichert). Der Spieler, der zuerst eine bestimmte Punktzahl (z.B. 20 ) erreicht hat, hat gewonnen. Beispiel mit zwei Spielern A und B bis Gesamtpunktzahl 20 : Committen und pushen Sie Ihre L\u00f6sung nach GitHub (oder Ihrem Git-Diensteanbieter). eine m\u00f6gliche L\u00f6sung f\u00fcr Aufgabe 1 Spiel.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 package aufgaben.aufgabe1 ; import javax.swing.JOptionPane ; public class Spiel { public static int siegPunkte ; private Spieler [] spieler ; Spiel () { int anzSpieler = 0 ; int siegPunkte = 0 ; boolean inputOk = false ; String input = \"\" ; while ( ! inputOk ) { try { input = JOptionPane . showInputDialog ( \"Anzahl Spieler :\" ); inputOk = true ; anzSpieler = Integer . parseInt ( input ); } catch ( NumberFormatException e ) { inputOk = false ; } } inputOk = false ; while ( ! inputOk ) { try { input = JOptionPane . showInputDialog ( \"Siegpunkte :\" ); inputOk = true ; siegPunkte = Integer . parseInt ( input ); } catch ( NumberFormatException e ) { inputOk = false ; } } Spiel . siegPunkte = siegPunkte ; spieler = new Spieler [ anzSpieler ] ; namenErmitteln (); } Spiel ( int siegPunkte , int anzSpieler ) { Spiel . siegPunkte = siegPunkte ; spieler = new Spieler [ anzSpieler ] ; /* Spielernamen sind A, B, C ... char name = 'A'; for(int i=0; i<spieler.length; i++) { spieler[i] = new Spieler(String.valueOf(name)); name ++; } */ /* Spielernamen werden eingegeben * wenn man namenErmitteln() auskommentiert, * kann man die obige for-Schleife nehmen, damit * man nicht immer die Spielernamen eingeben muss * - zum Testen */ namenErmitteln (); } private void namenErmitteln () { String name = \"\" ; for ( int i = 0 ; i < spieler . length ; i ++ ) { name = JOptionPane . showInputDialog ( \"Name des Spielers \" + ( i + 1 ) + \" :\" ); spieler [ i ] = new Spieler ( name ); } } public void spielen () { int index = 0 ; boolean gewonnen = false ; while ( ! gewonnen ) { gewonnen = spieler [ index ] . wuerfeln (); index = ( index < spieler . length - 1 ) ? index + 1 : 0 ; } } public static void main ( String [] args ) { //Spiel spiel = new Spiel(30, 3); Spiel spiel = new Spiel (); spiel . spielen (); } } Spieler.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 package aufgaben.aufgabe1 ; import java.util.Random ; import javax.swing.JOptionPane ; public class Spieler { private String name ; private int aktStand ; private Random r ; Spieler ( String name ) { aktStand = 0 ; this . name = name ; r = new Random (); } public int getAktStand () { return this . aktStand ; } public boolean wuerfeln () { System . out . printf ( \"%n%nSpieler %s ist an der Reihe (bisher %d Punkte) %n ----------------------------------------- %n\" , this . name , this . aktStand ); int reihe = 0 ; int wurf = 0 ; boolean ende = false ; while ( ! ende ) { wurf = r . nextInt ( 6 ) + 1 ; System . out . printf ( \"%s hat eine %d gewuerfelt %n\" , this . name , wurf ); if ( wurf == 6 ) { System . out . printf ( \"Versuch zu Ende %n Aktueller Spielstand von %s : %d Punkte %n Der naechste Spieler ist dran%n\" , this . name , this . aktStand ); ende = true ; } else if ( aktStand + reihe + wurf >= Spiel . siegPunkte ) { System . out . printf ( \"%s hat insgesamt %d Punkte und somit gewonnen !!!\" , this . name , ( aktStand + reihe + wurf )); return true ; } else // eine 1..5 gewuerfelt und noch nicht gewonnen { reihe += wurf ; System . out . printf ( \"in diesem Versuch bisher %d Punkte -- insgesamt %d Punkte %n\" , reihe , ( aktStand + reihe )); int dialogResult = JOptionPane . showConfirmDialog ( null , this . name + \", wollen Sie weiter wuerfeln? \" , \"Weiter wuerfeln?\" , JOptionPane . YES_NO_OPTION ); ende = ! ( dialogResult == JOptionPane . YES_OPTION ); if ( ende ) { aktStand += reihe ; } } } return false ; } } Aufgabe 2 (MyInteger) \u00b6 Aufgabe 2 Vorbereitung (Selbstudium) Eine statische Variable wird mit dem Schl\u00fcsselwort static deklariert, also z.B. static int myVariable = 0; . Der Zugriff auf eine solche statische Variable erfolgt nicht \u00fcber eine Referenzvariable, sondern \u00fcber den Klassennamen. Angenommen, die Variable myVariable wurde in der Klasse MyClass deklariert, dann erfolgt der Zugriff auf die Variable \u00fcber MyClass.myVariable . F\u00fcr Objektvariablen gilt, dass jedes Objekt seine eigene(n) Objektvariable(n) hat. Statische Variablen gibt es in der Klasse genau einmal. Alle Objekte \"teilen\" sich eine statische Variable. Eine statische Variable hei\u00dft deshalb auch Klassenvariable . Eine statische Methode wird ebenfalls mit dem Schl\u00fcsselwort static deklariert, also z.B. public static void myMethod() {} . Der Zugriff auf eine solche statische Methode erfolgt nicht \u00fcber eine Referenzvariable, sondern \u00fcber den Klassennamen. Angenommen, die Methode myMethod() wurde in der Klasse MyClass deklariert, dann erfolgt der Zugriff auf die Methode \u00fcber MyClass.myMethod() . Wir kennen solche Methoden bereits, z.B. sind alle Methoden aus der Klasse Math statisch und wir k\u00f6nnen sie z.B. mit Math.sqrt(value) oder Math.abs(value) aufrufen. siehe z.B. hier oder hier oder hier Info : Die Klasse MyInteger ist eine sogenannte Wrapper -Klasse. Die Idee ist, dass MyInteger eine objektorientierte H\u00fclle um den int -Typ darstellt. Implementieren Sie die Klasse MyInteger . Diese Klasse hat folgende Eigenschaften: Statische Konstanten vom Typ int MAX_VALUE und MIN_VALUE , welche als Wert die gr\u00f6\u00dfte bzw. kleinste int -Zahl enthalten. Eine private Objektvariable value vom Typ int . (Dieser value hat jetzt eine \"objektorientierte\" H\u00fclle: MyInteger ). Eine statische Methode parseInt(String s) , die den \u00fcbergebenen String s als int -Zahl zur\u00fcckgibt, wenn s einer Zahl entspricht. Wenn nicht, wirft die Methode eine IllegalArgumentException . Beachten Sie: a. s kann mit + oder \u2013 beginnen, b. s kann f\u00fchrende Nullen aufweisen, c. die L\u00e4nge von s kann mit s.length() ermittelt und jedes einzelne Zeichen aus s kann mit s.charAt(index) betrachtet werden. d. Ist s leer, wird eine IllegalArgumentException geworfen und wenn s keiner Zahl entspricht auch. e. Die Exception wird nur weitergereicht, nicht hier behandelt. Zwei Konstruktoren MyInteger(int value) und MyInteger(String s) , die jeweils die Objektvariable value initialisieren. Der zweite Konstruktor verwendet parseInt(String) und kann ebenfalls eine IllegalArgumentException werfen (reicht die Exception von parseInt(String) weiter). Eine Objektmethode intValue() , die den Wert von value zur\u00fcckgibt. Eine Objektmethode doubleValue() , die den Wert von value als double zur\u00fcckgibt. Eine statische Methode valueOf(String s) , die ein Objekt von MyInteger erzeugt und zur\u00fcckgibt (und evtl. eine IllegalArgumentException wirft). Eine statische Methode valueOf(int value) , die ein Objekt von MyInteger erzeugt und zur\u00fcckgibt. \u00dcberschreiben Sie au\u00dferdem die Methoden equals() und toString() ( Zusatz: auch hashCode() \u00fcberschreiben). Testen Sie Ihre Klasse ausf\u00fchrlich in einer Testklasse mit main() -Methode. Committen und pushen Sie Ihre L\u00f6sung nach GitHub (oder Ihrem Git-Diensteanbieter). eine m\u00f6gliche L\u00f6sung f\u00fcr Aufgabe 2 MyInteger.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 package aufgaben.aufgabe2 ; public class MyInteger { public static final int MAX_VALUE = 2147483647 ; public static final int MIN_VALUE = - 2147483648 ; private int value ; public MyInteger ( int value ) { this . value = value ; } public MyInteger ( String s ) throws IllegalArgumentException { this . value = parseInt ( s ); } private static boolean isDigit ( char c ) { return ( c == '0' || c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' ); } private static int charToInt ( char c ) { int asciivalue = c ; int intvalue = asciivalue - 48 ; // 0 ist 048 bis 9 ist 057 return intvalue ; } public static int parseInt ( String s ) throws IllegalArgumentException { boolean negativ = false ; if ( s . length () == 0 ) throw new IllegalArgumentException ( \"leer\" ); // pruefe, ob erstes Zeichen + oder - // merken und weiter mit Rest if ( s . charAt ( 0 ) == '+' ) s = s . substring ( 1 ); else if ( s . charAt ( 0 ) == '-' ) { s = s . substring ( 1 ); negativ = true ; } if ( s . length () == 0 ) throw new IllegalArgumentException ( \"nur '+' bzw. '-' --> keine Zahl\" ); // entferne f\u00fchrende Nullen while ( s . charAt ( 0 ) == '0' ) { s = s . substring ( 1 ); } for ( int i = 0 ; i < s . length (); i ++ ) { if ( ! isDigit ( s . charAt ( i ))) throw new IllegalArgumentException ( \"keine Zahl!\" ); } int exponent = 0 ; int zahl = 0 ; for ( int i = s . length () - 1 ; i >= 0 ; i -- ) { zahl = zahl + charToInt ( s . charAt ( i )) * ( int ) Math . pow ( 10 , exponent ); exponent ++ ; } if ( negativ ) return - zahl ; else return zahl ; } public int intValue () { return this . value ; } public double doubleValue () { return this . value ; } public static MyInteger valueOf ( String s ) throws IllegalArgumentException { return new MyInteger ( s ); } public static MyInteger valueOf ( int value ) { return new MyInteger ( value ); } @Override public boolean equals ( Object other ) { if ( other == null ) return false ; if ( this == other ) return true ; if ( this . getClass () != other . getClass ()) return false ; MyInteger otherInt = ( MyInteger ) other ; return ( this . value == otherInt . value ); } @Override public int hashCode () { return this . value ; } @Override public String toString () { return value + \"\" ; } public static int compare ( int x , int y ) { return ( x < y ) ? - 1 : (( x == y ) ? 0 : 1 ); } public int compareTo ( MyInteger otherMyInteger ) { return compare ( this . value , otherMyInteger . value ); } } MyIntegerMain.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 package aufgaben.aufgabe2 ; public class MyIntegerMain { public static void main ( String [] args ) { MyInteger mi1 = null , mi2 = null , mi3 = null , mi4 = null , mi5 = null , mi6 = null , mi7 = null , mi8 = null , mi9 = null , mi10 = null ; try { mi1 = new MyInteger ( \"-2147483648\" ); System . out . println ( mi1 . intValue ()); } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } try { mi2 = new MyInteger ( \"-00002147483648\" ); System . out . println ( mi2 . intValue ()); } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } try { mi3 = new MyInteger ( \"hallo\" ); System . out . println ( mi3 . intValue ()); } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } mi4 = new MyInteger ( - 2147483648 ); try { mi5 = MyInteger . valueOf ( \"-2147483648\" ); System . out . println ( mi5 . intValue ()); } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } try { mi6 = MyInteger . valueOf ( \"-00002147483648\" ); System . out . println ( mi6 . intValue ()); } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } try { mi7 = MyInteger . valueOf ( \"hallo\" ); System . out . println ( mi7 . intValue ()); } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } mi8 = MyInteger . valueOf ( - 2147483648 ); try { mi9 = MyInteger . valueOf ( \"\" ); System . out . println ( mi9 . intValue ()); } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } try { mi10 = MyInteger . valueOf ( \"+\" ); System . out . println ( mi10 . intValue ()); } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } System . out . println ( \"mi1 equals mi2 ? : \" + mi1 . equals ( mi2 )); System . out . println ( \"mi1 equals mi3 ? : \" + mi1 . equals ( mi3 )); System . out . println ( \"mi1 equals mi4 ? : \" + mi1 . equals ( mi4 )); System . out . println ( \"mi1 equals mi5 ? : \" + mi1 . equals ( mi5 )); System . out . println ( \"mi1 equals mi6 ? : \" + mi1 . equals ( mi6 )); System . out . println ( \"mi1 equals mi7 ? : \" + mi1 . equals ( mi7 )); System . out . println ( \"mi1 equals mi8 ? : \" + mi1 . equals ( mi8 )); System . out . println ( \"mi1 equals mi9 ? : \" + mi1 . equals ( mi9 )); System . out . println ( \"mi1 equals mi10 ? : \" + mi1 . equals ( mi10 )); System . out . println ( \"hashCode mi1 : \" + mi1 . hashCode ()); System . out . println ( \"hashCode mi2 : \" + mi2 . hashCode ()); try { System . out . println ( \"hashCode mi3 : \" + mi3 . hashCode ()); } catch ( NullPointerException e ) { System . out . println ( \"Objekt existiert nicht!\" ); } System . out . println ( \"hashCode mi4 : \" + mi4 . hashCode ()); System . out . println ( \"intValue mi1 : \" + mi1 . intValue ()); System . out . println ( \"intValue mi2 : \" + mi2 . intValue ()); try { System . out . println ( \"intValue mi3 : \" + mi3 . intValue ()); } catch ( NullPointerException e ) { System . out . println ( \"Objekt existiert nicht!\" ); } System . out . println ( \"intValue mi4 : \" + mi4 . intValue ()); System . out . println ( \"doubleValue mi1 : \" + mi1 . doubleValue ()); System . out . println ( \"doubleValue mi2 : \" + mi2 . doubleValue ()); try { System . out . println ( \"doubleValue mi3 : \" + mi3 . doubleValue ()); } catch ( NullPointerException e ) { System . out . println ( \"Objekt existiert nicht!\" ); } System . out . println ( \"doubleValue mi4 : \" + mi4 . doubleValue ()); } } MyIntegerTest.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 package aufgaben.aufgabe2 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.Test ; class MyIntegerTest { static MyInteger mi1 , mi2 , mi3 , mi4 , mi5 , mi6 , mi7 ; @BeforeAll public static void setUpBeforeClass () throws Exception { mi1 = new MyInteger ( \"-2147483648\" ); mi2 = new MyInteger ( \"+2147483647\" ); mi3 = new MyInteger ( - 1 ); mi4 = new MyInteger ( 1 ); mi5 = new MyInteger ( 0 ); mi6 = new MyInteger ( \"-1\" ); mi7 = new MyInteger ( 2147483647 ); } @Test void testHashCode () { assertTrue ( mi2 . hashCode () == mi7 . hashCode (), \" hashCode of mi2 and mi7 should be equal\" ); assertEquals ( - 2147483648 , mi1 . hashCode (), \"hashCode of mi1 should be -2147483648\" ); assertEquals ( 0 , mi5 . hashCode (), \"hashCode of mi5 should be 0\" ); } @Test void testMyIntegerInt () { assertNotNull ( mi4 , \"mi4 should be not null\" ); assertTrue ( mi3 . equals ( mi6 ), \"mi3 and mi6 should be equal\" ); assertTrue ( mi7 . equals ( mi2 ), \"mi7 and mi2 should be equal\" ); } @Test void testMyIntegerString () { assertNotNull ( mi1 , \"mi1 should be not null\" ); assertNotNull ( mi2 , \"mi2 should be not null\" ); assertNotNull ( mi6 , \"mi6 should be not null\" ); assertTrue ( mi3 . equals ( mi6 ), \"mi3 and mi6 should be equal\" ); assertTrue ( mi7 . equals ( mi2 ), \"mi7 and mi2 should be equal\" ); } @Test void testParseInt () { assertEquals ( - 2147483648 , MyInteger . parseInt ( \"-2147483648\" ), \"should be -2147483648\" ); assertEquals ( + 2147483647 , MyInteger . parseInt ( \"+00002147483647\" ), \"should be +2147483647\" ); assertEquals ( - 1 , MyInteger . parseInt ( \"-0000001\" ), \"should be -1\" ); } @Test void testIntValue () { assertEquals ( - 2147483648 , mi1 . intValue (), \"should be -2147483648\" ); assertEquals ( + 2147483647 , mi2 . intValue (), \"should be +2147483647\" ); assertEquals ( + 2147483647 , mi7 . intValue (), \"should be +2147483647\" ); } @Test void testDoubleValue () { assertEquals ( - 2147483648.0 , mi1 . doubleValue (), \"should be -2147483648.0\" ); assertEquals ( + 2147483647.0 , mi2 . doubleValue (), \"should be +2147483647.0\" ); assertEquals ( + 2147483647.0 , mi7 . doubleValue (), \"should be +2147483647.0\" ); } @Test void testValueOfString () { assertTrue ( mi1 . equals ( MyInteger . valueOf ( \"-2147483648\" )), \"should be equal to mi1\" ); assertTrue ( mi2 . equals ( MyInteger . valueOf ( \"2147483647\" )), \"should be equal to mi2\" ); assertTrue ( mi7 . equals ( MyInteger . valueOf ( \"2147483647\" )), \"should be equal to mi7\" ); } @Test void testValueOfInt () { assertTrue ( mi1 . equals ( MyInteger . valueOf ( - 2147483648 )), \"should be equal to mi1\" ); assertTrue ( mi2 . equals ( MyInteger . valueOf ( 2147483647 )), \"should be equal to mi2\" ); assertTrue ( mi7 . equals ( MyInteger . valueOf ( 2147483647 )), \"should be equal to mi7\" ); } @Test void testEqualsObject () { assertTrue ( mi3 . equals ( mi6 ), \"mi3 and mi6 should be equal\" ); assertTrue ( mi7 . equals ( mi2 ), \"mi7 and mi2 should be equal\" ); assertFalse ( mi3 . equals ( mi4 ), \"mi3 and mi4 should not be equal\" ); assertFalse ( mi3 . equals ( mi5 ), \"mi3 and mi5 should not be equal\" ); } @Test void testToString () { assertEquals ( \"-2147483648\" , mi1 . toString (), \"should be '-2147483648'\" ); assertEquals ( \"2147483647\" , mi2 . toString (), \"should be '2147483647' mi2\" ); assertEquals ( \"2147483647\" , mi7 . toString (), \"should be '2147483647' mi7\" ); } @Test void testCompare () { assertTrue ( MyInteger . compare ( 5 , 4 ) > 0 , \"5,4 should be > 0\" ); assertTrue ( MyInteger . compare ( 4 , 4 ) == 0 , \"4,4 should be == 0\" ); assertTrue ( MyInteger . compare ( 4 , 5 ) < 0 , \"4,5 should be < 0\" ); assertTrue ( MyInteger . compare ( MyInteger . MAX_VALUE , MyInteger . MIN_VALUE ) > 0 , \"MAX,MIN should be > 0\" ); assertTrue ( MyInteger . compare ( MyInteger . MAX_VALUE , MyInteger . MAX_VALUE ) == 0 , \"MAX,MAX should be == 0\" ); assertTrue ( MyInteger . compare ( MyInteger . MIN_VALUE , MyInteger . MAX_VALUE ) < 0 , \"MIN,MAX should be > 0\" ); } @Test void testCompareTo () { assertTrue ( mi1 . compareTo ( mi2 ) < 0 , \"mi1, mi2 should be < 0\" ); assertTrue ( mi2 . compareTo ( mi1 ) > 0 , \"mi2, mi1 should be > 0\" ); assertTrue ( mi2 . compareTo ( mi7 ) == 0 , \"mi2, mi7 should be == 0\" ); assertTrue ( mi3 . compareTo ( mi6 ) == 0 , \"mi3, mi6 should be == 0\" ); } } Aufgabe 3 (Solitaire) \u00b6 Aufgabe 3 Information und Vorbereitung Wir beginnen, ein Englisches Solit\u00e4r zu programmieren. Einige kennen es auch als Steckhalma. Ziel des Spiels ist, alle Steine bis auf einen (der am besten in der Mitte \u00fcbrig bleibt), zu entfernen. Ein Zug ist wie folgt: ein Stein springt \u00fcber einen anderen Stein und der \u00fcbersprungene Stein wird entfernt. Es gibt viele L\u00f6sungen daf\u00fcr. Einige Klassen sind bereits gegeben: Klasse Point.java package aufgaben.aufgabe3 ; /* * ein Point repreasentiert eine Position * im Spielfeld, bestehend aus der Nummer * fuer die Zeile (row) und der Nummer * fuer die Spalte (col) */ public class Point { private int row ; private int col ; /* * Konstruktor zur Erzeugung einer * Position bestehend aus row und col */ public Point ( int row , int col ) { this . row = row ; this . col = col ; } public int getRow () { return this . row ; } public int getCol () { return this . col ; } @Override public String toString () { return \"(\" + this . row + \",\" + this . col + \")\" ; } } Klasse Move.java ```java package aufgaben.aufgabe3; /* * diese Klasse repraesentiert einen Zug * Variablen sind Point from * und Point to * es wird nicht geprueft, ob der Zug ueberhaupt * moeglich ist */ public class Move { private Point from; private Point to; /* * ein Zug von dem from-Point (fromRow,fromCol) * zum to-Point (toRow,toCol) */ public Move(int fromRow, int fromCol, int toRow, int toCol) { this.from = new Point(fromRow, fromCol); this.to = new Point(toRow, toCol); } /* * in dem Konstruktor werden in this.from und this.to nicht einfach * die Referenzen von from und to gespeichert, sondern davon Kopien * erstellt, damit das Programm robuster gegen das Aendern von * Referenzen ist */ public Move(Point from, Point to) { this.from = new Point(from.getRow(), from.getCol()); this.to = new Point(to.getRow(), to.getCol()); } /* * der Getter fuer den Point from gibt keine Referenz auf * den Point from zurueck, sondern eine Kopie (einen Klon) * von from --> Referenzen koennen \"verbogen\" werden, aber * die Kopien bleiben unveraendert */ public Point getFrom() { return new Point(this.from.getRow(), this.from.getCol()); } /* * der Getter fuer den Point to gibt keine Referenz auf * den Point to zurueck, sondern eine Kopie (einen Klon) * von to --> Referenzen koennen \"verbogen\" werden, aber * die Kopien bleiben unveraendert */ public Point getTo() { return new Point(this.to.getRow(), this.to.getCol()); } } Klasse Moves.java package aufgaben.aufgabe3 ; /* * diese Klasse repraesentiert eine Folge * von Zuegen (Move), die in einem Array * moves gespeichert sind */ public class Moves { private Move [] moves ; /* * der Konstruktor erstellt ein leeres moves-Array * (d.h. noch keine Zuege (Moves) gespeichert) */ public Moves () { this . moves = new Move [ 0 ] ; } /* * der Konstruktor erstellt ein moves-Array mit einem * Move - dem erste Zug (firstMove) */ public Moves ( Move firstMove ) { this . moves = new Move [ 1 ] ; this . moves [ 0 ] = firstMove ; } /* * Anzahl der bisher gespeicherten Zuege */ public int getLength () { return this . moves . length ; } /* * fuegt einen Zug (nextMove) zum moves-Array hinzu * dazu muss das moves-Array um 1 laenger sein als zuvor * es wird eine Kopie aller Zuege erstellt und dann * der nextMove hinzugefuegt */ public void addMove ( Move nextMove ) { Move [] newMoves = new Move [ this . moves . length + 1 ] ; for ( int index = 0 ; index < this . moves . length ; index ++ ) { newMoves [ index ] = this . moves [ index ] ; } newMoves [ newMoves . length - 1 ] = new Move ( nextMove . getFrom (), nextMove . getTo ()); this . moves = newMoves ; } /* * gibt den Move zurueck, der im moves-Array unter dem Index index * gespeichert ist; * kann sein, dass index kein korrekter Index im moves-Array ist, * dann wird eine IllegalArgumentException geworfen */ public Move getMoveAtIndex ( int index ) throws IllegalArgumentException { try { return this . moves [ index ] ; } catch ( ArrayIndexOutOfBoundsException e ) { throw new IllegalArgumentException ( \"kein gueltiger Index!\" ); } } /* * Ausgabe aller im moves-Array gespeicherten Zuege * wird nur zum Debuggen benoetigt */ public void printMoves () { System . out . printf ( \"%n---%n\" ); for ( int index = 0 ; index < this . moves . length ; index ++ ) { Move move = this . moves [ index ] ; Point from = move . getFrom (); Point to = move . getTo (); System . out . println ( from . toString () + \" --> \" + to . toString ()); } System . out . printf ( \"%n---%n%n\" ); } } enum State.java package aufgaben.aufgabe3 ; /* * FREE - der Platz ist ein Spielfeld, aber kein Spielstein drauf * USED - der Platz ist ein Spielfeld mit Spielstein drauf * NOT - der Platz gehoert nicht zum Spielfeld */ public enum State { FREE , USED , NOT } Aufgabe Bef\u00fcllen Sie die Klasse Solitaire.java , wie in den Kommentaren beschrieben: Klasse Solitaire.java package aufgaben.aufgabe3.loesung ; public class Solitaire { private Moves game ; private State [][] field ; public Solitaire () { this . game = new Moves (); this . field = new State [ 7 ][ 7 ] ; for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { if (( row < 2 || row > 4 ) && ( col < 2 || col > 4 )) { this . field [ row ][ col ] = State . NOT ; } else { this . field [ row ][ col ] = State . USED ; } } } this . field [ 3 ][ 3 ] = State . FREE ; } /* * Geben Sie das Spielfeld aus! Am Anfang sollte auf der * Konsole so ein Bild erscheinen: * o o o * o o o * o o o o o o o * o o o o o o * o o o o o o o * o o o * o o o * */ public void print () { } /* * diese Methode gibt ein true zurueck, wenn von der * uebergebenen Position (row,col) ein Zug moeglich ist * d.h. * 1. auf der angegebenen Position muss ein Stein sein * 2. zwei Steine weiter (oben, unten, rechts oder links) * darf kein Stein sein * 3. dazwischen muss ein Stein sein */ public boolean possibleFrom ( int row , int col ) { return false ; } /* * diese Methode gibt alle Positionen (Point) zurueck, * AUF die von (fromRow,fromCol) aus gesprungen werden * kann */ public Point [] possibleTo ( int fromRow , int fromCol ) { if ( ! possibleFrom ( fromRow , fromCol )) return new Point [ 0 ] ; // naechste Zeile muss entfernt werden! return null ; } /* * diese Methode erzeugt ein Moves-Objekt * in dieses Moves-Objekt werden mithilfe der * Objektmethode addMove() (aus Moves) alle * moeglichen Zuege hinzugefuegt * (moeglich im aktuellen Zustand von field[][]) */ public Moves possibleMoves () { Moves possibleMoves = new Moves (); // next line for debugging possibleMoves . printMoves (); return possibleMoves ; } /* * gibt ein true zurueck, wenn im aktuellen Zustand * von field[][] ueberhaupt noch ein Zug moeglich ist * sonst false */ public boolean movePossible () { return false ; } /* * ruft die Methode move(Move move) auf, * wenn ein Zug moeglich ist (dann true zurueck) * sonst false */ public boolean moveFirstPossible () { if ( ! movePossible ()) return false ; /* * hier einen moeglichen Zug ausfuehren * den ersten, den Sie finden (siehe * possibleMoves() ) */ return true ; } /* * hier wird der Zug Move move ausgefuehrt * nach dem Zug ist * 1. die from-Position leer * 2. die to-Position mit einem Stein besetzt * 3. dazwischen leer (Stein wird \"entfernt\") * falls Zug nicht moeglich, wird eine * IllegalArgumentException geworfen */ public void move ( Move move ) throws IllegalArgumentException { } } Sie k\u00f6nnen selbstverst\u00e4ndlich beliebig viele weitere (Hilfs-)Methoden hinzuf\u00fcgen. Testen Sie Ihr Spiel in einer Testklasse . F\u00fchren Sie einige Z\u00fcge aus und geben danach immer das Spielfeld auf die Konsole aus. Die Konsole k\u00f6nnte z.B. dann so aussehen: m\u00f6gliche Konsolenausgaben o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o --- ( 1 ,3 ) --> ( 3 ,3 ) ( 3 ,1 ) --> ( 3 ,3 ) ( 3 ,5 ) --> ( 3 ,3 ) ( 5 ,3 ) --> ( 3 ,3 ) --- o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o --- ( 2 ,1 ) --> ( 2 ,3 ) ( 2 ,5 ) --> ( 2 ,3 ) ( 4 ,3 ) --> ( 2 ,3 ) --- o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o --- ( 0 ,2 ) --> ( 2 ,2 ) ( 2 ,4 ) --> ( 2 ,2 ) ( 3 ,3 ) --> ( 1 ,3 ) ( 4 ,1 ) --> ( 2 ,1 ) ( 4 ,2 ) --> ( 2 ,2 ) --- o o o o o o o o o o o o o o o o o o o o o o o o o o o o o --- ( 0 ,4 ) --> ( 0 ,2 ) ( 2 ,3 ) --> ( 2 ,1 ) ( 3 ,2 ) --> ( 1 ,2 ) ( 3 ,3 ) --> ( 1 ,3 ) ( 4 ,1 ) --> ( 2 ,1 ) --- o o o o o o o o o o o o o o o o o o o o o o o o o o o o --- ( 2 ,3 ) --> ( 2 ,1 ) ( 2 ,4 ) --> ( 0 ,4 ) ( 3 ,2 ) --> ( 1 ,2 ) ( 3 ,3 ) --> ( 1 ,3 ) ( 4 ,1 ) --> ( 2 ,1 ) --- o o o o o o o o o o o o o o o o o o o o o o o o o o o --- ( 2 ,0 ) --> ( 2 ,2 ) ( 2 ,4 ) --> ( 0 ,4 ) ( 2 ,5 ) --> ( 2 ,3 ) ( 4 ,2 ) --> ( 2 ,2 ) ( 4 ,3 ) --> ( 2 ,3 ) --- o o o o o o o o o o o o o o o o o o o o o o o o o o --- ( 2 ,4 ) --> ( 0 ,4 ) ( 2 ,5 ) --> ( 2 ,3 ) ( 3 ,2 ) --> ( 1 ,2 ) ( 4 ,0 ) --> ( 2 ,0 ) ( 4 ,1 ) --> ( 2 ,1 ) ( 4 ,3 ) --> ( 2 ,3 ) --- o o o o o o o o o o o o o o o o o o o o o o o o o --- ( 2 ,6 ) --> ( 2 ,4 ) ( 3 ,2 ) --> ( 1 ,2 ) ( 4 ,0 ) --> ( 2 ,0 ) ( 4 ,1 ) --> ( 2 ,1 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 4 ,4 ) --> ( 2 ,4 ) --- o o o o o o o o o o o o o o o o o o o o o o o o --- ( 3 ,2 ) --> ( 1 ,2 ) ( 3 ,4 ) --> ( 1 ,4 ) ( 4 ,0 ) --> ( 2 ,0 ) ( 4 ,1 ) --> ( 2 ,1 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 4 ,5 ) --> ( 2 ,5 ) ( 4 ,6 ) --> ( 2 ,6 ) --- o o o o o o o o o o o o o o o o o o o o o o o --- ( 0 ,2 ) --> ( 2 ,2 ) ( 3 ,0 ) --> ( 3 ,2 ) ( 3 ,4 ) --> ( 1 ,4 ) ( 3 ,4 ) --> ( 3 ,2 ) ( 4 ,0 ) --> ( 2 ,0 ) ( 4 ,1 ) --> ( 2 ,1 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 4 ,5 ) --> ( 2 ,5 ) ( 4 ,6 ) --> ( 2 ,6 ) ( 5 ,2 ) --> ( 3 ,2 ) --- o o o o o o o o o o o o o o o o o o o o o o --- ( 3 ,0 ) --> ( 3 ,2 ) ( 3 ,4 ) --> ( 1 ,4 ) ( 3 ,4 ) --> ( 3 ,2 ) ( 4 ,0 ) --> ( 2 ,0 ) ( 4 ,1 ) --> ( 2 ,1 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 4 ,5 ) --> ( 2 ,5 ) ( 4 ,6 ) --> ( 2 ,6 ) ( 5 ,2 ) --> ( 3 ,2 ) --- o o o o o o o o o o o o o o o o o o o o o --- ( 3 ,2 ) --> ( 1 ,2 ) ( 3 ,3 ) --> ( 3 ,1 ) ( 3 ,4 ) --> ( 1 ,4 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 4 ,5 ) --> ( 2 ,5 ) ( 4 ,6 ) --> ( 2 ,6 ) --- o o o o o o o o o o o o o o o o o o o o --- ( 3 ,4 ) --> ( 1 ,4 ) ( 3 ,4 ) --> ( 3 ,2 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 4 ,5 ) --> ( 2 ,5 ) ( 4 ,6 ) --> ( 2 ,6 ) ( 5 ,2 ) --> ( 3 ,2 ) --- o o o o o o o o o o o o o o o o o o o --- ( 0 ,4 ) --> ( 2 ,4 ) ( 3 ,6 ) --> ( 3 ,4 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 4 ,5 ) --> ( 2 ,5 ) ( 4 ,6 ) --> ( 2 ,6 ) ( 5 ,2 ) --> ( 3 ,2 ) ( 5 ,4 ) --> ( 3 ,4 ) --- o o o o o o o o o o o o o o o o o o --- ( 3 ,6 ) --> ( 3 ,4 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 4 ,5 ) --> ( 2 ,5 ) ( 4 ,6 ) --> ( 2 ,6 ) ( 5 ,2 ) --> ( 3 ,2 ) ( 5 ,4 ) --> ( 3 ,4 ) --- o o o o o o o o o o o o o o o o o --- ( 3 ,3 ) --> ( 3 ,5 ) ( 3 ,4 ) --> ( 1 ,4 ) ( 3 ,4 ) --> ( 3 ,2 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 5 ,2 ) --> ( 3 ,2 ) --- o o o o o o o o o o o o o o o o --- ( 4 ,5 ) --> ( 2 ,5 ) ( 5 ,2 ) --> ( 3 ,2 ) ( 5 ,3 ) --> ( 3 ,3 ) ( 5 ,4 ) --> ( 3 ,4 ) --- o o o o o o o o o o o o o o o --- ( 2 ,4 ) --> ( 2 ,6 ) ( 2 ,5 ) --> ( 2 ,3 ) ( 4 ,3 ) --> ( 4 ,5 ) ( 5 ,2 ) --> ( 3 ,2 ) ( 5 ,3 ) --> ( 3 ,3 ) ( 5 ,4 ) --> ( 3 ,4 ) --- o o o o o o o o o o o o o o --- ( 4 ,3 ) --> ( 4 ,5 ) ( 5 ,2 ) --> ( 3 ,2 ) ( 5 ,3 ) --> ( 3 ,3 ) ( 5 ,4 ) --> ( 3 ,4 ) --- o o o o o o o o o o o o o --- ( 4 ,1 ) --> ( 4 ,3 ) ( 4 ,6 ) --> ( 4 ,4 ) ( 5 ,2 ) --> ( 3 ,2 ) ( 6 ,3 ) --> ( 4 ,3 ) ( 6 ,4 ) --> ( 4 ,4 ) --- o o o o o o o o o o o o --- ( 4 ,6 ) --> ( 4 ,4 ) ( 5 ,3 ) --> ( 3 ,3 ) ( 6 ,2 ) --> ( 4 ,2 ) ( 6 ,4 ) --> ( 4 ,4 ) --- o o o o o o o o o o o --- ( 4 ,3 ) --> ( 4 ,5 ) ( 4 ,4 ) --> ( 4 ,2 ) ( 5 ,3 ) --> ( 3 ,3 ) ( 5 ,4 ) --> ( 3 ,4 ) ( 6 ,2 ) --> ( 4 ,2 ) --- o o o o o o o o o o --- ( 6 ,2 ) --> ( 4 ,2 ) ( 6 ,3 ) --> ( 4 ,3 ) ( 6 ,4 ) --> ( 4 ,4 ) --- o o o o o o o o o --- ( 5 ,4 ) --> ( 5 ,2 ) ( 6 ,3 ) --> ( 4 ,3 ) ( 6 ,4 ) --> ( 4 ,4 ) ( 6 ,4 ) --> ( 6 ,2 ) --- o o o o o o o o --- ( 4 ,2 ) --> ( 6 ,2 ) ( 5 ,2 ) --> ( 3 ,2 ) ( 6 ,4 ) --> ( 6 ,2 ) --- o o o o o o o o o o o o o o Dabei steht z.B. --- ( 1 ,3 ) --> ( 3 ,3 ) ( 3 ,1 ) --> ( 3 ,3 ) ( 3 ,5 ) --> ( 3 ,3 ) ( 5 ,3 ) --> ( 3 ,3 ) --- f\u00fcr die in dem Zustand dar\u00fcber m\u00f6glichen Z\u00fcge. eine m\u00f6gliche L\u00f6sung f\u00fcr Aufgabe 3 Solitaire.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 package aufgaben.aufgabe3 ; public class Solitaire { private Moves game ; private State [][] field ; public Solitaire () { this . game = new Moves (); this . field = new State [ 7 ][ 7 ] ; for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { if (( row < 2 || row > 4 ) && ( col < 2 || col > 4 )) { this . field [ row ][ col ] = State . NOT ; } else { this . field [ row ][ col ] = State . USED ; } } } this . field [ 3 ][ 3 ] = State . FREE ; } public void print () { for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { if ( this . field [ row ][ col ] == State . USED ) System . out . print ( \"o \" ); else System . out . print ( \" \" ); } System . out . println (); } System . out . println (); } public boolean possibleFrom ( int row , int col ) { if ( row >= 0 && row < 7 && col >= 0 && col < 7 && this . field [ row ][ col ] == State . USED ) { // up ? if ( row > 1 && this . field [ row - 1 ][ col ] == State . USED && this . field [ row - 2 ][ col ] == State . FREE ) return true ; // down ? if ( row < 5 && this . field [ row + 1 ][ col ] == State . USED && this . field [ row + 2 ][ col ] == State . FREE ) return true ; // right ? if ( col < 5 && this . field [ row ][ col + 1 ] == State . USED && this . field [ row ][ col + 2 ] == State . FREE ) return true ; // left ? if ( col > 1 && this . field [ row ][ col - 1 ] == State . USED && this . field [ row ][ col - 2 ] == State . FREE ) return true ; } return false ; } public Point [] possibleTo ( int fromRow , int fromCol ) { if ( ! possibleFrom ( fromRow , fromCol )) return new Point [ 0 ] ; // there is at least one To-Point int nrOfPossibleTos = 0 ; if ( fromRow > 1 && this . field [ fromRow - 1 ][ fromCol ] == State . USED && this . field [ fromRow - 2 ][ fromCol ] == State . FREE ) nrOfPossibleTos ++ ; if ( fromRow < 5 && this . field [ fromRow + 1 ][ fromCol ] == State . USED && this . field [ fromRow + 2 ][ fromCol ] == State . FREE ) nrOfPossibleTos ++ ; if ( fromCol < 5 && this . field [ fromRow ][ fromCol + 1 ] == State . USED && this . field [ fromRow ][ fromCol + 2 ] == State . FREE ) nrOfPossibleTos ++ ; if ( fromCol > 1 && this . field [ fromRow ][ fromCol - 1 ] == State . USED && this . field [ fromRow ][ fromCol - 2 ] == State . FREE ) nrOfPossibleTos ++ ; Point [] tos = new Point [ nrOfPossibleTos ] ; int index = 0 ; if ( fromRow > 1 && this . field [ fromRow - 1 ][ fromCol ] == State . USED && this . field [ fromRow - 2 ][ fromCol ] == State . FREE ) tos [ index ++] = new Point ( fromRow - 2 , fromCol ); if ( fromRow < 5 && this . field [ fromRow + 1 ][ fromCol ] == State . USED && this . field [ fromRow + 2 ][ fromCol ] == State . FREE ) tos [ index ++] = new Point ( fromRow + 2 , fromCol ); if ( fromCol < 5 && this . field [ fromRow ][ fromCol + 1 ] == State . USED && this . field [ fromRow ][ fromCol + 2 ] == State . FREE ) tos [ index ++] = new Point ( fromRow , fromCol + 2 ); if ( fromCol > 1 && this . field [ fromRow ][ fromCol - 1 ] == State . USED && this . field [ fromRow ][ fromCol - 2 ] == State . FREE ) tos [ index ++] = new Point ( fromRow , fromCol - 2 ); return tos ; } public Moves possibleMoves () { Moves possibleMoves = new Moves (); for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { if ( possibleFrom ( row , col )) { Point [] tos = this . possibleTo ( row , col ); Point from = new Point ( row , col ); for ( int index = 0 ; index < tos . length ; index ++ ) { possibleMoves . addMove ( new Move ( from , tos [ index ] )); } } } } // next line for debug possibleMoves . printMoves (); return possibleMoves ; } public boolean movePossible () { for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { if ( possibleFrom ( row , col )) return true ; } } return false ; } public boolean moveFirstPossible () { if ( ! movePossible ()) return false ; else { Moves possibleMoves = this . possibleMoves (); try { Move move = possibleMoves . getMoveAtIndex ( 0 ); this . move ( move ); return true ; } catch ( IllegalArgumentException e ) { System . out . println ( \"Zug nicht moeglich! Index : 0\" ); return false ; } } } public void move ( Move move ) throws IllegalArgumentException { Point from = move . getFrom (); Point to = move . getTo (); int fromRow = from . getRow (); int fromCol = from . getCol (); int toRow = to . getRow (); int toCol = to . getCol (); int middleRow = ( fromRow + toRow ) / 2 ; int middleCol = ( fromCol + toCol ) / 2 ; try { this . field [ fromRow ][ fromCol ] = State . FREE ; this . field [ middleRow ][ middleCol ] = State . FREE ; this . field [ toRow ][ toCol ] = State . USED ; } catch ( ArrayIndexOutOfBoundsException e ) { throw new IllegalArgumentException ( \"Zug nicht moeglich! (\" + fromRow + \", \" + fromCol + \") --> \" + \"( \" + toRow + \", \" + toCol + \") \" ); } } } Testklasse.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package aufgaben.aufgabe3 ; public class Testklasse { public static void main ( String [] args ) { Solitaire s = new Solitaire (); s . print (); while ( s . moveFirstPossible ()) { s . print (); } s . print (); } } Aufgabe 4 (test-driven development) \u00b6 Aufgabe 4 Implementieren Sie eine Methode public static int singleNumber(int[] nums) durch testgetriebene Entwicklung. F\u00fcr nums soll Folgendes gelten: es ist nicht leer, d.h. 1 <= nums.length , jede Zahl in nums ist genau zwei Mal in nums enthalten, bis auf eine - diese existiert nur genau ein Mal in nums Die Methode gibt die Zahl zur\u00fcck, die nur genau ein Mal in nums enthalten ist. Bsp.: // Beispiel 1 Input: nums = [ 2 ,2,1 ] Output: 1 // Beispiel 2 Input: nums = [ 4 ,1,2,1,2 ] Output: 4 // Beispiel 3 Input: nums = [ 1 ] Output: 1 Sie k\u00f6nnen beliebig viele weitere Methoden implementieren, die Ihnen helfen. Diese m\u00fcssen aber auch testgetrieben entwickelt werden. Pushen Sie alle Klassen (also nat\u00fcrlich auch die Testklasse) in Ihr Remote-Repository. Aufgabe 5 (Operationen \u00fcber Mengen) \u00b6 Aufgabe 5 Implementieren Sie eine Klasse SetOperations . Erstellen Sie drei Objektvariablen (z.B. numbers1 , numbers2 und both ) vom Typ Set<Integer> . Erzeugen Sie f\u00fcr diese Objektvariablen TreeSet -Objekte. Erstellen Sie eine Objektmethode fill() . In dieser Methode sollen die beiden Sets numbers1 und numbers2 mit Zufallszahlen aus dem Wertebereich 0..99 bef\u00fcllt werden. Erzeugen Sie jeweils 100 Zufallszahlen (die number s-Sets werden dann aber jeweils weniger als 100 Eintr\u00e4ge haben, da doppelte Elemente nicht aufgenommen werden.) Beachten Sie, dass die nextInt() -Methode ein int zur\u00fcckliefert. Dieses int muss zun\u00e4chst in ein Integer -Objekt umgewandelt werden ( Integer.valueOf(int) ) und dieses Integer -Objekt wird dann dem Set hinzugef\u00fcgt (wenn es nicht schon enthalten ist). Erstellen Sie eine Objektmethode fillBothUnion() . In dieser Methode wird die both -Menge derart bef\u00fcllt, dass both einer Vereinigung der Mengen numbers1 und numbers2 entspricht. F\u00fcr Methoden auf Mengen siehe z.B. https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Set.html . Erstellen Sie eine Objektmethode fillBothIntersection() . In dieser Methode wird die both -Menge derart bef\u00fcllt, dass both einem Schnitt der Mengen numbers1 und numbers2 entspricht. Erstellen Sie eine Objektmethode fillBothDifference() . In dieser Methode wird die both -Menge derart bef\u00fcllt, dass both der Differenz der Menge numbers1 minus der Menge numbers2 entspricht. Schreiben Sie eine Methode print() so, dass jede Menge als ein Quadrat (10x10) aus Punkten auf der Konsole erscheint. Es wird ein Punkt gezeichnet, wenn die entsprechende Zahl (die 100 Punkte bilden die Zahlen 0..99 ab) in der Menge enthalten ist und es wird kein Punkt gezeichnet, wenn die Zahl nicht vorhanden ist. (Anstelle von Punkten k\u00f6nnen Sie auch jedes beliebige Zeichen ( o, *, #, x, ... ) verwenden). Gestalten Sie die Ausgabe so, dass die drei Mengen numbers1 , numbers2 und both nebeneinander auf der Konsole erscheinen. Testen Sie alle drei Methoden fillBothUnion() , fillBothIntersection() und fillBothDifference() . Die Ausgabe k\u00f6nnte wie folgt sein ( A stellt die Menge numbers1 dar, B die Menge numbers2 und rechts ist jeweils die both -Menge dargestellt): Tipps : F\u00fcr die schwarzen Punkte habe ich das Character '\\u25cf' verwendet (ein passendes Leerzeichen dazu ist '\\u2009' ). Das Zeichen f\u00fcr die Vereinigung ist '\\u222a' und f\u00fcr den Schnitt '\\u2229' . Schauen Sie sich auch im Skript Mengenoperationen an. eine m\u00f6gliche L\u00f6sung f\u00fcr Aufgabe 5 SetOperations.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 package aufgaben.aufgabe5 ; import java.util.* ; public class SetOperations { Set < Integer > numbers1 ; Set < Integer > numbers2 ; Set < Integer > both ; final static int UPPER_BOUND = 100 ; public SetOperations () { this . numbers1 = new TreeSet <> (); this . numbers2 = new TreeSet <> (); this . both = new TreeSet <> (); } public void fill () { Random r = new Random (); int nextIntNr = 0 ; Integer nextIntegerNr = Integer . valueOf ( nextIntNr ); // fill numbers1 for ( int i = 0 ; i < UPPER_BOUND ; i ++ ) { nextIntNr = r . nextInt ( UPPER_BOUND ); nextIntegerNr = Integer . valueOf ( nextIntNr ); this . numbers1 . add ( nextIntegerNr ); } // fill numbers2 for ( int i = 0 ; i < UPPER_BOUND ; i ++ ) { nextIntNr = r . nextInt ( UPPER_BOUND ); nextIntegerNr = Integer . valueOf ( nextIntNr ); this . numbers2 . add ( nextIntegerNr ); } } public void fillBothUnion () { System . out . println (); System . out . println ( \"----------------------------------------------------------------------------\" ); System . out . println ( \" A B A \" + '\\u222a' + \" B \" ); System . out . println ( \"----------------------------------------------------------------------------\" ); this . both . addAll ( numbers1 ); this . both . addAll ( numbers2 ); } public void fillBothIntersection () { System . out . println (); System . out . println ( \"----------------------------------------------------------------------------\" ); System . out . println ( \" A B A \" + '\\u2229' + \" B \" ); System . out . println ( \"----------------------------------------------------------------------------\" ); this . both . addAll ( numbers1 ); this . both . retainAll ( numbers2 ); } public void fillBothDifference () { System . out . println (); System . out . println ( \"----------------------------------------------------------------------------\" ); System . out . println ( \" A B A-B \" ); System . out . println ( \"----------------------------------------------------------------------------\" ); this . both . addAll ( numbers1 ); this . both . removeAll ( numbers2 ); } public Integer printOneLine ( Iterator < Integer > it , Integer next , int curRow ) { int curNr = 0 ; // row*10+col for ( int col = 0 ; col < 10 ; col ++ ) { curNr = curRow * 10 + col ; if ( next != null && next . intValue () == curNr ) { System . out . print ( '\\u25cf' + \" \" ); if ( it . hasNext ()) { next = it . next (); } } else { //System.out.print('\\u25cc'+\" \"); System . out . print ( '\\u2009' + \" \" ); } } return next ; } private void printSpaces ( int nrOfSpaces ) { for ( int spaces = 0 ; spaces < nrOfSpaces ; spaces ++ ) System . out . print ( \" \" ); } private void justTestPrint () { System . out . print ( numbers1 . size () + \" : [ \" ); for ( Integer i : numbers1 ) System . out . print ( i . intValue () + \" \" ); System . out . println ( \"]\" ); System . out . println (); System . out . print ( numbers2 . size () + \" : [ \" ); for ( Integer i : numbers2 ) System . out . print ( i . intValue () + \" \" ); System . out . println ( \"]\" ); System . out . println (); System . out . print ( both . size () + \" : [ \" ); for ( Integer i : both ) System . out . print ( i . intValue () + \" \" ); System . out . println ( \"]\" ); System . out . println (); } public void print () { //justTestPrint(); System . out . println (); Iterator < Integer > it1 = numbers1 . iterator (); Integer next1 = ( it1 . hasNext ()) ? it1 . next () : null ; Iterator < Integer > it2 = numbers2 . iterator (); Integer next2 = ( it2 . hasNext ()) ? it2 . next () : null ; Iterator < Integer > itb = both . iterator (); Integer nextB = ( itb . hasNext ()) ? itb . next () : null ; for ( int row = 0 ; row < 10 ; row ++ ) { next1 = this . printOneLine ( it1 , next1 , row ); printSpaces ( 8 ); next2 = this . printOneLine ( it2 , next2 , row ); printSpaces ( 8 ); nextB = this . printOneLine ( itb , nextB , row ); System . out . println (); } System . out . println (); } } Testklasse.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package aufgaben.aufgabe5 ; public class Testklasse { public static void main ( String [] args ) { SetOperations so = new SetOperations (); so . fill (); so . fillBothUnion (); so . print (); so . fillBothIntersection (); so . print (); so . fillBothDifference (); so . print (); } } Aufgabe 6 (Maps) \u00b6 Aufgabe 6 Testen Sie folgenden Code: long a = 1000 ; Integer b = 1000 ; Integer c = 1000 ; System . out . println ( a == b ); System . out . println ( b == c ); Was stellen Sie fest und warum? \u00c4ndern Sie den Vergleich der Variablen b und c so, dass true ausgegeben wird. Die ersten drei Zeilen bleiben dabei unver\u00e4ndert. Sie ben\u00f6tigen also einen anderen Vergleich als b == c . Erstellen Sie eine Klasse PizzaMenu . Erzeugen Sie darin eine HashMap und f\u00fcgen Sie folgende Pizzen mit ihren Preisen ein: Pizza Preis Margherita 7,00 Veggie 7,50 Salami 8,50 Schinken 8,50 Schreiben Sie eine Methode public static boolean existingPizza(Map<String,Double> menu, String pizza) , die testet, ob eine eingegebene Pizza im Men\u00fc existiert. Schreiben Sie eine Methode public static void printPrice(Map<String,Double> menu, String pizza) , die f\u00fcr eine eingegebene Pizza den Preis ausgibt. Verwenden Sie dazu existingPizza() . Beispielausgabe: Salami: 8 .50 Euro Hawaii: Diese Pizza gibt es nicht. Schreiben Sie eine printMenu() -Methode, die ausgibt, wie viele Pizzen es im Men\u00fc gibt. Wenn das Men\u00fc nicht leer ist, sollen zudem alle Pizzen mit ihrem Preis ausgegeben werden. Beispielausgabe: // Beispiel fuer leeres Menue ############## Das Menu enth\u00e4lt 0 Pizzen. ############## // Beispiel fuer Menue ############## Das Menu enth\u00e4lt 4 Pizzen. Pizza Margherita: 7 .00 Euro Pizza Salami: 8 .50 Euro Pizza Schinken: 8 .50 Euro Pizza Veggie: 7 .50 Euro ############## \u00c4ndern Sie den Preis der Schinken -Pizza in der HashMap zu 8,20 . Schreiben Sie eine Methode public static void affordablePizza(Map<String,Double> menu, double maxPrice) , die alle Pizzen ausgibt, die man sich f\u00fcr einen bestimmten Betrag leisten kann. Beispielausgabe: Eingegebener Betrag: 4 .0 Euro Leider gibt es zu diesem Preis keine Pizza. Eingegebener Betrag: 8 .0 Euro M\u00f6gliche Pizzen: [ Margherita, Veggie ] Das Menu wird \u00fcberarbeitet, l\u00f6schen Sie daher alle Eintr\u00e4ge. F\u00fcllen Sie das Men\u00fc anschlie\u00dfend mit diesen neuen Pizzen: Pizza Preis Verde 7,00 Hawaii 8,20 Tradizionale 8,50 Legen Sie ein zweites Men\u00fc an und kopieren Sie alle Eintr\u00e4ge aus dem ersten Men\u00fc hinein. L\u00f6schen Sie im zweiten Men\u00fc die Pizza Hawaii und geben Sie die Namen aller noch verf\u00fcgbaren Pizzen aus. Finden Sie in Ihrem Code ein Beispiel f\u00fcr Auto-Boxing und schreiben Sie einen entsprechenden Kommentar. eine m\u00f6gliche L\u00f6sung f\u00fcr Aufgabe 6 PizzaMenu.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 package aufgaben.aufgabe6 ; import java.util.ArrayList ; import java.util.HashMap ; import java.util.Map ; import java.util.Set ; import java.util.List ; public class PizzaMenu { //3. public static boolean existingPizza ( Map < String , Double > menu , String pizza ) { if ( menu . containsKey ( pizza )){ return true ; } return false ; } //4. public static void printPrice ( Map < String , Double > menu , String pizza ) { if ( existingPizza ( menu , pizza )){ System . out . println ( pizza + \": \" + menu . get ( pizza )); } else { System . out . println ( pizza + \": \" + \"Diese Pizza gibt es nicht.\" ); } } //5. public static void printMenu ( Map < String , Double > menu ) { System . out . println (); System . out . println ( \"##############\" ); System . out . println ( \"Das Menu enth\u00e4lt \" + menu . size () + \" Pizzen.\" ); if ( ! menu . isEmpty ()) { for ( Map . Entry < String , Double > entry : menu . entrySet ()) { System . out . println ( \"Pizza : \" + entry . getKey () + \" - \" + entry . getValue ()); } } System . out . println ( \"##############\" ); } //7. public static void affordablePizza ( Map < String , Double > menu , double maxPrice ) { List < String > pizzen = new ArrayList <> (); System . out . println ( \"Eingegebener Betrag: \" + maxPrice + \" Euro\" ); for ( Map . Entry < String , Double > eintrag : menu . entrySet ()) { if ( eintrag . getValue () <= maxPrice ) { //Auto-Boxing von double zu Double pizzen . add ( eintrag . getKey ()); } } if ( pizzen . size () == 0 ) { System . out . println ( \"Leider gibt es zu diesem Preis keine Pizza.\" ); } else { System . out . println ( \"M\u00f6gliche Pizzen: \" + pizzen ); } } public static void main ( String [] args ) { //2. Map < String , Double > menu1 = new HashMap <> (); menu1 . put ( \"Margherita\" , 7.0 ); //Auto-Boxing von double zu Double menu1 . put ( \"Veggie\" , 7.5 ); //Auto-Boxing von double zu Double menu1 . put ( \"Salami\" , 8.5 ); //Auto-Boxing von double zu Double menu1 . put ( \"Schinken\" , 8.5 ); //Auto-Boxing von double zu Double //4. printPrice ( menu1 , \"Salami\" ); printPrice ( menu1 , \"Hawaii\" ); //5. printMenu ( menu1 ); //6. menu1 . put ( \"Schinken\" , 8.20 ); //Auto-Boxing von double zu Double //7. affordablePizza ( menu1 , 4.0 ); affordablePizza ( menu1 , 8.0 ); //8. menu1 . clear (); printMenu ( menu1 ); menu1 . put ( \"Verde\" , 7.0 ); //Auto-Boxing von double zu Double menu1 . put ( \"Hawaii\" , 8.2 ); //Auto-Boxing von double zu Double menu1 . put ( \"Tradizionale\" , 8.5 ); //Auto-Boxing von double zu Double printMenu ( menu1 ); //9. Map < String , Double > menu2 = new HashMap <> (); menu2 . putAll ( menu1 ); menu2 . remove ( \"Hawaii\" ); Set < String > pizzaNames = menu2 . keySet (); System . out . println (); System . out . println ( \"Es gibt folgende Pizzen: \" + pizzaNames ); } } Aufgabe 7 (Interfaces) \u00b6 Aufgabe 7 Das Observer -Entwurfsmuster geh\u00f6rt zu den am meisten verwendeten Designmustern/Designpattern/Pattern in der Programmierung. Es wird auch Beobachter -Muster oder Publisher -Pattern genannt. Wir werden dieses Muster in K\u00fcrze sehr h\u00e4ufig anwenden, wenn wir Nutzerereignisse in grafischen Oberfl\u00e4chen behandeln. Man kann sich dieses Pattern so vorstellen, dass der Publisher eine Zeitung oder auch Slack ist und dass Listener diese Zeitung (oder Slack) \"abonnieren\". Immer, wenn eine Nachricht ver\u00f6ffentlicht wird, dann erfahren alle Abonnenten davon. Wir werden eine (einfache) Implementierung dieses Entwurfsmusters durchf\u00fchren. Erstellen Sie ein Interface Publisher mit folgenden (abstrakten) Methoden: public boolean register(Listener listener); public boolean unregister(Listener listener); public void notifyListeners(); public String getUpdate(Listener listener); Erstellen Sie ein weiteres Interface Listener mit folgenden (abstrakten) Methoden: public void update(); public void setPublisher(Publisher publisher); public void removePublisher(Publisher publisher); Erstellen Sie eine Klasse Slack , die das Publisher -Interface implementiert. Objektvariablen der Klasse sind private Set<Listener> listeners; (speichert alle \"Abonnenten\"; kann gerne auch eine Liste sein) private int nrOfMessages; (speichert die aktuelle Nummer einer ver\u00f6ffentlichten Nachricht - die Nachrichten, die ver\u00f6ffentlicht werden, sollen fortlaufend nummeriert werden) Im parameterlosen Konstruktor werden die Menge (oder Liste) erzeugt und die nrOfMessages auf `0 gesetzt. In der Methode register(Listener listener) wird der listener in die Set listeners eingef\u00fcgt. Geben Sie ein true zur\u00fcck, wenn listener tats\u00e4chlich eingef\u00fcgt wurde und false sonst (falls er schon in der Menge (oder Liste) war. In der Methode unregister(Listener listener) wird der listener wieder aus der Set listeners gel\u00f6scht. Geben Sie ein true zur\u00fcck, wenn listener tats\u00e4chlich gel\u00f6scht wurde und false sonst (falls er nicht in der Menge (oder Liste) war. In der Methode notifyListeners() wird f\u00fcr alle listener aus der Menge listeners die update() -Methode aufgerufen (siehe Listener und Student ). Die Methode getUpdate(Listener obj) liefert einfach folgenden String zur\u00fcck: \"Breaking News \" + this.nrOfMessages . Erstellen Sie eine Methode public void publishNews() , in der die nrOfMessages um 1 erh\u00f6ht und die Methode notifyListeners() aufgerufen wird. Erstellen Sie eine Klasse Student , die das Listener -Interface implementiert. Objektvariablen der Klasse sind private String name; (speichert den Namen von Student ) private Publisher publisher; (speichert den Publisher , an den sich Student anmeldet) Im parametrisierten Konstruktor public Student(String name) wird der Name initalisiert. In der Methode setPublisher(Publisher publisher) wird die register() -Methode des publisher aufgerufen und der Wert der Objektvariable publisher gesetzt. Geben Sie bei erfolgreicher Anmeldung an den publisher auf die Konsole this.name + \" registered!\" aus. In der Methode removePublisher(Publisher publisher) meldet sich Student wieder vom publisher ab (Aufruf von unregister() und Ausgabe auf die Konsole this.name + \" deregistered!\" . In der Methode update() wird die getUpdate() -Methode des publisher aufgerufen und die zur\u00fcckgegebene Nachricht msg wie folgt auf die Konsole ausgegben: this.name + \" received \" + msg . Implementieren Sie f\u00fcr Student auch die Methoden equals() und hashCode() . Wenn Sie Ihre Implementierung mit folgender Klasse testen: public class Testklasse { public static void main ( String [] args ) { final int NR_OF_STUDENTS = 5 ; Slack slack = new Slack (); Student [] students = new Student [ NR_OF_STUDENTS ] ; Character c = 'A' ; for ( int index = 0 ; index < students . length ; index ++ ) { students [ index ] = new Student ( c . toString ()); c ++ ; students [ index ] . setPublisher ( slack ); } slack . publishNews (); System . out . println (); students [ 1 ] . removePublisher ( slack ); students [ 3 ] . removePublisher ( slack ); System . out . println (); slack . publishNews (); System . out . println (); students [ 1 ] . setPublisher ( slack ); students [ 2 ] . removePublisher ( slack ); students [ 4 ] . removePublisher ( slack ); System . out . println (); slack . publishNews (); System . out . println (); students [ 0 ] . removePublisher ( slack ); students [ 1 ] . removePublisher ( slack ); students [ 3 ] . setPublisher ( slack ); System . out . println (); slack . publishNews (); } } dann sollte die Ausgabe ungef\u00e4hr so sein: A registered! B registered! C registered! D registered! E registered! D received Breaking News 1 C received Breaking News 1 B received Breaking News 1 A received Breaking News 1 E received Breaking News 1 B deregistered! D deregistered! C received Breaking News 2 A received Breaking News 2 E received Breaking News 2 B registered! C deregistered! E deregistered! B received Breaking News 3 A received Breaking News 3 A deregistered! B deregistered! D registered! D received Breaking News 4 eine m\u00f6gliche L\u00f6sung f\u00fcr Aufgabe 7 Listener.java 1 2 3 4 5 6 7 8 9 10 11 12 13 package aufgaben.aufgabe7 ; public interface Listener { //method to update the listener, used by publisher public void update (); //attach with publisher to observe public void setPublisher ( Publisher publisher ); //attach with publisher to observe public void removePublisher ( Publisher publisher ); } Publisher.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package aufgaben.aufgabe7 ; public interface Publisher { //methods to register and unregister listeners (observers) public boolean register ( Listener listener ); public boolean unregister ( Listener listener ); //method to notify listeners of change public void notifyListeners (); //method to get updates from publisher (subject) public String getUpdate ( Listener listener ); } Slack.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package aufgaben.aufgabe7 ; import java.util.* ; public class Slack implements Publisher { private Set < Listener > listeners ; private int nrOfMessages ; public Slack () { this . listeners = new HashSet <> (); this . nrOfMessages = 0 ; } @Override public boolean register ( Listener listener ) { return listeners . add ( listener ); } @Override public boolean unregister ( Listener listener ) { return listeners . remove ( listener ); } @Override public void notifyListeners () { for ( Listener listener : listeners ) { listener . update (); } } @Override public String getUpdate ( Listener obj ) { return \"Breaking News \" + this . nrOfMessages ; } public void publishNews () { this . nrOfMessages ++ ; this . notifyListeners (); } } Student.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 package aufgaben.aufgabe7 ; public class Student implements Listener { private String name ; private Publisher publisher ; public Student ( String name ) { this . name = name ; } @Override public void update () { String msg = this . publisher . getUpdate ( this ); System . out . println ( this . name + \" received \" + msg ); } @Override public void setPublisher ( Publisher publisher ) { this . publisher = publisher ; if ( this . publisher . register ( this )) { System . out . println ( this . name + \" registered!\" ); } } @Override public void removePublisher ( Publisher publisher ) { if ( this . publisher . unregister ( this )) { System . out . println ( this . name + \" deregistered!\" ); this . publisher = null ; } } @Override public boolean equals ( Object o ) { if ( o == null ) return false ; if ( this == o ) return true ; if ( this . getClass () != o . getClass ()) return false ; Student so = ( Student ) o ; return this . name . equals ( so . name ); } @Override public int hashCode () { return this . name . hashCode (); } } Testklasse.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 package aufgaben.aufgabe7 ; public class Testklasse { public static void main ( String [] args ) { final int NR_OF_STUDENTS = 5 ; Slack slack = new Slack (); Student [] students = new Student [ NR_OF_STUDENTS ] ; Character c = 'A' ; for ( int index = 0 ; index < students . length ; index ++ ) { students [ index ] = new Student ( c . toString ()); c ++ ; students [ index ] . setPublisher ( slack ); } slack . publishNews (); System . out . println (); students [ 1 ] . removePublisher ( slack ); students [ 3 ] . removePublisher ( slack ); System . out . println (); slack . publishNews (); System . out . println (); students [ 1 ] . setPublisher ( slack ); students [ 2 ] . removePublisher ( slack ); students [ 4 ] . removePublisher ( slack ); System . out . println (); slack . publishNews (); System . out . println (); students [ 0 ] . removePublisher ( slack ); students [ 1 ] . removePublisher ( slack ); students [ 3 ] . setPublisher ( slack ); System . out . println (); slack . publishNews (); } } Aufgabe 8 (GUI) \u00b6 Aufgabe 8 Erstellen Sie die GUI f\u00fcr einen solchen Taschenrechner: Kann auch schicker sein :-) Viel Spa\u00df! Aufgabe 9 (Ereignisbehandlung) \u00b6 Aufgabe 9 Implementieren Sie f\u00fcr den Taschenrechner aus Aufgabe 8 das ActionListener -Interface, so dass der Taschenrechner \u00fcber m\u00f6glichst viel Funktionalit\u00e4t verf\u00fcgt. Minimumanforderung ist, dass durch die Eingabe von Ziffern Zahlen entstehen und dass die Buttons + , - , / , + und = insofern funktionieren, dass dadurch tats\u00e4chlich gerechnet wird, auch wenn die Regel \"Punktrechnung geht vor Strichrechnung\" nicht eingehalten wird. Eine erste Verbesserung (ist schon Zusatz ) w\u00e4re, dass die Regel \"Punktrechnung geht vor Strichrechnung\" eingehalten wird. Ab dann ist alles Zusatz und bedarf in vielen F\u00e4llen der Erweiterung der GUI: Verwendung und Beachten von Klammern (ist aber sehr schwer!), Speichern von Zwischenergebnissen, komplexere Operationen durch zu\u00e4tzliche Tasten (Wurzel, Potenzieren, ...). Alles, was Sie m\u00f6chten - Viel Spa\u00df! Aufgabe 10 (Zeichnen) \u00b6 Aufgabe 10 Wir berechnen PI mithilfe der Monte-Carlo-Methode . Dazu zeichnen wir ein Quadrat und darin einen Kreisbogen (einen Viertelkreis), dessen Radius der Seitenl\u00e4nge des Quadrats entspricht: Nun zeichnen wir in dieses Quadrat viele kleine ausgef\u00fcllte Kreise (Durchmesser z.B. 2 Pixel). Die Positionen dieser Kreise werden zuf\u00e4llig ermittelt. Wenn die zuf\u00e4llig ermittelte Position f\u00fcr diesen Kreis im Kreisbogen liegt, dann sind die kleinen Kreise rot, wenn die Position au\u00dferhalb liegt, dann sind die Kreise blau. Es entsteht bei ganz vielen (z.B. 50000 ) Punkten so ein Bild: Tipp: Ob ein Punkt mit den Koordinaten (x,y) in einem (Viertel-)Kreis liegt, ermitteln Sie mithilfe der Kreisgleichung . Sei (xm, ym) der Mittelpunkt und r der Radius des Kreises, dann gilt (x-xm)^2 + (y-ym)^2 = r^2 f\u00fcr alle Punkte auf dem Kreis (f\u00fcr Punkte im Kreis gilt <= und f\u00fcr Punkte au\u00dferhalb des Kreises >). Der Quotient aus der Anzahl der roten Punkte und der Gesamtanzahl der Punkte ist eine N\u00e4herung von PI/4. Geben Sie Ihre Ann\u00e4herung von PI auf der Konsole aus.","title":"Aufgaben"},{"location":"aufgaben/#aufgaben","text":"","title":"Aufgaben"},{"location":"aufgaben/#aufgabe-1-wurfelspiel","text":"Aufgabe 1 Vorbereitung (Selbstudium) Informieren Sie sich \u00fcber die Klasse JOptionPane aus dem Paket javax.swing (z.B. hier oder hier oder hier ) Sollten Sie mit dem Java-Modulsystem arbeiten, d.h. sollten Sie in Ihrem Java-Projekt eine Datei module-info.java haben, dann m\u00fcssen Sie in diese Datei (in den Anweisungsblock) die Anweisung requires java.desktop; einf\u00fcgen - das ist das Modul, in dem sich das Paket javax.swing befindet. Rufen Sie jeweils die statischen Methoden showConfirmDialog() , showInputDialog() , showMessageDialog() und showOptionDialog() auf und werten Sie jeweils die Nutzereingabe aus (Bei showInputDialog() ist die R\u00fcckgabe ein String , ansonsten ist die R\u00fcckgabe ein int , der mit folgenden Optionen verglichen werden kann: JOptionPane.YES_OPTION , JOptionPane.NO_OPTION , JOptionPane.CANCEL_OPTION , JOptionPane.OK_OPTION , JOptionPane.CLOSED_OPTION Erstellen Sie insbesondere folgenden Dialog und pr\u00fcfen Sie, ob der Nein - oder der Ja -Button gedr\u00fcckt wurde (im Beispiel steht A f\u00fcr den Namen eines Spielers \u2013 siehe Aufgabe unten): Aufgabe Implementieren Sie folgendes W\u00fcrfelspiel: An dem Spiel k\u00f6nnen beliebig viele Spieler teilnehmen. Die Spieler sind nacheinander an der Reihe. Wenn ein Spieler an der Reihe ist, dann befindet er sich in einem Versuch . In einem Versuch kann der Spieler so lange w\u00fcrfeln, bis er entweder eine 6 w\u00fcrfelt oder er den Versuch freiwillig beendet. Hat der Spieler eine 6 gew\u00fcrfelt, wird der gesamte Versuch mit 0 Punkten bewertet. Hat der Spieler den Versuch freiwillig beendet, wird die in dem Versuch erzielte Summe aus sein Punktekonto addiert (gespeichert). Der Spieler, der zuerst eine bestimmte Punktzahl (z.B. 20 ) erreicht hat, hat gewonnen. Beispiel mit zwei Spielern A und B bis Gesamtpunktzahl 20 : Committen und pushen Sie Ihre L\u00f6sung nach GitHub (oder Ihrem Git-Diensteanbieter). eine m\u00f6gliche L\u00f6sung f\u00fcr Aufgabe 1 Spiel.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 package aufgaben.aufgabe1 ; import javax.swing.JOptionPane ; public class Spiel { public static int siegPunkte ; private Spieler [] spieler ; Spiel () { int anzSpieler = 0 ; int siegPunkte = 0 ; boolean inputOk = false ; String input = \"\" ; while ( ! inputOk ) { try { input = JOptionPane . showInputDialog ( \"Anzahl Spieler :\" ); inputOk = true ; anzSpieler = Integer . parseInt ( input ); } catch ( NumberFormatException e ) { inputOk = false ; } } inputOk = false ; while ( ! inputOk ) { try { input = JOptionPane . showInputDialog ( \"Siegpunkte :\" ); inputOk = true ; siegPunkte = Integer . parseInt ( input ); } catch ( NumberFormatException e ) { inputOk = false ; } } Spiel . siegPunkte = siegPunkte ; spieler = new Spieler [ anzSpieler ] ; namenErmitteln (); } Spiel ( int siegPunkte , int anzSpieler ) { Spiel . siegPunkte = siegPunkte ; spieler = new Spieler [ anzSpieler ] ; /* Spielernamen sind A, B, C ... char name = 'A'; for(int i=0; i<spieler.length; i++) { spieler[i] = new Spieler(String.valueOf(name)); name ++; } */ /* Spielernamen werden eingegeben * wenn man namenErmitteln() auskommentiert, * kann man die obige for-Schleife nehmen, damit * man nicht immer die Spielernamen eingeben muss * - zum Testen */ namenErmitteln (); } private void namenErmitteln () { String name = \"\" ; for ( int i = 0 ; i < spieler . length ; i ++ ) { name = JOptionPane . showInputDialog ( \"Name des Spielers \" + ( i + 1 ) + \" :\" ); spieler [ i ] = new Spieler ( name ); } } public void spielen () { int index = 0 ; boolean gewonnen = false ; while ( ! gewonnen ) { gewonnen = spieler [ index ] . wuerfeln (); index = ( index < spieler . length - 1 ) ? index + 1 : 0 ; } } public static void main ( String [] args ) { //Spiel spiel = new Spiel(30, 3); Spiel spiel = new Spiel (); spiel . spielen (); } } Spieler.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 package aufgaben.aufgabe1 ; import java.util.Random ; import javax.swing.JOptionPane ; public class Spieler { private String name ; private int aktStand ; private Random r ; Spieler ( String name ) { aktStand = 0 ; this . name = name ; r = new Random (); } public int getAktStand () { return this . aktStand ; } public boolean wuerfeln () { System . out . printf ( \"%n%nSpieler %s ist an der Reihe (bisher %d Punkte) %n ----------------------------------------- %n\" , this . name , this . aktStand ); int reihe = 0 ; int wurf = 0 ; boolean ende = false ; while ( ! ende ) { wurf = r . nextInt ( 6 ) + 1 ; System . out . printf ( \"%s hat eine %d gewuerfelt %n\" , this . name , wurf ); if ( wurf == 6 ) { System . out . printf ( \"Versuch zu Ende %n Aktueller Spielstand von %s : %d Punkte %n Der naechste Spieler ist dran%n\" , this . name , this . aktStand ); ende = true ; } else if ( aktStand + reihe + wurf >= Spiel . siegPunkte ) { System . out . printf ( \"%s hat insgesamt %d Punkte und somit gewonnen !!!\" , this . name , ( aktStand + reihe + wurf )); return true ; } else // eine 1..5 gewuerfelt und noch nicht gewonnen { reihe += wurf ; System . out . printf ( \"in diesem Versuch bisher %d Punkte -- insgesamt %d Punkte %n\" , reihe , ( aktStand + reihe )); int dialogResult = JOptionPane . showConfirmDialog ( null , this . name + \", wollen Sie weiter wuerfeln? \" , \"Weiter wuerfeln?\" , JOptionPane . YES_NO_OPTION ); ende = ! ( dialogResult == JOptionPane . YES_OPTION ); if ( ende ) { aktStand += reihe ; } } } return false ; } }","title":"Aufgabe 1 (W\u00fcrfelspiel)"},{"location":"aufgaben/#aufgabe-2-myinteger","text":"Aufgabe 2 Vorbereitung (Selbstudium) Eine statische Variable wird mit dem Schl\u00fcsselwort static deklariert, also z.B. static int myVariable = 0; . Der Zugriff auf eine solche statische Variable erfolgt nicht \u00fcber eine Referenzvariable, sondern \u00fcber den Klassennamen. Angenommen, die Variable myVariable wurde in der Klasse MyClass deklariert, dann erfolgt der Zugriff auf die Variable \u00fcber MyClass.myVariable . F\u00fcr Objektvariablen gilt, dass jedes Objekt seine eigene(n) Objektvariable(n) hat. Statische Variablen gibt es in der Klasse genau einmal. Alle Objekte \"teilen\" sich eine statische Variable. Eine statische Variable hei\u00dft deshalb auch Klassenvariable . Eine statische Methode wird ebenfalls mit dem Schl\u00fcsselwort static deklariert, also z.B. public static void myMethod() {} . Der Zugriff auf eine solche statische Methode erfolgt nicht \u00fcber eine Referenzvariable, sondern \u00fcber den Klassennamen. Angenommen, die Methode myMethod() wurde in der Klasse MyClass deklariert, dann erfolgt der Zugriff auf die Methode \u00fcber MyClass.myMethod() . Wir kennen solche Methoden bereits, z.B. sind alle Methoden aus der Klasse Math statisch und wir k\u00f6nnen sie z.B. mit Math.sqrt(value) oder Math.abs(value) aufrufen. siehe z.B. hier oder hier oder hier Info : Die Klasse MyInteger ist eine sogenannte Wrapper -Klasse. Die Idee ist, dass MyInteger eine objektorientierte H\u00fclle um den int -Typ darstellt. Implementieren Sie die Klasse MyInteger . Diese Klasse hat folgende Eigenschaften: Statische Konstanten vom Typ int MAX_VALUE und MIN_VALUE , welche als Wert die gr\u00f6\u00dfte bzw. kleinste int -Zahl enthalten. Eine private Objektvariable value vom Typ int . (Dieser value hat jetzt eine \"objektorientierte\" H\u00fclle: MyInteger ). Eine statische Methode parseInt(String s) , die den \u00fcbergebenen String s als int -Zahl zur\u00fcckgibt, wenn s einer Zahl entspricht. Wenn nicht, wirft die Methode eine IllegalArgumentException . Beachten Sie: a. s kann mit + oder \u2013 beginnen, b. s kann f\u00fchrende Nullen aufweisen, c. die L\u00e4nge von s kann mit s.length() ermittelt und jedes einzelne Zeichen aus s kann mit s.charAt(index) betrachtet werden. d. Ist s leer, wird eine IllegalArgumentException geworfen und wenn s keiner Zahl entspricht auch. e. Die Exception wird nur weitergereicht, nicht hier behandelt. Zwei Konstruktoren MyInteger(int value) und MyInteger(String s) , die jeweils die Objektvariable value initialisieren. Der zweite Konstruktor verwendet parseInt(String) und kann ebenfalls eine IllegalArgumentException werfen (reicht die Exception von parseInt(String) weiter). Eine Objektmethode intValue() , die den Wert von value zur\u00fcckgibt. Eine Objektmethode doubleValue() , die den Wert von value als double zur\u00fcckgibt. Eine statische Methode valueOf(String s) , die ein Objekt von MyInteger erzeugt und zur\u00fcckgibt (und evtl. eine IllegalArgumentException wirft). Eine statische Methode valueOf(int value) , die ein Objekt von MyInteger erzeugt und zur\u00fcckgibt. \u00dcberschreiben Sie au\u00dferdem die Methoden equals() und toString() ( Zusatz: auch hashCode() \u00fcberschreiben). Testen Sie Ihre Klasse ausf\u00fchrlich in einer Testklasse mit main() -Methode. Committen und pushen Sie Ihre L\u00f6sung nach GitHub (oder Ihrem Git-Diensteanbieter). eine m\u00f6gliche L\u00f6sung f\u00fcr Aufgabe 2 MyInteger.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 package aufgaben.aufgabe2 ; public class MyInteger { public static final int MAX_VALUE = 2147483647 ; public static final int MIN_VALUE = - 2147483648 ; private int value ; public MyInteger ( int value ) { this . value = value ; } public MyInteger ( String s ) throws IllegalArgumentException { this . value = parseInt ( s ); } private static boolean isDigit ( char c ) { return ( c == '0' || c == '1' || c == '2' || c == '3' || c == '4' || c == '5' || c == '6' || c == '7' || c == '8' || c == '9' ); } private static int charToInt ( char c ) { int asciivalue = c ; int intvalue = asciivalue - 48 ; // 0 ist 048 bis 9 ist 057 return intvalue ; } public static int parseInt ( String s ) throws IllegalArgumentException { boolean negativ = false ; if ( s . length () == 0 ) throw new IllegalArgumentException ( \"leer\" ); // pruefe, ob erstes Zeichen + oder - // merken und weiter mit Rest if ( s . charAt ( 0 ) == '+' ) s = s . substring ( 1 ); else if ( s . charAt ( 0 ) == '-' ) { s = s . substring ( 1 ); negativ = true ; } if ( s . length () == 0 ) throw new IllegalArgumentException ( \"nur '+' bzw. '-' --> keine Zahl\" ); // entferne f\u00fchrende Nullen while ( s . charAt ( 0 ) == '0' ) { s = s . substring ( 1 ); } for ( int i = 0 ; i < s . length (); i ++ ) { if ( ! isDigit ( s . charAt ( i ))) throw new IllegalArgumentException ( \"keine Zahl!\" ); } int exponent = 0 ; int zahl = 0 ; for ( int i = s . length () - 1 ; i >= 0 ; i -- ) { zahl = zahl + charToInt ( s . charAt ( i )) * ( int ) Math . pow ( 10 , exponent ); exponent ++ ; } if ( negativ ) return - zahl ; else return zahl ; } public int intValue () { return this . value ; } public double doubleValue () { return this . value ; } public static MyInteger valueOf ( String s ) throws IllegalArgumentException { return new MyInteger ( s ); } public static MyInteger valueOf ( int value ) { return new MyInteger ( value ); } @Override public boolean equals ( Object other ) { if ( other == null ) return false ; if ( this == other ) return true ; if ( this . getClass () != other . getClass ()) return false ; MyInteger otherInt = ( MyInteger ) other ; return ( this . value == otherInt . value ); } @Override public int hashCode () { return this . value ; } @Override public String toString () { return value + \"\" ; } public static int compare ( int x , int y ) { return ( x < y ) ? - 1 : (( x == y ) ? 0 : 1 ); } public int compareTo ( MyInteger otherMyInteger ) { return compare ( this . value , otherMyInteger . value ); } } MyIntegerMain.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 package aufgaben.aufgabe2 ; public class MyIntegerMain { public static void main ( String [] args ) { MyInteger mi1 = null , mi2 = null , mi3 = null , mi4 = null , mi5 = null , mi6 = null , mi7 = null , mi8 = null , mi9 = null , mi10 = null ; try { mi1 = new MyInteger ( \"-2147483648\" ); System . out . println ( mi1 . intValue ()); } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } try { mi2 = new MyInteger ( \"-00002147483648\" ); System . out . println ( mi2 . intValue ()); } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } try { mi3 = new MyInteger ( \"hallo\" ); System . out . println ( mi3 . intValue ()); } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } mi4 = new MyInteger ( - 2147483648 ); try { mi5 = MyInteger . valueOf ( \"-2147483648\" ); System . out . println ( mi5 . intValue ()); } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } try { mi6 = MyInteger . valueOf ( \"-00002147483648\" ); System . out . println ( mi6 . intValue ()); } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } try { mi7 = MyInteger . valueOf ( \"hallo\" ); System . out . println ( mi7 . intValue ()); } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } mi8 = MyInteger . valueOf ( - 2147483648 ); try { mi9 = MyInteger . valueOf ( \"\" ); System . out . println ( mi9 . intValue ()); } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } try { mi10 = MyInteger . valueOf ( \"+\" ); System . out . println ( mi10 . intValue ()); } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } System . out . println ( \"mi1 equals mi2 ? : \" + mi1 . equals ( mi2 )); System . out . println ( \"mi1 equals mi3 ? : \" + mi1 . equals ( mi3 )); System . out . println ( \"mi1 equals mi4 ? : \" + mi1 . equals ( mi4 )); System . out . println ( \"mi1 equals mi5 ? : \" + mi1 . equals ( mi5 )); System . out . println ( \"mi1 equals mi6 ? : \" + mi1 . equals ( mi6 )); System . out . println ( \"mi1 equals mi7 ? : \" + mi1 . equals ( mi7 )); System . out . println ( \"mi1 equals mi8 ? : \" + mi1 . equals ( mi8 )); System . out . println ( \"mi1 equals mi9 ? : \" + mi1 . equals ( mi9 )); System . out . println ( \"mi1 equals mi10 ? : \" + mi1 . equals ( mi10 )); System . out . println ( \"hashCode mi1 : \" + mi1 . hashCode ()); System . out . println ( \"hashCode mi2 : \" + mi2 . hashCode ()); try { System . out . println ( \"hashCode mi3 : \" + mi3 . hashCode ()); } catch ( NullPointerException e ) { System . out . println ( \"Objekt existiert nicht!\" ); } System . out . println ( \"hashCode mi4 : \" + mi4 . hashCode ()); System . out . println ( \"intValue mi1 : \" + mi1 . intValue ()); System . out . println ( \"intValue mi2 : \" + mi2 . intValue ()); try { System . out . println ( \"intValue mi3 : \" + mi3 . intValue ()); } catch ( NullPointerException e ) { System . out . println ( \"Objekt existiert nicht!\" ); } System . out . println ( \"intValue mi4 : \" + mi4 . intValue ()); System . out . println ( \"doubleValue mi1 : \" + mi1 . doubleValue ()); System . out . println ( \"doubleValue mi2 : \" + mi2 . doubleValue ()); try { System . out . println ( \"doubleValue mi3 : \" + mi3 . doubleValue ()); } catch ( NullPointerException e ) { System . out . println ( \"Objekt existiert nicht!\" ); } System . out . println ( \"doubleValue mi4 : \" + mi4 . doubleValue ()); } } MyIntegerTest.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 package aufgaben.aufgabe2 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.Test ; class MyIntegerTest { static MyInteger mi1 , mi2 , mi3 , mi4 , mi5 , mi6 , mi7 ; @BeforeAll public static void setUpBeforeClass () throws Exception { mi1 = new MyInteger ( \"-2147483648\" ); mi2 = new MyInteger ( \"+2147483647\" ); mi3 = new MyInteger ( - 1 ); mi4 = new MyInteger ( 1 ); mi5 = new MyInteger ( 0 ); mi6 = new MyInteger ( \"-1\" ); mi7 = new MyInteger ( 2147483647 ); } @Test void testHashCode () { assertTrue ( mi2 . hashCode () == mi7 . hashCode (), \" hashCode of mi2 and mi7 should be equal\" ); assertEquals ( - 2147483648 , mi1 . hashCode (), \"hashCode of mi1 should be -2147483648\" ); assertEquals ( 0 , mi5 . hashCode (), \"hashCode of mi5 should be 0\" ); } @Test void testMyIntegerInt () { assertNotNull ( mi4 , \"mi4 should be not null\" ); assertTrue ( mi3 . equals ( mi6 ), \"mi3 and mi6 should be equal\" ); assertTrue ( mi7 . equals ( mi2 ), \"mi7 and mi2 should be equal\" ); } @Test void testMyIntegerString () { assertNotNull ( mi1 , \"mi1 should be not null\" ); assertNotNull ( mi2 , \"mi2 should be not null\" ); assertNotNull ( mi6 , \"mi6 should be not null\" ); assertTrue ( mi3 . equals ( mi6 ), \"mi3 and mi6 should be equal\" ); assertTrue ( mi7 . equals ( mi2 ), \"mi7 and mi2 should be equal\" ); } @Test void testParseInt () { assertEquals ( - 2147483648 , MyInteger . parseInt ( \"-2147483648\" ), \"should be -2147483648\" ); assertEquals ( + 2147483647 , MyInteger . parseInt ( \"+00002147483647\" ), \"should be +2147483647\" ); assertEquals ( - 1 , MyInteger . parseInt ( \"-0000001\" ), \"should be -1\" ); } @Test void testIntValue () { assertEquals ( - 2147483648 , mi1 . intValue (), \"should be -2147483648\" ); assertEquals ( + 2147483647 , mi2 . intValue (), \"should be +2147483647\" ); assertEquals ( + 2147483647 , mi7 . intValue (), \"should be +2147483647\" ); } @Test void testDoubleValue () { assertEquals ( - 2147483648.0 , mi1 . doubleValue (), \"should be -2147483648.0\" ); assertEquals ( + 2147483647.0 , mi2 . doubleValue (), \"should be +2147483647.0\" ); assertEquals ( + 2147483647.0 , mi7 . doubleValue (), \"should be +2147483647.0\" ); } @Test void testValueOfString () { assertTrue ( mi1 . equals ( MyInteger . valueOf ( \"-2147483648\" )), \"should be equal to mi1\" ); assertTrue ( mi2 . equals ( MyInteger . valueOf ( \"2147483647\" )), \"should be equal to mi2\" ); assertTrue ( mi7 . equals ( MyInteger . valueOf ( \"2147483647\" )), \"should be equal to mi7\" ); } @Test void testValueOfInt () { assertTrue ( mi1 . equals ( MyInteger . valueOf ( - 2147483648 )), \"should be equal to mi1\" ); assertTrue ( mi2 . equals ( MyInteger . valueOf ( 2147483647 )), \"should be equal to mi2\" ); assertTrue ( mi7 . equals ( MyInteger . valueOf ( 2147483647 )), \"should be equal to mi7\" ); } @Test void testEqualsObject () { assertTrue ( mi3 . equals ( mi6 ), \"mi3 and mi6 should be equal\" ); assertTrue ( mi7 . equals ( mi2 ), \"mi7 and mi2 should be equal\" ); assertFalse ( mi3 . equals ( mi4 ), \"mi3 and mi4 should not be equal\" ); assertFalse ( mi3 . equals ( mi5 ), \"mi3 and mi5 should not be equal\" ); } @Test void testToString () { assertEquals ( \"-2147483648\" , mi1 . toString (), \"should be '-2147483648'\" ); assertEquals ( \"2147483647\" , mi2 . toString (), \"should be '2147483647' mi2\" ); assertEquals ( \"2147483647\" , mi7 . toString (), \"should be '2147483647' mi7\" ); } @Test void testCompare () { assertTrue ( MyInteger . compare ( 5 , 4 ) > 0 , \"5,4 should be > 0\" ); assertTrue ( MyInteger . compare ( 4 , 4 ) == 0 , \"4,4 should be == 0\" ); assertTrue ( MyInteger . compare ( 4 , 5 ) < 0 , \"4,5 should be < 0\" ); assertTrue ( MyInteger . compare ( MyInteger . MAX_VALUE , MyInteger . MIN_VALUE ) > 0 , \"MAX,MIN should be > 0\" ); assertTrue ( MyInteger . compare ( MyInteger . MAX_VALUE , MyInteger . MAX_VALUE ) == 0 , \"MAX,MAX should be == 0\" ); assertTrue ( MyInteger . compare ( MyInteger . MIN_VALUE , MyInteger . MAX_VALUE ) < 0 , \"MIN,MAX should be > 0\" ); } @Test void testCompareTo () { assertTrue ( mi1 . compareTo ( mi2 ) < 0 , \"mi1, mi2 should be < 0\" ); assertTrue ( mi2 . compareTo ( mi1 ) > 0 , \"mi2, mi1 should be > 0\" ); assertTrue ( mi2 . compareTo ( mi7 ) == 0 , \"mi2, mi7 should be == 0\" ); assertTrue ( mi3 . compareTo ( mi6 ) == 0 , \"mi3, mi6 should be == 0\" ); } }","title":"Aufgabe 2 (MyInteger)"},{"location":"aufgaben/#aufgabe-3-solitaire","text":"Aufgabe 3 Information und Vorbereitung Wir beginnen, ein Englisches Solit\u00e4r zu programmieren. Einige kennen es auch als Steckhalma. Ziel des Spiels ist, alle Steine bis auf einen (der am besten in der Mitte \u00fcbrig bleibt), zu entfernen. Ein Zug ist wie folgt: ein Stein springt \u00fcber einen anderen Stein und der \u00fcbersprungene Stein wird entfernt. Es gibt viele L\u00f6sungen daf\u00fcr. Einige Klassen sind bereits gegeben: Klasse Point.java package aufgaben.aufgabe3 ; /* * ein Point repreasentiert eine Position * im Spielfeld, bestehend aus der Nummer * fuer die Zeile (row) und der Nummer * fuer die Spalte (col) */ public class Point { private int row ; private int col ; /* * Konstruktor zur Erzeugung einer * Position bestehend aus row und col */ public Point ( int row , int col ) { this . row = row ; this . col = col ; } public int getRow () { return this . row ; } public int getCol () { return this . col ; } @Override public String toString () { return \"(\" + this . row + \",\" + this . col + \")\" ; } } Klasse Move.java ```java package aufgaben.aufgabe3; /* * diese Klasse repraesentiert einen Zug * Variablen sind Point from * und Point to * es wird nicht geprueft, ob der Zug ueberhaupt * moeglich ist */ public class Move { private Point from; private Point to; /* * ein Zug von dem from-Point (fromRow,fromCol) * zum to-Point (toRow,toCol) */ public Move(int fromRow, int fromCol, int toRow, int toCol) { this.from = new Point(fromRow, fromCol); this.to = new Point(toRow, toCol); } /* * in dem Konstruktor werden in this.from und this.to nicht einfach * die Referenzen von from und to gespeichert, sondern davon Kopien * erstellt, damit das Programm robuster gegen das Aendern von * Referenzen ist */ public Move(Point from, Point to) { this.from = new Point(from.getRow(), from.getCol()); this.to = new Point(to.getRow(), to.getCol()); } /* * der Getter fuer den Point from gibt keine Referenz auf * den Point from zurueck, sondern eine Kopie (einen Klon) * von from --> Referenzen koennen \"verbogen\" werden, aber * die Kopien bleiben unveraendert */ public Point getFrom() { return new Point(this.from.getRow(), this.from.getCol()); } /* * der Getter fuer den Point to gibt keine Referenz auf * den Point to zurueck, sondern eine Kopie (einen Klon) * von to --> Referenzen koennen \"verbogen\" werden, aber * die Kopien bleiben unveraendert */ public Point getTo() { return new Point(this.to.getRow(), this.to.getCol()); } } Klasse Moves.java package aufgaben.aufgabe3 ; /* * diese Klasse repraesentiert eine Folge * von Zuegen (Move), die in einem Array * moves gespeichert sind */ public class Moves { private Move [] moves ; /* * der Konstruktor erstellt ein leeres moves-Array * (d.h. noch keine Zuege (Moves) gespeichert) */ public Moves () { this . moves = new Move [ 0 ] ; } /* * der Konstruktor erstellt ein moves-Array mit einem * Move - dem erste Zug (firstMove) */ public Moves ( Move firstMove ) { this . moves = new Move [ 1 ] ; this . moves [ 0 ] = firstMove ; } /* * Anzahl der bisher gespeicherten Zuege */ public int getLength () { return this . moves . length ; } /* * fuegt einen Zug (nextMove) zum moves-Array hinzu * dazu muss das moves-Array um 1 laenger sein als zuvor * es wird eine Kopie aller Zuege erstellt und dann * der nextMove hinzugefuegt */ public void addMove ( Move nextMove ) { Move [] newMoves = new Move [ this . moves . length + 1 ] ; for ( int index = 0 ; index < this . moves . length ; index ++ ) { newMoves [ index ] = this . moves [ index ] ; } newMoves [ newMoves . length - 1 ] = new Move ( nextMove . getFrom (), nextMove . getTo ()); this . moves = newMoves ; } /* * gibt den Move zurueck, der im moves-Array unter dem Index index * gespeichert ist; * kann sein, dass index kein korrekter Index im moves-Array ist, * dann wird eine IllegalArgumentException geworfen */ public Move getMoveAtIndex ( int index ) throws IllegalArgumentException { try { return this . moves [ index ] ; } catch ( ArrayIndexOutOfBoundsException e ) { throw new IllegalArgumentException ( \"kein gueltiger Index!\" ); } } /* * Ausgabe aller im moves-Array gespeicherten Zuege * wird nur zum Debuggen benoetigt */ public void printMoves () { System . out . printf ( \"%n---%n\" ); for ( int index = 0 ; index < this . moves . length ; index ++ ) { Move move = this . moves [ index ] ; Point from = move . getFrom (); Point to = move . getTo (); System . out . println ( from . toString () + \" --> \" + to . toString ()); } System . out . printf ( \"%n---%n%n\" ); } } enum State.java package aufgaben.aufgabe3 ; /* * FREE - der Platz ist ein Spielfeld, aber kein Spielstein drauf * USED - der Platz ist ein Spielfeld mit Spielstein drauf * NOT - der Platz gehoert nicht zum Spielfeld */ public enum State { FREE , USED , NOT } Aufgabe Bef\u00fcllen Sie die Klasse Solitaire.java , wie in den Kommentaren beschrieben: Klasse Solitaire.java package aufgaben.aufgabe3.loesung ; public class Solitaire { private Moves game ; private State [][] field ; public Solitaire () { this . game = new Moves (); this . field = new State [ 7 ][ 7 ] ; for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { if (( row < 2 || row > 4 ) && ( col < 2 || col > 4 )) { this . field [ row ][ col ] = State . NOT ; } else { this . field [ row ][ col ] = State . USED ; } } } this . field [ 3 ][ 3 ] = State . FREE ; } /* * Geben Sie das Spielfeld aus! Am Anfang sollte auf der * Konsole so ein Bild erscheinen: * o o o * o o o * o o o o o o o * o o o o o o * o o o o o o o * o o o * o o o * */ public void print () { } /* * diese Methode gibt ein true zurueck, wenn von der * uebergebenen Position (row,col) ein Zug moeglich ist * d.h. * 1. auf der angegebenen Position muss ein Stein sein * 2. zwei Steine weiter (oben, unten, rechts oder links) * darf kein Stein sein * 3. dazwischen muss ein Stein sein */ public boolean possibleFrom ( int row , int col ) { return false ; } /* * diese Methode gibt alle Positionen (Point) zurueck, * AUF die von (fromRow,fromCol) aus gesprungen werden * kann */ public Point [] possibleTo ( int fromRow , int fromCol ) { if ( ! possibleFrom ( fromRow , fromCol )) return new Point [ 0 ] ; // naechste Zeile muss entfernt werden! return null ; } /* * diese Methode erzeugt ein Moves-Objekt * in dieses Moves-Objekt werden mithilfe der * Objektmethode addMove() (aus Moves) alle * moeglichen Zuege hinzugefuegt * (moeglich im aktuellen Zustand von field[][]) */ public Moves possibleMoves () { Moves possibleMoves = new Moves (); // next line for debugging possibleMoves . printMoves (); return possibleMoves ; } /* * gibt ein true zurueck, wenn im aktuellen Zustand * von field[][] ueberhaupt noch ein Zug moeglich ist * sonst false */ public boolean movePossible () { return false ; } /* * ruft die Methode move(Move move) auf, * wenn ein Zug moeglich ist (dann true zurueck) * sonst false */ public boolean moveFirstPossible () { if ( ! movePossible ()) return false ; /* * hier einen moeglichen Zug ausfuehren * den ersten, den Sie finden (siehe * possibleMoves() ) */ return true ; } /* * hier wird der Zug Move move ausgefuehrt * nach dem Zug ist * 1. die from-Position leer * 2. die to-Position mit einem Stein besetzt * 3. dazwischen leer (Stein wird \"entfernt\") * falls Zug nicht moeglich, wird eine * IllegalArgumentException geworfen */ public void move ( Move move ) throws IllegalArgumentException { } } Sie k\u00f6nnen selbstverst\u00e4ndlich beliebig viele weitere (Hilfs-)Methoden hinzuf\u00fcgen. Testen Sie Ihr Spiel in einer Testklasse . F\u00fchren Sie einige Z\u00fcge aus und geben danach immer das Spielfeld auf die Konsole aus. Die Konsole k\u00f6nnte z.B. dann so aussehen: m\u00f6gliche Konsolenausgaben o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o --- ( 1 ,3 ) --> ( 3 ,3 ) ( 3 ,1 ) --> ( 3 ,3 ) ( 3 ,5 ) --> ( 3 ,3 ) ( 5 ,3 ) --> ( 3 ,3 ) --- o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o --- ( 2 ,1 ) --> ( 2 ,3 ) ( 2 ,5 ) --> ( 2 ,3 ) ( 4 ,3 ) --> ( 2 ,3 ) --- o o o o o o o o o o o o o o o o o o o o o o o o o o o o o o --- ( 0 ,2 ) --> ( 2 ,2 ) ( 2 ,4 ) --> ( 2 ,2 ) ( 3 ,3 ) --> ( 1 ,3 ) ( 4 ,1 ) --> ( 2 ,1 ) ( 4 ,2 ) --> ( 2 ,2 ) --- o o o o o o o o o o o o o o o o o o o o o o o o o o o o o --- ( 0 ,4 ) --> ( 0 ,2 ) ( 2 ,3 ) --> ( 2 ,1 ) ( 3 ,2 ) --> ( 1 ,2 ) ( 3 ,3 ) --> ( 1 ,3 ) ( 4 ,1 ) --> ( 2 ,1 ) --- o o o o o o o o o o o o o o o o o o o o o o o o o o o o --- ( 2 ,3 ) --> ( 2 ,1 ) ( 2 ,4 ) --> ( 0 ,4 ) ( 3 ,2 ) --> ( 1 ,2 ) ( 3 ,3 ) --> ( 1 ,3 ) ( 4 ,1 ) --> ( 2 ,1 ) --- o o o o o o o o o o o o o o o o o o o o o o o o o o o --- ( 2 ,0 ) --> ( 2 ,2 ) ( 2 ,4 ) --> ( 0 ,4 ) ( 2 ,5 ) --> ( 2 ,3 ) ( 4 ,2 ) --> ( 2 ,2 ) ( 4 ,3 ) --> ( 2 ,3 ) --- o o o o o o o o o o o o o o o o o o o o o o o o o o --- ( 2 ,4 ) --> ( 0 ,4 ) ( 2 ,5 ) --> ( 2 ,3 ) ( 3 ,2 ) --> ( 1 ,2 ) ( 4 ,0 ) --> ( 2 ,0 ) ( 4 ,1 ) --> ( 2 ,1 ) ( 4 ,3 ) --> ( 2 ,3 ) --- o o o o o o o o o o o o o o o o o o o o o o o o o --- ( 2 ,6 ) --> ( 2 ,4 ) ( 3 ,2 ) --> ( 1 ,2 ) ( 4 ,0 ) --> ( 2 ,0 ) ( 4 ,1 ) --> ( 2 ,1 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 4 ,4 ) --> ( 2 ,4 ) --- o o o o o o o o o o o o o o o o o o o o o o o o --- ( 3 ,2 ) --> ( 1 ,2 ) ( 3 ,4 ) --> ( 1 ,4 ) ( 4 ,0 ) --> ( 2 ,0 ) ( 4 ,1 ) --> ( 2 ,1 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 4 ,5 ) --> ( 2 ,5 ) ( 4 ,6 ) --> ( 2 ,6 ) --- o o o o o o o o o o o o o o o o o o o o o o o --- ( 0 ,2 ) --> ( 2 ,2 ) ( 3 ,0 ) --> ( 3 ,2 ) ( 3 ,4 ) --> ( 1 ,4 ) ( 3 ,4 ) --> ( 3 ,2 ) ( 4 ,0 ) --> ( 2 ,0 ) ( 4 ,1 ) --> ( 2 ,1 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 4 ,5 ) --> ( 2 ,5 ) ( 4 ,6 ) --> ( 2 ,6 ) ( 5 ,2 ) --> ( 3 ,2 ) --- o o o o o o o o o o o o o o o o o o o o o o --- ( 3 ,0 ) --> ( 3 ,2 ) ( 3 ,4 ) --> ( 1 ,4 ) ( 3 ,4 ) --> ( 3 ,2 ) ( 4 ,0 ) --> ( 2 ,0 ) ( 4 ,1 ) --> ( 2 ,1 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 4 ,5 ) --> ( 2 ,5 ) ( 4 ,6 ) --> ( 2 ,6 ) ( 5 ,2 ) --> ( 3 ,2 ) --- o o o o o o o o o o o o o o o o o o o o o --- ( 3 ,2 ) --> ( 1 ,2 ) ( 3 ,3 ) --> ( 3 ,1 ) ( 3 ,4 ) --> ( 1 ,4 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 4 ,5 ) --> ( 2 ,5 ) ( 4 ,6 ) --> ( 2 ,6 ) --- o o o o o o o o o o o o o o o o o o o o --- ( 3 ,4 ) --> ( 1 ,4 ) ( 3 ,4 ) --> ( 3 ,2 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 4 ,5 ) --> ( 2 ,5 ) ( 4 ,6 ) --> ( 2 ,6 ) ( 5 ,2 ) --> ( 3 ,2 ) --- o o o o o o o o o o o o o o o o o o o --- ( 0 ,4 ) --> ( 2 ,4 ) ( 3 ,6 ) --> ( 3 ,4 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 4 ,5 ) --> ( 2 ,5 ) ( 4 ,6 ) --> ( 2 ,6 ) ( 5 ,2 ) --> ( 3 ,2 ) ( 5 ,4 ) --> ( 3 ,4 ) --- o o o o o o o o o o o o o o o o o o --- ( 3 ,6 ) --> ( 3 ,4 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 4 ,5 ) --> ( 2 ,5 ) ( 4 ,6 ) --> ( 2 ,6 ) ( 5 ,2 ) --> ( 3 ,2 ) ( 5 ,4 ) --> ( 3 ,4 ) --- o o o o o o o o o o o o o o o o o --- ( 3 ,3 ) --> ( 3 ,5 ) ( 3 ,4 ) --> ( 1 ,4 ) ( 3 ,4 ) --> ( 3 ,2 ) ( 4 ,3 ) --> ( 2 ,3 ) ( 5 ,2 ) --> ( 3 ,2 ) --- o o o o o o o o o o o o o o o o --- ( 4 ,5 ) --> ( 2 ,5 ) ( 5 ,2 ) --> ( 3 ,2 ) ( 5 ,3 ) --> ( 3 ,3 ) ( 5 ,4 ) --> ( 3 ,4 ) --- o o o o o o o o o o o o o o o --- ( 2 ,4 ) --> ( 2 ,6 ) ( 2 ,5 ) --> ( 2 ,3 ) ( 4 ,3 ) --> ( 4 ,5 ) ( 5 ,2 ) --> ( 3 ,2 ) ( 5 ,3 ) --> ( 3 ,3 ) ( 5 ,4 ) --> ( 3 ,4 ) --- o o o o o o o o o o o o o o --- ( 4 ,3 ) --> ( 4 ,5 ) ( 5 ,2 ) --> ( 3 ,2 ) ( 5 ,3 ) --> ( 3 ,3 ) ( 5 ,4 ) --> ( 3 ,4 ) --- o o o o o o o o o o o o o --- ( 4 ,1 ) --> ( 4 ,3 ) ( 4 ,6 ) --> ( 4 ,4 ) ( 5 ,2 ) --> ( 3 ,2 ) ( 6 ,3 ) --> ( 4 ,3 ) ( 6 ,4 ) --> ( 4 ,4 ) --- o o o o o o o o o o o o --- ( 4 ,6 ) --> ( 4 ,4 ) ( 5 ,3 ) --> ( 3 ,3 ) ( 6 ,2 ) --> ( 4 ,2 ) ( 6 ,4 ) --> ( 4 ,4 ) --- o o o o o o o o o o o --- ( 4 ,3 ) --> ( 4 ,5 ) ( 4 ,4 ) --> ( 4 ,2 ) ( 5 ,3 ) --> ( 3 ,3 ) ( 5 ,4 ) --> ( 3 ,4 ) ( 6 ,2 ) --> ( 4 ,2 ) --- o o o o o o o o o o --- ( 6 ,2 ) --> ( 4 ,2 ) ( 6 ,3 ) --> ( 4 ,3 ) ( 6 ,4 ) --> ( 4 ,4 ) --- o o o o o o o o o --- ( 5 ,4 ) --> ( 5 ,2 ) ( 6 ,3 ) --> ( 4 ,3 ) ( 6 ,4 ) --> ( 4 ,4 ) ( 6 ,4 ) --> ( 6 ,2 ) --- o o o o o o o o --- ( 4 ,2 ) --> ( 6 ,2 ) ( 5 ,2 ) --> ( 3 ,2 ) ( 6 ,4 ) --> ( 6 ,2 ) --- o o o o o o o o o o o o o o Dabei steht z.B. --- ( 1 ,3 ) --> ( 3 ,3 ) ( 3 ,1 ) --> ( 3 ,3 ) ( 3 ,5 ) --> ( 3 ,3 ) ( 5 ,3 ) --> ( 3 ,3 ) --- f\u00fcr die in dem Zustand dar\u00fcber m\u00f6glichen Z\u00fcge. eine m\u00f6gliche L\u00f6sung f\u00fcr Aufgabe 3 Solitaire.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 package aufgaben.aufgabe3 ; public class Solitaire { private Moves game ; private State [][] field ; public Solitaire () { this . game = new Moves (); this . field = new State [ 7 ][ 7 ] ; for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { if (( row < 2 || row > 4 ) && ( col < 2 || col > 4 )) { this . field [ row ][ col ] = State . NOT ; } else { this . field [ row ][ col ] = State . USED ; } } } this . field [ 3 ][ 3 ] = State . FREE ; } public void print () { for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { if ( this . field [ row ][ col ] == State . USED ) System . out . print ( \"o \" ); else System . out . print ( \" \" ); } System . out . println (); } System . out . println (); } public boolean possibleFrom ( int row , int col ) { if ( row >= 0 && row < 7 && col >= 0 && col < 7 && this . field [ row ][ col ] == State . USED ) { // up ? if ( row > 1 && this . field [ row - 1 ][ col ] == State . USED && this . field [ row - 2 ][ col ] == State . FREE ) return true ; // down ? if ( row < 5 && this . field [ row + 1 ][ col ] == State . USED && this . field [ row + 2 ][ col ] == State . FREE ) return true ; // right ? if ( col < 5 && this . field [ row ][ col + 1 ] == State . USED && this . field [ row ][ col + 2 ] == State . FREE ) return true ; // left ? if ( col > 1 && this . field [ row ][ col - 1 ] == State . USED && this . field [ row ][ col - 2 ] == State . FREE ) return true ; } return false ; } public Point [] possibleTo ( int fromRow , int fromCol ) { if ( ! possibleFrom ( fromRow , fromCol )) return new Point [ 0 ] ; // there is at least one To-Point int nrOfPossibleTos = 0 ; if ( fromRow > 1 && this . field [ fromRow - 1 ][ fromCol ] == State . USED && this . field [ fromRow - 2 ][ fromCol ] == State . FREE ) nrOfPossibleTos ++ ; if ( fromRow < 5 && this . field [ fromRow + 1 ][ fromCol ] == State . USED && this . field [ fromRow + 2 ][ fromCol ] == State . FREE ) nrOfPossibleTos ++ ; if ( fromCol < 5 && this . field [ fromRow ][ fromCol + 1 ] == State . USED && this . field [ fromRow ][ fromCol + 2 ] == State . FREE ) nrOfPossibleTos ++ ; if ( fromCol > 1 && this . field [ fromRow ][ fromCol - 1 ] == State . USED && this . field [ fromRow ][ fromCol - 2 ] == State . FREE ) nrOfPossibleTos ++ ; Point [] tos = new Point [ nrOfPossibleTos ] ; int index = 0 ; if ( fromRow > 1 && this . field [ fromRow - 1 ][ fromCol ] == State . USED && this . field [ fromRow - 2 ][ fromCol ] == State . FREE ) tos [ index ++] = new Point ( fromRow - 2 , fromCol ); if ( fromRow < 5 && this . field [ fromRow + 1 ][ fromCol ] == State . USED && this . field [ fromRow + 2 ][ fromCol ] == State . FREE ) tos [ index ++] = new Point ( fromRow + 2 , fromCol ); if ( fromCol < 5 && this . field [ fromRow ][ fromCol + 1 ] == State . USED && this . field [ fromRow ][ fromCol + 2 ] == State . FREE ) tos [ index ++] = new Point ( fromRow , fromCol + 2 ); if ( fromCol > 1 && this . field [ fromRow ][ fromCol - 1 ] == State . USED && this . field [ fromRow ][ fromCol - 2 ] == State . FREE ) tos [ index ++] = new Point ( fromRow , fromCol - 2 ); return tos ; } public Moves possibleMoves () { Moves possibleMoves = new Moves (); for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { if ( possibleFrom ( row , col )) { Point [] tos = this . possibleTo ( row , col ); Point from = new Point ( row , col ); for ( int index = 0 ; index < tos . length ; index ++ ) { possibleMoves . addMove ( new Move ( from , tos [ index ] )); } } } } // next line for debug possibleMoves . printMoves (); return possibleMoves ; } public boolean movePossible () { for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { if ( possibleFrom ( row , col )) return true ; } } return false ; } public boolean moveFirstPossible () { if ( ! movePossible ()) return false ; else { Moves possibleMoves = this . possibleMoves (); try { Move move = possibleMoves . getMoveAtIndex ( 0 ); this . move ( move ); return true ; } catch ( IllegalArgumentException e ) { System . out . println ( \"Zug nicht moeglich! Index : 0\" ); return false ; } } } public void move ( Move move ) throws IllegalArgumentException { Point from = move . getFrom (); Point to = move . getTo (); int fromRow = from . getRow (); int fromCol = from . getCol (); int toRow = to . getRow (); int toCol = to . getCol (); int middleRow = ( fromRow + toRow ) / 2 ; int middleCol = ( fromCol + toCol ) / 2 ; try { this . field [ fromRow ][ fromCol ] = State . FREE ; this . field [ middleRow ][ middleCol ] = State . FREE ; this . field [ toRow ][ toCol ] = State . USED ; } catch ( ArrayIndexOutOfBoundsException e ) { throw new IllegalArgumentException ( \"Zug nicht moeglich! (\" + fromRow + \", \" + fromCol + \") --> \" + \"( \" + toRow + \", \" + toCol + \") \" ); } } } Testklasse.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 package aufgaben.aufgabe3 ; public class Testklasse { public static void main ( String [] args ) { Solitaire s = new Solitaire (); s . print (); while ( s . moveFirstPossible ()) { s . print (); } s . print (); } }","title":"Aufgabe 3 (Solitaire)"},{"location":"aufgaben/#aufgabe-4-test-driven-development","text":"Aufgabe 4 Implementieren Sie eine Methode public static int singleNumber(int[] nums) durch testgetriebene Entwicklung. F\u00fcr nums soll Folgendes gelten: es ist nicht leer, d.h. 1 <= nums.length , jede Zahl in nums ist genau zwei Mal in nums enthalten, bis auf eine - diese existiert nur genau ein Mal in nums Die Methode gibt die Zahl zur\u00fcck, die nur genau ein Mal in nums enthalten ist. Bsp.: // Beispiel 1 Input: nums = [ 2 ,2,1 ] Output: 1 // Beispiel 2 Input: nums = [ 4 ,1,2,1,2 ] Output: 4 // Beispiel 3 Input: nums = [ 1 ] Output: 1 Sie k\u00f6nnen beliebig viele weitere Methoden implementieren, die Ihnen helfen. Diese m\u00fcssen aber auch testgetrieben entwickelt werden. Pushen Sie alle Klassen (also nat\u00fcrlich auch die Testklasse) in Ihr Remote-Repository.","title":"Aufgabe 4 (test-driven development)"},{"location":"aufgaben/#aufgabe-5-operationen-uber-mengen","text":"Aufgabe 5 Implementieren Sie eine Klasse SetOperations . Erstellen Sie drei Objektvariablen (z.B. numbers1 , numbers2 und both ) vom Typ Set<Integer> . Erzeugen Sie f\u00fcr diese Objektvariablen TreeSet -Objekte. Erstellen Sie eine Objektmethode fill() . In dieser Methode sollen die beiden Sets numbers1 und numbers2 mit Zufallszahlen aus dem Wertebereich 0..99 bef\u00fcllt werden. Erzeugen Sie jeweils 100 Zufallszahlen (die number s-Sets werden dann aber jeweils weniger als 100 Eintr\u00e4ge haben, da doppelte Elemente nicht aufgenommen werden.) Beachten Sie, dass die nextInt() -Methode ein int zur\u00fcckliefert. Dieses int muss zun\u00e4chst in ein Integer -Objekt umgewandelt werden ( Integer.valueOf(int) ) und dieses Integer -Objekt wird dann dem Set hinzugef\u00fcgt (wenn es nicht schon enthalten ist). Erstellen Sie eine Objektmethode fillBothUnion() . In dieser Methode wird die both -Menge derart bef\u00fcllt, dass both einer Vereinigung der Mengen numbers1 und numbers2 entspricht. F\u00fcr Methoden auf Mengen siehe z.B. https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/Set.html . Erstellen Sie eine Objektmethode fillBothIntersection() . In dieser Methode wird die both -Menge derart bef\u00fcllt, dass both einem Schnitt der Mengen numbers1 und numbers2 entspricht. Erstellen Sie eine Objektmethode fillBothDifference() . In dieser Methode wird die both -Menge derart bef\u00fcllt, dass both der Differenz der Menge numbers1 minus der Menge numbers2 entspricht. Schreiben Sie eine Methode print() so, dass jede Menge als ein Quadrat (10x10) aus Punkten auf der Konsole erscheint. Es wird ein Punkt gezeichnet, wenn die entsprechende Zahl (die 100 Punkte bilden die Zahlen 0..99 ab) in der Menge enthalten ist und es wird kein Punkt gezeichnet, wenn die Zahl nicht vorhanden ist. (Anstelle von Punkten k\u00f6nnen Sie auch jedes beliebige Zeichen ( o, *, #, x, ... ) verwenden). Gestalten Sie die Ausgabe so, dass die drei Mengen numbers1 , numbers2 und both nebeneinander auf der Konsole erscheinen. Testen Sie alle drei Methoden fillBothUnion() , fillBothIntersection() und fillBothDifference() . Die Ausgabe k\u00f6nnte wie folgt sein ( A stellt die Menge numbers1 dar, B die Menge numbers2 und rechts ist jeweils die both -Menge dargestellt): Tipps : F\u00fcr die schwarzen Punkte habe ich das Character '\\u25cf' verwendet (ein passendes Leerzeichen dazu ist '\\u2009' ). Das Zeichen f\u00fcr die Vereinigung ist '\\u222a' und f\u00fcr den Schnitt '\\u2229' . Schauen Sie sich auch im Skript Mengenoperationen an. eine m\u00f6gliche L\u00f6sung f\u00fcr Aufgabe 5 SetOperations.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 package aufgaben.aufgabe5 ; import java.util.* ; public class SetOperations { Set < Integer > numbers1 ; Set < Integer > numbers2 ; Set < Integer > both ; final static int UPPER_BOUND = 100 ; public SetOperations () { this . numbers1 = new TreeSet <> (); this . numbers2 = new TreeSet <> (); this . both = new TreeSet <> (); } public void fill () { Random r = new Random (); int nextIntNr = 0 ; Integer nextIntegerNr = Integer . valueOf ( nextIntNr ); // fill numbers1 for ( int i = 0 ; i < UPPER_BOUND ; i ++ ) { nextIntNr = r . nextInt ( UPPER_BOUND ); nextIntegerNr = Integer . valueOf ( nextIntNr ); this . numbers1 . add ( nextIntegerNr ); } // fill numbers2 for ( int i = 0 ; i < UPPER_BOUND ; i ++ ) { nextIntNr = r . nextInt ( UPPER_BOUND ); nextIntegerNr = Integer . valueOf ( nextIntNr ); this . numbers2 . add ( nextIntegerNr ); } } public void fillBothUnion () { System . out . println (); System . out . println ( \"----------------------------------------------------------------------------\" ); System . out . println ( \" A B A \" + '\\u222a' + \" B \" ); System . out . println ( \"----------------------------------------------------------------------------\" ); this . both . addAll ( numbers1 ); this . both . addAll ( numbers2 ); } public void fillBothIntersection () { System . out . println (); System . out . println ( \"----------------------------------------------------------------------------\" ); System . out . println ( \" A B A \" + '\\u2229' + \" B \" ); System . out . println ( \"----------------------------------------------------------------------------\" ); this . both . addAll ( numbers1 ); this . both . retainAll ( numbers2 ); } public void fillBothDifference () { System . out . println (); System . out . println ( \"----------------------------------------------------------------------------\" ); System . out . println ( \" A B A-B \" ); System . out . println ( \"----------------------------------------------------------------------------\" ); this . both . addAll ( numbers1 ); this . both . removeAll ( numbers2 ); } public Integer printOneLine ( Iterator < Integer > it , Integer next , int curRow ) { int curNr = 0 ; // row*10+col for ( int col = 0 ; col < 10 ; col ++ ) { curNr = curRow * 10 + col ; if ( next != null && next . intValue () == curNr ) { System . out . print ( '\\u25cf' + \" \" ); if ( it . hasNext ()) { next = it . next (); } } else { //System.out.print('\\u25cc'+\" \"); System . out . print ( '\\u2009' + \" \" ); } } return next ; } private void printSpaces ( int nrOfSpaces ) { for ( int spaces = 0 ; spaces < nrOfSpaces ; spaces ++ ) System . out . print ( \" \" ); } private void justTestPrint () { System . out . print ( numbers1 . size () + \" : [ \" ); for ( Integer i : numbers1 ) System . out . print ( i . intValue () + \" \" ); System . out . println ( \"]\" ); System . out . println (); System . out . print ( numbers2 . size () + \" : [ \" ); for ( Integer i : numbers2 ) System . out . print ( i . intValue () + \" \" ); System . out . println ( \"]\" ); System . out . println (); System . out . print ( both . size () + \" : [ \" ); for ( Integer i : both ) System . out . print ( i . intValue () + \" \" ); System . out . println ( \"]\" ); System . out . println (); } public void print () { //justTestPrint(); System . out . println (); Iterator < Integer > it1 = numbers1 . iterator (); Integer next1 = ( it1 . hasNext ()) ? it1 . next () : null ; Iterator < Integer > it2 = numbers2 . iterator (); Integer next2 = ( it2 . hasNext ()) ? it2 . next () : null ; Iterator < Integer > itb = both . iterator (); Integer nextB = ( itb . hasNext ()) ? itb . next () : null ; for ( int row = 0 ; row < 10 ; row ++ ) { next1 = this . printOneLine ( it1 , next1 , row ); printSpaces ( 8 ); next2 = this . printOneLine ( it2 , next2 , row ); printSpaces ( 8 ); nextB = this . printOneLine ( itb , nextB , row ); System . out . println (); } System . out . println (); } } Testklasse.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 package aufgaben.aufgabe5 ; public class Testklasse { public static void main ( String [] args ) { SetOperations so = new SetOperations (); so . fill (); so . fillBothUnion (); so . print (); so . fillBothIntersection (); so . print (); so . fillBothDifference (); so . print (); } }","title":"Aufgabe 5 (Operationen \u00fcber Mengen)"},{"location":"aufgaben/#aufgabe-6-maps","text":"Aufgabe 6 Testen Sie folgenden Code: long a = 1000 ; Integer b = 1000 ; Integer c = 1000 ; System . out . println ( a == b ); System . out . println ( b == c ); Was stellen Sie fest und warum? \u00c4ndern Sie den Vergleich der Variablen b und c so, dass true ausgegeben wird. Die ersten drei Zeilen bleiben dabei unver\u00e4ndert. Sie ben\u00f6tigen also einen anderen Vergleich als b == c . Erstellen Sie eine Klasse PizzaMenu . Erzeugen Sie darin eine HashMap und f\u00fcgen Sie folgende Pizzen mit ihren Preisen ein: Pizza Preis Margherita 7,00 Veggie 7,50 Salami 8,50 Schinken 8,50 Schreiben Sie eine Methode public static boolean existingPizza(Map<String,Double> menu, String pizza) , die testet, ob eine eingegebene Pizza im Men\u00fc existiert. Schreiben Sie eine Methode public static void printPrice(Map<String,Double> menu, String pizza) , die f\u00fcr eine eingegebene Pizza den Preis ausgibt. Verwenden Sie dazu existingPizza() . Beispielausgabe: Salami: 8 .50 Euro Hawaii: Diese Pizza gibt es nicht. Schreiben Sie eine printMenu() -Methode, die ausgibt, wie viele Pizzen es im Men\u00fc gibt. Wenn das Men\u00fc nicht leer ist, sollen zudem alle Pizzen mit ihrem Preis ausgegeben werden. Beispielausgabe: // Beispiel fuer leeres Menue ############## Das Menu enth\u00e4lt 0 Pizzen. ############## // Beispiel fuer Menue ############## Das Menu enth\u00e4lt 4 Pizzen. Pizza Margherita: 7 .00 Euro Pizza Salami: 8 .50 Euro Pizza Schinken: 8 .50 Euro Pizza Veggie: 7 .50 Euro ############## \u00c4ndern Sie den Preis der Schinken -Pizza in der HashMap zu 8,20 . Schreiben Sie eine Methode public static void affordablePizza(Map<String,Double> menu, double maxPrice) , die alle Pizzen ausgibt, die man sich f\u00fcr einen bestimmten Betrag leisten kann. Beispielausgabe: Eingegebener Betrag: 4 .0 Euro Leider gibt es zu diesem Preis keine Pizza. Eingegebener Betrag: 8 .0 Euro M\u00f6gliche Pizzen: [ Margherita, Veggie ] Das Menu wird \u00fcberarbeitet, l\u00f6schen Sie daher alle Eintr\u00e4ge. F\u00fcllen Sie das Men\u00fc anschlie\u00dfend mit diesen neuen Pizzen: Pizza Preis Verde 7,00 Hawaii 8,20 Tradizionale 8,50 Legen Sie ein zweites Men\u00fc an und kopieren Sie alle Eintr\u00e4ge aus dem ersten Men\u00fc hinein. L\u00f6schen Sie im zweiten Men\u00fc die Pizza Hawaii und geben Sie die Namen aller noch verf\u00fcgbaren Pizzen aus. Finden Sie in Ihrem Code ein Beispiel f\u00fcr Auto-Boxing und schreiben Sie einen entsprechenden Kommentar. eine m\u00f6gliche L\u00f6sung f\u00fcr Aufgabe 6 PizzaMenu.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 package aufgaben.aufgabe6 ; import java.util.ArrayList ; import java.util.HashMap ; import java.util.Map ; import java.util.Set ; import java.util.List ; public class PizzaMenu { //3. public static boolean existingPizza ( Map < String , Double > menu , String pizza ) { if ( menu . containsKey ( pizza )){ return true ; } return false ; } //4. public static void printPrice ( Map < String , Double > menu , String pizza ) { if ( existingPizza ( menu , pizza )){ System . out . println ( pizza + \": \" + menu . get ( pizza )); } else { System . out . println ( pizza + \": \" + \"Diese Pizza gibt es nicht.\" ); } } //5. public static void printMenu ( Map < String , Double > menu ) { System . out . println (); System . out . println ( \"##############\" ); System . out . println ( \"Das Menu enth\u00e4lt \" + menu . size () + \" Pizzen.\" ); if ( ! menu . isEmpty ()) { for ( Map . Entry < String , Double > entry : menu . entrySet ()) { System . out . println ( \"Pizza : \" + entry . getKey () + \" - \" + entry . getValue ()); } } System . out . println ( \"##############\" ); } //7. public static void affordablePizza ( Map < String , Double > menu , double maxPrice ) { List < String > pizzen = new ArrayList <> (); System . out . println ( \"Eingegebener Betrag: \" + maxPrice + \" Euro\" ); for ( Map . Entry < String , Double > eintrag : menu . entrySet ()) { if ( eintrag . getValue () <= maxPrice ) { //Auto-Boxing von double zu Double pizzen . add ( eintrag . getKey ()); } } if ( pizzen . size () == 0 ) { System . out . println ( \"Leider gibt es zu diesem Preis keine Pizza.\" ); } else { System . out . println ( \"M\u00f6gliche Pizzen: \" + pizzen ); } } public static void main ( String [] args ) { //2. Map < String , Double > menu1 = new HashMap <> (); menu1 . put ( \"Margherita\" , 7.0 ); //Auto-Boxing von double zu Double menu1 . put ( \"Veggie\" , 7.5 ); //Auto-Boxing von double zu Double menu1 . put ( \"Salami\" , 8.5 ); //Auto-Boxing von double zu Double menu1 . put ( \"Schinken\" , 8.5 ); //Auto-Boxing von double zu Double //4. printPrice ( menu1 , \"Salami\" ); printPrice ( menu1 , \"Hawaii\" ); //5. printMenu ( menu1 ); //6. menu1 . put ( \"Schinken\" , 8.20 ); //Auto-Boxing von double zu Double //7. affordablePizza ( menu1 , 4.0 ); affordablePizza ( menu1 , 8.0 ); //8. menu1 . clear (); printMenu ( menu1 ); menu1 . put ( \"Verde\" , 7.0 ); //Auto-Boxing von double zu Double menu1 . put ( \"Hawaii\" , 8.2 ); //Auto-Boxing von double zu Double menu1 . put ( \"Tradizionale\" , 8.5 ); //Auto-Boxing von double zu Double printMenu ( menu1 ); //9. Map < String , Double > menu2 = new HashMap <> (); menu2 . putAll ( menu1 ); menu2 . remove ( \"Hawaii\" ); Set < String > pizzaNames = menu2 . keySet (); System . out . println (); System . out . println ( \"Es gibt folgende Pizzen: \" + pizzaNames ); } }","title":"Aufgabe 6 (Maps)"},{"location":"aufgaben/#aufgabe-7-interfaces","text":"Aufgabe 7 Das Observer -Entwurfsmuster geh\u00f6rt zu den am meisten verwendeten Designmustern/Designpattern/Pattern in der Programmierung. Es wird auch Beobachter -Muster oder Publisher -Pattern genannt. Wir werden dieses Muster in K\u00fcrze sehr h\u00e4ufig anwenden, wenn wir Nutzerereignisse in grafischen Oberfl\u00e4chen behandeln. Man kann sich dieses Pattern so vorstellen, dass der Publisher eine Zeitung oder auch Slack ist und dass Listener diese Zeitung (oder Slack) \"abonnieren\". Immer, wenn eine Nachricht ver\u00f6ffentlicht wird, dann erfahren alle Abonnenten davon. Wir werden eine (einfache) Implementierung dieses Entwurfsmusters durchf\u00fchren. Erstellen Sie ein Interface Publisher mit folgenden (abstrakten) Methoden: public boolean register(Listener listener); public boolean unregister(Listener listener); public void notifyListeners(); public String getUpdate(Listener listener); Erstellen Sie ein weiteres Interface Listener mit folgenden (abstrakten) Methoden: public void update(); public void setPublisher(Publisher publisher); public void removePublisher(Publisher publisher); Erstellen Sie eine Klasse Slack , die das Publisher -Interface implementiert. Objektvariablen der Klasse sind private Set<Listener> listeners; (speichert alle \"Abonnenten\"; kann gerne auch eine Liste sein) private int nrOfMessages; (speichert die aktuelle Nummer einer ver\u00f6ffentlichten Nachricht - die Nachrichten, die ver\u00f6ffentlicht werden, sollen fortlaufend nummeriert werden) Im parameterlosen Konstruktor werden die Menge (oder Liste) erzeugt und die nrOfMessages auf `0 gesetzt. In der Methode register(Listener listener) wird der listener in die Set listeners eingef\u00fcgt. Geben Sie ein true zur\u00fcck, wenn listener tats\u00e4chlich eingef\u00fcgt wurde und false sonst (falls er schon in der Menge (oder Liste) war. In der Methode unregister(Listener listener) wird der listener wieder aus der Set listeners gel\u00f6scht. Geben Sie ein true zur\u00fcck, wenn listener tats\u00e4chlich gel\u00f6scht wurde und false sonst (falls er nicht in der Menge (oder Liste) war. In der Methode notifyListeners() wird f\u00fcr alle listener aus der Menge listeners die update() -Methode aufgerufen (siehe Listener und Student ). Die Methode getUpdate(Listener obj) liefert einfach folgenden String zur\u00fcck: \"Breaking News \" + this.nrOfMessages . Erstellen Sie eine Methode public void publishNews() , in der die nrOfMessages um 1 erh\u00f6ht und die Methode notifyListeners() aufgerufen wird. Erstellen Sie eine Klasse Student , die das Listener -Interface implementiert. Objektvariablen der Klasse sind private String name; (speichert den Namen von Student ) private Publisher publisher; (speichert den Publisher , an den sich Student anmeldet) Im parametrisierten Konstruktor public Student(String name) wird der Name initalisiert. In der Methode setPublisher(Publisher publisher) wird die register() -Methode des publisher aufgerufen und der Wert der Objektvariable publisher gesetzt. Geben Sie bei erfolgreicher Anmeldung an den publisher auf die Konsole this.name + \" registered!\" aus. In der Methode removePublisher(Publisher publisher) meldet sich Student wieder vom publisher ab (Aufruf von unregister() und Ausgabe auf die Konsole this.name + \" deregistered!\" . In der Methode update() wird die getUpdate() -Methode des publisher aufgerufen und die zur\u00fcckgegebene Nachricht msg wie folgt auf die Konsole ausgegben: this.name + \" received \" + msg . Implementieren Sie f\u00fcr Student auch die Methoden equals() und hashCode() . Wenn Sie Ihre Implementierung mit folgender Klasse testen: public class Testklasse { public static void main ( String [] args ) { final int NR_OF_STUDENTS = 5 ; Slack slack = new Slack (); Student [] students = new Student [ NR_OF_STUDENTS ] ; Character c = 'A' ; for ( int index = 0 ; index < students . length ; index ++ ) { students [ index ] = new Student ( c . toString ()); c ++ ; students [ index ] . setPublisher ( slack ); } slack . publishNews (); System . out . println (); students [ 1 ] . removePublisher ( slack ); students [ 3 ] . removePublisher ( slack ); System . out . println (); slack . publishNews (); System . out . println (); students [ 1 ] . setPublisher ( slack ); students [ 2 ] . removePublisher ( slack ); students [ 4 ] . removePublisher ( slack ); System . out . println (); slack . publishNews (); System . out . println (); students [ 0 ] . removePublisher ( slack ); students [ 1 ] . removePublisher ( slack ); students [ 3 ] . setPublisher ( slack ); System . out . println (); slack . publishNews (); } } dann sollte die Ausgabe ungef\u00e4hr so sein: A registered! B registered! C registered! D registered! E registered! D received Breaking News 1 C received Breaking News 1 B received Breaking News 1 A received Breaking News 1 E received Breaking News 1 B deregistered! D deregistered! C received Breaking News 2 A received Breaking News 2 E received Breaking News 2 B registered! C deregistered! E deregistered! B received Breaking News 3 A received Breaking News 3 A deregistered! B deregistered! D registered! D received Breaking News 4 eine m\u00f6gliche L\u00f6sung f\u00fcr Aufgabe 7 Listener.java 1 2 3 4 5 6 7 8 9 10 11 12 13 package aufgaben.aufgabe7 ; public interface Listener { //method to update the listener, used by publisher public void update (); //attach with publisher to observe public void setPublisher ( Publisher publisher ); //attach with publisher to observe public void removePublisher ( Publisher publisher ); } Publisher.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 package aufgaben.aufgabe7 ; public interface Publisher { //methods to register and unregister listeners (observers) public boolean register ( Listener listener ); public boolean unregister ( Listener listener ); //method to notify listeners of change public void notifyListeners (); //method to get updates from publisher (subject) public String getUpdate ( Listener listener ); } Slack.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package aufgaben.aufgabe7 ; import java.util.* ; public class Slack implements Publisher { private Set < Listener > listeners ; private int nrOfMessages ; public Slack () { this . listeners = new HashSet <> (); this . nrOfMessages = 0 ; } @Override public boolean register ( Listener listener ) { return listeners . add ( listener ); } @Override public boolean unregister ( Listener listener ) { return listeners . remove ( listener ); } @Override public void notifyListeners () { for ( Listener listener : listeners ) { listener . update (); } } @Override public String getUpdate ( Listener obj ) { return \"Breaking News \" + this . nrOfMessages ; } public void publishNews () { this . nrOfMessages ++ ; this . notifyListeners (); } } Student.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 package aufgaben.aufgabe7 ; public class Student implements Listener { private String name ; private Publisher publisher ; public Student ( String name ) { this . name = name ; } @Override public void update () { String msg = this . publisher . getUpdate ( this ); System . out . println ( this . name + \" received \" + msg ); } @Override public void setPublisher ( Publisher publisher ) { this . publisher = publisher ; if ( this . publisher . register ( this )) { System . out . println ( this . name + \" registered!\" ); } } @Override public void removePublisher ( Publisher publisher ) { if ( this . publisher . unregister ( this )) { System . out . println ( this . name + \" deregistered!\" ); this . publisher = null ; } } @Override public boolean equals ( Object o ) { if ( o == null ) return false ; if ( this == o ) return true ; if ( this . getClass () != o . getClass ()) return false ; Student so = ( Student ) o ; return this . name . equals ( so . name ); } @Override public int hashCode () { return this . name . hashCode (); } } Testklasse.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 package aufgaben.aufgabe7 ; public class Testklasse { public static void main ( String [] args ) { final int NR_OF_STUDENTS = 5 ; Slack slack = new Slack (); Student [] students = new Student [ NR_OF_STUDENTS ] ; Character c = 'A' ; for ( int index = 0 ; index < students . length ; index ++ ) { students [ index ] = new Student ( c . toString ()); c ++ ; students [ index ] . setPublisher ( slack ); } slack . publishNews (); System . out . println (); students [ 1 ] . removePublisher ( slack ); students [ 3 ] . removePublisher ( slack ); System . out . println (); slack . publishNews (); System . out . println (); students [ 1 ] . setPublisher ( slack ); students [ 2 ] . removePublisher ( slack ); students [ 4 ] . removePublisher ( slack ); System . out . println (); slack . publishNews (); System . out . println (); students [ 0 ] . removePublisher ( slack ); students [ 1 ] . removePublisher ( slack ); students [ 3 ] . setPublisher ( slack ); System . out . println (); slack . publishNews (); } }","title":"Aufgabe 7 (Interfaces)"},{"location":"aufgaben/#aufgabe-8-gui","text":"Aufgabe 8 Erstellen Sie die GUI f\u00fcr einen solchen Taschenrechner: Kann auch schicker sein :-) Viel Spa\u00df!","title":"Aufgabe 8 (GUI)"},{"location":"aufgaben/#aufgabe-9-ereignisbehandlung","text":"Aufgabe 9 Implementieren Sie f\u00fcr den Taschenrechner aus Aufgabe 8 das ActionListener -Interface, so dass der Taschenrechner \u00fcber m\u00f6glichst viel Funktionalit\u00e4t verf\u00fcgt. Minimumanforderung ist, dass durch die Eingabe von Ziffern Zahlen entstehen und dass die Buttons + , - , / , + und = insofern funktionieren, dass dadurch tats\u00e4chlich gerechnet wird, auch wenn die Regel \"Punktrechnung geht vor Strichrechnung\" nicht eingehalten wird. Eine erste Verbesserung (ist schon Zusatz ) w\u00e4re, dass die Regel \"Punktrechnung geht vor Strichrechnung\" eingehalten wird. Ab dann ist alles Zusatz und bedarf in vielen F\u00e4llen der Erweiterung der GUI: Verwendung und Beachten von Klammern (ist aber sehr schwer!), Speichern von Zwischenergebnissen, komplexere Operationen durch zu\u00e4tzliche Tasten (Wurzel, Potenzieren, ...). Alles, was Sie m\u00f6chten - Viel Spa\u00df!","title":"Aufgabe 9 (Ereignisbehandlung)"},{"location":"aufgaben/#aufgabe-10-zeichnen","text":"Aufgabe 10 Wir berechnen PI mithilfe der Monte-Carlo-Methode . Dazu zeichnen wir ein Quadrat und darin einen Kreisbogen (einen Viertelkreis), dessen Radius der Seitenl\u00e4nge des Quadrats entspricht: Nun zeichnen wir in dieses Quadrat viele kleine ausgef\u00fcllte Kreise (Durchmesser z.B. 2 Pixel). Die Positionen dieser Kreise werden zuf\u00e4llig ermittelt. Wenn die zuf\u00e4llig ermittelte Position f\u00fcr diesen Kreis im Kreisbogen liegt, dann sind die kleinen Kreise rot, wenn die Position au\u00dferhalb liegt, dann sind die Kreise blau. Es entsteht bei ganz vielen (z.B. 50000 ) Punkten so ein Bild: Tipp: Ob ein Punkt mit den Koordinaten (x,y) in einem (Viertel-)Kreis liegt, ermitteln Sie mithilfe der Kreisgleichung . Sei (xm, ym) der Mittelpunkt und r der Radius des Kreises, dann gilt (x-xm)^2 + (y-ym)^2 = r^2 f\u00fcr alle Punkte auf dem Kreis (f\u00fcr Punkte im Kreis gilt <= und f\u00fcr Punkte au\u00dferhalb des Kreises >). Der Quotient aus der Anzahl der roten Punkte und der Gesamtanzahl der Punkte ist eine N\u00e4herung von PI/4. Geben Sie Ihre Ann\u00e4herung von PI auf der Konsole aus.","title":"Aufgabe 10 (Zeichnen)"},{"location":"collections/","text":"Collections \u00b6 Um mehrere Werte oder Referenzen gleichen Typs zu speichern, haben wir bisher Arrays verwendet. Die L\u00e4nge von Arrays wird bei der Initialisierung festgelegt und l\u00e4sst sich dann nicht mehr ver\u00e4ndern. Wenn ein weiteres Element einem vollen Array hinzugef\u00fcgt werden soll, muss zun\u00e4chst ein neues Array erstellt werden, das l\u00e4nger ist als das alte und dann m\u00fcssen alle Elemente aus dem alten Array in das neue Array kopiert werden, ehe das neue Element hinzugef\u00fcgt wird. Das ist recht aufwendig. Dar\u00fcber hinaus ist es beispielsweise auch aufwendig, in Arrays Doppelungen zu vermeiden. F\u00fcr ein Element, das in ein Array eingef\u00fcgt werden soll, muss daf\u00fcr zun\u00e4chst gepr\u00fcft werden, ob es nicht bereits im Array enthalten ist. Diese Nachteile f\u00fchren dazu, dass wir uns nun mit Datenstrukturen besch\u00e4ftigen, die ebenfalls mehrere Elemente speichern k\u00f6nnen, deren Verwaltung aber nicht so aufwendig ist, wie bei Arrays. Diese Datenstrukturen hei\u00dfen Collections . Collections haben drei wesentliche Eigenschaften: Eine Collection hat keine festgelegte L\u00e4nge , d.h. es sind beliebig viele Elemente in einer Collection speicherbar. In eine Collection k\u00f6nnen nur Elemente von Referenztypen gespeichert werden, d.h. keine Wertetypen ( int , double , boolean , char , ...). Um auch solche \"Werte\" speichern zu k\u00f6nnen, werden wir Wrapper -Klassen kennenlernen. Im Gegensatz zu Arrays k\u00f6nnen in einer Collection Elemente verschiedener Referenztypen gespeichert werden. Das ist aber eher ein Problem und kein Feature. Wir werden das vermeiden, da die Verwaltung von Elementen verschiedener Typen fehleranf\u00e4llig ist. Wir werden Collections typisieren , damit sie nur Elemente eines Typs speichern kann. Arten von Collections \u00b6 Es gibt unterschiedliche Arten von Collections , welche je nach Einsatzzweck verwendet werden: Typ Struktur Zugriff Eigenschaften List Menge wahlfrei (indexbasiert) Iterator kann Elemente mehrfach enthalten Set Menge Iterator keine doppelten Elemente keine Ordnung der Elemente Map Schl\u00fcssel-Werte-Paare schl\u00fcsselbasiert Schl\u00fcssel ist eindeutig Werte k\u00f6nnen mehrfach sein Stack Stapel/Stack oberstes Element last-in-first-out-Prinzip Queue Warteschlange erstes und letztes Element first-in-first-out-Prinzip Wir werden uns in diesem Semester aber nur mit den Collections List , Set und Map besch\u00e4ftigen. Das Prinzip eines Stacks haben wir bereits kennengelernt, als wir uns \u00fcber den Methodenstack in Programmierung 1 unterhalten hatten. Ein Stack ist ein Stapel, auf den man ein Element legen kann ( pop ) und von dem man das oberste Element entfernen kann ( pop ). Mithilfe von top erh\u00e4lt man lesenden Zugriff auf das oberste Element. Auf alle anderen Elemente hat man im Stack keinen Zugriff. Eine Queue implementiert das Prinzip einer Warteschlange. Ein Element kann an das Ende einer Warteschlange angeh\u00e4ngt werden. Herausgenommen werden kann aber immer nur das Element am Anfang (dem head ) der Warteschlange. Eine Liste ( List ) ist noch am ehesten vergleichbar mit einem Array, au\u00dfer dass es keine Gr\u00f6\u00dfenbeschr\u00e4nkung gibt und dass nur Referenztypen in eine Liste gespeichert werden. In Listen werden ebenfalls Indizes verwaltet, so dass man auf die Elemente Zugriff wie in einem Array hat. Es gibt Listen, die automatisch sortiert werden. In Listen k\u00f6nnen Elemente doppelt vorkommen. Von Doppelungen in Collections wird gesprochen, wenn f\u00fcr zwei Elemente e1 und e2 gilt e1.equals(e2) == true (oder e1.hashCode() == e2.hashCode() ). Eine Menge ( Set ) hat die besondere Eigenschaft, dass sie keine Doppelungen enth\u00e4lt. Wird versucht, ein Element einer Menge hinzuzuf\u00fcgen, welches bereits in der Menge enthalten ist, dann wird das Element nicht hinzugef\u00fcgt. Deshalb gibt die add(element) -Methode f\u00fcr eine Menge ein boolean zur\u00fcck, damit erkannt werden kann, ob das Element hinzugef\u00fcgt wurde ( true ) oder nicht ( false ). Eine Map kann man sich wie eine Tablle aus zwei Spalten vorstellen. In der linken Spalte stehen Schl\u00fcssel key und in der rechten die Werte value . Jedem Schl\u00fcssel ist genau ein Wert zugeordnet. Jeder Schl\u00fcssel ist eindeutig, d.h. es gibt keine Doppelungen unter den Schl\u00fcsseln (die Schl\u00fcssel in einer Map sind eine Set ). Werte k\u00f6nnen allerdings doppelt vorkommen (haben aber jeweils einen eigenen Schl\u00fcssel). Eine kurze Entscheidungshilfe, welche Collection verwendet wird, zeigt die folgende Abbildung: Der Collection-Klassenbaum \u00b6 Leider ist die Verwaltung von Collections in Java nicht einheitlich. Das liegt daran, dass (unverst\u00e4ndlicherweise) Listen und Mengen in einer anderen Vererbungshierarchie verwaltet werden, als Maps. Wir schauen uns die Vererbungshierarchie von Collection einaml an. Darin kommen die Listen und Mengen vor, aber nicht Maps. Die \"Mutter-Klasse\" der Collections List und Set ist Collection . In der Abbildung fallen unterschiedliche Farben auf. Die gr\u00fcngef\u00e4rbten Klassen sind sogenannte Interfaces . Interfaces lernen wir sp\u00e4ter noch kennen. Ebenso wie die rotgef\u00e4rbten Klassen, bei denen es sich um abstrakte Klassen handelt. Das soll uns zun\u00e4chst nicht besonders interessieren, aber wir k\u00f6nnen uns merken, dass wir die gr\u00fcngef\u00e4rbten Klassen als Typen verwenden (insb. den Typ List f\u00fcr die Listen und den Typ Set f\u00fcr die Mengen). Wir k\u00f6nnen aber keine konkreten List -Objekte bzw. keine konkreten Set -Objekte erzeugen. Das geht nur mit dem blaugef\u00e4rbten Klassen. Das bedeutet, dass wir z.B. ein konkretes ArrayList -Objekt erzeugen werden oder ein konkretes HashSet -Objekt. Hier einige Beispiele: import java.util.ArrayList ; import java.util.HashSet ; import java.util.LinkedList ; import java.util.List ; import java.util.Set ; import java.util.TreeSet ; public class Collections { public static void main ( String [] args ) { List l1 = new ArrayList (); List l2 = new LinkedList (); Set s1 = new HashSet (); Set s2 = new TreeSet (); } } Beachten Sie, alle Klassen aus dem java.util -Paket zu importieren! Eine Klasse List gibt es z.B. auch im java.awt -Paket! Statt alle Klassen einzeln zu importieren k\u00f6nnen Sie auch schreiben: import java.util.* ; Der * ist eine Wildcard und importiert alle Klassen aus java.util . Zur Diskussion, wann ArrayList besser ist und wann LinkedList , siehe hier . Eine Diskussion \u00fcber die Unterschiede zwischen HashSet und TreeSet finden Sie z.B. hier . Wir werden f\u00fcr Listen haupts\u00e4chlich Objekte von ArrayList erstellen und f\u00fcr Mengen haupts\u00e4chlich Objekte von HashSet . Mengen - Sets \u00b6 Wir betrachten zun\u00e4chst Mengen genauer und beginnen mit einem Beispiel: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import java.util.* ; public class Collections { public static void main ( String [] args ) { Set menge = new HashSet (); String s1 = \"erster\" ; String s2 = \"zweiter\" ; String s3 = \"dritter\" ; String s4 = \"zweiter\" ; System . out . println ( menge . add ( s1 )); // true System . out . println ( menge . add ( s2 )); // true System . out . println ( menge . add ( s3 )); // true System . out . println ( menge . add ( s4 )); // false System . out . println ( menge . size ()); // 3 Iterator it = menge . iterator (); while ( it . hasNext ()) { System . out . println ( it . next ()); } } } In Zeile 1 werden zun\u00e4chst alle verwendeten Klassen aus dem java.util -Paket geladen. Das sind f\u00fcr unser Beispiel Set , HashSet und Iterator . Die Iterator -Klasse wird verwendet, um durch unsere Menge menge zu laufen. Wir werden auf den Iterator gleich genauer eingehen, lernen aber bald eine einfachere L\u00f6sung kennen, um durch unsere Menge zu iterieren. In Zeile 7 wird die Menge menge erzeugt. Wir deklarieren daf\u00fcr den Typ Set und erzeugen unter Verwendung des parameterlosen Konstruktors von HashSet ein HashSet -Objekt. Die menge hat also den Compilertyp Set und mindestens den Laufzeittyp HashSet (nat\u00fcrlich noch weitere Laufzeittypen, z.B. Object ). In den Zeilen 14-17 werden der menge Elemente hinzugef\u00fcgt. Diese Elemente sind hier vom Typ String . Das Hinzuf\u00fcgen von Elementen zu einer Menge erfolgt mit der Methode add(element) . Diese Methode gibt ein boolean zur\u00fcck. Wir lassen in den Zeilen 14-17 diese R\u00fcckgabe auf die Konsole ausgeben und stellen fest, dass wir folgende Ausgaben erhalten: true true true false Die add() -Methode gibt also 3x ein true zur\u00fcck und beim vierten Aufruf ein false . Das liegt daran, dass beim vierten Aufruf von add() (Zeile 17 ) das \u00fcbergebene Element s4 nicht in die Menge menge eingef\u00fcgt wird, da sich in dieser Menge bereits ein String mit dem Wert \"zweiter\" befindet und eine Menge keine Doppelungen enthalten darf. Da s2.equals(s4) den Wert true zur\u00fcckgibt, erkennt die add() -Methode, dass bereits ein gleiches Objekt in der Menge enthalten ist und s4 wird deshalb nicht eingef\u00fcgt. In Zeile 19 lassen wir uns die Anzahl der Elemente in der Menge menge ausgeben. Dies erfolgt mithilfe der size() -Methode (in Collections ist es also nicht length() , auch nicht length und auch nicht getLength() oder getSize() , sondern size() ). Der Wert von size() in unserem Beispiel ist 3 . Der Iterator \u00b6 Mithilfe der Klasse Iterator iterieren wir durch eine Collection, d.h. wir laufen durch unsere Collection und betrachten alle Elemente aus der Collection. Die Klasse Iterator besitzt drei Objektmethoden (eigentlich vier, aber die vierte Methode soll uns zun\u00e4chst nicht interessieren): hasNext() : liefert ein true zur\u00fcck, wenn sich mindestens ein weiteres Element in der Collection befindet; wenn nicht, dann false , next() : liefert das n\u00e4chste Element aus der Iteration zur\u00fcck (und entfernt es daraus), remove() : l\u00f6scht das mit next() zur\u00fcckgegebene Element. In Zeile 21 erzeugen wir zun\u00e4chst mit der iterator() -Methode aus Set ein Objekt von Iterator . Die Referenz auf dieses Objekt nennen wir hier it . Die while() -Schleife in den Zeilen 22-25 durchl\u00e4uft nun diese Iteration, indem sie mithilfe von hasNext() pr\u00fcft, ob sich noch ein weiteres Element in der Iteration befindet und wenn ja, dann wird es mithilfe von next() aus der Iteration entnommen und in Zeile 24 auf die Konsole ausgegeben. Wir erhalten f\u00fcr unser Beispiel folgende Ausgaben: zweiter dritter erster Darin sehen wir auch, dass die Reihenfolge des Einf\u00fcgens in eine Menge nicht gewahrt wird. Wir haben die Elemente in der Reihenfolge \"erster\" , \"zweiter\" , \"dritter\" in die Menge eingef\u00fcgt, aber die Ausgabe erfolgt in der Reihenfolge \"zweiter\" , \"dritter\" , \"erster\" . Auf die Reihenfolge haben wir in Mengen keinen Einfluss! Methoden f\u00fcr Mengen \u00b6 Wir haben bereits drei Methoden f\u00fcr Mengen kennengelernt: add() , size() und iterator() . Tats\u00e4chlich sind das Methoden, die in allen Klassen zur Verf\u00fcgung stehen, die von java.util.Collection erben ( erben ist hier eigentlich nicht ganz richtig, da es sich bei java.util.Collection um ein Interface handelt, aber das soll uns hier zun\u00e4chst egal sein). Wir betrachten nun alle wesentlichen Methoden, die wir f\u00fcr Mengen und Listen zur Verf\u00fcgung haben (siehe dazu auch die Java-Dokumentation von Collection ): Methode Beschreibung boolean add(E element) F\u00fcgt Element element in die Collection ein. Gibt true zur\u00fcck, wenn Element hinzugef\u00fcgt wurde sonst false . boolean addAll(Collection c) F\u00fcgt alle Elemente der Collection c in die Collection ein. Gibt true zur\u00fcck, wenn mindestens ein Element hinzugef\u00fcgt wurde sonst false . void clear() Entfernt alle Elemente aus der Collection. boolean contains(E element) Gibt true zur\u00fcck, wenn sich element in der Collection befindet, sonst false . boolean containsAll(Collection c) Gibt true zur\u00fcck, wenn sich alle Elemente der Collection c in der Collection befinden, sonst false . boolean isEmpty() Gibt true zur\u00fcck, wenn sich keine Elemente in der Collection befinden, sonst false . Iterator iterator() Erzeugt einen Iterator, welcher auf das erste Element der Collection zeigt. boolean remove(Object o) Entfernt o aus der Collection und gibt true zur\u00fcck, wenn ein Element entfernt wurde, sonst false . boolean removeAll(Collection c) Entfernt alle Elemente aus c aus der Collection und gibt true zur\u00fcck, wenn mindestens ein Element entfernt wurde, sonst false . int size() Gibt die Anzahl der Elemente in der Collection zur\u00fcck. Object[] toArray() Gibt die Elemente in der Collection in einem Array-Datentyp zur\u00fcck. Der TyP E in der Tabelle ist ein Platzhalter f\u00fcr einen konkreten Typ. Bei dem Iterator sehen wir eine neue Syntax <E> . Diese lernen wir gleich kennen. E steht, wie gesagt, f\u00fcr einen beliebigen Typ. Die Typisierung wollen wir zun\u00e4chst motivieren. Typisieren \u00b6 Generell k\u00f6nnen in Collections Objekte verschiedener Typen gespeichert werden. Es w\u00e4re also m\u00f6glich, so etwas hier zu tun: Set menge = new HashSet (); menge . add ( new String ( \"erster\" )); // String einf\u00fcgen menge . add ( new Power ( 2 , 4 )); // Power einf\u00fcgen menge . add ( new Point ( 2 , 3 )); // Point einf\u00fcgen menge . add ( new Konto ()); // Konto einf\u00fcgen Das Speichern von Objekten verschiedenen Typs ist jedoch sehr fehleranf\u00e4llig und sollte unbedingt vermieden werden! Es gibt auch nicht wirklich sinnvollen Anwendungsbeispiele daf\u00fcr. Stattdessen wollen wir angeben, welcher Typ die Objekte haben sollen, die in unserer Collection gespeichert werden k\u00f6nnen. Dazu typisieren wir die Collection. Das Typisieren einer Collection erfolgt mithilfe der Diamond -Syntax: Collection<Typ> name = new KonkreteKlasse<>(); Wir typisieren die Menge menge aus dem eben gezeigten Beispiel: Set < String > menge = new HashSet <> (); // mit String typisiert - menge nimmt nur Strings auf menge . add ( new String ( \"erster\" )); // String einf\u00fcgen menge . add ( new Power ( 2 , 4 )); // Fehler - kein String menge . add ( new Point ( 2 , 3 )); // Fehler - kein String menge . add ( new Konto ()); // Fehler - kein String Wir haben menge typisiert und angegeben, dass menge nur Objekte vonm Typ String aufnehmen kann. Dazu geben wir bei der Typdeklaration Set<String> den Elemente-Typ in spitzen Klammern an. Diese spitzen Klammern werden auch in den Konstruktoraufruf eingef\u00fcgt new HashSet<>(); . Darin muss der Typ aber nicht wiederholt werden (der ist ja aus der Deklaration klar). Der Versuch, Objekte eines anderen Typs als String in die Collection einzuf\u00fcgen, scheitert bereits zur Compilezeit, d.h. das Programm l\u00e4sst sich gar nicht \u00fcbersetzen, wenn versucht wird, Objekte anderen Typs als der bei der Typisierung Angegebene einzuf\u00fcgen. Unser einf\u00fchrendes Beispiel von oben ist deshalb besser mit Typisierung: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import java.util.* ; public class Collections { public static void main ( String [] args ) { Set < String > menge = new HashSet <> (); String s1 = \"erster\" ; String s2 = \"zweiter\" ; String s3 = \"dritter\" ; String s4 = \"zweiter\" ; System . out . println ( menge . add ( s1 )); // true System . out . println ( menge . add ( s2 )); // true System . out . println ( menge . add ( s3 )); // true System . out . println ( menge . add ( s4 )); // false System . out . println ( menge . size ()); // 3 Iterator < String > it = menge . iterator (); while ( it . hasNext ()) { System . out . println ( it . next ()); } } } Beachten Sie, dass auch der Iterator (Zeile 21 ) typisiert wird. Die for-each-Schleife \u00b6 Wenn wir unsere Collection typisieren, haben wir auch eine einfachere M\u00f6glichkeit, durch diese zu laufen als die Verwednung des Iterators. Wir k\u00f6nnen stattdessen die for-each -Schleife verwenden. Die allgemeine Syntaxh einer solchen Schleife ist: for ( TypElement element : collection ) { } F\u00fcr unser Beispiel k\u00f6nnten wir den Iterator ersetzen durch diese Schleife: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import java.util.* ; public class Collections { public static void main ( String [] args ) { Set < String > menge = new HashSet <> (); String s1 = \"erster\" ; String s2 = \"zweiter\" ; String s3 = \"dritter\" ; String s4 = \"zweiter\" ; System . out . println ( menge . add ( s1 )); // true System . out . println ( menge . add ( s2 )); // true System . out . println ( menge . add ( s3 )); // true System . out . println ( menge . add ( s4 )); // false System . out . println ( menge . size ()); // 3 for ( String s : menge ) { System . out . println ( s ); } } } \u00dcbrigens: anstelle der Collection (hier: menge ) k\u00f6nnte auch ein Array stehen. Wenn Sie also vollst\u00e4ndig durch Array laufen m\u00f6chten, m\u00fcssen Sie das nicht zwingend \u00fcber alle Indizes machen, sondern k\u00f6nnen daf\u00fcr auch diese for-each -Schleife verwenden. \u00dcbung Ersetzen Sie im oberen Beispiel HashSet durch TreeSet . Erkennen Sie einen Unterschied? Listen \u00b6 Der Umgang mit Listen ist \u00e4hnlich dem Umgang mit Mengen, da beide von java.util.Collection abgeleitet sind. Deshalb stehen uns f\u00fcr Listen die gleichen Methoden zur Verf\u00fcgung, wie f\u00fcr Mengen. Listen k\u00f6nnen wir uns eher wie Arrays vorstellen. In Listen gibt es, im Unterschied zu Mengen, index-basierte Zugriffe und auch Doppelungen. Wir betrachten ein Beispiel: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 import java.util.* ; public class Collections { static void fillList ( List < String > list ) { for ( int i = 0 ; i < 10 ; i ++ ) { list . add ( String . valueOf ( i )); } } static void printList ( List < String > list ) { Iterator < String > it = list . iterator (); while ( it . hasNext ()) { System . out . print ( it . next () + \" \" ); } System . out . println (); System . out . println ( \"End of list\" ); } public static void main ( String [] args ) { List < String > list1 = new ArrayList <> (); fillList ( list1 ); printList ( list1 ); List < String > list2 = new LinkedList <> (); fillList ( list2 ); list2 . remove ( \"3\" ); // Wert! list2 . remove ( 6 ); // Index! list1 . removeAll ( list2 ); printList ( list2 ); // 0 1 2 4 5 6 8 9 printList ( list1 ); // 3 7 } } Wir erstellen uns zwei Listen list1 (Zeile 26 ) und list2 (Zeile 30 ). Beide sind vom Compilertyp List und beide sind typisiert mit String , d.h. sie k\u00f6nnen nur Strings aufnehmen. Die Methode fillList() (Zeilen 5-11 ) bef\u00fcllt die \u00fcbergebene Liste mit den Ziffern 0...9 . Da die Liste Strings erwartet, werden die int -Ziffern mithilfe von String.valueOf() in einen String umgewandelt (Zeile 9 ). Die add() -Methode f\u00fcgt die Strings hinzu (Zeile 9 ). Die Methode printList() (Zeilen 13-33 ) gibt die Elemente der \u00fcbergebenen Liste mithilfe des Iterators aus. Es wird jede Ziffer ausgegeben, gefolgt von einem Leerzeichen (Zeile 18 ). Der Aufruf von printList(list1); in Zeile 28 f\u00fchrt zu folgender Ausgabe: 0 1 2 3 4 5 6 7 8 9 End of list Die Liste list2 wird zun\u00e4chst ebenfalls mit den Ziffern 0...9 (jeweils als String ) bef\u00fcllt. Die Anweisung list2.remove(\"3\"); in Zeile 32 bewirkt, dass der Wert \"3\" aus der Liste gel\u00f6scht wird. Nach diesem L\u00f6schen enth\u00e4lt die Liste list2 noch folgende Werte: \"0\" \"1\" \"2\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" In Zeile 33 wird nun das Element aus der Liste gel\u00f6scht, das unter dem Index 6 gespeichert ist. Das ist das Element \"7\" . Nach dem L\u00f6schen des Elementes enth\u00e4lt die Liste list2 noch folgende Werte: \"0\" \"1\" \"2\" \"4\" \"5\" \"6\" \"8\" \"9\" Die Anweisung list1.removeAll(list2); in Zeile 34 bewirkt nun, dass aus list1 alle Werte gel\u00f6scht werden, die (auch) in list2 enthalten sind, also \"0\" \"1\" \"2\" \"4\" \"5\" \"6\" \"8\" \"9\" . Das bewirkt, dass in list1 dann nur noch die Werte \"3\" \"7\" \u00fcbrig bleiben. Die Anweisung printList(list2); in Zeile 35 bewirkt folgende Ausgabe: 0 1 2 4 5 6 8 9 End of list Die Anweisung printList(list1); in Zeile 36 bewirkt folgende Ausgabe: 3 7 End of list Die Methode printList() h\u00e4tte anstelle den Iterator zu verwenden auch mit der for-each -Schleife implementiert werden k\u00f6nnen: 13 14 15 16 17 18 19 20 21 static void printList ( List < String > list ) { for ( String s : list ) { System . out . print ( s + \" \" ); } System . out . println (); System . out . println ( \"End of list\" ); } \u00dcbung Gegeben ist folgender Code: Set < Integer > s1 = new HashSet <> (); Set < Integer > s2 = new HashSet <> (); for ( int i = 10 ; i >= 1 ; i -- ) { s1 . add ( i ); } for ( int i = 9 ; i <= 12 ; i ++ ) { s2 . add ( i ); } s1 . addAll ( s2 ); Was ist der R\u00fcckgabewert von s1.addAll(s2); und warum? Implementieren Sie die Ausgabe aller Werte von s1 und s2 . Mengenoperationen \u00b6 Angenommen, wir haben drei Mengen A , B und C , wobei alle Elemente aus C auch Elemente in A sind. Mithilfe der Methoden addAll() , removeAll() , retainAll() und containsAll() lassen sich Operationen \u00fcber Mengen beschreiben, wie die folgende Abbildung zeigt: Stack und Queue \u00b6 Wir werden uns, wie bereits erw\u00e4hnt, nicht ausf\u00fcrhlich mit Stack und Queue besch\u00e4ftigen, wollen aber hier der Vollst\u00e4ndigkeit halber, die gesonderten Methoden angeben, die diese beiden Arten von Collections betreffen: Stack \u00b6 Last-In-First-Out-Prinzip push(E element) zum Hinzuf\u00fcgen pop() entfernt oberstes Element und gibt es zur\u00fcck empty() pr\u00fcft, ob der Stack leer ist Queue \u00b6 First-In-First-Out-Prinzip add()/offer() zum Hinzuf\u00fcgen remove()/poll() entfernt vorderstes Element und gibt es zur\u00fcck element()/peek() pr\u00fcft, ob die Warteschlange leer ist Wertetypen in Collections \u00b6 Wertetypen k\u00f6nnen nicht als Typen der Elemente in Collections verwendet werden. Es sind nur Referenztypen in Collections erlaubt. F\u00fcr alle Wertetypen stehen entsprechende Wrapper -Klassen zur Verf\u00fcgung: Integer , Double , Float , Short , Byte , Long , Character , Boolean : 1 2 3 4 5 6 7 8 // Wertetypen k\u00f6nnen nicht als konkrete // Typen in Collections verwendet werden List < int > l = new ArrayList <> (); // Fehler !! // Verwendung der Wrapper-Klassen + Auto-Boxing List < Integer > l = new ArrayList <> (); l . add ( 100 ); // sogenanntes Auto-Boxing Das obere beispiel zeigt in Zeile 3 , wie es nicht geht. Die List l kann nicht mit int typisiert werden. Stattdessen muss die Wrapper -Klasse Integer verwendet werden. Wir betrachten Wrapper -Klassen im n\u00e4chsten Abschnitt.","title":"Collections"},{"location":"collections/#collections","text":"Um mehrere Werte oder Referenzen gleichen Typs zu speichern, haben wir bisher Arrays verwendet. Die L\u00e4nge von Arrays wird bei der Initialisierung festgelegt und l\u00e4sst sich dann nicht mehr ver\u00e4ndern. Wenn ein weiteres Element einem vollen Array hinzugef\u00fcgt werden soll, muss zun\u00e4chst ein neues Array erstellt werden, das l\u00e4nger ist als das alte und dann m\u00fcssen alle Elemente aus dem alten Array in das neue Array kopiert werden, ehe das neue Element hinzugef\u00fcgt wird. Das ist recht aufwendig. Dar\u00fcber hinaus ist es beispielsweise auch aufwendig, in Arrays Doppelungen zu vermeiden. F\u00fcr ein Element, das in ein Array eingef\u00fcgt werden soll, muss daf\u00fcr zun\u00e4chst gepr\u00fcft werden, ob es nicht bereits im Array enthalten ist. Diese Nachteile f\u00fchren dazu, dass wir uns nun mit Datenstrukturen besch\u00e4ftigen, die ebenfalls mehrere Elemente speichern k\u00f6nnen, deren Verwaltung aber nicht so aufwendig ist, wie bei Arrays. Diese Datenstrukturen hei\u00dfen Collections . Collections haben drei wesentliche Eigenschaften: Eine Collection hat keine festgelegte L\u00e4nge , d.h. es sind beliebig viele Elemente in einer Collection speicherbar. In eine Collection k\u00f6nnen nur Elemente von Referenztypen gespeichert werden, d.h. keine Wertetypen ( int , double , boolean , char , ...). Um auch solche \"Werte\" speichern zu k\u00f6nnen, werden wir Wrapper -Klassen kennenlernen. Im Gegensatz zu Arrays k\u00f6nnen in einer Collection Elemente verschiedener Referenztypen gespeichert werden. Das ist aber eher ein Problem und kein Feature. Wir werden das vermeiden, da die Verwaltung von Elementen verschiedener Typen fehleranf\u00e4llig ist. Wir werden Collections typisieren , damit sie nur Elemente eines Typs speichern kann.","title":"Collections"},{"location":"collections/#arten-von-collections","text":"Es gibt unterschiedliche Arten von Collections , welche je nach Einsatzzweck verwendet werden: Typ Struktur Zugriff Eigenschaften List Menge wahlfrei (indexbasiert) Iterator kann Elemente mehrfach enthalten Set Menge Iterator keine doppelten Elemente keine Ordnung der Elemente Map Schl\u00fcssel-Werte-Paare schl\u00fcsselbasiert Schl\u00fcssel ist eindeutig Werte k\u00f6nnen mehrfach sein Stack Stapel/Stack oberstes Element last-in-first-out-Prinzip Queue Warteschlange erstes und letztes Element first-in-first-out-Prinzip Wir werden uns in diesem Semester aber nur mit den Collections List , Set und Map besch\u00e4ftigen. Das Prinzip eines Stacks haben wir bereits kennengelernt, als wir uns \u00fcber den Methodenstack in Programmierung 1 unterhalten hatten. Ein Stack ist ein Stapel, auf den man ein Element legen kann ( pop ) und von dem man das oberste Element entfernen kann ( pop ). Mithilfe von top erh\u00e4lt man lesenden Zugriff auf das oberste Element. Auf alle anderen Elemente hat man im Stack keinen Zugriff. Eine Queue implementiert das Prinzip einer Warteschlange. Ein Element kann an das Ende einer Warteschlange angeh\u00e4ngt werden. Herausgenommen werden kann aber immer nur das Element am Anfang (dem head ) der Warteschlange. Eine Liste ( List ) ist noch am ehesten vergleichbar mit einem Array, au\u00dfer dass es keine Gr\u00f6\u00dfenbeschr\u00e4nkung gibt und dass nur Referenztypen in eine Liste gespeichert werden. In Listen werden ebenfalls Indizes verwaltet, so dass man auf die Elemente Zugriff wie in einem Array hat. Es gibt Listen, die automatisch sortiert werden. In Listen k\u00f6nnen Elemente doppelt vorkommen. Von Doppelungen in Collections wird gesprochen, wenn f\u00fcr zwei Elemente e1 und e2 gilt e1.equals(e2) == true (oder e1.hashCode() == e2.hashCode() ). Eine Menge ( Set ) hat die besondere Eigenschaft, dass sie keine Doppelungen enth\u00e4lt. Wird versucht, ein Element einer Menge hinzuzuf\u00fcgen, welches bereits in der Menge enthalten ist, dann wird das Element nicht hinzugef\u00fcgt. Deshalb gibt die add(element) -Methode f\u00fcr eine Menge ein boolean zur\u00fcck, damit erkannt werden kann, ob das Element hinzugef\u00fcgt wurde ( true ) oder nicht ( false ). Eine Map kann man sich wie eine Tablle aus zwei Spalten vorstellen. In der linken Spalte stehen Schl\u00fcssel key und in der rechten die Werte value . Jedem Schl\u00fcssel ist genau ein Wert zugeordnet. Jeder Schl\u00fcssel ist eindeutig, d.h. es gibt keine Doppelungen unter den Schl\u00fcsseln (die Schl\u00fcssel in einer Map sind eine Set ). Werte k\u00f6nnen allerdings doppelt vorkommen (haben aber jeweils einen eigenen Schl\u00fcssel). Eine kurze Entscheidungshilfe, welche Collection verwendet wird, zeigt die folgende Abbildung:","title":"Arten von Collections"},{"location":"collections/#der-collection-klassenbaum","text":"Leider ist die Verwaltung von Collections in Java nicht einheitlich. Das liegt daran, dass (unverst\u00e4ndlicherweise) Listen und Mengen in einer anderen Vererbungshierarchie verwaltet werden, als Maps. Wir schauen uns die Vererbungshierarchie von Collection einaml an. Darin kommen die Listen und Mengen vor, aber nicht Maps. Die \"Mutter-Klasse\" der Collections List und Set ist Collection . In der Abbildung fallen unterschiedliche Farben auf. Die gr\u00fcngef\u00e4rbten Klassen sind sogenannte Interfaces . Interfaces lernen wir sp\u00e4ter noch kennen. Ebenso wie die rotgef\u00e4rbten Klassen, bei denen es sich um abstrakte Klassen handelt. Das soll uns zun\u00e4chst nicht besonders interessieren, aber wir k\u00f6nnen uns merken, dass wir die gr\u00fcngef\u00e4rbten Klassen als Typen verwenden (insb. den Typ List f\u00fcr die Listen und den Typ Set f\u00fcr die Mengen). Wir k\u00f6nnen aber keine konkreten List -Objekte bzw. keine konkreten Set -Objekte erzeugen. Das geht nur mit dem blaugef\u00e4rbten Klassen. Das bedeutet, dass wir z.B. ein konkretes ArrayList -Objekt erzeugen werden oder ein konkretes HashSet -Objekt. Hier einige Beispiele: import java.util.ArrayList ; import java.util.HashSet ; import java.util.LinkedList ; import java.util.List ; import java.util.Set ; import java.util.TreeSet ; public class Collections { public static void main ( String [] args ) { List l1 = new ArrayList (); List l2 = new LinkedList (); Set s1 = new HashSet (); Set s2 = new TreeSet (); } } Beachten Sie, alle Klassen aus dem java.util -Paket zu importieren! Eine Klasse List gibt es z.B. auch im java.awt -Paket! Statt alle Klassen einzeln zu importieren k\u00f6nnen Sie auch schreiben: import java.util.* ; Der * ist eine Wildcard und importiert alle Klassen aus java.util . Zur Diskussion, wann ArrayList besser ist und wann LinkedList , siehe hier . Eine Diskussion \u00fcber die Unterschiede zwischen HashSet und TreeSet finden Sie z.B. hier . Wir werden f\u00fcr Listen haupts\u00e4chlich Objekte von ArrayList erstellen und f\u00fcr Mengen haupts\u00e4chlich Objekte von HashSet .","title":"Der Collection-Klassenbaum"},{"location":"collections/#mengen-sets","text":"Wir betrachten zun\u00e4chst Mengen genauer und beginnen mit einem Beispiel: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import java.util.* ; public class Collections { public static void main ( String [] args ) { Set menge = new HashSet (); String s1 = \"erster\" ; String s2 = \"zweiter\" ; String s3 = \"dritter\" ; String s4 = \"zweiter\" ; System . out . println ( menge . add ( s1 )); // true System . out . println ( menge . add ( s2 )); // true System . out . println ( menge . add ( s3 )); // true System . out . println ( menge . add ( s4 )); // false System . out . println ( menge . size ()); // 3 Iterator it = menge . iterator (); while ( it . hasNext ()) { System . out . println ( it . next ()); } } } In Zeile 1 werden zun\u00e4chst alle verwendeten Klassen aus dem java.util -Paket geladen. Das sind f\u00fcr unser Beispiel Set , HashSet und Iterator . Die Iterator -Klasse wird verwendet, um durch unsere Menge menge zu laufen. Wir werden auf den Iterator gleich genauer eingehen, lernen aber bald eine einfachere L\u00f6sung kennen, um durch unsere Menge zu iterieren. In Zeile 7 wird die Menge menge erzeugt. Wir deklarieren daf\u00fcr den Typ Set und erzeugen unter Verwendung des parameterlosen Konstruktors von HashSet ein HashSet -Objekt. Die menge hat also den Compilertyp Set und mindestens den Laufzeittyp HashSet (nat\u00fcrlich noch weitere Laufzeittypen, z.B. Object ). In den Zeilen 14-17 werden der menge Elemente hinzugef\u00fcgt. Diese Elemente sind hier vom Typ String . Das Hinzuf\u00fcgen von Elementen zu einer Menge erfolgt mit der Methode add(element) . Diese Methode gibt ein boolean zur\u00fcck. Wir lassen in den Zeilen 14-17 diese R\u00fcckgabe auf die Konsole ausgeben und stellen fest, dass wir folgende Ausgaben erhalten: true true true false Die add() -Methode gibt also 3x ein true zur\u00fcck und beim vierten Aufruf ein false . Das liegt daran, dass beim vierten Aufruf von add() (Zeile 17 ) das \u00fcbergebene Element s4 nicht in die Menge menge eingef\u00fcgt wird, da sich in dieser Menge bereits ein String mit dem Wert \"zweiter\" befindet und eine Menge keine Doppelungen enthalten darf. Da s2.equals(s4) den Wert true zur\u00fcckgibt, erkennt die add() -Methode, dass bereits ein gleiches Objekt in der Menge enthalten ist und s4 wird deshalb nicht eingef\u00fcgt. In Zeile 19 lassen wir uns die Anzahl der Elemente in der Menge menge ausgeben. Dies erfolgt mithilfe der size() -Methode (in Collections ist es also nicht length() , auch nicht length und auch nicht getLength() oder getSize() , sondern size() ). Der Wert von size() in unserem Beispiel ist 3 .","title":"Mengen - Sets"},{"location":"collections/#der-iterator","text":"Mithilfe der Klasse Iterator iterieren wir durch eine Collection, d.h. wir laufen durch unsere Collection und betrachten alle Elemente aus der Collection. Die Klasse Iterator besitzt drei Objektmethoden (eigentlich vier, aber die vierte Methode soll uns zun\u00e4chst nicht interessieren): hasNext() : liefert ein true zur\u00fcck, wenn sich mindestens ein weiteres Element in der Collection befindet; wenn nicht, dann false , next() : liefert das n\u00e4chste Element aus der Iteration zur\u00fcck (und entfernt es daraus), remove() : l\u00f6scht das mit next() zur\u00fcckgegebene Element. In Zeile 21 erzeugen wir zun\u00e4chst mit der iterator() -Methode aus Set ein Objekt von Iterator . Die Referenz auf dieses Objekt nennen wir hier it . Die while() -Schleife in den Zeilen 22-25 durchl\u00e4uft nun diese Iteration, indem sie mithilfe von hasNext() pr\u00fcft, ob sich noch ein weiteres Element in der Iteration befindet und wenn ja, dann wird es mithilfe von next() aus der Iteration entnommen und in Zeile 24 auf die Konsole ausgegeben. Wir erhalten f\u00fcr unser Beispiel folgende Ausgaben: zweiter dritter erster Darin sehen wir auch, dass die Reihenfolge des Einf\u00fcgens in eine Menge nicht gewahrt wird. Wir haben die Elemente in der Reihenfolge \"erster\" , \"zweiter\" , \"dritter\" in die Menge eingef\u00fcgt, aber die Ausgabe erfolgt in der Reihenfolge \"zweiter\" , \"dritter\" , \"erster\" . Auf die Reihenfolge haben wir in Mengen keinen Einfluss!","title":"Der Iterator"},{"location":"collections/#methoden-fur-mengen","text":"Wir haben bereits drei Methoden f\u00fcr Mengen kennengelernt: add() , size() und iterator() . Tats\u00e4chlich sind das Methoden, die in allen Klassen zur Verf\u00fcgung stehen, die von java.util.Collection erben ( erben ist hier eigentlich nicht ganz richtig, da es sich bei java.util.Collection um ein Interface handelt, aber das soll uns hier zun\u00e4chst egal sein). Wir betrachten nun alle wesentlichen Methoden, die wir f\u00fcr Mengen und Listen zur Verf\u00fcgung haben (siehe dazu auch die Java-Dokumentation von Collection ): Methode Beschreibung boolean add(E element) F\u00fcgt Element element in die Collection ein. Gibt true zur\u00fcck, wenn Element hinzugef\u00fcgt wurde sonst false . boolean addAll(Collection c) F\u00fcgt alle Elemente der Collection c in die Collection ein. Gibt true zur\u00fcck, wenn mindestens ein Element hinzugef\u00fcgt wurde sonst false . void clear() Entfernt alle Elemente aus der Collection. boolean contains(E element) Gibt true zur\u00fcck, wenn sich element in der Collection befindet, sonst false . boolean containsAll(Collection c) Gibt true zur\u00fcck, wenn sich alle Elemente der Collection c in der Collection befinden, sonst false . boolean isEmpty() Gibt true zur\u00fcck, wenn sich keine Elemente in der Collection befinden, sonst false . Iterator iterator() Erzeugt einen Iterator, welcher auf das erste Element der Collection zeigt. boolean remove(Object o) Entfernt o aus der Collection und gibt true zur\u00fcck, wenn ein Element entfernt wurde, sonst false . boolean removeAll(Collection c) Entfernt alle Elemente aus c aus der Collection und gibt true zur\u00fcck, wenn mindestens ein Element entfernt wurde, sonst false . int size() Gibt die Anzahl der Elemente in der Collection zur\u00fcck. Object[] toArray() Gibt die Elemente in der Collection in einem Array-Datentyp zur\u00fcck. Der TyP E in der Tabelle ist ein Platzhalter f\u00fcr einen konkreten Typ. Bei dem Iterator sehen wir eine neue Syntax <E> . Diese lernen wir gleich kennen. E steht, wie gesagt, f\u00fcr einen beliebigen Typ. Die Typisierung wollen wir zun\u00e4chst motivieren.","title":"Methoden f\u00fcr Mengen"},{"location":"collections/#typisieren","text":"Generell k\u00f6nnen in Collections Objekte verschiedener Typen gespeichert werden. Es w\u00e4re also m\u00f6glich, so etwas hier zu tun: Set menge = new HashSet (); menge . add ( new String ( \"erster\" )); // String einf\u00fcgen menge . add ( new Power ( 2 , 4 )); // Power einf\u00fcgen menge . add ( new Point ( 2 , 3 )); // Point einf\u00fcgen menge . add ( new Konto ()); // Konto einf\u00fcgen Das Speichern von Objekten verschiedenen Typs ist jedoch sehr fehleranf\u00e4llig und sollte unbedingt vermieden werden! Es gibt auch nicht wirklich sinnvollen Anwendungsbeispiele daf\u00fcr. Stattdessen wollen wir angeben, welcher Typ die Objekte haben sollen, die in unserer Collection gespeichert werden k\u00f6nnen. Dazu typisieren wir die Collection. Das Typisieren einer Collection erfolgt mithilfe der Diamond -Syntax: Collection<Typ> name = new KonkreteKlasse<>(); Wir typisieren die Menge menge aus dem eben gezeigten Beispiel: Set < String > menge = new HashSet <> (); // mit String typisiert - menge nimmt nur Strings auf menge . add ( new String ( \"erster\" )); // String einf\u00fcgen menge . add ( new Power ( 2 , 4 )); // Fehler - kein String menge . add ( new Point ( 2 , 3 )); // Fehler - kein String menge . add ( new Konto ()); // Fehler - kein String Wir haben menge typisiert und angegeben, dass menge nur Objekte vonm Typ String aufnehmen kann. Dazu geben wir bei der Typdeklaration Set<String> den Elemente-Typ in spitzen Klammern an. Diese spitzen Klammern werden auch in den Konstruktoraufruf eingef\u00fcgt new HashSet<>(); . Darin muss der Typ aber nicht wiederholt werden (der ist ja aus der Deklaration klar). Der Versuch, Objekte eines anderen Typs als String in die Collection einzuf\u00fcgen, scheitert bereits zur Compilezeit, d.h. das Programm l\u00e4sst sich gar nicht \u00fcbersetzen, wenn versucht wird, Objekte anderen Typs als der bei der Typisierung Angegebene einzuf\u00fcgen. Unser einf\u00fchrendes Beispiel von oben ist deshalb besser mit Typisierung: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 import java.util.* ; public class Collections { public static void main ( String [] args ) { Set < String > menge = new HashSet <> (); String s1 = \"erster\" ; String s2 = \"zweiter\" ; String s3 = \"dritter\" ; String s4 = \"zweiter\" ; System . out . println ( menge . add ( s1 )); // true System . out . println ( menge . add ( s2 )); // true System . out . println ( menge . add ( s3 )); // true System . out . println ( menge . add ( s4 )); // false System . out . println ( menge . size ()); // 3 Iterator < String > it = menge . iterator (); while ( it . hasNext ()) { System . out . println ( it . next ()); } } } Beachten Sie, dass auch der Iterator (Zeile 21 ) typisiert wird.","title":"Typisieren"},{"location":"collections/#die-for-each-schleife","text":"Wenn wir unsere Collection typisieren, haben wir auch eine einfachere M\u00f6glichkeit, durch diese zu laufen als die Verwednung des Iterators. Wir k\u00f6nnen stattdessen die for-each -Schleife verwenden. Die allgemeine Syntaxh einer solchen Schleife ist: for ( TypElement element : collection ) { } F\u00fcr unser Beispiel k\u00f6nnten wir den Iterator ersetzen durch diese Schleife: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import java.util.* ; public class Collections { public static void main ( String [] args ) { Set < String > menge = new HashSet <> (); String s1 = \"erster\" ; String s2 = \"zweiter\" ; String s3 = \"dritter\" ; String s4 = \"zweiter\" ; System . out . println ( menge . add ( s1 )); // true System . out . println ( menge . add ( s2 )); // true System . out . println ( menge . add ( s3 )); // true System . out . println ( menge . add ( s4 )); // false System . out . println ( menge . size ()); // 3 for ( String s : menge ) { System . out . println ( s ); } } } \u00dcbrigens: anstelle der Collection (hier: menge ) k\u00f6nnte auch ein Array stehen. Wenn Sie also vollst\u00e4ndig durch Array laufen m\u00f6chten, m\u00fcssen Sie das nicht zwingend \u00fcber alle Indizes machen, sondern k\u00f6nnen daf\u00fcr auch diese for-each -Schleife verwenden. \u00dcbung Ersetzen Sie im oberen Beispiel HashSet durch TreeSet . Erkennen Sie einen Unterschied?","title":"Die for-each-Schleife"},{"location":"collections/#listen","text":"Der Umgang mit Listen ist \u00e4hnlich dem Umgang mit Mengen, da beide von java.util.Collection abgeleitet sind. Deshalb stehen uns f\u00fcr Listen die gleichen Methoden zur Verf\u00fcgung, wie f\u00fcr Mengen. Listen k\u00f6nnen wir uns eher wie Arrays vorstellen. In Listen gibt es, im Unterschied zu Mengen, index-basierte Zugriffe und auch Doppelungen. Wir betrachten ein Beispiel: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 import java.util.* ; public class Collections { static void fillList ( List < String > list ) { for ( int i = 0 ; i < 10 ; i ++ ) { list . add ( String . valueOf ( i )); } } static void printList ( List < String > list ) { Iterator < String > it = list . iterator (); while ( it . hasNext ()) { System . out . print ( it . next () + \" \" ); } System . out . println (); System . out . println ( \"End of list\" ); } public static void main ( String [] args ) { List < String > list1 = new ArrayList <> (); fillList ( list1 ); printList ( list1 ); List < String > list2 = new LinkedList <> (); fillList ( list2 ); list2 . remove ( \"3\" ); // Wert! list2 . remove ( 6 ); // Index! list1 . removeAll ( list2 ); printList ( list2 ); // 0 1 2 4 5 6 8 9 printList ( list1 ); // 3 7 } } Wir erstellen uns zwei Listen list1 (Zeile 26 ) und list2 (Zeile 30 ). Beide sind vom Compilertyp List und beide sind typisiert mit String , d.h. sie k\u00f6nnen nur Strings aufnehmen. Die Methode fillList() (Zeilen 5-11 ) bef\u00fcllt die \u00fcbergebene Liste mit den Ziffern 0...9 . Da die Liste Strings erwartet, werden die int -Ziffern mithilfe von String.valueOf() in einen String umgewandelt (Zeile 9 ). Die add() -Methode f\u00fcgt die Strings hinzu (Zeile 9 ). Die Methode printList() (Zeilen 13-33 ) gibt die Elemente der \u00fcbergebenen Liste mithilfe des Iterators aus. Es wird jede Ziffer ausgegeben, gefolgt von einem Leerzeichen (Zeile 18 ). Der Aufruf von printList(list1); in Zeile 28 f\u00fchrt zu folgender Ausgabe: 0 1 2 3 4 5 6 7 8 9 End of list Die Liste list2 wird zun\u00e4chst ebenfalls mit den Ziffern 0...9 (jeweils als String ) bef\u00fcllt. Die Anweisung list2.remove(\"3\"); in Zeile 32 bewirkt, dass der Wert \"3\" aus der Liste gel\u00f6scht wird. Nach diesem L\u00f6schen enth\u00e4lt die Liste list2 noch folgende Werte: \"0\" \"1\" \"2\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\" In Zeile 33 wird nun das Element aus der Liste gel\u00f6scht, das unter dem Index 6 gespeichert ist. Das ist das Element \"7\" . Nach dem L\u00f6schen des Elementes enth\u00e4lt die Liste list2 noch folgende Werte: \"0\" \"1\" \"2\" \"4\" \"5\" \"6\" \"8\" \"9\" Die Anweisung list1.removeAll(list2); in Zeile 34 bewirkt nun, dass aus list1 alle Werte gel\u00f6scht werden, die (auch) in list2 enthalten sind, also \"0\" \"1\" \"2\" \"4\" \"5\" \"6\" \"8\" \"9\" . Das bewirkt, dass in list1 dann nur noch die Werte \"3\" \"7\" \u00fcbrig bleiben. Die Anweisung printList(list2); in Zeile 35 bewirkt folgende Ausgabe: 0 1 2 4 5 6 8 9 End of list Die Anweisung printList(list1); in Zeile 36 bewirkt folgende Ausgabe: 3 7 End of list Die Methode printList() h\u00e4tte anstelle den Iterator zu verwenden auch mit der for-each -Schleife implementiert werden k\u00f6nnen: 13 14 15 16 17 18 19 20 21 static void printList ( List < String > list ) { for ( String s : list ) { System . out . print ( s + \" \" ); } System . out . println (); System . out . println ( \"End of list\" ); } \u00dcbung Gegeben ist folgender Code: Set < Integer > s1 = new HashSet <> (); Set < Integer > s2 = new HashSet <> (); for ( int i = 10 ; i >= 1 ; i -- ) { s1 . add ( i ); } for ( int i = 9 ; i <= 12 ; i ++ ) { s2 . add ( i ); } s1 . addAll ( s2 ); Was ist der R\u00fcckgabewert von s1.addAll(s2); und warum? Implementieren Sie die Ausgabe aller Werte von s1 und s2 .","title":"Listen"},{"location":"collections/#mengenoperationen","text":"Angenommen, wir haben drei Mengen A , B und C , wobei alle Elemente aus C auch Elemente in A sind. Mithilfe der Methoden addAll() , removeAll() , retainAll() und containsAll() lassen sich Operationen \u00fcber Mengen beschreiben, wie die folgende Abbildung zeigt:","title":"Mengenoperationen"},{"location":"collections/#stack-und-queue","text":"Wir werden uns, wie bereits erw\u00e4hnt, nicht ausf\u00fcrhlich mit Stack und Queue besch\u00e4ftigen, wollen aber hier der Vollst\u00e4ndigkeit halber, die gesonderten Methoden angeben, die diese beiden Arten von Collections betreffen:","title":"Stack und Queue"},{"location":"collections/#stack","text":"Last-In-First-Out-Prinzip push(E element) zum Hinzuf\u00fcgen pop() entfernt oberstes Element und gibt es zur\u00fcck empty() pr\u00fcft, ob der Stack leer ist","title":"Stack"},{"location":"collections/#queue","text":"First-In-First-Out-Prinzip add()/offer() zum Hinzuf\u00fcgen remove()/poll() entfernt vorderstes Element und gibt es zur\u00fcck element()/peek() pr\u00fcft, ob die Warteschlange leer ist","title":"Queue"},{"location":"collections/#wertetypen-in-collections","text":"Wertetypen k\u00f6nnen nicht als Typen der Elemente in Collections verwendet werden. Es sind nur Referenztypen in Collections erlaubt. F\u00fcr alle Wertetypen stehen entsprechende Wrapper -Klassen zur Verf\u00fcgung: Integer , Double , Float , Short , Byte , Long , Character , Boolean : 1 2 3 4 5 6 7 8 // Wertetypen k\u00f6nnen nicht als konkrete // Typen in Collections verwendet werden List < int > l = new ArrayList <> (); // Fehler !! // Verwendung der Wrapper-Klassen + Auto-Boxing List < Integer > l = new ArrayList <> (); l . add ( 100 ); // sogenanntes Auto-Boxing Das obere beispiel zeigt in Zeile 3 , wie es nicht geht. Die List l kann nicht mit int typisiert werden. Stattdessen muss die Wrapper -Klasse Integer verwendet werden. Wir betrachten Wrapper -Klassen im n\u00e4chsten Abschnitt.","title":"Wertetypen in Collections"},{"location":"enum/","text":"Aufz\u00e4hlungstypen (enum) \u00b6 Motivation \u00b6 Angenommen, Sie wollen mithilfe einer Variablen eine festgelegte Menge an Zust\u00e4nden beschreiben, z.B. String Tag = \"MONTAG\" // kann auch Werte \"Dienstag\" usw. annehmen int Tag = 0 ; // Magic Number f\u00fcr \"Montag\" Das Problem: - die Variablen k\u00f6nnen auch beliebige andere Werte (aus dem jeweiligen Wertebereich) annehmen, z.B. Tag = \"hallo\" oder Tag=4711 , - Magic Numbers sollen vermieden werden \u2192 meistens schlechte Lesbarkeit Beispiel TicTacToe public class TicTacToe { int [][] field ; TicTacToe () { field = new int [ 3 ][ 3 ] ; for ( int i = 0 ; i < field . length ; i ++ ) for ( int j = 0 ; j < field [ i ] . length ; j ++ ) field [ i ][ j ]= 0 ; } void makeMove ( int i , int j , int player ) { if ( field [ i ][ j ]== 0 && player == 1 || player == 2 ) field [ i ][ j ]= player ; } } Zust\u00e4nde EMPTY ( 0 ), RED ( 1 ), BLACK ( 2 ) verschl\u00fcsselt \u2192 magic numbers field[i][j] k\u00f6nnte auch beliebige andere int -Werte annehmen Code nahezu unlesbar Erster Verbesserungsversuch: Konstanten \u00b6 Beispiel TicTacToe mit Konstanten public class TicTacToe { int [][] field ; static final int EMPTY = 0 ; static final int RED = 1 ; static final int BLACK = 2 ; TicTacToe () { field = new int [ 3 ][ 3 ] ; for ( int i = 0 ; i < field . length ; i ++ ) for ( int j = 0 ; j < field [ i ] . length ; j ++ ) field [ i ][ j ]= EMPTY ; } void makeMove ( int i , int j , int player ) { if ( field [ i ][ j ]== EMPTY && player == RED || player == BLACK ) field [ i ][ j ]= player ; } } etwas besser, aber immer noch beliebige Werte f\u00fcr field[i][j] m\u00f6glich Der Aufz\u00e4hlungstyp enum \u00b6 Anforderungen: eigener Datentyp endliche Anzahl an Zust\u00e4nden bzw. Werten leserliche Bezeichnung der Werte L\u00f6sung: - Enumerations (sog. Aufz\u00e4hlungstypen) - Schl\u00fcsselwort enum Syntax: enum TypName { WERT1 , WERT2 , WERT3 }; Verwendung: - TypName nun als Datentyp verwendbar, z.B. TypName[][] - Zugriff auf Werte \u00fcber statische Punktschreibweise, z.B. TypName.WERT1 Beispiel TicTacToe mit enum 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class TicTacToe { enum State { EMPTY , RED , BLACK }; State [][] field ; TicTacToe () { field = new State [ 3 ][ 3 ] ; for ( int i = 0 ; i < field . length ; i ++ ) for ( int j = 0 ; j < field [ i ] . length ; j ++ ) field [ i ][ j ]= State . EMPTY ; } void makeMove ( int i , int j , State player ) { if ( field [ i ][ j ]== State . EMPTY && player != State . EMPTY ) field [ i ][ j ]= player ; } } typsicher rot und schwarz \u00fcber State.RED und State.BLACK erreichbar andere Zust\u00e4nde nicht m\u00f6glich Details: \u00b6 alle enum erben implizit von java.lang.Enum enum sind Referenztypen die Konstanten (Werte) in enum sind automatisch static und final == kann verwendet werden (auch switch() ); equals() gibt es aber auch Beispiel enum 1 2 3 4 5 6 7 8 State s = State . EMPTY ; // s = 0 oder s = \"rot\" oder so geht nicht //-> typsicher switch ( s ) { case EMPTY : System . out . println ( \"leeres Feld\" ); break ; case RED : System . out . println ( \"roter Stein\" ); break ; case BLACK : System . out . println ( \"schwarzer Stein Feld\" ); break ; } Weiteres: \u00b6 auch Definition von Methoden m\u00f6glich toString() , equals() usw. aus Object k\u00f6nnen \u00fcberschrieben werden Konstanten k\u00f6nnen mit Attributen versehen werden (dann noch privater Konstruktor notwendig) Zugriff auf das Array von Konstanten mithilfe von values() Beispiel f\u00fcr Werte mit Attributen enum Farben { KREUZ ( 12 ), PIK ( 11 ), HERZ ( 10 ), KARO ( 9 ); private int farbwert ; private Farben ( int wert ) { this . farbwert = wert ; } @Override public String toString () { char c = ' ' ; switch ( this ) { case KREUZ : c = '\\u2663' ; break ; case PIK : c = '\\u2664' ; break ; case HERZ : c = '\\u2665' ; break ; case KARO : c = '\\u2666' ; break ; } return String . valueOf ( c ); } } noch ein Beispiel f\u00fcr Werte mit Attributen enum Karten { AS ( 11 ), ZEHN ( 10 ), NEUN ( 0 ), ACHT ( 0 ), SIEBEN ( 0 ), K ( 4 ), D ( 3 ), B ( 2 ); private int kartenwert ; private Karten ( int wert ) { this . kartenwert = wert ; } @Override public String toString () { String s = \"\" ; switch ( this ) { case AS : s = \"A\" ; break ; case ZEHN : s = \"10\" ; break ; case NEUN : s = \"9\" ; break ; case ACHT : s = \"8\" ; break ; case SIEBEN : s = \"7\" ; break ; case K : s = \"K\" ; break ; case D : s = \"D\" ; break ; case B : s = \"B\" ; break ; } return s ; } } Ausf\u00fchrliches Beispiel - Skat.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 package vorbereitungen.enums ; import java.util.Arrays ; import java.util.Random ; public class Skat { Karte [] p1 ; Karte [] p2 ; Karte [] p3 ; Karte [] skat ; enum Karten { AS ( 11 ), ZEHN ( 10 ), NEUN ( 0 ), ACHT ( 0 ), SIEBEN ( 0 ), K ( 4 ), D ( 3 ), B ( 2 ); private int kartenwert ; private Karten ( int wert ) { this . kartenwert = wert ; } @Override public String toString () { String s = \"\" ; switch ( this ) { case AS : s = \"A\" ; break ; case ZEHN : s = \"10\" ; break ; case NEUN : s = \"9\" ; break ; case ACHT : s = \"8\" ; break ; case SIEBEN : s = \"7\" ; break ; case K : s = \"K\" ; break ; case D : s = \"D\" ; break ; case B : s = \"B\" ; break ; } return s ; } } enum Farben { KREUZ ( 12 ), PIK ( 11 ), HERZ ( 10 ), KARO ( 9 ); private int farbwert ; private Farben ( int wert ) { this . farbwert = wert ; } @Override public String toString () { char c = ' ' ; switch ( this ) { case KREUZ : c = '\\u2663' ; break ; case PIK : c = '\\u2664' ; break ; case HERZ : c = '\\u2665' ; break ; case KARO : c = '\\u2666' ; break ; } return String . valueOf ( c ); } } class Karte { Karten k ; Farben f ; Karte ( Karten k , Farben f ) { this . k = k ; this . f = f ; } @Override public Karte clone () { return new Karte ( this . k , this . f ); } @Override public String toString () { return f . toString () + k . toString () + \" \" ; } } class Deck { Karte [] deck ; Deck () { deck = new Karte [ 32 ] ; int index = 0 ; for ( Farben f : Farben . values ()) { for ( Karten k : Karten . values ()) { deck [ index ++] = new Karte ( k , f ); } } } @Override public String toString () { String s = \"\" ; for ( int i = 0 ; i < deck . length ; i ++ ) { s += deck [ i ] . f . toString () + deck [ i ] . k . toString () + \" \" ; if ( i == 7 || i == 15 || i == 23 || i == 31 ) s += \"\\n\" ; } return s ; } public void print () { System . out . println ( this . toString ()); } } Skat () { p1 = new Karte [ 8 ] ; p2 = new Karte [ 8 ] ; p3 = new Karte [ 8 ] ; skat = new Karte [ 2 ] ; } boolean existsFalse ( boolean [] b ) { for ( int i = 0 ; i < b . length ; i ++ ) { if ( ! b [ i ] ) return true ; } return false ; } public void geben () { Deck d = new Deck (); Random r = new Random (); boolean [] b = new boolean [ 32 ] ; Arrays . fill ( b , false ); int indexP1 = 0 , indexP2 = 0 , indexP3 = 0 , indexSkat = 0 ; int zz = r . nextInt ( 32 ); while ( existsFalse ( b )) { while ( b [ zz ] ) { zz = r . nextInt ( 32 ); } b [ zz ] = true ; if ( indexP1 < 8 ) { p1 [ indexP1 ++] = d . deck [ zz ] . clone (); } else if ( indexP2 < 8 ) { p2 [ indexP2 ++] = d . deck [ zz ] . clone (); } else if ( indexP3 < 8 ) { p3 [ indexP3 ++] = d . deck [ zz ] . clone (); } else if ( indexSkat < 2 ) { skat [ indexSkat ++] = d . deck [ zz ] . clone (); } } } public void sortieren () { } public void print () { System . out . print ( \"Spieler 1 : \" ); for ( Karte k : p1 ) System . out . print ( k . toString () + \" \" ); System . out . println (); System . out . print ( \"Spieler 2 : \" ); for ( Karte k : p2 ) System . out . print ( k . toString () + \" \" ); System . out . println (); System . out . print ( \"Spieler 3 : \" ); for ( Karte k : p3 ) System . out . print ( k . toString () + \" \" ); System . out . println (); System . out . print ( \"Skat : \" ); for ( Karte k : skat ) System . out . print ( k . toString () + \" \" ); System . out . println (); } public static void main ( String [] args ) { Skat s = new Skat (); s . geben (); s . print (); } } N\u00fctzliche Links f\u00fcr enums \u00b6 Oracle Docs W3Schools Java enums - so geht's Enums Java Tutorial - Enums (youtube)","title":"Aufz\u00e4hlungstypen"},{"location":"enum/#aufzahlungstypen-enum","text":"","title":"Aufz\u00e4hlungstypen (enum)"},{"location":"enum/#motivation","text":"Angenommen, Sie wollen mithilfe einer Variablen eine festgelegte Menge an Zust\u00e4nden beschreiben, z.B. String Tag = \"MONTAG\" // kann auch Werte \"Dienstag\" usw. annehmen int Tag = 0 ; // Magic Number f\u00fcr \"Montag\" Das Problem: - die Variablen k\u00f6nnen auch beliebige andere Werte (aus dem jeweiligen Wertebereich) annehmen, z.B. Tag = \"hallo\" oder Tag=4711 , - Magic Numbers sollen vermieden werden \u2192 meistens schlechte Lesbarkeit Beispiel TicTacToe public class TicTacToe { int [][] field ; TicTacToe () { field = new int [ 3 ][ 3 ] ; for ( int i = 0 ; i < field . length ; i ++ ) for ( int j = 0 ; j < field [ i ] . length ; j ++ ) field [ i ][ j ]= 0 ; } void makeMove ( int i , int j , int player ) { if ( field [ i ][ j ]== 0 && player == 1 || player == 2 ) field [ i ][ j ]= player ; } } Zust\u00e4nde EMPTY ( 0 ), RED ( 1 ), BLACK ( 2 ) verschl\u00fcsselt \u2192 magic numbers field[i][j] k\u00f6nnte auch beliebige andere int -Werte annehmen Code nahezu unlesbar","title":"Motivation"},{"location":"enum/#erster-verbesserungsversuch-konstanten","text":"Beispiel TicTacToe mit Konstanten public class TicTacToe { int [][] field ; static final int EMPTY = 0 ; static final int RED = 1 ; static final int BLACK = 2 ; TicTacToe () { field = new int [ 3 ][ 3 ] ; for ( int i = 0 ; i < field . length ; i ++ ) for ( int j = 0 ; j < field [ i ] . length ; j ++ ) field [ i ][ j ]= EMPTY ; } void makeMove ( int i , int j , int player ) { if ( field [ i ][ j ]== EMPTY && player == RED || player == BLACK ) field [ i ][ j ]= player ; } } etwas besser, aber immer noch beliebige Werte f\u00fcr field[i][j] m\u00f6glich","title":"Erster Verbesserungsversuch: Konstanten"},{"location":"enum/#der-aufzahlungstyp-enum","text":"Anforderungen: eigener Datentyp endliche Anzahl an Zust\u00e4nden bzw. Werten leserliche Bezeichnung der Werte L\u00f6sung: - Enumerations (sog. Aufz\u00e4hlungstypen) - Schl\u00fcsselwort enum Syntax: enum TypName { WERT1 , WERT2 , WERT3 }; Verwendung: - TypName nun als Datentyp verwendbar, z.B. TypName[][] - Zugriff auf Werte \u00fcber statische Punktschreibweise, z.B. TypName.WERT1 Beispiel TicTacToe mit enum 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 public class TicTacToe { enum State { EMPTY , RED , BLACK }; State [][] field ; TicTacToe () { field = new State [ 3 ][ 3 ] ; for ( int i = 0 ; i < field . length ; i ++ ) for ( int j = 0 ; j < field [ i ] . length ; j ++ ) field [ i ][ j ]= State . EMPTY ; } void makeMove ( int i , int j , State player ) { if ( field [ i ][ j ]== State . EMPTY && player != State . EMPTY ) field [ i ][ j ]= player ; } } typsicher rot und schwarz \u00fcber State.RED und State.BLACK erreichbar andere Zust\u00e4nde nicht m\u00f6glich","title":"Der Aufz\u00e4hlungstyp enum"},{"location":"enum/#details","text":"alle enum erben implizit von java.lang.Enum enum sind Referenztypen die Konstanten (Werte) in enum sind automatisch static und final == kann verwendet werden (auch switch() ); equals() gibt es aber auch Beispiel enum 1 2 3 4 5 6 7 8 State s = State . EMPTY ; // s = 0 oder s = \"rot\" oder so geht nicht //-> typsicher switch ( s ) { case EMPTY : System . out . println ( \"leeres Feld\" ); break ; case RED : System . out . println ( \"roter Stein\" ); break ; case BLACK : System . out . println ( \"schwarzer Stein Feld\" ); break ; }","title":"Details:"},{"location":"enum/#weiteres","text":"auch Definition von Methoden m\u00f6glich toString() , equals() usw. aus Object k\u00f6nnen \u00fcberschrieben werden Konstanten k\u00f6nnen mit Attributen versehen werden (dann noch privater Konstruktor notwendig) Zugriff auf das Array von Konstanten mithilfe von values() Beispiel f\u00fcr Werte mit Attributen enum Farben { KREUZ ( 12 ), PIK ( 11 ), HERZ ( 10 ), KARO ( 9 ); private int farbwert ; private Farben ( int wert ) { this . farbwert = wert ; } @Override public String toString () { char c = ' ' ; switch ( this ) { case KREUZ : c = '\\u2663' ; break ; case PIK : c = '\\u2664' ; break ; case HERZ : c = '\\u2665' ; break ; case KARO : c = '\\u2666' ; break ; } return String . valueOf ( c ); } } noch ein Beispiel f\u00fcr Werte mit Attributen enum Karten { AS ( 11 ), ZEHN ( 10 ), NEUN ( 0 ), ACHT ( 0 ), SIEBEN ( 0 ), K ( 4 ), D ( 3 ), B ( 2 ); private int kartenwert ; private Karten ( int wert ) { this . kartenwert = wert ; } @Override public String toString () { String s = \"\" ; switch ( this ) { case AS : s = \"A\" ; break ; case ZEHN : s = \"10\" ; break ; case NEUN : s = \"9\" ; break ; case ACHT : s = \"8\" ; break ; case SIEBEN : s = \"7\" ; break ; case K : s = \"K\" ; break ; case D : s = \"D\" ; break ; case B : s = \"B\" ; break ; } return s ; } } Ausf\u00fchrliches Beispiel - Skat.javapackage vorbereitungen.enums ; import java.util.Arrays ; import java.util.Random ; public class Skat { Karte [] p1 ; Karte [] p2 ; Karte [] p3 ; Karte [] skat ; enum Karten { AS ( 11 ), ZEHN ( 10 ), NEUN ( 0 ), ACHT ( 0 ), SIEBEN ( 0 ), K ( 4 ), D ( 3 ), B ( 2 ); private int kartenwert ; private Karten ( int wert ) { this . kartenwert = wert ; } @Override public String toString () { String s = \"\" ; switch ( this ) { case AS : s = \"A\" ; break ; case ZEHN : s = \"10\" ; break ; case NEUN : s = \"9\" ; break ; case ACHT : s = \"8\" ; break ; case SIEBEN : s = \"7\" ; break ; case K : s = \"K\" ; break ; case D : s = \"D\" ; break ; case B : s = \"B\" ; break ; } return s ; } } enum Farben { KREUZ ( 12 ), PIK ( 11 ), HERZ ( 10 ), KARO ( 9 ); private int farbwert ; private Farben ( int wert ) { this . farbwert = wert ; } @Override public String toString () { char c = ' ' ; switch ( this ) { case KREUZ : c = '\\u2663' ; break ; case PIK : c = '\\u2664' ; break ; case HERZ : c = '\\u2665' ; break ; case KARO : c = '\\u2666' ; break ; } return String . valueOf ( c ); } } class Karte { Karten k ; Farben f ; Karte ( Karten k , Farben f ) { this . k = k ; this . f = f ; } @Override public Karte clone () { return new Karte ( this . k , this . f ); } @Override public String toString () { return f . toString () + k . toString () + \" \" ; } } class Deck { Karte [] deck ; Deck () { deck = new Karte [ 32 ] ; int index = 0 ; for ( Farben f : Farben . values ()) { for ( Karten k : Karten . values ()) { deck [ index ++] = new Karte ( k , f ); } } } @Override public String toString () { String s = \"\" ; for ( int i = 0 ; i < deck . length ; i ++ ) { s += deck [ i ] . f . toString () + deck [ i ] . k . toString () + \" \" ; if ( i == 7 || i == 15 || i == 23 || i == 31 ) s += \"\\n\" ; } return s ; } public void print () { System . out . println ( this . toString ()); } } Skat () { p1 = new Karte [ 8 ] ; p2 = new Karte [ 8 ] ; p3 = new Karte [ 8 ] ; skat = new Karte [ 2 ] ; } boolean existsFalse ( boolean [] b ) { for ( int i = 0 ; i < b . length ; i ++ ) { if ( ! b [ i ] ) return true ; } return false ; } public void geben () { Deck d = new Deck (); Random r = new Random (); boolean [] b = new boolean [ 32 ] ; Arrays . fill ( b , false ); int indexP1 = 0 , indexP2 = 0 , indexP3 = 0 , indexSkat = 0 ; int zz = r . nextInt ( 32 ); while ( existsFalse ( b )) { while ( b [ zz ] ) { zz = r . nextInt ( 32 ); } b [ zz ] = true ; if ( indexP1 < 8 ) { p1 [ indexP1 ++] = d . deck [ zz ] . clone (); } else if ( indexP2 < 8 ) { p2 [ indexP2 ++] = d . deck [ zz ] . clone (); } else if ( indexP3 < 8 ) { p3 [ indexP3 ++] = d . deck [ zz ] . clone (); } else if ( indexSkat < 2 ) { skat [ indexSkat ++] = d . deck [ zz ] . clone (); } } } public void sortieren () { } public void print () { System . out . print ( \"Spieler 1 : \" ); for ( Karte k : p1 ) System . out . print ( k . toString () + \" \" ); System . out . println (); System . out . print ( \"Spieler 2 : \" ); for ( Karte k : p2 ) System . out . print ( k . toString () + \" \" ); System . out . println (); System . out . print ( \"Spieler 3 : \" ); for ( Karte k : p3 ) System . out . print ( k . toString () + \" \" ); System . out . println (); System . out . print ( \"Skat : \" ); for ( Karte k : skat ) System . out . print ( k . toString () + \" \" ); System . out . println (); } public static void main ( String [] args ) { Skat s = new Skat (); s . geben (); s . print (); } }","title":"Weiteres:"},{"location":"enum/#nutzliche-links-fur-enums","text":"Oracle Docs W3Schools Java enums - so geht's Enums Java Tutorial - Enums (youtube)","title":"N\u00fctzliche Links f\u00fcr enums"},{"location":"ereignisse/","text":"Ereignisse \u00b6 Im vorangegangenen Kapitel haben wir gelernt, wie wir Grafische Nutzeroberfl\u00e4chen (GUI) erstellen k\u00f6nnen. Nun wollen wir uns anschauen, wie auf Ereignisse reagiert werden kann, die die Nutzerin auf dieser Grafischen Oberfl\u00e4che ausl\u00f6st. Wenn wir beispielsweise in unserem Taschenrechner auf einen Button klicken, dann soll entweder die Ziffer in dem Textfeld oben erscheinen oder es soll die Operation ausgef\u00fchrt werden, auf die wir geklickt haben. In grafischen Nutzeroberfl\u00e4chen gibt es nicht nur Buttons, auf deren Klick-Ereignisse wir reagieren wollen, es gibt auch Eingaben \u00fcber die Tastatur, das Fenster kann mit der Maus bewegt, vergr\u00f6\u00dfert oder verkleinert werden, es k\u00f6nnen Kontextdialoge durch das Dr\u00fccken der rechten Maustaste ge\u00f6ffnet werden usw. Wir lernen hier, welche unterschiedlichen Ereignisse es gibt und wie wir diese behandeln k\u00f6nnen, d.h. wie wir die Reaktion auf diese Ereignisse implementieren. Zun\u00e4chst \u00fcberlegen wir uns, wie es \u00fcberhaupt m\u00f6glich sein kann, dass Ereignisse (also Aktionen der Nutzerin) auf unserer grafischen Oberfl\u00e4che erkannt werden und auf diese Ereignisse entsprechend reagiert werden kann. Man k\u00f6nnte (in einer Schleife) permanent bei der Maus oder der Tastatur anfragen, ob eine Taste gedr\u00fcckt oder ob die Maus bewegt wurde. Das ist aber viel zu imperformant und w\u00fcrde das Programm blockieren. Diese Aufgabe wird n\u00e4mlich von der Laufzeitumgebung automatisch \u00fcbernommen. Im Hintergrund geschieht genau so etwas, aber wir m\u00fcssen uns gar nicht darum k\u00fcmmern. Wenn z.B. eine Maustaste gedr\u00fcckt wird, dann wird im Hintergrund durch die Laufzeitumgebung eine bestimmte Methode aufgerufen ( mouseClicked() ). Woher wissen wir, wie diese Methode hei\u00dft? Die Antwort sind nat\u00fcrlich: Interfaces ! Interfaces f\u00fcr Ereignisse - Listener \u00b6 Die Idee ist die Folgende: Komponenten k\u00f6nnen unterschiedliche Ereignisse empfangen (Button angeklickt, Text eingegeben, Maus bewegt, Fenster geschlossen, ...). Die Anwendung registriert einen sogenannten Listener (ein Listener -Objekt) bei der Komponente f\u00fcr Ereignisse von Interesse. Tritt ein Ereignis, f\u00fcr das man sich beim Listener angemeldet hat, an der Komponente ein, wird eine bestimmte Methode am Listener-Objekt aufgerufen. Alle diese Methoden, die durch die Laufzeitumgebung f\u00fcr bestimmte Ereignisse aufgerufen werden k\u00f6nnen, sind in Interfaces definiert. Es gibt unterschiedliche Interfaces , die man implementieren muss, je nach den Ereignissen, auf die man reagieren m\u00f6chte (Mausereignisse, Tastaturereigniss, Ereignisse am Fenster, ...). Das Vorgehen kann man sich wie in der Abbildung gezeigt vorstellen: Der Listener lauscht permanent auf Ereignisse. Sobald ein Ereignis aufritt, auf das der Listener lauscht, ruft er eine entsprechende Methode auf. Damit wir im Programm auf dieses Ereignis reagieren k\u00f6nnen (die Ereignisbehandlung implementieren), m\u00fcssen wir zwei Dinge tun: uns an dem Listener anmelden, der auf die Ereignisse lauscht, die uns interessieren (die wir behandeln wollen) und die Ereignisbehandlung in der vom Listener aufgerufenen Methode implementieren. Die Methoden, die wir implementieren sind abstrakt in Interfaces festgelegt. Das bedeutet also, dass wir f\u00fcr die Ereignisbehandlung Interfaces implementieren. Erstes Beispiel ActionListener \u00b6 Wir starten mit einem ersten Beispiel. Dazu haben wir uns folgende GUI erstellt: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import java.awt.BorderLayout ; import java.awt.Font ; import javax.swing.* ; public class Ereignisbehandlung extends JFrame { public Ereignisbehandlung () { super (); setTitle ( \"Ereignisbehandlung\" ); setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel mainPanel = init (); this . getContentPane (). add ( mainPanel , BorderLayout . CENTER ); setSize ( 200 , 150 ); setVisible ( true ); } private JPanel init () { JPanel panel = new JPanel (); panel . setLayout ( new BorderLayout ()); JButton oben = new JButton ( \"Klick mich\" ); JLabel unten = new JLabel ( \"0\" ); unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 24 )); unten . setHorizontalAlignment ( JLabel . CENTER ); panel . add ( oben , BorderLayout . NORTH ); panel . add ( unten , BorderLayout . CENTER ); return panel ; } public static void main ( String [] args ) { new Ereignisbehandlung (); } } Die Ausf\u00fchrung des Programms zeigt folgendes kleines Fenster: Es soll nun implementiert werden, dass sich durch einen Klick auf den Button die dargestellte Zahl um 1 erh\u00f6ht. Die Methode, die ausgel\u00f6st wird, wenn ein Button geklickt wird, hei\u00dft actionPerformed() . Diese ist in dem Interface ActionListener implementiert. Wir m\u00fcssen nun also das Interface ActionListener implementieren und uns beim ActionListener anmelden. Das Interface ActionListener implementieren \u00b6 Interfaces implementieren k\u00f6nnen wir bereits - mithilfe von implements : Wir schreiben also: public class Ereignisbehandlung extends JFrame implements ActionListener . Das Interface ActionListener muss aus dem java.awt.event -Paket importiert werden. Wir klicken auf Add unimplemented methods und in der Klasse erscheint die folgende Methode: @Override public void actionPerformed ( ActionEvent e ) { // TODO Auto-generated method stub } Das Interface ActionListener enth\u00e4lt also nur genau eine Methode, die implmentiert werden muss. Dieser Methode wird ein ActionEvent als Parameter \u00fcbergeben. Diese Klasse muss ebenfalls aus dem java.awt.event -Paket importiert werden. Wenn unser Button gedr\u00fcckt wird, dann wird also \"automatisch\" (durch die Laufzeitumgebung) die Methode actionPerformed() aufgerufen. Alles, was passieren soll, wenn der Button geklickt wird, m\u00fcssen wir in dieser Methode implementieren. Wir beginnen mit einer ganz einfachen Implementierung, mit einer simplen Ausgabe auf die Konsole: @Override public void actionPerformed ( ActionEvent e ) { System . out . println ( \"Button gedrueckt!\" ); } Wenn wir nun auf den Button klicken, passiert aber noch nichts, denn wir m\u00fcssen den Button noch am ActionListener anmelden (siehe oben Punkt 2 in der Liste). Am ActionListener anmelden \u00b6 Damit das Klick-Ereignis auf den Button auch so behandelt wird, wie wir das in der actionPerformed() -Methode definiert haben, m\u00fcssen wir diesen Button an den ActionListener anmelden. Dazu existiert f\u00fcr einen JButton (f\u00fcr alle Komponenten JComponent ) die Methode addActionListener(ActionListener l) . Dieser Methode muss nun ein ActionListener -Objekt \u00fcbergeben werden, also ein Objekt, das das Interface ActionListener implementiert hat. Da wir den ActionListener in unserer Fensterklasse implementiert haben, ist das Fenster ein solches Objekt, das den ActionListener implementiert hat. Wir verwenden also this . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 import java.awt.BorderLayout ; import java.awt.Font ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.* ; public class Ereignisbehandlung extends JFrame implements ActionListener { public Ereignisbehandlung () { super (); setTitle ( \"Ereignisbehandlung\" ); setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel mainPanel = init (); this . getContentPane (). add ( mainPanel , BorderLayout . CENTER ); setSize ( 200 , 150 ); setVisible ( true ); } private JPanel init () { JPanel panel = new JPanel (); panel . setLayout ( new BorderLayout ()); JButton oben = new JButton ( \"Klick mich\" ); oben . addActionListener ( this ); JLabel unten = new JLabel ( \"0\" ); unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 24 )); unten . setHorizontalAlignment ( JLabel . CENTER ); panel . add ( oben , BorderLayout . NORTH ); panel . add ( unten , BorderLayout . CENTER ); return panel ; } public static void main ( String [] args ) { new Ereignisbehandlung (); } @Override public void actionPerformed ( ActionEvent e ) { System . out . println ( \"Button gedrueckt!\" ); } } Jedes mal, wenn wir nun auf den Button klicken, wird eine Ausgabe auf der Konsole erzeugt. Nach 5 Klicks also Button gedrueckt! Button gedrueckt! Button gedrueckt! Button gedrueckt! Button gedrueckt! Wir haben das erste Ereignis behandelt, das durch eine Nutzerinnenaktion ausgel\u00f6st wurde - das Klicken eines Buttons! Zugriff auf Komponenten in actionPerformed() \u00b6 Wenn wir nun aber die actionPerformed() -Methode so implementieren wollen, dass sich der Text des JLabel s unten \u00e4ndert, dann stellen wir fest, dass wir in actionPerformed() ja gar keinen Zugriff auf dieses JLabel haben, weil die Referenz darauf nur eine lokale Variable in der init() -Methode ist. Um in allen Methoden der Klasse Ereignisbehandlung Zugriff auf dieses JLabel zu erlangen, m\u00fcssen wir es global deklarieren (als Objektvariable der Klasse Ereignisbehandlung ). Zus\u00e4tzlich erzeugen wir eine weitere Variable, die die Anzahl der bisherigen Klicks mitz\u00e4hlt, um diesen Wert dann im JLabel darzustellen. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 import java.awt.BorderLayout ; import java.awt.Font ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.* ; public class Ereignisbehandlung extends JFrame implements ActionListener { JLabel unten ; Integer anzKlicks = 0 ; public Ereignisbehandlung () { super (); setTitle ( \"Ereignisbehandlung\" ); setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel mainPanel = init (); this . getContentPane (). add ( mainPanel , BorderLayout . CENTER ); setSize ( 200 , 150 ); setVisible ( true ); } private JPanel init () { JPanel panel = new JPanel (); panel . setLayout ( new BorderLayout ()); JButton oben = new JButton ( \"Klick mich\" ); oben . addActionListener ( this ); this . unten = new JLabel ( this . anzKlicks . toString ()); unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 24 )); unten . setHorizontalAlignment ( JLabel . CENTER ); panel . add ( oben , BorderLayout . NORTH ); panel . add ( unten , BorderLayout . CENTER ); return panel ; } public static void main ( String [] args ) { new Ereignisbehandlung (); } @Override public void actionPerformed ( ActionEvent e ) { System . out . println ( \"Button gedrueckt!\" ); this . anzKlicks ++ ; this . unten . setText ( this . anzKlicks . toString ()); } } Nun \u00e4ndert sich mit jedem Button-Klick der angezeigte Wert. Mehrere Buttons - ActionEvent \u00b6 Wir \u00e4ndern unsere GUI, indem wir die init() -Methode \u00e4ndern: 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 private JPanel init () { JPanel panel = new JPanel (); panel . setLayout ( new BorderLayout ()); JPanel oben = new JPanel (); JButton minus = new JButton ( \"-\" ); JButton plus = new JButton ( \"+\" ); oben . add ( minus ); oben . add ( plus ); this . unten = new JLabel ( this . anzKlicks . toString ()); unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 24 )); unten . setHorizontalAlignment ( JLabel . CENTER ); panel . add ( oben , BorderLayout . NORTH ); panel . add ( unten , BorderLayout . CENTER ); return panel ; } Die GUI sieht dadurch nun so aus: Das hei\u00dft, wir haben zwei Buttons und wollen f\u00fcr diese Buttons das Klick-Ereignis unterschiedlich behandeln. Bei Klick auf den - -Button soll der Wert der Zahl dekrementiert werden, bei Klick auf den + -Button inkrementiert. Wir m\u00fcssen nun also innerhalb der actionPerformed() -Methode unterscheiden, welcher Button gedr\u00fcckt wurde, d.h. durch welchen Button das ActionEvent ausgel\u00f6st wurde, welches wir behandeln. Dabei hilft uns das ActionEvent -Objekt, das der actionPerformed(ActionEvent e) -Methode \u00fcbergeben wird. Die Klasse ActionEvent hat einige n\u00fctzliche Methoden. Wir verwenden jetzt zun\u00e4chst eine Methode, die die Klasse ActionEvent von der Klasse EventObject geerbt hat, die getSource() -Methode: 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 @Override public void actionPerformed ( ActionEvent e ) { Object quelle = e . getSource (); if ( quelle instanceof JButton ) { JButton button = ( JButton ) quelle ; if ( button . getText (). equals ( \"+\" )) { this . anzKlicks ++ ; } else if ( button . getText (). equals ( \"-\" )) { this . anzKlicks -- ; } } this . unten . setText ( this . anzKlicks . toString ()); } Die getSource() -Methode von ActionEvent liefert die Komponente (als Object ) zur\u00fcck, die das ActionEvent ausgel\u00f6st hat. Damit wir Objektmethoden (z.B. getText() - Zeilen 55 und 59 ) von JButton verwenden k\u00f6nnen, m\u00fcssen wir dieses Object nach JButton konvertieren (Zeile 54 ). Damit dies gelingt, m\u00fcssen wir zun\u00e4chst pr\u00fcfen, ob es sich bei der ausl\u00f6senden Komponente tats\u00e4chlich um einen JButton handelt. Das erledigen wir hier mit dem instanceof -Operator in Zeile 52 . Mithilfe der getText() -Methoden erfragen wir den Text, der auf den Buttons steht. Wir vergleichen diesen mithilfe der equals() -Methode und k\u00f6nnen somit unterscheiden, ob das ActionEvent durch den + - oder den - -Button ausgel\u00f6st wurde. Wir d\u00fcrfen nicht vergessen , die beiden Buttons an den ActionListener anzumelden: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 import java.awt.BorderLayout ; import java.awt.Font ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.* ; public class Ereignisbehandlung extends JFrame implements ActionListener { JLabel unten ; Integer anzKlicks = 0 ; public Ereignisbehandlung () { super (); setTitle ( \"Ereignisbehandlung\" ); setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel mainPanel = init (); this . getContentPane (). add ( mainPanel , BorderLayout . CENTER ); setSize ( 200 , 150 ); setVisible ( true ); } private JPanel init () { JPanel panel = new JPanel (); panel . setLayout ( new BorderLayout ()); JPanel oben = new JPanel (); JButton minus = new JButton ( \"-\" ); JButton plus = new JButton ( \"+\" ); minus . addActionListener ( this ); plus . addActionListener ( this ); oben . add ( minus ); oben . add ( plus ); this . unten = new JLabel ( this . anzKlicks . toString ()); unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 24 )); unten . setHorizontalAlignment ( JLabel . CENTER ); panel . add ( oben , BorderLayout . NORTH ); panel . add ( unten , BorderLayout . CENTER ); return panel ; } public static void main ( String [] args ) { new Ereignisbehandlung (); } @Override public void actionPerformed ( ActionEvent e ) { Object quelle = e . getSource (); if ( quelle instanceof JButton ) { JButton button = ( JButton ) quelle ; if ( button . getText (). equals ( \"+\" )) { this . anzKlicks ++ ; } else if ( button . getText (). equals ( \"-\" )) { this . anzKlicks -- ; } } this . unten . setText ( this . anzKlicks . toString ()); } } Nun haben wir f\u00fcr die beiden Buttons eine unterschiedliche Ereignisbehandlung realisiert. Im Vorlesungsvideo vom 9.6. nur bis hier. Ab hier machen wir am 16.6. weiter. ActionCommand \u00b6 Die Abfrage des Textes auf den Buttons zur Unterscheidung der Buttons ist nicht clean code . Das hat mehrere Gr\u00fcnde: GUIs werden h\u00e4ufig f\u00fcr mehrere Sprachen zur Verf\u00fcgung gestellt. Je nach Einstellungen in den Konfigurationen kann die \"angezeigte\" Sprache der GUI ver\u00e4ndert werden. Somit w\u00fcrden auch die Buttons ihre Beschriftung \u00e4ndern und man m\u00fcsste in der actionPerformed() -Methode viele Varianten f\u00fcr die Textabfrage hinzuf\u00fcgen. Buttons k\u00f6nnen auch einfach nur Icons enthalten, d.h. gar keinen Text. Der auf Buttons angezeigte Text kann sehr \"kryptisch\" sein, also irgendwelche Sonderzeichen oder Schriftzeichen enthalten. Es kann z.B. auch HTML -Code sein. Das alles macht die Abfrage des Textes und insbesondere den Vergleich kompliziert bis gar unm\u00f6glich. Deshalb sollte man stattdessen besser das ActionCommand abfragen. Das ActionCommand wird mithilfe der setActionCommand(String command) -Methode gesetzt und mithilfe der getActionCommand() -Methode abgefragt. Wenn f\u00fcr einen Button nicht mithilfe der setActionCommand() -Methode ein ActionCommand definiert wurde, dann entspricht das ActionCommand dem Text auf dem Button. Das bedeutet, dass die getActionCommand() -Methode trotzdem verwendet werden k\u00f6nnte. Wir br\u00e4uchten also nur in der actionPerformed() -Methode getText() durch getActionCommand() ersetzen und h\u00e4tten das gleiche Ergebnis: 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 @Override public void actionPerformed ( ActionEvent e ) { Object quelle = e . getSource (); if ( quelle instanceof JButton ) { JButton button = ( JButton ) quelle ; if ( button . getActionCommand (). equals ( \"+\" )) { this . anzKlicks ++ ; } else if ( button . getActionCommand (). equals ( \"-\" )) { this . anzKlicks -- ; } } this . unten . setText ( this . anzKlicks . toString ()); } Wenn wir allerdings eigene (andere) ActionCommands f\u00fcr die Buttons setzen, dann m\u00fcssen wir auch den Vergleich anpassen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 import java.awt.BorderLayout ; import java.awt.Font ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.* ; public class Ereignisbehandlung extends JFrame implements ActionListener { JLabel unten ; Integer anzKlicks = 0 ; public Ereignisbehandlung () { super (); setTitle ( \"Ereignisbehandlung\" ); setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel mainPanel = init (); this . getContentPane (). add ( mainPanel , BorderLayout . CENTER ); setSize ( 200 , 150 ); setVisible ( true ); } private JPanel init () { JPanel panel = new JPanel (); panel . setLayout ( new BorderLayout ()); JPanel oben = new JPanel (); JButton minus = new JButton ( \"-\" ); JButton plus = new JButton ( \"+\" ); minus . setActionCommand ( \"minus\" ); plus . setActionCommand ( \"plus\" ); minus . addActionListener ( this ); plus . addActionListener ( this ); oben . add ( minus ); oben . add ( plus ); this . unten = new JLabel ( this . anzKlicks . toString ()); unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 24 )); unten . setHorizontalAlignment ( JLabel . CENTER ); panel . add ( oben , BorderLayout . NORTH ); panel . add ( unten , BorderLayout . CENTER ); return panel ; } public static void main ( String [] args ) { new Ereignisbehandlung (); } @Override public void actionPerformed ( ActionEvent e ) { Object quelle = e . getSource (); if ( quelle instanceof JButton ) { JButton button = ( JButton ) quelle ; if ( button . getActionCommand (). equals ( \"plus\" )) { this . anzKlicks ++ ; } else if ( button . getActionCommand (). equals ( \"minus\" )) { this . anzKlicks -- ; } } this . unten . setText ( this . anzKlicks . toString ()); } } Success Wir kennen nun das Konzept, das hinter der Behandlung von Ereignissen steckt. Wir melden die Komponente, f\u00fcr die wir eine Ereignisbehandlung f\u00fcr ein Ereignis implementieren wollen, an den entsprechenden Listener an und wir implementieren das zugeh\u00f6rige Interface. Wir haben Buttons erfolgreich an den ActionListener angemeldet und das ActionListener -Interface implementiert. Dieses Interface enth\u00e4lt nur genau eine Methode, actionPerformed() . Wir k\u00f6nnen in dieser Methode auch bereits ermitteln, welche Komponente das ActionEvent ausgel\u00f6st hat, das gerade behandelt wird. Dadurch k\u00f6nnen wir in derselben actionPerformed() -Methode die (unterschiedliche) Ereignisbehandlung f\u00fcr mehrere Buttons implementieren. Damit k\u00f6nnen wir nun schonmal einen funktionsf\u00e4higen Taschenrechner bauen! Der L\u00f6sung f\u00fcr Aufgabe 9 steht nichts mehr im Wege! Innere Klassen \u00b6 Mit der Implementierung des ActionListener hat alles geklappt und funktional ist auch alles in Ordnung, aber so richtig sch\u00f6n ist es nicht - kein clean code . Daf\u00fcr gibt es mehrere Gr\u00fcnde: Unsere Klasse verst\u00f6\u00dft auf jeden Fall gegen das Single Responsibility Principle ( SRP ). Unsere Klasse ist einerseits ein Fenster und andererseits k\u00fcmmern wir uns in der Klasse auch um Funktionalit\u00e4ten. Bei der Erstellung von Anwendungen mit grafischen Nutzeroberfl\u00e4chen hat sich sogar eine Dreiteilung etabliert, das sogenannte Model-View-Controller-Pattern . Darin ist die Darstellung der GUI die View , das Verwalten und Manipulieren der Daten das Model und die Steuerung mittels Nutzeraktionen der Controller . Langfristig streben wir eine solche Dreiteilung ebenfalls an. Wenn wir sehr viele Buttons (und sp\u00e4ter auch noch Textfelder, Men\u00fcs usw.) haben, dann kann die actionPerformed() -Methode schon allein dadurch sehr lang werden, dass wir viele Fallunterscheidungen ben\u00f6tigen, um zu ermitteln, welche Komponente das ActionEvent \u00fcberhaupt ausgel\u00f6st hat. Wenn dann jeweils noch viel Funktionalit\u00e4t hinzukommt, wird die actionPerformed() -Methode viel zu lang. Wir haben bis jetzt nur ein einziges Interface, das ActionListener -Interface, implementiert und dieses enth\u00e4lt auch nur eine einzige Methode. Wenn wir nun auch noch auf Maus-, Mausbewegungs-, Tastatur- und Fenstereignisse reagieren wollen, dann implementieren wir mindestens vier weitere Interfaces, die jeweils bis zu sechs Methoden enthalten. Unsere Klasse w\u00fcrde sehr lang werden. Wir ben\u00f6tigen Ideen, wie wir diese Konflikte aufl\u00f6sen k\u00f6nnen. Dazu ben\u00f6tigen wir neue Strukturierungsm\u00f6glichkeiten. Ein erster Schritt dahin sind Innere Klassen . Wir betrachten Innere Klassen aber nur als einen Zwischenschritt hin zu anonymen Klassen . Wir werden uns ansonsten nicht weiter mit inneren Klassen auseinandersetzen. Begriffsbestimmung \u00b6 Prinzipiell handelt es sich bei inneren Klassen um Klassen in einer Klasse. Der Oberbegriff f\u00fcr eine Klasse in einer Klasse ist nested class . In nested classes unterscheidet man zwischen statischen und nicht-statischen Klassen. Die nicht-statischen nested Klassen (also Klassen, wie wir sie bisher kennen - wir kennen noch gar keine statischen Klassen) hei\u00dfen innere Klassen . Wir wollen uns gar nicht mit statischen verschachtelten Klassen auseinandersetzen. Es sei an dieser Stelle aber der wesentliche Unterschied zwischen den statischen und den nicht-statischen verschachtelten Klassen genannt: nicht-statische Klassen (also innere Klassen) haben Zugriff auf die Eigenschaften der \u00e4u\u00dferen Klasse, statische verschachtelte Klassen haben diesen Zugriff nicht. Wenn wir schon bei Sachen sind, die uns nicht interessieren ;-) : sogenannte lokale Klassen sind Klassen in einer Methode. Innere Klassen sind aber n\u00fctzlich und sinnvoll. Wir kennen auch schon eine, n\u00e4mlich Map.Entry - die Klasse Entry ist eine innere Klasse von Map (ganz exakt handelt es sich bei beiden nicht um Klassen, sondern um Interfaces, das macht hier aber keinen Unterschied). In der Klasse Integer gibt es \u00fcbrigens auch eine innere Klasse. Die fungiert als ein Cache f\u00fcr h\u00e4ufig verwendete Zahlen. Wenn Sie ein Integer -Objekt mit einem Wert kleiner als 128 erstellen, dann kommt dieses Objekt in den Cache und wenn Sie ein weiteres Objekt mit dem gleichen Wert erzeugen, dann wird daf\u00fcr einfach das Objekt aus dem Cache verwendet. Das f\u00fchrt zu diesem \"komischen\" Verhalten: Integer i1 = Integer . valueOf ( 1001 ); Integer i2 = Integer . valueOf ( 1001 ); Integer i3 = Integer . valueOf ( 101 ); Integer i4 = Integer . valueOf ( 101 ); System . out . println ( i1 == i2 ); // false System . out . println ( i3 == i4 ); // true Der erste Vergleich ist false , weil es sich bei i1 und i2 um Referenzen auf zwei verschiedene Objekte handelt. Der zweite Vergleich ist aber true , weil es sich bei i3 und i4 um Referenzen auf dasselbe Objekt (aus dem Cache) handelt. Aber das nur nebenbei, um zu erl\u00e4utern, dass es sinnvolle Verwendungen f\u00fcr innere Klassen gibt. Ereignisbehandlung mit innerer Klasse \u00b6 Wir verwenden unsere Klasse Ereignisbehandlung von oben. Aber wir lagern die eigentliche Behandlung des ActionEvent s in eine innere Klasse aus. Das hei\u00dft, wir trennen die Erstellung der GUI und die Behandlung der Ereignisse strukturell, in dem diese Dinge in zwei unterschiedlichen Klassen implementiert sind. Da es sich aber um die Ereignisbehandlung f\u00fcr genau die erstellte GUI handelt, ergibt es wenig Sinn, diese in eine \"normale\" top-level-Klasse zu \u00fcberf\u00fchren. Deshalb verwenden wir daf\u00fcr eine innere Klasse: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 import java.awt.BorderLayout ; import java.awt.Font ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.* ; public class Ereignisbehandlung extends JFrame { JLabel unten ; Integer anzKlicks = 0 ; public Ereignisbehandlung () { super (); setTitle ( \"Ereignisbehandlung\" ); setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel mainPanel = init (); this . getContentPane (). add ( mainPanel , BorderLayout . CENTER ); setSize ( 200 , 150 ); setVisible ( true ); } private JPanel init () { JPanel panel = new JPanel (); panel . setLayout ( new BorderLayout ()); JPanel oben = new JPanel (); JButton minus = new JButton ( \"-\" ); JButton plus = new JButton ( \"+\" ); minus . setActionCommand ( \"minus\" ); plus . setActionCommand ( \"plus\" ); minus . addActionListener ( new ActionHandler ()); plus . addActionListener ( new ActionHandler ()); oben . add ( minus ); oben . add ( plus ); this . unten = new JLabel ( this . anzKlicks . toString ()); unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 24 )); unten . setHorizontalAlignment ( JLabel . CENTER ); panel . add ( oben , BorderLayout . NORTH ); panel . add ( unten , BorderLayout . CENTER ); return panel ; } public static void main ( String [] args ) { new Ereignisbehandlung (); } class ActionHandler implements ActionListener { @Override public void actionPerformed ( ActionEvent e ) { Object quelle = e . getSource (); if ( quelle instanceof JButton ) { JButton button = ( JButton ) quelle ; if ( button . getActionCommand (). equals ( \"plus\" )) { Ereignisbehandlung . this . anzKlicks ++ ; } else if ( button . getActionCommand (). equals ( \"minus\" )) { Ereignisbehandlung . this . anzKlicks -- ; } } Ereignisbehandlung . this . unten . setText ( Ereignisbehandlung . this . anzKlicks . toString ()); } } } So viel hat sich gar nicht ge\u00e4ndert: Die Klasse Ereignisbehandlung implementiert jetzt nicht mehr selbst das Interface ActionListener (Zeile 8 ). Das hat jetzt die neue (innere) Klasse ActionHandler \u00fcbernommen (Zeile 54 ). Da der ActionListener nun nicht mehr in Ereignisbehandlung implementiert ist, sondern in ActionHandler , muss beim Anmelden an den ActionListener nun nicht mehr das this -Objekt, sondern ein Objekt von ActionHandler \u00fcbergeben werden (Zeilen 34 und 35 ). Da sich die Methode actionPerformed() nun in der Klasse ActionHandler befindet, handelt es sich dort bei der this -referenz um eine Referenz auf ein ActionHandler -Objekt. Wir k\u00f6nnen also nicht mehr einfach this.anzKlicks++; schreiben, da es sich bei anzKlicks ja nicht um eine Eigenschaft der ActionHandler -Klasse, sondern um eine Eigenschaft der Ereignisbehandlung -Klasse handelt. Das Gleiche gilt auch f\u00fcr das JLabel unten (Zeilen 65 , 69 und 72 ). Um auf die Eigenschaften der \u00e4u\u00dferen Klasse zuzugreifen, kann in der inneren Klasse \u00fcber den Klassennamen der \u00e4u\u00dferen Klasse auf die Eigenschaften der \u00e4u\u00dferen Klasse referenziert werden. Das hei\u00dft, wenn die \u00e4u\u00dfere Klasse AeussereKlasse hei\u00dft und eine Eigenschaft eigenschaft_AeK hat, dann kann aus der inneren Klasse heraus wie folgt auf diese Eigenschaft zugegriffen werden: AeussereKlasse.this.eigenschaft_AeK In unserem Fall bedeutet das, dass wir nun \u00fcber Ereignisbehandlung.this.anzKlicks++; und Ereignisbehandlung.this.anzKlicks--; den Wert der Eigenschaft anzKlicks der \u00e4u\u00dferen Klasse Ereignisbehandlung \u00e4ndern k\u00f6nnen (Zeilen 65 und 69 ). Um auf das JPanel unten aus der inneren Eigenschaft zugreifen zu k\u00f6nnen, schreiben wir deshalb Ereignisbehandlung.this.unten (Zeile 72 ). Beachten Sie, dass das this darin notwendig ist. Wenn wir schreiben w\u00fcrden Ereignisbehandlung . anzKlicks ++ ; , dann w\u00fcrde das bedeuten, dass es sich bei anzKlicks um eine statische (Klassen-)Variable handeln w\u00fcrde. Um auf (nicht-statische) Objektvariablen zuzugreifen, verwenden wir in der Klasse ja die Referenz this und um also auf die Objektvariablen der \u00e4u\u00dferen Klasse zuzugreifen, schreiben wir Ereignisbehandlung . this . anzKlicks ++ ; Dasselbe gilt f\u00fcr Methoden. Wir haben nun immerhin die Verantwortlichkeiten zur Erstellung der GUI und zur Behandlung der Ereignisse in zwei verschiedene Klassen aufgeteilt. Das Single Responsibility Principle ist somit erf\u00fcllt. Das ist schonmal gut! Wir haben aber eingangs erw\u00e4hnt, dass wir uns die inneren Klassen nur als ein Zwischenschritt anschauen. Dazu \u00fcberlegen wir uns nochmal Folgendes: Wir haben f\u00fcr die Ereignisbehandlung eine eigene Klasse ActionHandler geschrieben. Um sich an den ActionListener anzumelden, wurde der addActionListener() -Methode daf\u00fcr ein Objekt von ActionHandler \u00fcbergeben (siehe oben die Zeilen 34 und 35 ). Nun machen wir etwas Verr\u00fccktes ;-) : wir \u00fcbergeben der addActionListener() -Methode auch wieder ein Objekt, in dem wir den ActionListener implementiert haben (implementieren), aber diese Implementierung erfolgt nicht in einer separaten Klasse, die einen Namen hat ( ActionHandler ), sondern die Implementierung erfolgt direkt dort, wo das Objekt \u00fcbergeben wird, daf\u00fcr ohne einen Klassennamen - eine anonyme Klasse. Ereignisbehandlung mit anonymer Klasse \u00b6 Jede Komponente, f\u00fcr die auf das ActionEvent reagiert werden soll, muss an den ActionListener mithilfe der addActionListener() -Methode angemeldet werden. Dieser Methode wird ein Objekt \u00fcbergeben, in dem der ActionListener implementiert ist. Wir implementieren jetzt direkt dort, wo wir das Objekt \u00fcbergeben, genau diese Klasse, geben ihr aber keinen Namen. Stattdessen geben wir ActionListener wie einen Konstruktor an, obwohl es sich bei ActionListener um ein Interface handelt, welches erstens keinen Konstruktor besitzt und zweitens von dem gar kein Objekt erzeugt werden kann. Wir schauen uns das am Beispiel des - -Buttons an: 1 2 3 4 5 6 7 8 9 minus . addActionListener ( new ActionListener () { // Objekt einer anonymen Klasse @Override public void actionPerformed ( ActionEvent e ) { Ereignisbehandlung . this . anzKlicks -- ; Ereignisbehandlung . this . unten . setText ( Ereignisbehandlung . this . anzKlicks . toString ()); } }); Wir \u00fcbergeben der addActionListener() -Methode ein Objekt einer anonymen Klasse. Diese anonyme Klasse implementiert das ActionListener -Interface. Zun\u00e4chst gehen wir nochmal einen Schritt zur\u00fcck und schauen uns die Varianten an, die wir davor hatten: minus . addActionListener ( this ); // ActionListener war in der Fenster-Klasse implementiert minus . addActionListener ( new ActionHandler ()); // ActionListener war in der inneren Klasse ActionHandler implementiert Nun implementieren wir das ActionListener -Interface direkt \"vor Ort\" - dort, wo es auch \u00fcbergeben wird. Der Aufruf der addActionListener() -Methode ist \u00fcbrigens noch exakt der gleiche 1 2 3 4 5 6 7 8 9 minus . addActionListener ( ); , nur das \u00fcbergebene Objekt sieht etwas \"komisch\" aus: 1 2 3 4 5 6 7 8 9 new ActionListener () { // Objekt einer anonymen Klasse @Override public void actionPerformed ( ActionEvent e ) { Ereignisbehandlung . this . anzKlicks -- ; Ereignisbehandlung . this . unten . setText ( Ereignisbehandlung . this . anzKlicks . toString ()); } } Wir erkennen aber den Klassenrumpf, der ganz normal mit einer geschweiften Klammer { in Zeile 1 ) beginnt und mit einer schlie\u00dfenden geschweiften Klammer } in Zeile 9 endet. Darin ist, auch ganz normal, die actionPerformed() -Methode implementiert, die ja implementiert werden muss, wenn das ActionListener -Interface implementiert wird. Innerhalb der Methode greifen wir auch, wie bei inneren Klassen \u00fcblich, auf die Objekteigenschaften der \u00e4u\u00dferen Klasse zu. Eigentlich ist nur dieser Ausdruck neu: new ActionListener() { } . Hier m\u00fcssen wir uns einfach merken, dass es sich dabei um drei Sachen hadelt, die zugleich passieren: Es wird das ActionListener -Interface implementiert. Dies geschieht \"ganz normal\" in einem Klassenrumpf, der mit { beginnt und mit } endet. Die Klasse, in der das Interface implemntiert wird, hat aber keinen Namen, deshalb schreiben wir auch nicht Klassenmane implements ActionListener , sondern nur ActionListener . Es wird ein Objekt erzeugt. Dazu wird, ganz normal, das Schl\u00fcsselwort new verwendet und ein Konstruktor - allerdings hier der Konstruktor einer Klasse, die keinen Namen hat. Da diese Klasse aber das ActionListener -Interface implementiert, kann dieser Name f\u00fcr den Konstruktor verwendet werden. Der gro\u00dfe Vorteil dieser Art der Implementierung des ActionListener -Interfaces liegt darin, dass jede Komponente ihre eigene Implementierung bekommt und dass es deshalb nicht notwendig ist, eine Fallunterscheidung zu treffen, welche Komponente das Ereignis ausgel\u00f6st hat. Hier kann es nur der minus -Button gewesen sein! Die beiden Implementierungen des ActionListener s mithilfe einer anonymen Klasse sehen so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 minus . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Ereignisbehandlung . this . anzKlicks -- ; Ereignisbehandlung . this . unten . setText ( Ereignisbehandlung . this . anzKlicks . toString ()); } }); plus . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Ereignisbehandlung . this . anzKlicks ++ ; Ereignisbehandlung . this . unten . setText ( Ereignisbehandlung . this . anzKlicks . toString ()); } }); Den ActionListener mithilfe anonymer Klassen zu implementieren, ist ein Best Practice . In sehr vielen F\u00e4llen gewinnt man an \u00dcbersichtlichkeit. Wir werden im Rest des Semesters immer mal diskutieren, wann die Verwendung anonymer Klassen sinnvoll ist und wann nicht. Manchmal ist es aber auch nur Geschmackssache. F\u00fcr diejenigen, die sich f\u00fcr nested classes interessieren, sei dieser Link empfohlen.","title":"GUI Ereignisse"},{"location":"ereignisse/#ereignisse","text":"Im vorangegangenen Kapitel haben wir gelernt, wie wir Grafische Nutzeroberfl\u00e4chen (GUI) erstellen k\u00f6nnen. Nun wollen wir uns anschauen, wie auf Ereignisse reagiert werden kann, die die Nutzerin auf dieser Grafischen Oberfl\u00e4che ausl\u00f6st. Wenn wir beispielsweise in unserem Taschenrechner auf einen Button klicken, dann soll entweder die Ziffer in dem Textfeld oben erscheinen oder es soll die Operation ausgef\u00fchrt werden, auf die wir geklickt haben. In grafischen Nutzeroberfl\u00e4chen gibt es nicht nur Buttons, auf deren Klick-Ereignisse wir reagieren wollen, es gibt auch Eingaben \u00fcber die Tastatur, das Fenster kann mit der Maus bewegt, vergr\u00f6\u00dfert oder verkleinert werden, es k\u00f6nnen Kontextdialoge durch das Dr\u00fccken der rechten Maustaste ge\u00f6ffnet werden usw. Wir lernen hier, welche unterschiedlichen Ereignisse es gibt und wie wir diese behandeln k\u00f6nnen, d.h. wie wir die Reaktion auf diese Ereignisse implementieren. Zun\u00e4chst \u00fcberlegen wir uns, wie es \u00fcberhaupt m\u00f6glich sein kann, dass Ereignisse (also Aktionen der Nutzerin) auf unserer grafischen Oberfl\u00e4che erkannt werden und auf diese Ereignisse entsprechend reagiert werden kann. Man k\u00f6nnte (in einer Schleife) permanent bei der Maus oder der Tastatur anfragen, ob eine Taste gedr\u00fcckt oder ob die Maus bewegt wurde. Das ist aber viel zu imperformant und w\u00fcrde das Programm blockieren. Diese Aufgabe wird n\u00e4mlich von der Laufzeitumgebung automatisch \u00fcbernommen. Im Hintergrund geschieht genau so etwas, aber wir m\u00fcssen uns gar nicht darum k\u00fcmmern. Wenn z.B. eine Maustaste gedr\u00fcckt wird, dann wird im Hintergrund durch die Laufzeitumgebung eine bestimmte Methode aufgerufen ( mouseClicked() ). Woher wissen wir, wie diese Methode hei\u00dft? Die Antwort sind nat\u00fcrlich: Interfaces !","title":"Ereignisse"},{"location":"ereignisse/#interfaces-fur-ereignisse-listener","text":"Die Idee ist die Folgende: Komponenten k\u00f6nnen unterschiedliche Ereignisse empfangen (Button angeklickt, Text eingegeben, Maus bewegt, Fenster geschlossen, ...). Die Anwendung registriert einen sogenannten Listener (ein Listener -Objekt) bei der Komponente f\u00fcr Ereignisse von Interesse. Tritt ein Ereignis, f\u00fcr das man sich beim Listener angemeldet hat, an der Komponente ein, wird eine bestimmte Methode am Listener-Objekt aufgerufen. Alle diese Methoden, die durch die Laufzeitumgebung f\u00fcr bestimmte Ereignisse aufgerufen werden k\u00f6nnen, sind in Interfaces definiert. Es gibt unterschiedliche Interfaces , die man implementieren muss, je nach den Ereignissen, auf die man reagieren m\u00f6chte (Mausereignisse, Tastaturereigniss, Ereignisse am Fenster, ...). Das Vorgehen kann man sich wie in der Abbildung gezeigt vorstellen: Der Listener lauscht permanent auf Ereignisse. Sobald ein Ereignis aufritt, auf das der Listener lauscht, ruft er eine entsprechende Methode auf. Damit wir im Programm auf dieses Ereignis reagieren k\u00f6nnen (die Ereignisbehandlung implementieren), m\u00fcssen wir zwei Dinge tun: uns an dem Listener anmelden, der auf die Ereignisse lauscht, die uns interessieren (die wir behandeln wollen) und die Ereignisbehandlung in der vom Listener aufgerufenen Methode implementieren. Die Methoden, die wir implementieren sind abstrakt in Interfaces festgelegt. Das bedeutet also, dass wir f\u00fcr die Ereignisbehandlung Interfaces implementieren.","title":"Interfaces f\u00fcr Ereignisse - Listener"},{"location":"ereignisse/#erstes-beispiel-actionlistener","text":"Wir starten mit einem ersten Beispiel. Dazu haben wir uns folgende GUI erstellt: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 import java.awt.BorderLayout ; import java.awt.Font ; import javax.swing.* ; public class Ereignisbehandlung extends JFrame { public Ereignisbehandlung () { super (); setTitle ( \"Ereignisbehandlung\" ); setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel mainPanel = init (); this . getContentPane (). add ( mainPanel , BorderLayout . CENTER ); setSize ( 200 , 150 ); setVisible ( true ); } private JPanel init () { JPanel panel = new JPanel (); panel . setLayout ( new BorderLayout ()); JButton oben = new JButton ( \"Klick mich\" ); JLabel unten = new JLabel ( \"0\" ); unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 24 )); unten . setHorizontalAlignment ( JLabel . CENTER ); panel . add ( oben , BorderLayout . NORTH ); panel . add ( unten , BorderLayout . CENTER ); return panel ; } public static void main ( String [] args ) { new Ereignisbehandlung (); } } Die Ausf\u00fchrung des Programms zeigt folgendes kleines Fenster: Es soll nun implementiert werden, dass sich durch einen Klick auf den Button die dargestellte Zahl um 1 erh\u00f6ht. Die Methode, die ausgel\u00f6st wird, wenn ein Button geklickt wird, hei\u00dft actionPerformed() . Diese ist in dem Interface ActionListener implementiert. Wir m\u00fcssen nun also das Interface ActionListener implementieren und uns beim ActionListener anmelden.","title":"Erstes Beispiel ActionListener"},{"location":"ereignisse/#das-interface-actionlistener-implementieren","text":"Interfaces implementieren k\u00f6nnen wir bereits - mithilfe von implements : Wir schreiben also: public class Ereignisbehandlung extends JFrame implements ActionListener . Das Interface ActionListener muss aus dem java.awt.event -Paket importiert werden. Wir klicken auf Add unimplemented methods und in der Klasse erscheint die folgende Methode: @Override public void actionPerformed ( ActionEvent e ) { // TODO Auto-generated method stub } Das Interface ActionListener enth\u00e4lt also nur genau eine Methode, die implmentiert werden muss. Dieser Methode wird ein ActionEvent als Parameter \u00fcbergeben. Diese Klasse muss ebenfalls aus dem java.awt.event -Paket importiert werden. Wenn unser Button gedr\u00fcckt wird, dann wird also \"automatisch\" (durch die Laufzeitumgebung) die Methode actionPerformed() aufgerufen. Alles, was passieren soll, wenn der Button geklickt wird, m\u00fcssen wir in dieser Methode implementieren. Wir beginnen mit einer ganz einfachen Implementierung, mit einer simplen Ausgabe auf die Konsole: @Override public void actionPerformed ( ActionEvent e ) { System . out . println ( \"Button gedrueckt!\" ); } Wenn wir nun auf den Button klicken, passiert aber noch nichts, denn wir m\u00fcssen den Button noch am ActionListener anmelden (siehe oben Punkt 2 in der Liste).","title":"Das Interface ActionListener implementieren"},{"location":"ereignisse/#am-actionlistener-anmelden","text":"Damit das Klick-Ereignis auf den Button auch so behandelt wird, wie wir das in der actionPerformed() -Methode definiert haben, m\u00fcssen wir diesen Button an den ActionListener anmelden. Dazu existiert f\u00fcr einen JButton (f\u00fcr alle Komponenten JComponent ) die Methode addActionListener(ActionListener l) . Dieser Methode muss nun ein ActionListener -Objekt \u00fcbergeben werden, also ein Objekt, das das Interface ActionListener implementiert hat. Da wir den ActionListener in unserer Fensterklasse implementiert haben, ist das Fenster ein solches Objekt, das den ActionListener implementiert hat. Wir verwenden also this . 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 import java.awt.BorderLayout ; import java.awt.Font ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.* ; public class Ereignisbehandlung extends JFrame implements ActionListener { public Ereignisbehandlung () { super (); setTitle ( \"Ereignisbehandlung\" ); setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel mainPanel = init (); this . getContentPane (). add ( mainPanel , BorderLayout . CENTER ); setSize ( 200 , 150 ); setVisible ( true ); } private JPanel init () { JPanel panel = new JPanel (); panel . setLayout ( new BorderLayout ()); JButton oben = new JButton ( \"Klick mich\" ); oben . addActionListener ( this ); JLabel unten = new JLabel ( \"0\" ); unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 24 )); unten . setHorizontalAlignment ( JLabel . CENTER ); panel . add ( oben , BorderLayout . NORTH ); panel . add ( unten , BorderLayout . CENTER ); return panel ; } public static void main ( String [] args ) { new Ereignisbehandlung (); } @Override public void actionPerformed ( ActionEvent e ) { System . out . println ( \"Button gedrueckt!\" ); } } Jedes mal, wenn wir nun auf den Button klicken, wird eine Ausgabe auf der Konsole erzeugt. Nach 5 Klicks also Button gedrueckt! Button gedrueckt! Button gedrueckt! Button gedrueckt! Button gedrueckt! Wir haben das erste Ereignis behandelt, das durch eine Nutzerinnenaktion ausgel\u00f6st wurde - das Klicken eines Buttons!","title":"Am ActionListener anmelden"},{"location":"ereignisse/#zugriff-auf-komponenten-in-actionperformed","text":"Wenn wir nun aber die actionPerformed() -Methode so implementieren wollen, dass sich der Text des JLabel s unten \u00e4ndert, dann stellen wir fest, dass wir in actionPerformed() ja gar keinen Zugriff auf dieses JLabel haben, weil die Referenz darauf nur eine lokale Variable in der init() -Methode ist. Um in allen Methoden der Klasse Ereignisbehandlung Zugriff auf dieses JLabel zu erlangen, m\u00fcssen wir es global deklarieren (als Objektvariable der Klasse Ereignisbehandlung ). Zus\u00e4tzlich erzeugen wir eine weitere Variable, die die Anzahl der bisherigen Klicks mitz\u00e4hlt, um diesen Wert dann im JLabel darzustellen. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 import java.awt.BorderLayout ; import java.awt.Font ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.* ; public class Ereignisbehandlung extends JFrame implements ActionListener { JLabel unten ; Integer anzKlicks = 0 ; public Ereignisbehandlung () { super (); setTitle ( \"Ereignisbehandlung\" ); setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel mainPanel = init (); this . getContentPane (). add ( mainPanel , BorderLayout . CENTER ); setSize ( 200 , 150 ); setVisible ( true ); } private JPanel init () { JPanel panel = new JPanel (); panel . setLayout ( new BorderLayout ()); JButton oben = new JButton ( \"Klick mich\" ); oben . addActionListener ( this ); this . unten = new JLabel ( this . anzKlicks . toString ()); unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 24 )); unten . setHorizontalAlignment ( JLabel . CENTER ); panel . add ( oben , BorderLayout . NORTH ); panel . add ( unten , BorderLayout . CENTER ); return panel ; } public static void main ( String [] args ) { new Ereignisbehandlung (); } @Override public void actionPerformed ( ActionEvent e ) { System . out . println ( \"Button gedrueckt!\" ); this . anzKlicks ++ ; this . unten . setText ( this . anzKlicks . toString ()); } } Nun \u00e4ndert sich mit jedem Button-Klick der angezeigte Wert.","title":"Zugriff auf Komponenten in actionPerformed()"},{"location":"ereignisse/#mehrere-buttons-actionevent","text":"Wir \u00e4ndern unsere GUI, indem wir die init() -Methode \u00e4ndern: 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 private JPanel init () { JPanel panel = new JPanel (); panel . setLayout ( new BorderLayout ()); JPanel oben = new JPanel (); JButton minus = new JButton ( \"-\" ); JButton plus = new JButton ( \"+\" ); oben . add ( minus ); oben . add ( plus ); this . unten = new JLabel ( this . anzKlicks . toString ()); unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 24 )); unten . setHorizontalAlignment ( JLabel . CENTER ); panel . add ( oben , BorderLayout . NORTH ); panel . add ( unten , BorderLayout . CENTER ); return panel ; } Die GUI sieht dadurch nun so aus: Das hei\u00dft, wir haben zwei Buttons und wollen f\u00fcr diese Buttons das Klick-Ereignis unterschiedlich behandeln. Bei Klick auf den - -Button soll der Wert der Zahl dekrementiert werden, bei Klick auf den + -Button inkrementiert. Wir m\u00fcssen nun also innerhalb der actionPerformed() -Methode unterscheiden, welcher Button gedr\u00fcckt wurde, d.h. durch welchen Button das ActionEvent ausgel\u00f6st wurde, welches wir behandeln. Dabei hilft uns das ActionEvent -Objekt, das der actionPerformed(ActionEvent e) -Methode \u00fcbergeben wird. Die Klasse ActionEvent hat einige n\u00fctzliche Methoden. Wir verwenden jetzt zun\u00e4chst eine Methode, die die Klasse ActionEvent von der Klasse EventObject geerbt hat, die getSource() -Methode: 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 @Override public void actionPerformed ( ActionEvent e ) { Object quelle = e . getSource (); if ( quelle instanceof JButton ) { JButton button = ( JButton ) quelle ; if ( button . getText (). equals ( \"+\" )) { this . anzKlicks ++ ; } else if ( button . getText (). equals ( \"-\" )) { this . anzKlicks -- ; } } this . unten . setText ( this . anzKlicks . toString ()); } Die getSource() -Methode von ActionEvent liefert die Komponente (als Object ) zur\u00fcck, die das ActionEvent ausgel\u00f6st hat. Damit wir Objektmethoden (z.B. getText() - Zeilen 55 und 59 ) von JButton verwenden k\u00f6nnen, m\u00fcssen wir dieses Object nach JButton konvertieren (Zeile 54 ). Damit dies gelingt, m\u00fcssen wir zun\u00e4chst pr\u00fcfen, ob es sich bei der ausl\u00f6senden Komponente tats\u00e4chlich um einen JButton handelt. Das erledigen wir hier mit dem instanceof -Operator in Zeile 52 . Mithilfe der getText() -Methoden erfragen wir den Text, der auf den Buttons steht. Wir vergleichen diesen mithilfe der equals() -Methode und k\u00f6nnen somit unterscheiden, ob das ActionEvent durch den + - oder den - -Button ausgel\u00f6st wurde. Wir d\u00fcrfen nicht vergessen , die beiden Buttons an den ActionListener anzumelden: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 import java.awt.BorderLayout ; import java.awt.Font ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.* ; public class Ereignisbehandlung extends JFrame implements ActionListener { JLabel unten ; Integer anzKlicks = 0 ; public Ereignisbehandlung () { super (); setTitle ( \"Ereignisbehandlung\" ); setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel mainPanel = init (); this . getContentPane (). add ( mainPanel , BorderLayout . CENTER ); setSize ( 200 , 150 ); setVisible ( true ); } private JPanel init () { JPanel panel = new JPanel (); panel . setLayout ( new BorderLayout ()); JPanel oben = new JPanel (); JButton minus = new JButton ( \"-\" ); JButton plus = new JButton ( \"+\" ); minus . addActionListener ( this ); plus . addActionListener ( this ); oben . add ( minus ); oben . add ( plus ); this . unten = new JLabel ( this . anzKlicks . toString ()); unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 24 )); unten . setHorizontalAlignment ( JLabel . CENTER ); panel . add ( oben , BorderLayout . NORTH ); panel . add ( unten , BorderLayout . CENTER ); return panel ; } public static void main ( String [] args ) { new Ereignisbehandlung (); } @Override public void actionPerformed ( ActionEvent e ) { Object quelle = e . getSource (); if ( quelle instanceof JButton ) { JButton button = ( JButton ) quelle ; if ( button . getText (). equals ( \"+\" )) { this . anzKlicks ++ ; } else if ( button . getText (). equals ( \"-\" )) { this . anzKlicks -- ; } } this . unten . setText ( this . anzKlicks . toString ()); } } Nun haben wir f\u00fcr die beiden Buttons eine unterschiedliche Ereignisbehandlung realisiert. Im Vorlesungsvideo vom 9.6. nur bis hier. Ab hier machen wir am 16.6. weiter.","title":"Mehrere Buttons - ActionEvent"},{"location":"ereignisse/#actioncommand","text":"Die Abfrage des Textes auf den Buttons zur Unterscheidung der Buttons ist nicht clean code . Das hat mehrere Gr\u00fcnde: GUIs werden h\u00e4ufig f\u00fcr mehrere Sprachen zur Verf\u00fcgung gestellt. Je nach Einstellungen in den Konfigurationen kann die \"angezeigte\" Sprache der GUI ver\u00e4ndert werden. Somit w\u00fcrden auch die Buttons ihre Beschriftung \u00e4ndern und man m\u00fcsste in der actionPerformed() -Methode viele Varianten f\u00fcr die Textabfrage hinzuf\u00fcgen. Buttons k\u00f6nnen auch einfach nur Icons enthalten, d.h. gar keinen Text. Der auf Buttons angezeigte Text kann sehr \"kryptisch\" sein, also irgendwelche Sonderzeichen oder Schriftzeichen enthalten. Es kann z.B. auch HTML -Code sein. Das alles macht die Abfrage des Textes und insbesondere den Vergleich kompliziert bis gar unm\u00f6glich. Deshalb sollte man stattdessen besser das ActionCommand abfragen. Das ActionCommand wird mithilfe der setActionCommand(String command) -Methode gesetzt und mithilfe der getActionCommand() -Methode abgefragt. Wenn f\u00fcr einen Button nicht mithilfe der setActionCommand() -Methode ein ActionCommand definiert wurde, dann entspricht das ActionCommand dem Text auf dem Button. Das bedeutet, dass die getActionCommand() -Methode trotzdem verwendet werden k\u00f6nnte. Wir br\u00e4uchten also nur in der actionPerformed() -Methode getText() durch getActionCommand() ersetzen und h\u00e4tten das gleiche Ergebnis: 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 @Override public void actionPerformed ( ActionEvent e ) { Object quelle = e . getSource (); if ( quelle instanceof JButton ) { JButton button = ( JButton ) quelle ; if ( button . getActionCommand (). equals ( \"+\" )) { this . anzKlicks ++ ; } else if ( button . getActionCommand (). equals ( \"-\" )) { this . anzKlicks -- ; } } this . unten . setText ( this . anzKlicks . toString ()); } Wenn wir allerdings eigene (andere) ActionCommands f\u00fcr die Buttons setzen, dann m\u00fcssen wir auch den Vergleich anpassen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 import java.awt.BorderLayout ; import java.awt.Font ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.* ; public class Ereignisbehandlung extends JFrame implements ActionListener { JLabel unten ; Integer anzKlicks = 0 ; public Ereignisbehandlung () { super (); setTitle ( \"Ereignisbehandlung\" ); setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel mainPanel = init (); this . getContentPane (). add ( mainPanel , BorderLayout . CENTER ); setSize ( 200 , 150 ); setVisible ( true ); } private JPanel init () { JPanel panel = new JPanel (); panel . setLayout ( new BorderLayout ()); JPanel oben = new JPanel (); JButton minus = new JButton ( \"-\" ); JButton plus = new JButton ( \"+\" ); minus . setActionCommand ( \"minus\" ); plus . setActionCommand ( \"plus\" ); minus . addActionListener ( this ); plus . addActionListener ( this ); oben . add ( minus ); oben . add ( plus ); this . unten = new JLabel ( this . anzKlicks . toString ()); unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 24 )); unten . setHorizontalAlignment ( JLabel . CENTER ); panel . add ( oben , BorderLayout . NORTH ); panel . add ( unten , BorderLayout . CENTER ); return panel ; } public static void main ( String [] args ) { new Ereignisbehandlung (); } @Override public void actionPerformed ( ActionEvent e ) { Object quelle = e . getSource (); if ( quelle instanceof JButton ) { JButton button = ( JButton ) quelle ; if ( button . getActionCommand (). equals ( \"plus\" )) { this . anzKlicks ++ ; } else if ( button . getActionCommand (). equals ( \"minus\" )) { this . anzKlicks -- ; } } this . unten . setText ( this . anzKlicks . toString ()); } } Success Wir kennen nun das Konzept, das hinter der Behandlung von Ereignissen steckt. Wir melden die Komponente, f\u00fcr die wir eine Ereignisbehandlung f\u00fcr ein Ereignis implementieren wollen, an den entsprechenden Listener an und wir implementieren das zugeh\u00f6rige Interface. Wir haben Buttons erfolgreich an den ActionListener angemeldet und das ActionListener -Interface implementiert. Dieses Interface enth\u00e4lt nur genau eine Methode, actionPerformed() . Wir k\u00f6nnen in dieser Methode auch bereits ermitteln, welche Komponente das ActionEvent ausgel\u00f6st hat, das gerade behandelt wird. Dadurch k\u00f6nnen wir in derselben actionPerformed() -Methode die (unterschiedliche) Ereignisbehandlung f\u00fcr mehrere Buttons implementieren. Damit k\u00f6nnen wir nun schonmal einen funktionsf\u00e4higen Taschenrechner bauen! Der L\u00f6sung f\u00fcr Aufgabe 9 steht nichts mehr im Wege!","title":"ActionCommand"},{"location":"ereignisse/#innere-klassen","text":"Mit der Implementierung des ActionListener hat alles geklappt und funktional ist auch alles in Ordnung, aber so richtig sch\u00f6n ist es nicht - kein clean code . Daf\u00fcr gibt es mehrere Gr\u00fcnde: Unsere Klasse verst\u00f6\u00dft auf jeden Fall gegen das Single Responsibility Principle ( SRP ). Unsere Klasse ist einerseits ein Fenster und andererseits k\u00fcmmern wir uns in der Klasse auch um Funktionalit\u00e4ten. Bei der Erstellung von Anwendungen mit grafischen Nutzeroberfl\u00e4chen hat sich sogar eine Dreiteilung etabliert, das sogenannte Model-View-Controller-Pattern . Darin ist die Darstellung der GUI die View , das Verwalten und Manipulieren der Daten das Model und die Steuerung mittels Nutzeraktionen der Controller . Langfristig streben wir eine solche Dreiteilung ebenfalls an. Wenn wir sehr viele Buttons (und sp\u00e4ter auch noch Textfelder, Men\u00fcs usw.) haben, dann kann die actionPerformed() -Methode schon allein dadurch sehr lang werden, dass wir viele Fallunterscheidungen ben\u00f6tigen, um zu ermitteln, welche Komponente das ActionEvent \u00fcberhaupt ausgel\u00f6st hat. Wenn dann jeweils noch viel Funktionalit\u00e4t hinzukommt, wird die actionPerformed() -Methode viel zu lang. Wir haben bis jetzt nur ein einziges Interface, das ActionListener -Interface, implementiert und dieses enth\u00e4lt auch nur eine einzige Methode. Wenn wir nun auch noch auf Maus-, Mausbewegungs-, Tastatur- und Fenstereignisse reagieren wollen, dann implementieren wir mindestens vier weitere Interfaces, die jeweils bis zu sechs Methoden enthalten. Unsere Klasse w\u00fcrde sehr lang werden. Wir ben\u00f6tigen Ideen, wie wir diese Konflikte aufl\u00f6sen k\u00f6nnen. Dazu ben\u00f6tigen wir neue Strukturierungsm\u00f6glichkeiten. Ein erster Schritt dahin sind Innere Klassen . Wir betrachten Innere Klassen aber nur als einen Zwischenschritt hin zu anonymen Klassen . Wir werden uns ansonsten nicht weiter mit inneren Klassen auseinandersetzen.","title":"Innere Klassen"},{"location":"ereignisse/#begriffsbestimmung","text":"Prinzipiell handelt es sich bei inneren Klassen um Klassen in einer Klasse. Der Oberbegriff f\u00fcr eine Klasse in einer Klasse ist nested class . In nested classes unterscheidet man zwischen statischen und nicht-statischen Klassen. Die nicht-statischen nested Klassen (also Klassen, wie wir sie bisher kennen - wir kennen noch gar keine statischen Klassen) hei\u00dfen innere Klassen . Wir wollen uns gar nicht mit statischen verschachtelten Klassen auseinandersetzen. Es sei an dieser Stelle aber der wesentliche Unterschied zwischen den statischen und den nicht-statischen verschachtelten Klassen genannt: nicht-statische Klassen (also innere Klassen) haben Zugriff auf die Eigenschaften der \u00e4u\u00dferen Klasse, statische verschachtelte Klassen haben diesen Zugriff nicht. Wenn wir schon bei Sachen sind, die uns nicht interessieren ;-) : sogenannte lokale Klassen sind Klassen in einer Methode. Innere Klassen sind aber n\u00fctzlich und sinnvoll. Wir kennen auch schon eine, n\u00e4mlich Map.Entry - die Klasse Entry ist eine innere Klasse von Map (ganz exakt handelt es sich bei beiden nicht um Klassen, sondern um Interfaces, das macht hier aber keinen Unterschied). In der Klasse Integer gibt es \u00fcbrigens auch eine innere Klasse. Die fungiert als ein Cache f\u00fcr h\u00e4ufig verwendete Zahlen. Wenn Sie ein Integer -Objekt mit einem Wert kleiner als 128 erstellen, dann kommt dieses Objekt in den Cache und wenn Sie ein weiteres Objekt mit dem gleichen Wert erzeugen, dann wird daf\u00fcr einfach das Objekt aus dem Cache verwendet. Das f\u00fchrt zu diesem \"komischen\" Verhalten: Integer i1 = Integer . valueOf ( 1001 ); Integer i2 = Integer . valueOf ( 1001 ); Integer i3 = Integer . valueOf ( 101 ); Integer i4 = Integer . valueOf ( 101 ); System . out . println ( i1 == i2 ); // false System . out . println ( i3 == i4 ); // true Der erste Vergleich ist false , weil es sich bei i1 und i2 um Referenzen auf zwei verschiedene Objekte handelt. Der zweite Vergleich ist aber true , weil es sich bei i3 und i4 um Referenzen auf dasselbe Objekt (aus dem Cache) handelt. Aber das nur nebenbei, um zu erl\u00e4utern, dass es sinnvolle Verwendungen f\u00fcr innere Klassen gibt.","title":"Begriffsbestimmung"},{"location":"ereignisse/#ereignisbehandlung-mit-innerer-klasse","text":"Wir verwenden unsere Klasse Ereignisbehandlung von oben. Aber wir lagern die eigentliche Behandlung des ActionEvent s in eine innere Klasse aus. Das hei\u00dft, wir trennen die Erstellung der GUI und die Behandlung der Ereignisse strukturell, in dem diese Dinge in zwei unterschiedlichen Klassen implementiert sind. Da es sich aber um die Ereignisbehandlung f\u00fcr genau die erstellte GUI handelt, ergibt es wenig Sinn, diese in eine \"normale\" top-level-Klasse zu \u00fcberf\u00fchren. Deshalb verwenden wir daf\u00fcr eine innere Klasse: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 import java.awt.BorderLayout ; import java.awt.Font ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.* ; public class Ereignisbehandlung extends JFrame { JLabel unten ; Integer anzKlicks = 0 ; public Ereignisbehandlung () { super (); setTitle ( \"Ereignisbehandlung\" ); setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel mainPanel = init (); this . getContentPane (). add ( mainPanel , BorderLayout . CENTER ); setSize ( 200 , 150 ); setVisible ( true ); } private JPanel init () { JPanel panel = new JPanel (); panel . setLayout ( new BorderLayout ()); JPanel oben = new JPanel (); JButton minus = new JButton ( \"-\" ); JButton plus = new JButton ( \"+\" ); minus . setActionCommand ( \"minus\" ); plus . setActionCommand ( \"plus\" ); minus . addActionListener ( new ActionHandler ()); plus . addActionListener ( new ActionHandler ()); oben . add ( minus ); oben . add ( plus ); this . unten = new JLabel ( this . anzKlicks . toString ()); unten . setFont ( new Font ( \"Verdana\" , Font . BOLD , 24 )); unten . setHorizontalAlignment ( JLabel . CENTER ); panel . add ( oben , BorderLayout . NORTH ); panel . add ( unten , BorderLayout . CENTER ); return panel ; } public static void main ( String [] args ) { new Ereignisbehandlung (); } class ActionHandler implements ActionListener { @Override public void actionPerformed ( ActionEvent e ) { Object quelle = e . getSource (); if ( quelle instanceof JButton ) { JButton button = ( JButton ) quelle ; if ( button . getActionCommand (). equals ( \"plus\" )) { Ereignisbehandlung . this . anzKlicks ++ ; } else if ( button . getActionCommand (). equals ( \"minus\" )) { Ereignisbehandlung . this . anzKlicks -- ; } } Ereignisbehandlung . this . unten . setText ( Ereignisbehandlung . this . anzKlicks . toString ()); } } } So viel hat sich gar nicht ge\u00e4ndert: Die Klasse Ereignisbehandlung implementiert jetzt nicht mehr selbst das Interface ActionListener (Zeile 8 ). Das hat jetzt die neue (innere) Klasse ActionHandler \u00fcbernommen (Zeile 54 ). Da der ActionListener nun nicht mehr in Ereignisbehandlung implementiert ist, sondern in ActionHandler , muss beim Anmelden an den ActionListener nun nicht mehr das this -Objekt, sondern ein Objekt von ActionHandler \u00fcbergeben werden (Zeilen 34 und 35 ). Da sich die Methode actionPerformed() nun in der Klasse ActionHandler befindet, handelt es sich dort bei der this -referenz um eine Referenz auf ein ActionHandler -Objekt. Wir k\u00f6nnen also nicht mehr einfach this.anzKlicks++; schreiben, da es sich bei anzKlicks ja nicht um eine Eigenschaft der ActionHandler -Klasse, sondern um eine Eigenschaft der Ereignisbehandlung -Klasse handelt. Das Gleiche gilt auch f\u00fcr das JLabel unten (Zeilen 65 , 69 und 72 ). Um auf die Eigenschaften der \u00e4u\u00dferen Klasse zuzugreifen, kann in der inneren Klasse \u00fcber den Klassennamen der \u00e4u\u00dferen Klasse auf die Eigenschaften der \u00e4u\u00dferen Klasse referenziert werden. Das hei\u00dft, wenn die \u00e4u\u00dfere Klasse AeussereKlasse hei\u00dft und eine Eigenschaft eigenschaft_AeK hat, dann kann aus der inneren Klasse heraus wie folgt auf diese Eigenschaft zugegriffen werden: AeussereKlasse.this.eigenschaft_AeK In unserem Fall bedeutet das, dass wir nun \u00fcber Ereignisbehandlung.this.anzKlicks++; und Ereignisbehandlung.this.anzKlicks--; den Wert der Eigenschaft anzKlicks der \u00e4u\u00dferen Klasse Ereignisbehandlung \u00e4ndern k\u00f6nnen (Zeilen 65 und 69 ). Um auf das JPanel unten aus der inneren Eigenschaft zugreifen zu k\u00f6nnen, schreiben wir deshalb Ereignisbehandlung.this.unten (Zeile 72 ). Beachten Sie, dass das this darin notwendig ist. Wenn wir schreiben w\u00fcrden Ereignisbehandlung . anzKlicks ++ ; , dann w\u00fcrde das bedeuten, dass es sich bei anzKlicks um eine statische (Klassen-)Variable handeln w\u00fcrde. Um auf (nicht-statische) Objektvariablen zuzugreifen, verwenden wir in der Klasse ja die Referenz this und um also auf die Objektvariablen der \u00e4u\u00dferen Klasse zuzugreifen, schreiben wir Ereignisbehandlung . this . anzKlicks ++ ; Dasselbe gilt f\u00fcr Methoden. Wir haben nun immerhin die Verantwortlichkeiten zur Erstellung der GUI und zur Behandlung der Ereignisse in zwei verschiedene Klassen aufgeteilt. Das Single Responsibility Principle ist somit erf\u00fcllt. Das ist schonmal gut! Wir haben aber eingangs erw\u00e4hnt, dass wir uns die inneren Klassen nur als ein Zwischenschritt anschauen. Dazu \u00fcberlegen wir uns nochmal Folgendes: Wir haben f\u00fcr die Ereignisbehandlung eine eigene Klasse ActionHandler geschrieben. Um sich an den ActionListener anzumelden, wurde der addActionListener() -Methode daf\u00fcr ein Objekt von ActionHandler \u00fcbergeben (siehe oben die Zeilen 34 und 35 ). Nun machen wir etwas Verr\u00fccktes ;-) : wir \u00fcbergeben der addActionListener() -Methode auch wieder ein Objekt, in dem wir den ActionListener implementiert haben (implementieren), aber diese Implementierung erfolgt nicht in einer separaten Klasse, die einen Namen hat ( ActionHandler ), sondern die Implementierung erfolgt direkt dort, wo das Objekt \u00fcbergeben wird, daf\u00fcr ohne einen Klassennamen - eine anonyme Klasse.","title":"Ereignisbehandlung mit innerer Klasse"},{"location":"ereignisse/#ereignisbehandlung-mit-anonymer-klasse","text":"Jede Komponente, f\u00fcr die auf das ActionEvent reagiert werden soll, muss an den ActionListener mithilfe der addActionListener() -Methode angemeldet werden. Dieser Methode wird ein Objekt \u00fcbergeben, in dem der ActionListener implementiert ist. Wir implementieren jetzt direkt dort, wo wir das Objekt \u00fcbergeben, genau diese Klasse, geben ihr aber keinen Namen. Stattdessen geben wir ActionListener wie einen Konstruktor an, obwohl es sich bei ActionListener um ein Interface handelt, welches erstens keinen Konstruktor besitzt und zweitens von dem gar kein Objekt erzeugt werden kann. Wir schauen uns das am Beispiel des - -Buttons an: 1 2 3 4 5 6 7 8 9 minus . addActionListener ( new ActionListener () { // Objekt einer anonymen Klasse @Override public void actionPerformed ( ActionEvent e ) { Ereignisbehandlung . this . anzKlicks -- ; Ereignisbehandlung . this . unten . setText ( Ereignisbehandlung . this . anzKlicks . toString ()); } }); Wir \u00fcbergeben der addActionListener() -Methode ein Objekt einer anonymen Klasse. Diese anonyme Klasse implementiert das ActionListener -Interface. Zun\u00e4chst gehen wir nochmal einen Schritt zur\u00fcck und schauen uns die Varianten an, die wir davor hatten: minus . addActionListener ( this ); // ActionListener war in der Fenster-Klasse implementiert minus . addActionListener ( new ActionHandler ()); // ActionListener war in der inneren Klasse ActionHandler implementiert Nun implementieren wir das ActionListener -Interface direkt \"vor Ort\" - dort, wo es auch \u00fcbergeben wird. Der Aufruf der addActionListener() -Methode ist \u00fcbrigens noch exakt der gleiche 1 2 3 4 5 6 7 8 9 minus . addActionListener ( ); , nur das \u00fcbergebene Objekt sieht etwas \"komisch\" aus: 1 2 3 4 5 6 7 8 9 new ActionListener () { // Objekt einer anonymen Klasse @Override public void actionPerformed ( ActionEvent e ) { Ereignisbehandlung . this . anzKlicks -- ; Ereignisbehandlung . this . unten . setText ( Ereignisbehandlung . this . anzKlicks . toString ()); } } Wir erkennen aber den Klassenrumpf, der ganz normal mit einer geschweiften Klammer { in Zeile 1 ) beginnt und mit einer schlie\u00dfenden geschweiften Klammer } in Zeile 9 endet. Darin ist, auch ganz normal, die actionPerformed() -Methode implementiert, die ja implementiert werden muss, wenn das ActionListener -Interface implementiert wird. Innerhalb der Methode greifen wir auch, wie bei inneren Klassen \u00fcblich, auf die Objekteigenschaften der \u00e4u\u00dferen Klasse zu. Eigentlich ist nur dieser Ausdruck neu: new ActionListener() { } . Hier m\u00fcssen wir uns einfach merken, dass es sich dabei um drei Sachen hadelt, die zugleich passieren: Es wird das ActionListener -Interface implementiert. Dies geschieht \"ganz normal\" in einem Klassenrumpf, der mit { beginnt und mit } endet. Die Klasse, in der das Interface implemntiert wird, hat aber keinen Namen, deshalb schreiben wir auch nicht Klassenmane implements ActionListener , sondern nur ActionListener . Es wird ein Objekt erzeugt. Dazu wird, ganz normal, das Schl\u00fcsselwort new verwendet und ein Konstruktor - allerdings hier der Konstruktor einer Klasse, die keinen Namen hat. Da diese Klasse aber das ActionListener -Interface implementiert, kann dieser Name f\u00fcr den Konstruktor verwendet werden. Der gro\u00dfe Vorteil dieser Art der Implementierung des ActionListener -Interfaces liegt darin, dass jede Komponente ihre eigene Implementierung bekommt und dass es deshalb nicht notwendig ist, eine Fallunterscheidung zu treffen, welche Komponente das Ereignis ausgel\u00f6st hat. Hier kann es nur der minus -Button gewesen sein! Die beiden Implementierungen des ActionListener s mithilfe einer anonymen Klasse sehen so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 minus . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Ereignisbehandlung . this . anzKlicks -- ; Ereignisbehandlung . this . unten . setText ( Ereignisbehandlung . this . anzKlicks . toString ()); } }); plus . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Ereignisbehandlung . this . anzKlicks ++ ; Ereignisbehandlung . this . unten . setText ( Ereignisbehandlung . this . anzKlicks . toString ()); } }); Den ActionListener mithilfe anonymer Klassen zu implementieren, ist ein Best Practice . In sehr vielen F\u00e4llen gewinnt man an \u00dcbersichtlichkeit. Wir werden im Rest des Semesters immer mal diskutieren, wann die Verwendung anonymer Klassen sinnvoll ist und wann nicht. Manchmal ist es aber auch nur Geschmackssache. F\u00fcr diejenigen, die sich f\u00fcr nested classes interessieren, sei dieser Link empfohlen.","title":"Ereignisbehandlung mit anonymer Klasse"},{"location":"exceptions/","text":"Exceptions \u00b6 Exceptions kennen wir schon, denn sie passieren uns h\u00e4ufiger. Wenn wir z.B. auf einen Index in einem Array zugreifen, dieser Index aber gar nicht existiert, wird eine ArrayIndexOutOfBounds -Exception geworfen. Wenn wir auf eine Objekteigenschaft zugreifen wollen, z.B. eine Objektmethode, die daf\u00fcr verwendete Referenzvariable aber gar nicht auf ein Objekt zeigt, sondern auf null , erhalten wir eine NullPointerException . Wenn bei einer Nutzereingabe eine Zahl erwartet, um damit weiterrechnen zu k\u00f6nnen, die Nutzerin gibt aber etwas anderes als eine Zahl ein, dann wird ebenfalls ein Exception geworfen . Wir wollen aber gar nicht, dass das Programm in solchen F\u00e4llen abst\u00fcrzt, sondern wir wollen diesen \u201eFehler\u201c erkennen und darauf reagieren. Grunds\u00e4tzlich gibt es also zwei Arten von Fehlern: syntaktische Fehler \u2192 k\u00f6nnen vom Compiler vor der Laufzeit erkannt werden; das programm wird gar nicht erst vollst\u00e4ndig compiliert und nicht ausgef\u00fchrt und logische Fehler \u2192 k\u00f6nnen erst zur Laufzeit erkannt werden. Im Falle der logischen Fehler, die erst zur Laufzeit auftreten, spricht man von Laufzeitfehlern (oder Ausnahmen oder Exceptions ). Die Aufgabe beim Programmieren ist nun, zu identifizieren, an welchen Stellen ein logischer Fehler auftreten k\u00f6nnte , z.B. fehlerhafte Benutzereingabe Datenbank- oder Netzwerkverbindung nicht verf\u00fcgbar gesuchte Datei/Ordner nicht vorhanden usw. Die Stellen, an denen ein solcher logischer Fehler auftreten k\u00f6nnte, nennen wir im Folgenden kritischer Abschnitt . Wir m\u00fcssen solche kritischen Abschnitte in unserem Quellcode identifizieren und haben dann die M\u00f6glichkeit, solche kritischen Abschnitte so zu implementieren, dass die Exception, die eventuell geworfen wird, abgefangen wird und das Programm dadurch nicht abst\u00fcrzt. try-catch \u00b6 Die grunds\u00e4tzliche Idee ist die, dass wir zun\u00e4chst versuchen den kritischen Abschnitt einfach auszuf\u00fchren. Wir versuchen z.B. einfach mit einem index auf das Array zuzugreifen, auch wenn wir gar nicht wissen, ob dies ein tats\u00e4chlicher index aus dem Array ist. Allerdings binden wir diesen Versuch in einen try{} -Block ein. Sollte in einem solchen try{} -Block nun eine Exception geworfen werden, dann fangen wir diese in einem catch(){} -Block auf und behandeln sie dort. Die allgemeine Syntax daf\u00fcr sieht so aus: allgemeine Syntax try-catch 1 2 3 4 5 6 7 8 try { // Anweisung(en), die evtl. Fehler verursachen (kritischer Abschnitt) } catch ( Exception e ) { // Behandlung der Exception } Es passiert Folgendes: wir f\u00fchren die Anweisung(en) in Zeile 3 aus. Wenn diese keine Exception wirft, also alles okay ist, dann machen wir einfach hinter dem catch -Block, also nach Zeile 8 weiter. Wenn aber die Anweisung(en) in Zeile 3 einen Laufzeitfehler verursachen, also eine Exception werfen, dann wird diese in Zeile 5 \"aufgefangen\" und in dem Anweisungsblock in den Zeilen 6-8 behandelt. Das Programm st\u00fcrzt nun nicht mehr ab, sondern wir haben die M\u00f6glichkeit, auf die Exception zu reagieren. Beispiel ohne try-catch \u00b6 Wir verdeutlichen dieses Prinzip an einem ersten Beispiel: Beispiel zun\u00e4chst ohne Behandlung der Exceptions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Ausnahmen { static char charAt ( String s , int index ) { char c = s . charAt ( index ); // kritisch! return c ; } static double divide ( int divident , int divisor ) { double result = divident / divisor ; // kritisch! return result ; } public static void main ( String [] args ) { System . out . println ( divide ( 5 , 0 )); // ArithmeticException System . out . println ( charAt ( \"Hallo\" , 5 )); // StringIndexOutOfBoundsException } } Das Beispiel enth\u00e4lt zwei Methoden charAt() und divide . Der charAt -Methode wird ein String \u00fcbergeben und ein index . Die Methode gibt das Zeichen ( char ) zur\u00fcck, dass im String unter dem index gespeichert ist (z.B. charAt(\"Hallo\", 1) gibt das 'a' zur\u00fcck). Es wird jedoch gar nicht gepr\u00fcft, ob index tats\u00e4chlich ein korrekter Index des Strings s ist, d.h. evtl. ist index kleiner als 0 oder gr\u00f6\u00dfer als die L\u00e4nge von s minus 1 . Die Anweisung s.charAt(index); ist somit eine kritische Anweisung , denn sie kann (bei \"falschem\" index ) eine StringIndexOutOfBoundsException werfen. Genau so ist die Anweisung divident/divisor; in der Methode divide eine kritische Anweisung , da es sein kann, dass der divisior gleich 0 ist. Bei der int -Division durch 0 wird eine ArithmeticException geworfen. Wenn die main -Methode nun wie angegeben ausgef\u00fchrt wird, dann \"st\u00fcrzt\" das Programm bereits bei Ausf\u00fchrung von Zeile 16 ab und Zeile 17 wird gar nicht mehr erreicht: Exception in thread \"main\" java.lang.ArithmeticException: / by zero at packageName.Ausnahmen.divide ( Ausnahmen.java:10 ) at packageName.Ausnahmen.main ( Ausnahmen.java:16 ) Die Fehlermeldung gibt uns an, welche Zeile die Ausnahme geworfen hat, n\u00e4mlich Ausnahmen.java:10 und um welche Exception es sich handelt, n\u00e4mlich ArithmeticException: / by zero . Wenn wir in der main -Methode Zeile 16 auskommentieren, dann sehen wir, dass auch die Anweisung in Zeile 17 eine Exception wirft, n\u00e4mlich: Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: String index out of range: 5 at java.base/java.lang.StringLatin1.charAt ( StringLatin1.java:47 ) at java.base/java.lang.String.charAt ( String.java:702 ) at packageName.Ausnahmen.charAt ( Ausnahmen.java:5 ) at packageName.Ausnahmen.main ( Ausnahmen.java:17 ) Die Fehlermeldung gibt uns an, welche Zeile unseres Programms die Ausnahme geworfen hat, n\u00e4mlich Ausnahmen.java:5 und um welche Exception es sich handelt, n\u00e4mlich StringIndexOutOfBoundsException: String index out of range: 5 . Sie sehen auch, dass eigentlich sogar die Anweisung in Zeile 47 in der Klasse StringLatin1 in der dortigen Methode charAt die Exception geworfen hat. Wir werden dieses \"Weiterreichen\" von Exceptions gleich noch n\u00e4her betrachten. Beispiel mit try-catch \u00b6 Zun\u00e4chst \"reparieren\" wir unseren Code, indem wir try-catch -Bl\u00f6cke um unsere kritischen Anweisungen hinzuf\u00fcgen: Beispiel mit Behandlung der Exceptions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Ausnahmen { static char charAt ( String s , int index ) { char c = ' ' ; try { c = s . charAt ( index ); // kritisch! } catch ( StringIndexOutOfBoundsException e ) { System . err . println ( \"Der Index war ausserhalb des Strings\" ); } return c ; } static double divide ( int divident , int divisor ) { double result = 0.0 ; try { result = divident / divisor ; // kritisch! } catch ( ArithmeticException ae ) { System . err . println ( \"Division durch 0 nicht definiert!\" ); } return result ; } public static void main ( String [] args ) { System . out . println ( divide ( 5 , 0 )); // ArithmeticException System . out . println ( charAt ( \"Hallo\" , 5 )); // StringIndexOutOfBoundsException } } Die kritischen Anweisungen wurden nun jeweils in einen try -Block integriert und die Behandlung der eventuell auftretenden Exceptions besteht nur aus einer jeweiligen Fehlerausgabe (ich habe hier daf\u00fcr nicht das Standardausgabeger\u00e4t out in den println -Anweisungen verwendet, sondern err - Zeilen 12 und 26 ). Wenn wir das Programm nun ausf\u00fchren (in main muss auch nichts mehr auskommentiert werden), dann erhalten wir die Ausgabe: Division durch 0 nicht definiert! 0 .0 Der Index war ausserhalb des Strings Das Programm \"st\u00fcrzt\" nun also nicht mehr ab, das ist schonmal ein Erfolg. So ganz optimal ist die L\u00f6sung allerdings noch nicht, da wir nun jeweils einen Nebeneffekt in unsere Methoden eingebaut haben. Angenommen, in der divide -Methode wird eine Exception geworfen, dann erfolgt durch Zeile 26 die Fehlerausgabe auf die Konsole. Danach wird in Zeile 28 aber result zur\u00fcckgegeben (hat den Wert 0.0 , den wir bei der Initailisierung in Zeile 19 angegeben haben) und dieser Wert wird durch Zeile 33 auf die Konsole ausgegeben. Das gleiche gilt f\u00fcr die charAt -Methode. Auch da haben wir einen Nebeneffekt eingebaut und es wird durch Zeile 34 das Leerzeichen auf die Konsole ausgegeben. Nebeneffekte wollen wir aber unbedingt vermeiden und m\u00fcssen unsere Implementierung deshalb noch \u00e4ndern. Zun\u00e4chst schauen wir uns aber den generellen Ablauf einer solchen Ausnahmesituation an: Ablauf einer Ausnahmesituation \u00b6 Der generelle Ablauf beim \"Werfen\" eine Exception ist wie folgt: Das Laufzeitsystem (JVM) erzeugt ein Ausnahme-Objekt (Objekt vom Elterntyp Exception ), wenn eine Exception \"geworfen\" wird Die Abarbeitung des Programmcodes wird sofort unterbrochen. Das Laufzeitsystem sucht nach der n\u00e4chsten catch -Klausel und f\u00fchrt diese aus. Passt die gefundene catch -Klausel nicht zur Art der Ausnahme, wird die n\u00e4chste catch -Klausel gesucht usw. Betrachten wir nochmal obigen Code, dann stellen wir fest, dass in der einen catch -Klausel (Zeile 10 ) ein Objekt vom Typ StringIndexOutOfBoundsException erwartet wird. Wir werden gleich sehen, dass dies schon ein sehr spezieller Typ in der Vererbungshierarchie von Exception ist. Das Programm w\u00fcrde auch genau so funktionieren, wenn wir dort anstelle von StringIndexOutOfBoundsException allegmein eine Exception erwarten w\u00fcrden. Das gleiche gilt f\u00fcr die andere catch -Klausel (Zeile 24 ), wo wir eine ArithmeticException erwarten. Wir schauen uns die Vererbungshierarchie der Exceptions gleich an. generell gilt, dass man mehrere catch -Bl\u00f6cke hintereinander setzen kann und der erste catch -Block, der dem erwartetetn Parametertyp entspricht, wird ausgef\u00fchrt. Wichtig ist, dass wir uns merken, dass durch eine Exception der Programmablauf sofort unterbrochen und zur n\u00e4chsten \"passenden\" catch -Klausel gesprungen wird. Ein weiteres Beispiel \u00b6 Wir schauen uns dazu ein weiteres Beispiel an und erg\u00e4nzen unsere Klasse Ausnahmen um eine weitere Methode inputInt() : eine weitere methode inputInt() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 /* * Sollten Sie mit dem Modul-System von Java arbeiten, d.h. sollten * Sie eine Datei module-info.java in Ihrem Projekt-Ordner haben, * dann muessen Sie dort noch * module ProjektName * { * requires java.desktop; * } * eintragen, damit Sie das Paket javax.swing importieren koennen. */ import javax.swing.JOptionPane ; public class Ausnahmen { static char charAt ( String s , int index ) { char c = ' ' ; try { c = s . charAt ( index ); // kritisch! } catch ( StringIndexOutOfBoundsException e ) { System . err . println ( \"Der Index war ausserhalb des Strings\" ); } return c ; } static double divide ( int divident , int divisor ) { double result = 0.0 ; try { result = divident / divisor ; // kritisch! } catch ( ArithmeticException ae ) { System . err . println ( \"Division durch 0 nicht definiert!\" ); } return result ; } static int inputInt () { int inputInt = 0 ; boolean inputOk = false ; String input = \"\" ; while ( ! inputOk ) { input = JOptionPane . showInputDialog ( \"Zahl :\" ); inputOk = true ; try { inputInt = Integer . parseInt ( input ); } catch ( NumberFormatException e ) { inputOk = false ; } } return inputInt ; } public static void main ( String [] args ) { System . out . println ( divide ( 5 , 0 )); // ArithmeticException System . out . println ( charAt ( \"Hallo\" , 5 )); // StringIndexOutOfBoundsException System . out . println ( \"Zahl: \" + inputInt ()); // NumberFormatException } } Schauen wir uns die Implementierung von inputInt() genauer an: in Zeile 50 wird ein kleines Eingabefenster erzeugt ( JOptionPane ist eine Klasse aus dem javax.swing -Paket, welches wiederum im Modul java.desktop verf\u00fcgbar ist). Die Eingabe in dieses Fenster wird als String zur\u00fcckgegeben und in der Variablen input gespeichert. in Zeile 53 wird versucht, den Eingabestring input in ein int umzuwandeln. Dazu wird die Methode parseInt() verwendet, die zur Klasse Integer geh\u00f6rt ( Integer ist eine sogenannte Wrapper-Klasse - diese schauen wir uns n\u00e4chste Woche an). wenn input eine Zahl enth\u00e4lt, also z.B. so aussieht: \"1234\" , dann erzeugt parseInt() daraus die int -Zahl 1234 und alles ist ok. Wenn input jedoch keine Zahl enth\u00e4lt, also z.B. \"hallo\" , dann wirft parseInt() eine NumberFormatException , weil die Umwandlung des String s in ein int nicht m\u00f6glich ist. in Zeile 55 wird eine solche NumberFormatException aufgefangen. Die \"Behandlung\" dieser Excepion sieht so aus, dass der Schalter inputOk auf false gesetzt wird. der gesamte Anweisungsblock Fenster->Eingabe->try-catch ist in eine Schleife eingebettet. Diese Schleife wird so lange ausgef\u00fchrt, so lange der Wert von inputOk nicht false ist. Das bedeutet, wenn keine Zahl eingegeben wird, dann \u00f6ffnet sich das Fenster erneut und es muss so lange eine Eingabe erfolgen, bis die Eingabe einer Zahl entspricht (und somit parseInt() keine Exception wirft) \u00dcbrigend k\u00f6nnte die Anweisung inputOk = true; auch nach parseInt() in den try -Block geschrieben werden: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 static int inputInt () { int inputInt = 0 ; boolean inputOk = false ; String input = \"\" ; while ( ! inputOk ) { input = JOptionPane . showInputDialog ( \"Zahl :\" ); try { inputInt = Integer . parseInt ( input ); inputOk = true ; } catch ( NumberFormatException e ) { inputOk = false ; } } return inputInt ; } Zeile 12 wird nur genau dann erreicht, wenn parseInt() keine Exception wirft. Dann wird auch der catch -Block nicht betreten und die Schleife wird beendet. Beispiel mit mehreren Exceptions \u00b6 Wir betrachten jetzt einmal an einem Besipiel die bei Ablauf einer Ausnahmesituation unter Punkt 4 beschriebene Situation, dass die n\u00e4chstpassende catch -Klausel gesucht wird. Wir erweitern dazu unsere Klasse Ausnahmen um eine weitere Methode mehrereExceptions() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public static void mehrereExceptions () { String [] basen = { \"2\" , \"8\" , \"10\" , \"Hi\" }; int base = 0 ; double result = 0 ; boolean ok = true ; for ( int index = 0 ; index <= 4 ; index ++ ) { try { base = Integer . parseInt ( basen [ index ] ); ok = true ; } catch ( NumberFormatException nfe ) { System . out . println ( \"Keine Zahl!\" ); ok = false ; } catch ( IndexOutOfBoundsException ioobe ) { System . out . println ( \"Ausserhalb des Arrays\" ); ok = false ; } for ( int exp = 0 ; exp < 6 && ok ; exp ++ ) { result = Math . pow ( base , exp ); System . out . printf ( \"%d ^ %d = %.0f %n\" , base , exp , result ); } } } In Zeile 3 definieren wir uns ein String[] mit 4 Eintr\u00e4gen. Durch dieses String[] laufen wir mit einer for -Schleife (Zeile 8 ) durch. In Zeile 11 wndeln wir jeden Eintrag aus dem String[] in eine int -Zahl um. An zwei Stellen k\u00f6nnen Exceptions geworfen werden: Bei dem Index-basierten Zugriff auf das Array basen[index] in Zeile 11 kann eine ArrayIndexOutOfBounds -Exception geworfen werden, falls index kein korrekter Index des String[] ist (gilt f\u00fcr index==4 ). Bei der Umwandlung von String nach int durch parseInt() in Zeile 11 kann eine NumberFormatException geworfen werden, falls der entsprechende Eintrag im String[] keine Zahl ist (gilt f\u00fcr basen[3]=='Hi' ). Die Methode erzeugt die folgende Ausgabe: 2 ^ 0 = 1 2 ^ 1 = 2 2 ^ 2 = 4 2 ^ 3 = 8 2 ^ 4 = 16 2 ^ 5 = 32 8 ^ 0 = 1 8 ^ 1 = 8 8 ^ 2 = 64 8 ^ 3 = 512 8 ^ 4 = 4096 8 ^ 5 = 32768 10 ^ 0 = 1 10 ^ 1 = 10 10 ^ 2 = 100 10 ^ 3 = 1000 10 ^ 4 = 10000 10 ^ 5 = 100000 Keine Zahl! Ausserhalb des Arrays Das hei\u00dft, dass wenn f\u00fcr parseInt(\"Hi\") eine NumberFormatException geworfen wird, dann wird der catch -Block ausgef\u00fchrt, der eine NumberFormatException erwartet (Zeilen 14-17 ). Der andere catch -Block wird nicht ausgef\u00fchrt. Wenn f\u00fcr basen[4] eine ArrayIndexOutOfBoundsException geworfen wird, dann wird der catch -Block ausgef\u00fchrt, der eine IndexOutOfBoundsException erwartet (Zeilen 18-21 ). Der andere catch -Block wird nicht ausgef\u00fchrt. Wir sehen, dass es offensichtlich auch eine IndexOutOfBoundsException -Klasse gibt. Das ist eine Elternklasse von ArrayIndexOutOfBoundsException und auch von StringIndexOutOfBoundsException . Wir schauen uns diese Vererbungshierarchie von Exception nun mal an: Die Vererbungshierarchie der Klasse Exception \u00b6 Wenn Sie sich die Klasse Exception in der Java-Dokumentation einmal anschauen, dann sehen Sie, dass diese Klasse ein Unmenge von Kindklassen hat. Wir betrachten hier einmal die f\u00fcr uns wichtigsten Klassen: Alle Exception-Klassen erben von der Klasse Exception , die im java.lang -Paket definiert ist. Grunds\u00e4tzlich werden zwei Arten von Exceptions unterschieden: checked Exceptions: Checked Exceptions m\u00fcssen gepr\u00fcft werden, d.h. Methoden, die eine checked Exception werfen k\u00f6nnen, m\u00fcssen in einen try-catch -Block integriert werden. Dies wird bereits zur Compilezeit gepr\u00fcft, d.h. das Programm l\u00e4sst sich gar nicht compilieren, wenn eine Methode, die eventuell eine checked Exception wirft, nicht in einem try -Block steht. In der Abbildung stehen checked Exceptions auf der rechten Seite (gr\u00fcn). unchecked Exceptions: Unchecked Exceptions k\u00f6nnen gepr\u00fcft werden, m\u00fcssen aber nicht. Alle unchecked Exceptions leiten sich von der Klasse RunTimeException ab. Wir werden uns genau mit diesen uncheck Exceptions, also von RunTimeException abgeleiteten Klassen besch\u00e4ftigen. Es gibt von RunTimeException noch viele weitere Kindklassen, wie man in der Java-Dokumentation sehen kann, aber die in der Abbildung gezeigten sind die wichtigsten. Eine Kindklasse davon, die IllegalArgumentException -Klasse wird f\u00fcr uns noch eine weitere Rolle spielen, da wir von ihr erben werden, wenn wir uns eigene Exception -Klassen erstellen. try-catch-finally \u00b6 Prinzipiell besteht das Konstrukt try und catch nicht nur aus diesen beiden Bl\u00f6cken, sondern auch noch aus dem finally -Block. Der finally -Block wird grunds\u00e4tzlich immer ausgef\u00fchrt, egal, ob eine Exception geworfen wird oder nicht. Die Syntax ist wie folgt: try { // Anweisung(en), die evtl. Fehler verursachen (kritischer Abschnitt) } catch ( Exception e ) { // Behandlung der Exception } finally { // Aufraeumen, z.B. Schliessen von Dateien, Beenden von // Verbindungen zu Servern, Datenbanken etc. } Typischerweise wird der finally -Block dazu verwendet, bestimmte Ressourcen wieder freizugeben, z.B. Dateien zu schlie\u00dfen, Verbindungen zu Servern, Datenbanken usw. zu beenden. Wir werden finally jedoch nicht sehr oft implementieren. throws - eine Exception weiterreichen \u00b6 Wir haben bis jetzt immer in den Methoden, in denen die kritische Anweisung ausgef\u00fchrt wurde, diese direkt mit einem try-catch -Block \"ummantelt\". Das muss nicht unbedingt sein. Wir k\u00f6nnen eine in einer Methode geworfene Exception auch an die aufrufende Methode weiterreichen. Dann kann (und sollte) die Exception in der aufrufenden Methode abgefangen und behandelt werden. Um anzugeben, dass eine Methode evtl. eine Exception wirft, wird das Schl\u00fcsselwort throws verwendet. Wir erweiteren also die Deklaration einer Methode (also den Methodenkopf) um throws und danach kommt der entsprechende Typ der Exxception, die in der Methode geworfen werden kann. Die allgemeine Syntax einer Methodendeklaration sieht somit so aus: [ modifizierer ] [ rueckgabetyp ] methodenname throws ExceptionType { // Anweisungsblock // wirft (evtl.) Exception } Wir betrachten auch daf\u00fcr ein Beispiel und erweiteren unsere Klasse Ausnahmen um die Methode getValueAtIndex : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 static int getValueAtIndex ( int [] field , int index ) throws ArrayIndexOutOfBoundsException { return field [ index ] ; } public static void main ( String [] args ) { System . out . println ( divide ( 5 , 0 )); // ArithmeticException System . out . println ( charAt ( \"Hallo\" , 5 )); // StringIndexOutOfBoundsException System . out . println ( \"Zahl: \" + inputInt ()); // NumberFormatException mehrereExceptions (); int value = 0 ; boolean ok = true ; int [] field = { 8 , 3 , - 4 , 2 , - 9 }; try { value = getValueAtIndex ( field , - 3 ); } catch ( ArrayIndexOutOfBoundsException e ) { System . out . println ( \"Index ausserhalb des Arrays!\" ); ok = false ; } if ( ok ) { System . out . println ( \"value : \" + value ); } } Obwohl die Methode eine kritische Anweisung enth\u00e4lt ( field[index] ), ist diese Anweisung nicht in einen try-catch -Block eingebunden. Es kann nun also sein, dass bei Aufruf der Methode eine Exception (eine ArrayIndexOutOfBoundsException ) geworfen wird. Wir geben das im Methodenkopf mithilfe von throws ArrayIndexOutOfBoundsException bekannt. Die aufrufende Methode ( main ) kann nun selbst den Aufruf der Methode getValueAtIndex() in einen try-catch -Block ummanteln und somit die Exception selbst abfangen und behandeln. Nur wenn keine Exception geworfen wird, wird der von der Methode getValueAtIndex() zur\u00fcckgegebene Wert ausgegeben. Wenn wir an unsere einleitenden Beispiele denken (Methoden charAt() und divide() ), dann erinnern wir uns, dass wir dort festegestellt haben, dss die Implementierung so nicht g\u00fcnstig war, da sie Nebeneffekte erzeugt hat, sobald eine Exception geworfen wurde. Diese Nebeneffekte werden bei der Implementierung von getValueAtIndex() vermieden, obwohl die grunds\u00e4tzliche Idee die gleiche ist, wie bei charAt() . Der Nachteil ist, dass man die aufrufende Methode \"zwingt\", die Exception selbst zu behandeln. Sch\u00f6ner Code \u00b6 Der letzte Satz aus dem vorherigen Abschnitt ist insofern nicht ganz richtig, dass mit unchecked Exceptions ja genau nicht erzwungen wird, eventuelle Exceptions abzufangen. Es gibt gute Gr\u00fcnde daf\u00fcr, alle eigenen Exceptions eher als checked Exceptions zu definieren, als als unchecked Exceptions. Aber zu eigenen Exceptions kommen wir gleich. Trotzdem k\u00f6nnen wir uns schon zum jetzigen Zeitpunkt einige Gedanken, \u00fcber sch\u00f6nen Code in Bezug auf Exceptions machen: eine Methode sollte immer nur eine Sache erledigen (single responsibility principle - SRP) \u2192 die Methode kann nicht auch noch f\u00fcr das Abfangen des Fehlers zust\u00e4ndig sein (try-catch-Bl\u00f6cke sind eh \u201eh\u00e4sslich\u201c und unleserlich) \u2192 lassen Sie Methode, die etwas eledigt, eine Exception werfen und leiten Sie diese weiter ( throws ) \u2192 fangen Sie den Fehler in einer anderen Methode ab ( try ) \u2192 Sie k\u00f6nnen sogar die eigentliche Behandlung des Fehlers ( catch ) in eine dritte Methode auslagern (single responsibility) H\u00e4ufig sieht man, dass die Methode, die den Fehler abf\u00e4ngt ( try ) im catch -Block den fehler protokolliert (in ein ErrorLog-File) und dann eine eigens erzeugte Exception an die Methode weiterleitet, die den Fehler behandelt. Wie man eine Exception erzeugt, schauen wir uns jetzt an. throw - eigene Exceptions erzeugen \u00b6 Zun\u00e4chst kommt ein neues Schl\u00fcsselwort hinzu, n\u00e4mlich throw . Ungl\u00fccklicherweise ist dies dem Schl\u00fcsselwort throws sehr \u00e4hnlich. Mit throw erzeugen (werfen) wir eine eigene Exception, mit throws wird im Methodenkopf angegeben, dass die Methode (eventuell) eine Exception wirft und diese an die aufrufende Methode weitergibt. Angenommen, f\u00fcr einen Konstruktor der Klasse Dreieck werden Seitenl\u00e4ngen \u00fcbergeben, die entweder kleiner als 0 oder die Summe von 2 Seitenl\u00e4ngen ist kleiner als die dritte Seite ist. Wir hatten uns bei der Bearbeitung der Aufgabe Traingle im ersten Semester bereits \u00fcberlegt, dass ddurch kein \"richtiges\" Dreieck erzeugt wird, aber wir konnten das noch nicht verhindern. das machen wir jetzt. Wie k\u00f6nnen wir also verhindern, dass ein solches Objekt erzeugt wird? Die L\u00f6sung besteht darin, eine eigene Exception zu definieren und diese im Fehlerfall zu werfen. Mithilfe des Schl\u00fcsselwortes throw wird also eine eigene Exception geworfen. Bis jetzt wurden unsere Exceptions ja geworfen. F\u00fcr eine eigene Exception haben wir zwei M\u00f6glichkeiten: entweder erstellen wir uns eine eigene Exception-Klasse und leiten diese von der Klasse Exception oder von der Klasse RunTimeException ab ( extends Exception bzw. extends RunTimeException ) oder wir verwenden eine bereits existierende Exception-Klasse (typischerweise IllegalArgumentException ). throw new IllegalArgumentException \u00b6 Wir implementieren unsere Klasse Triangle so, dass wir im Konstruktor f\u00fcr den Fall, dass eine Seite kleiner gleich 0 ist, eine IllegalArgumentException werfen. Dieser Exception kann ein String als Parameter \u00fcbergeben werden, der im catch -Block mittels getMessage() wieder ausgelesen werden kann. Das gleiche machen wir f\u00fcr den Fall, dass die Summe von zwei Seiten kleiner der dritten Seite ist. Triangle mit eigenen IllegalArgumentExceptions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 public class Triangle { private int a , b , c ; public Triangle ( int a , int b , int c ) throws IllegalArgumentException { if ( a <= 0 || b <= 0 || c <= 0 ) { throw new IllegalArgumentException ( \"Seiten muessen groesser als 0 sein!\" ); } else if ( a >= ( b + c ) || b >= ( a + c ) || c >= ( a + b )) { throw new IllegalArgumentException ( \"Kein Dreieck!\" ); } else { this . a = a ; this . b = b ; this . c = c ; } } public static void main ( String [] args ) { Triangle d ; try { d = new Triangle ( 3 , 4 , 5 ); //(3,4,0) und (3,4,8) probieren } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } } } Der Konstruktor f\u00e4ngt die Exception nicht selbst auf und behandelt sie auch nicht selbst, sondern leitet sie an die aufrufende Methode weiter (Zeile 5 - throws IllegalArgumentException ). Im Konstruktor werden die Parameterwerte gepr\u00fcft und entweder eine IllegalArgumentException geworfen, falls eine Seite kleiner gleich 0 ist (Zeile 9 - throw new ) oder eine IllegalArgumentException geworfen, falls die Summe von zwei Seiten kleiner als die dritte Seite ist (Zeile 13 - throw new ) oder die Objektvariablen die Werte der Parameter bekommen (wenn alles ok ist - Zeilen 17-19 ). Die Erzeugung eines Triangle -Objektes (also der Aufruf des Konstruktors) ist nun in einen try-catch -Block eingebettet (Zeilen 26-32 ). Beachten Sie, dass es sein kann, dass d nach Aufruf des Konstruktors immernoch null ist (n\u00e4mlich dann, wenn eine Exception geworfen wird). Wir haben hier gleich die main -Methode mit in die Klasse genommen, das sollte man nat\u00fcrlich nicht machen. Eigene Exception-Klasse definieren \u00b6 Wir erstellen uns eigene Exception-Klassen f\u00fcr die oben beschriebenen \"Fehler\" im Konstruktor von Triangle . Diese eigenen Exception-Klassen erben von der Klasse Exception . Damit sind die eigenen Exceptions checked Exceptions, d.h. sie m\u00fcssen in einem try-catch -Block abgefangen und behandelt werden. Eigene Klasse IllegalTriangleException 1 2 3 4 5 6 7 8 9 10 public class IllegalTriangleException extends Exception { public IllegalTriangleException ( String s ) { super ( s ); } public IllegalTriangleException () { super ( \"Each side has to be smaller than the sum of the other sides!\" ); } } Die Klasse IllegalTriangleException verwenden wir f\u00fcr den Fall, dass die Summe zweier Seiten kleiner als die dritte Seite ist. Eigene Klasse IllegalSideLengthException 1 2 3 4 5 6 7 8 9 10 11 public class IllegalSideLengthException extends Exception { public IllegalSideLengthException ( String s ) { super ( s ); } public IllegalSideLengthException () { super ( \"Sides must be greater than zero!\" ); } } Die Klasse IllegalSideLengthException verwenden wir f\u00fcr den Fall, dass eine Seite kleiner gleich 0 ist. F\u00fcr beide Klassen haben wir jeweils einen parameterlosen Konstruktor definiert, der ein Objekt von Exception erzeugt und dem eine Fehlermeldung als String im Parameter \u00fcbergeben wird. Au\u00dferdem haben wir in beiden Klassen noch einen parametrisierten Konstruktor, dem eine Fehlermeldung als String \u00fcbergeben werden kann. Wir haben nun die Wahl, ob wir den paarmeterlosen oder den parametrisierten Konstruktor verwenden. Die Anwendung dieser beiden Exception-Klassen in der Klasse Triangle k\u00f6nnte nun so aussehen (wir haben hier auch gleich die main -Methode mit in die Klasse genommen, das sollte man nat\u00fcrlich nicht machen): Triangle mit den selbst definierten Exception-Klassen 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public class Triangle { private int a , b , c ; public Triangle ( int a , int b , int c ) throws Exception { if ( a <= 0 || b <= 0 || c <= 0 ) { throw new IllegalTriangleException (); } else if ( a >= ( b + c ) || b >= ( a + c ) || c >= ( a + b )) { throw new IllegalSideLengthException (); } else { this . a = a ; this . b = b ; this . c = c ; } } public static void main ( String [] args ) { Triangle d ; try { d = new Triangle ( 3 , 4 , 5 ); //(3,4,0) und (3,4,8) probieren } catch ( Exception e ) { System . out . println ( e . getMessage ()); } } } Beide eigenen Klassen sind ja auch vom Laufzeittyp Exception , da sie von dieser Klasse geerbt haben. Insofern ist der Parametertyp in der catch -Klausel mit Exception (Zeile 30 ) passend. Wenn Sie anstelle der Zeilen 27-33 nur d = new Triangle(3,4,5); schreiben, stellen Sie fest, dass sich das Programm nicht \u00fcbersetzen l\u00e4sst, da es sich um checked Exceptions handelt, die in einem try-catch -Block abgefangen werden m\u00fcssen. Eclipse bietet Ihnen dann aber einen QuickFix an Surround with try/catch . Das sollten Sie einmal ausprobieren. Wenn Sie anstelle von Exception von der Klasse RunTimeException erben, dann handelt es sich bei Ihren Exceptions um unchecked Exceptions. Es ist aber besseres Programmieren, wenn man checked Exceptions erstellt, denn dazu sind die Exceptions ja da, dass sie abgefangen und behandelt werden. Success Wir haben Exceptions kennengelernt. Solche Laufzeitfehler k\u00f6nnen an verschiedenen Stellen passieren und haben unterschiedliche Typen (siehe Kindklassen von Exception , insb. von RunTimeException ). Mithilfe von try-catch-[finally] k\u00f6nnen wir solche Exceptions abfangen und behandeln. Damit st\u00fcrzt unser Programm nicht mehr ab. Mithilfe von throws zeigt eine Methode an, dass sie eine Exception erzeugen kann. Das Schl\u00fcsselwort throw weist die Laufzeitumgebung an, das angegebene Laufzeitobjekt (eine Exception) zu erzeugen und zu werfen. Checked Exceptions m\u00fcssen behandelt werden (Aufruf der Exception-werfenden Methode in einem try-catch -Block). Unchecked Exceptions k\u00f6nnen behandelt werden, m\u00fcssen aber nicht, sollten aber. K\u00f6nnen wir ja jetzt schlie\u00dflich...","title":"Exceptions"},{"location":"exceptions/#exceptions","text":"Exceptions kennen wir schon, denn sie passieren uns h\u00e4ufiger. Wenn wir z.B. auf einen Index in einem Array zugreifen, dieser Index aber gar nicht existiert, wird eine ArrayIndexOutOfBounds -Exception geworfen. Wenn wir auf eine Objekteigenschaft zugreifen wollen, z.B. eine Objektmethode, die daf\u00fcr verwendete Referenzvariable aber gar nicht auf ein Objekt zeigt, sondern auf null , erhalten wir eine NullPointerException . Wenn bei einer Nutzereingabe eine Zahl erwartet, um damit weiterrechnen zu k\u00f6nnen, die Nutzerin gibt aber etwas anderes als eine Zahl ein, dann wird ebenfalls ein Exception geworfen . Wir wollen aber gar nicht, dass das Programm in solchen F\u00e4llen abst\u00fcrzt, sondern wir wollen diesen \u201eFehler\u201c erkennen und darauf reagieren. Grunds\u00e4tzlich gibt es also zwei Arten von Fehlern: syntaktische Fehler \u2192 k\u00f6nnen vom Compiler vor der Laufzeit erkannt werden; das programm wird gar nicht erst vollst\u00e4ndig compiliert und nicht ausgef\u00fchrt und logische Fehler \u2192 k\u00f6nnen erst zur Laufzeit erkannt werden. Im Falle der logischen Fehler, die erst zur Laufzeit auftreten, spricht man von Laufzeitfehlern (oder Ausnahmen oder Exceptions ). Die Aufgabe beim Programmieren ist nun, zu identifizieren, an welchen Stellen ein logischer Fehler auftreten k\u00f6nnte , z.B. fehlerhafte Benutzereingabe Datenbank- oder Netzwerkverbindung nicht verf\u00fcgbar gesuchte Datei/Ordner nicht vorhanden usw. Die Stellen, an denen ein solcher logischer Fehler auftreten k\u00f6nnte, nennen wir im Folgenden kritischer Abschnitt . Wir m\u00fcssen solche kritischen Abschnitte in unserem Quellcode identifizieren und haben dann die M\u00f6glichkeit, solche kritischen Abschnitte so zu implementieren, dass die Exception, die eventuell geworfen wird, abgefangen wird und das Programm dadurch nicht abst\u00fcrzt.","title":"Exceptions"},{"location":"exceptions/#try-catch","text":"Die grunds\u00e4tzliche Idee ist die, dass wir zun\u00e4chst versuchen den kritischen Abschnitt einfach auszuf\u00fchren. Wir versuchen z.B. einfach mit einem index auf das Array zuzugreifen, auch wenn wir gar nicht wissen, ob dies ein tats\u00e4chlicher index aus dem Array ist. Allerdings binden wir diesen Versuch in einen try{} -Block ein. Sollte in einem solchen try{} -Block nun eine Exception geworfen werden, dann fangen wir diese in einem catch(){} -Block auf und behandeln sie dort. Die allgemeine Syntax daf\u00fcr sieht so aus: allgemeine Syntax try-catch 1 2 3 4 5 6 7 8 try { // Anweisung(en), die evtl. Fehler verursachen (kritischer Abschnitt) } catch ( Exception e ) { // Behandlung der Exception } Es passiert Folgendes: wir f\u00fchren die Anweisung(en) in Zeile 3 aus. Wenn diese keine Exception wirft, also alles okay ist, dann machen wir einfach hinter dem catch -Block, also nach Zeile 8 weiter. Wenn aber die Anweisung(en) in Zeile 3 einen Laufzeitfehler verursachen, also eine Exception werfen, dann wird diese in Zeile 5 \"aufgefangen\" und in dem Anweisungsblock in den Zeilen 6-8 behandelt. Das Programm st\u00fcrzt nun nicht mehr ab, sondern wir haben die M\u00f6glichkeit, auf die Exception zu reagieren.","title":"try-catch"},{"location":"exceptions/#beispiel-ohne-try-catch","text":"Wir verdeutlichen dieses Prinzip an einem ersten Beispiel: Beispiel zun\u00e4chst ohne Behandlung der Exceptions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 class Ausnahmen { static char charAt ( String s , int index ) { char c = s . charAt ( index ); // kritisch! return c ; } static double divide ( int divident , int divisor ) { double result = divident / divisor ; // kritisch! return result ; } public static void main ( String [] args ) { System . out . println ( divide ( 5 , 0 )); // ArithmeticException System . out . println ( charAt ( \"Hallo\" , 5 )); // StringIndexOutOfBoundsException } } Das Beispiel enth\u00e4lt zwei Methoden charAt() und divide . Der charAt -Methode wird ein String \u00fcbergeben und ein index . Die Methode gibt das Zeichen ( char ) zur\u00fcck, dass im String unter dem index gespeichert ist (z.B. charAt(\"Hallo\", 1) gibt das 'a' zur\u00fcck). Es wird jedoch gar nicht gepr\u00fcft, ob index tats\u00e4chlich ein korrekter Index des Strings s ist, d.h. evtl. ist index kleiner als 0 oder gr\u00f6\u00dfer als die L\u00e4nge von s minus 1 . Die Anweisung s.charAt(index); ist somit eine kritische Anweisung , denn sie kann (bei \"falschem\" index ) eine StringIndexOutOfBoundsException werfen. Genau so ist die Anweisung divident/divisor; in der Methode divide eine kritische Anweisung , da es sein kann, dass der divisior gleich 0 ist. Bei der int -Division durch 0 wird eine ArithmeticException geworfen. Wenn die main -Methode nun wie angegeben ausgef\u00fchrt wird, dann \"st\u00fcrzt\" das Programm bereits bei Ausf\u00fchrung von Zeile 16 ab und Zeile 17 wird gar nicht mehr erreicht: Exception in thread \"main\" java.lang.ArithmeticException: / by zero at packageName.Ausnahmen.divide ( Ausnahmen.java:10 ) at packageName.Ausnahmen.main ( Ausnahmen.java:16 ) Die Fehlermeldung gibt uns an, welche Zeile die Ausnahme geworfen hat, n\u00e4mlich Ausnahmen.java:10 und um welche Exception es sich handelt, n\u00e4mlich ArithmeticException: / by zero . Wenn wir in der main -Methode Zeile 16 auskommentieren, dann sehen wir, dass auch die Anweisung in Zeile 17 eine Exception wirft, n\u00e4mlich: Exception in thread \"main\" java.lang.StringIndexOutOfBoundsException: String index out of range: 5 at java.base/java.lang.StringLatin1.charAt ( StringLatin1.java:47 ) at java.base/java.lang.String.charAt ( String.java:702 ) at packageName.Ausnahmen.charAt ( Ausnahmen.java:5 ) at packageName.Ausnahmen.main ( Ausnahmen.java:17 ) Die Fehlermeldung gibt uns an, welche Zeile unseres Programms die Ausnahme geworfen hat, n\u00e4mlich Ausnahmen.java:5 und um welche Exception es sich handelt, n\u00e4mlich StringIndexOutOfBoundsException: String index out of range: 5 . Sie sehen auch, dass eigentlich sogar die Anweisung in Zeile 47 in der Klasse StringLatin1 in der dortigen Methode charAt die Exception geworfen hat. Wir werden dieses \"Weiterreichen\" von Exceptions gleich noch n\u00e4her betrachten.","title":"Beispiel ohne try-catch"},{"location":"exceptions/#beispiel-mit-try-catch","text":"Zun\u00e4chst \"reparieren\" wir unseren Code, indem wir try-catch -Bl\u00f6cke um unsere kritischen Anweisungen hinzuf\u00fcgen: Beispiel mit Behandlung der Exceptions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 class Ausnahmen { static char charAt ( String s , int index ) { char c = ' ' ; try { c = s . charAt ( index ); // kritisch! } catch ( StringIndexOutOfBoundsException e ) { System . err . println ( \"Der Index war ausserhalb des Strings\" ); } return c ; } static double divide ( int divident , int divisor ) { double result = 0.0 ; try { result = divident / divisor ; // kritisch! } catch ( ArithmeticException ae ) { System . err . println ( \"Division durch 0 nicht definiert!\" ); } return result ; } public static void main ( String [] args ) { System . out . println ( divide ( 5 , 0 )); // ArithmeticException System . out . println ( charAt ( \"Hallo\" , 5 )); // StringIndexOutOfBoundsException } } Die kritischen Anweisungen wurden nun jeweils in einen try -Block integriert und die Behandlung der eventuell auftretenden Exceptions besteht nur aus einer jeweiligen Fehlerausgabe (ich habe hier daf\u00fcr nicht das Standardausgabeger\u00e4t out in den println -Anweisungen verwendet, sondern err - Zeilen 12 und 26 ). Wenn wir das Programm nun ausf\u00fchren (in main muss auch nichts mehr auskommentiert werden), dann erhalten wir die Ausgabe: Division durch 0 nicht definiert! 0 .0 Der Index war ausserhalb des Strings Das Programm \"st\u00fcrzt\" nun also nicht mehr ab, das ist schonmal ein Erfolg. So ganz optimal ist die L\u00f6sung allerdings noch nicht, da wir nun jeweils einen Nebeneffekt in unsere Methoden eingebaut haben. Angenommen, in der divide -Methode wird eine Exception geworfen, dann erfolgt durch Zeile 26 die Fehlerausgabe auf die Konsole. Danach wird in Zeile 28 aber result zur\u00fcckgegeben (hat den Wert 0.0 , den wir bei der Initailisierung in Zeile 19 angegeben haben) und dieser Wert wird durch Zeile 33 auf die Konsole ausgegeben. Das gleiche gilt f\u00fcr die charAt -Methode. Auch da haben wir einen Nebeneffekt eingebaut und es wird durch Zeile 34 das Leerzeichen auf die Konsole ausgegeben. Nebeneffekte wollen wir aber unbedingt vermeiden und m\u00fcssen unsere Implementierung deshalb noch \u00e4ndern. Zun\u00e4chst schauen wir uns aber den generellen Ablauf einer solchen Ausnahmesituation an:","title":"Beispiel mit try-catch"},{"location":"exceptions/#ablauf-einer-ausnahmesituation","text":"Der generelle Ablauf beim \"Werfen\" eine Exception ist wie folgt: Das Laufzeitsystem (JVM) erzeugt ein Ausnahme-Objekt (Objekt vom Elterntyp Exception ), wenn eine Exception \"geworfen\" wird Die Abarbeitung des Programmcodes wird sofort unterbrochen. Das Laufzeitsystem sucht nach der n\u00e4chsten catch -Klausel und f\u00fchrt diese aus. Passt die gefundene catch -Klausel nicht zur Art der Ausnahme, wird die n\u00e4chste catch -Klausel gesucht usw. Betrachten wir nochmal obigen Code, dann stellen wir fest, dass in der einen catch -Klausel (Zeile 10 ) ein Objekt vom Typ StringIndexOutOfBoundsException erwartet wird. Wir werden gleich sehen, dass dies schon ein sehr spezieller Typ in der Vererbungshierarchie von Exception ist. Das Programm w\u00fcrde auch genau so funktionieren, wenn wir dort anstelle von StringIndexOutOfBoundsException allegmein eine Exception erwarten w\u00fcrden. Das gleiche gilt f\u00fcr die andere catch -Klausel (Zeile 24 ), wo wir eine ArithmeticException erwarten. Wir schauen uns die Vererbungshierarchie der Exceptions gleich an. generell gilt, dass man mehrere catch -Bl\u00f6cke hintereinander setzen kann und der erste catch -Block, der dem erwartetetn Parametertyp entspricht, wird ausgef\u00fchrt. Wichtig ist, dass wir uns merken, dass durch eine Exception der Programmablauf sofort unterbrochen und zur n\u00e4chsten \"passenden\" catch -Klausel gesprungen wird.","title":"Ablauf einer Ausnahmesituation"},{"location":"exceptions/#ein-weiteres-beispiel","text":"Wir schauen uns dazu ein weiteres Beispiel an und erg\u00e4nzen unsere Klasse Ausnahmen um eine weitere Methode inputInt() : eine weitere methode inputInt() 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 /* * Sollten Sie mit dem Modul-System von Java arbeiten, d.h. sollten * Sie eine Datei module-info.java in Ihrem Projekt-Ordner haben, * dann muessen Sie dort noch * module ProjektName * { * requires java.desktop; * } * eintragen, damit Sie das Paket javax.swing importieren koennen. */ import javax.swing.JOptionPane ; public class Ausnahmen { static char charAt ( String s , int index ) { char c = ' ' ; try { c = s . charAt ( index ); // kritisch! } catch ( StringIndexOutOfBoundsException e ) { System . err . println ( \"Der Index war ausserhalb des Strings\" ); } return c ; } static double divide ( int divident , int divisor ) { double result = 0.0 ; try { result = divident / divisor ; // kritisch! } catch ( ArithmeticException ae ) { System . err . println ( \"Division durch 0 nicht definiert!\" ); } return result ; } static int inputInt () { int inputInt = 0 ; boolean inputOk = false ; String input = \"\" ; while ( ! inputOk ) { input = JOptionPane . showInputDialog ( \"Zahl :\" ); inputOk = true ; try { inputInt = Integer . parseInt ( input ); } catch ( NumberFormatException e ) { inputOk = false ; } } return inputInt ; } public static void main ( String [] args ) { System . out . println ( divide ( 5 , 0 )); // ArithmeticException System . out . println ( charAt ( \"Hallo\" , 5 )); // StringIndexOutOfBoundsException System . out . println ( \"Zahl: \" + inputInt ()); // NumberFormatException } } Schauen wir uns die Implementierung von inputInt() genauer an: in Zeile 50 wird ein kleines Eingabefenster erzeugt ( JOptionPane ist eine Klasse aus dem javax.swing -Paket, welches wiederum im Modul java.desktop verf\u00fcgbar ist). Die Eingabe in dieses Fenster wird als String zur\u00fcckgegeben und in der Variablen input gespeichert. in Zeile 53 wird versucht, den Eingabestring input in ein int umzuwandeln. Dazu wird die Methode parseInt() verwendet, die zur Klasse Integer geh\u00f6rt ( Integer ist eine sogenannte Wrapper-Klasse - diese schauen wir uns n\u00e4chste Woche an). wenn input eine Zahl enth\u00e4lt, also z.B. so aussieht: \"1234\" , dann erzeugt parseInt() daraus die int -Zahl 1234 und alles ist ok. Wenn input jedoch keine Zahl enth\u00e4lt, also z.B. \"hallo\" , dann wirft parseInt() eine NumberFormatException , weil die Umwandlung des String s in ein int nicht m\u00f6glich ist. in Zeile 55 wird eine solche NumberFormatException aufgefangen. Die \"Behandlung\" dieser Excepion sieht so aus, dass der Schalter inputOk auf false gesetzt wird. der gesamte Anweisungsblock Fenster->Eingabe->try-catch ist in eine Schleife eingebettet. Diese Schleife wird so lange ausgef\u00fchrt, so lange der Wert von inputOk nicht false ist. Das bedeutet, wenn keine Zahl eingegeben wird, dann \u00f6ffnet sich das Fenster erneut und es muss so lange eine Eingabe erfolgen, bis die Eingabe einer Zahl entspricht (und somit parseInt() keine Exception wirft) \u00dcbrigend k\u00f6nnte die Anweisung inputOk = true; auch nach parseInt() in den try -Block geschrieben werden: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 static int inputInt () { int inputInt = 0 ; boolean inputOk = false ; String input = \"\" ; while ( ! inputOk ) { input = JOptionPane . showInputDialog ( \"Zahl :\" ); try { inputInt = Integer . parseInt ( input ); inputOk = true ; } catch ( NumberFormatException e ) { inputOk = false ; } } return inputInt ; } Zeile 12 wird nur genau dann erreicht, wenn parseInt() keine Exception wirft. Dann wird auch der catch -Block nicht betreten und die Schleife wird beendet.","title":"Ein weiteres Beispiel"},{"location":"exceptions/#beispiel-mit-mehreren-exceptions","text":"Wir betrachten jetzt einmal an einem Besipiel die bei Ablauf einer Ausnahmesituation unter Punkt 4 beschriebene Situation, dass die n\u00e4chstpassende catch -Klausel gesucht wird. Wir erweitern dazu unsere Klasse Ausnahmen um eine weitere Methode mehrereExceptions() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 public static void mehrereExceptions () { String [] basen = { \"2\" , \"8\" , \"10\" , \"Hi\" }; int base = 0 ; double result = 0 ; boolean ok = true ; for ( int index = 0 ; index <= 4 ; index ++ ) { try { base = Integer . parseInt ( basen [ index ] ); ok = true ; } catch ( NumberFormatException nfe ) { System . out . println ( \"Keine Zahl!\" ); ok = false ; } catch ( IndexOutOfBoundsException ioobe ) { System . out . println ( \"Ausserhalb des Arrays\" ); ok = false ; } for ( int exp = 0 ; exp < 6 && ok ; exp ++ ) { result = Math . pow ( base , exp ); System . out . printf ( \"%d ^ %d = %.0f %n\" , base , exp , result ); } } } In Zeile 3 definieren wir uns ein String[] mit 4 Eintr\u00e4gen. Durch dieses String[] laufen wir mit einer for -Schleife (Zeile 8 ) durch. In Zeile 11 wndeln wir jeden Eintrag aus dem String[] in eine int -Zahl um. An zwei Stellen k\u00f6nnen Exceptions geworfen werden: Bei dem Index-basierten Zugriff auf das Array basen[index] in Zeile 11 kann eine ArrayIndexOutOfBounds -Exception geworfen werden, falls index kein korrekter Index des String[] ist (gilt f\u00fcr index==4 ). Bei der Umwandlung von String nach int durch parseInt() in Zeile 11 kann eine NumberFormatException geworfen werden, falls der entsprechende Eintrag im String[] keine Zahl ist (gilt f\u00fcr basen[3]=='Hi' ). Die Methode erzeugt die folgende Ausgabe: 2 ^ 0 = 1 2 ^ 1 = 2 2 ^ 2 = 4 2 ^ 3 = 8 2 ^ 4 = 16 2 ^ 5 = 32 8 ^ 0 = 1 8 ^ 1 = 8 8 ^ 2 = 64 8 ^ 3 = 512 8 ^ 4 = 4096 8 ^ 5 = 32768 10 ^ 0 = 1 10 ^ 1 = 10 10 ^ 2 = 100 10 ^ 3 = 1000 10 ^ 4 = 10000 10 ^ 5 = 100000 Keine Zahl! Ausserhalb des Arrays Das hei\u00dft, dass wenn f\u00fcr parseInt(\"Hi\") eine NumberFormatException geworfen wird, dann wird der catch -Block ausgef\u00fchrt, der eine NumberFormatException erwartet (Zeilen 14-17 ). Der andere catch -Block wird nicht ausgef\u00fchrt. Wenn f\u00fcr basen[4] eine ArrayIndexOutOfBoundsException geworfen wird, dann wird der catch -Block ausgef\u00fchrt, der eine IndexOutOfBoundsException erwartet (Zeilen 18-21 ). Der andere catch -Block wird nicht ausgef\u00fchrt. Wir sehen, dass es offensichtlich auch eine IndexOutOfBoundsException -Klasse gibt. Das ist eine Elternklasse von ArrayIndexOutOfBoundsException und auch von StringIndexOutOfBoundsException . Wir schauen uns diese Vererbungshierarchie von Exception nun mal an:","title":"Beispiel mit mehreren Exceptions"},{"location":"exceptions/#die-vererbungshierarchie-der-klasse-exception","text":"Wenn Sie sich die Klasse Exception in der Java-Dokumentation einmal anschauen, dann sehen Sie, dass diese Klasse ein Unmenge von Kindklassen hat. Wir betrachten hier einmal die f\u00fcr uns wichtigsten Klassen: Alle Exception-Klassen erben von der Klasse Exception , die im java.lang -Paket definiert ist. Grunds\u00e4tzlich werden zwei Arten von Exceptions unterschieden: checked Exceptions: Checked Exceptions m\u00fcssen gepr\u00fcft werden, d.h. Methoden, die eine checked Exception werfen k\u00f6nnen, m\u00fcssen in einen try-catch -Block integriert werden. Dies wird bereits zur Compilezeit gepr\u00fcft, d.h. das Programm l\u00e4sst sich gar nicht compilieren, wenn eine Methode, die eventuell eine checked Exception wirft, nicht in einem try -Block steht. In der Abbildung stehen checked Exceptions auf der rechten Seite (gr\u00fcn). unchecked Exceptions: Unchecked Exceptions k\u00f6nnen gepr\u00fcft werden, m\u00fcssen aber nicht. Alle unchecked Exceptions leiten sich von der Klasse RunTimeException ab. Wir werden uns genau mit diesen uncheck Exceptions, also von RunTimeException abgeleiteten Klassen besch\u00e4ftigen. Es gibt von RunTimeException noch viele weitere Kindklassen, wie man in der Java-Dokumentation sehen kann, aber die in der Abbildung gezeigten sind die wichtigsten. Eine Kindklasse davon, die IllegalArgumentException -Klasse wird f\u00fcr uns noch eine weitere Rolle spielen, da wir von ihr erben werden, wenn wir uns eigene Exception -Klassen erstellen.","title":"Die Vererbungshierarchie der Klasse Exception"},{"location":"exceptions/#try-catch-finally","text":"Prinzipiell besteht das Konstrukt try und catch nicht nur aus diesen beiden Bl\u00f6cken, sondern auch noch aus dem finally -Block. Der finally -Block wird grunds\u00e4tzlich immer ausgef\u00fchrt, egal, ob eine Exception geworfen wird oder nicht. Die Syntax ist wie folgt: try { // Anweisung(en), die evtl. Fehler verursachen (kritischer Abschnitt) } catch ( Exception e ) { // Behandlung der Exception } finally { // Aufraeumen, z.B. Schliessen von Dateien, Beenden von // Verbindungen zu Servern, Datenbanken etc. } Typischerweise wird der finally -Block dazu verwendet, bestimmte Ressourcen wieder freizugeben, z.B. Dateien zu schlie\u00dfen, Verbindungen zu Servern, Datenbanken usw. zu beenden. Wir werden finally jedoch nicht sehr oft implementieren.","title":"try-catch-finally"},{"location":"exceptions/#throws-eine-exception-weiterreichen","text":"Wir haben bis jetzt immer in den Methoden, in denen die kritische Anweisung ausgef\u00fchrt wurde, diese direkt mit einem try-catch -Block \"ummantelt\". Das muss nicht unbedingt sein. Wir k\u00f6nnen eine in einer Methode geworfene Exception auch an die aufrufende Methode weiterreichen. Dann kann (und sollte) die Exception in der aufrufenden Methode abgefangen und behandelt werden. Um anzugeben, dass eine Methode evtl. eine Exception wirft, wird das Schl\u00fcsselwort throws verwendet. Wir erweiteren also die Deklaration einer Methode (also den Methodenkopf) um throws und danach kommt der entsprechende Typ der Exxception, die in der Methode geworfen werden kann. Die allgemeine Syntax einer Methodendeklaration sieht somit so aus: [ modifizierer ] [ rueckgabetyp ] methodenname throws ExceptionType { // Anweisungsblock // wirft (evtl.) Exception } Wir betrachten auch daf\u00fcr ein Beispiel und erweiteren unsere Klasse Ausnahmen um die Methode getValueAtIndex : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 static int getValueAtIndex ( int [] field , int index ) throws ArrayIndexOutOfBoundsException { return field [ index ] ; } public static void main ( String [] args ) { System . out . println ( divide ( 5 , 0 )); // ArithmeticException System . out . println ( charAt ( \"Hallo\" , 5 )); // StringIndexOutOfBoundsException System . out . println ( \"Zahl: \" + inputInt ()); // NumberFormatException mehrereExceptions (); int value = 0 ; boolean ok = true ; int [] field = { 8 , 3 , - 4 , 2 , - 9 }; try { value = getValueAtIndex ( field , - 3 ); } catch ( ArrayIndexOutOfBoundsException e ) { System . out . println ( \"Index ausserhalb des Arrays!\" ); ok = false ; } if ( ok ) { System . out . println ( \"value : \" + value ); } } Obwohl die Methode eine kritische Anweisung enth\u00e4lt ( field[index] ), ist diese Anweisung nicht in einen try-catch -Block eingebunden. Es kann nun also sein, dass bei Aufruf der Methode eine Exception (eine ArrayIndexOutOfBoundsException ) geworfen wird. Wir geben das im Methodenkopf mithilfe von throws ArrayIndexOutOfBoundsException bekannt. Die aufrufende Methode ( main ) kann nun selbst den Aufruf der Methode getValueAtIndex() in einen try-catch -Block ummanteln und somit die Exception selbst abfangen und behandeln. Nur wenn keine Exception geworfen wird, wird der von der Methode getValueAtIndex() zur\u00fcckgegebene Wert ausgegeben. Wenn wir an unsere einleitenden Beispiele denken (Methoden charAt() und divide() ), dann erinnern wir uns, dass wir dort festegestellt haben, dss die Implementierung so nicht g\u00fcnstig war, da sie Nebeneffekte erzeugt hat, sobald eine Exception geworfen wurde. Diese Nebeneffekte werden bei der Implementierung von getValueAtIndex() vermieden, obwohl die grunds\u00e4tzliche Idee die gleiche ist, wie bei charAt() . Der Nachteil ist, dass man die aufrufende Methode \"zwingt\", die Exception selbst zu behandeln.","title":"throws - eine Exception weiterreichen"},{"location":"exceptions/#schoner-code","text":"Der letzte Satz aus dem vorherigen Abschnitt ist insofern nicht ganz richtig, dass mit unchecked Exceptions ja genau nicht erzwungen wird, eventuelle Exceptions abzufangen. Es gibt gute Gr\u00fcnde daf\u00fcr, alle eigenen Exceptions eher als checked Exceptions zu definieren, als als unchecked Exceptions. Aber zu eigenen Exceptions kommen wir gleich. Trotzdem k\u00f6nnen wir uns schon zum jetzigen Zeitpunkt einige Gedanken, \u00fcber sch\u00f6nen Code in Bezug auf Exceptions machen: eine Methode sollte immer nur eine Sache erledigen (single responsibility principle - SRP) \u2192 die Methode kann nicht auch noch f\u00fcr das Abfangen des Fehlers zust\u00e4ndig sein (try-catch-Bl\u00f6cke sind eh \u201eh\u00e4sslich\u201c und unleserlich) \u2192 lassen Sie Methode, die etwas eledigt, eine Exception werfen und leiten Sie diese weiter ( throws ) \u2192 fangen Sie den Fehler in einer anderen Methode ab ( try ) \u2192 Sie k\u00f6nnen sogar die eigentliche Behandlung des Fehlers ( catch ) in eine dritte Methode auslagern (single responsibility) H\u00e4ufig sieht man, dass die Methode, die den Fehler abf\u00e4ngt ( try ) im catch -Block den fehler protokolliert (in ein ErrorLog-File) und dann eine eigens erzeugte Exception an die Methode weiterleitet, die den Fehler behandelt. Wie man eine Exception erzeugt, schauen wir uns jetzt an.","title":"Sch\u00f6ner Code"},{"location":"exceptions/#throw-eigene-exceptions-erzeugen","text":"Zun\u00e4chst kommt ein neues Schl\u00fcsselwort hinzu, n\u00e4mlich throw . Ungl\u00fccklicherweise ist dies dem Schl\u00fcsselwort throws sehr \u00e4hnlich. Mit throw erzeugen (werfen) wir eine eigene Exception, mit throws wird im Methodenkopf angegeben, dass die Methode (eventuell) eine Exception wirft und diese an die aufrufende Methode weitergibt. Angenommen, f\u00fcr einen Konstruktor der Klasse Dreieck werden Seitenl\u00e4ngen \u00fcbergeben, die entweder kleiner als 0 oder die Summe von 2 Seitenl\u00e4ngen ist kleiner als die dritte Seite ist. Wir hatten uns bei der Bearbeitung der Aufgabe Traingle im ersten Semester bereits \u00fcberlegt, dass ddurch kein \"richtiges\" Dreieck erzeugt wird, aber wir konnten das noch nicht verhindern. das machen wir jetzt. Wie k\u00f6nnen wir also verhindern, dass ein solches Objekt erzeugt wird? Die L\u00f6sung besteht darin, eine eigene Exception zu definieren und diese im Fehlerfall zu werfen. Mithilfe des Schl\u00fcsselwortes throw wird also eine eigene Exception geworfen. Bis jetzt wurden unsere Exceptions ja geworfen. F\u00fcr eine eigene Exception haben wir zwei M\u00f6glichkeiten: entweder erstellen wir uns eine eigene Exception-Klasse und leiten diese von der Klasse Exception oder von der Klasse RunTimeException ab ( extends Exception bzw. extends RunTimeException ) oder wir verwenden eine bereits existierende Exception-Klasse (typischerweise IllegalArgumentException ).","title":"throw - eigene Exceptions erzeugen"},{"location":"exceptions/#throw-new-illegalargumentexception","text":"Wir implementieren unsere Klasse Triangle so, dass wir im Konstruktor f\u00fcr den Fall, dass eine Seite kleiner gleich 0 ist, eine IllegalArgumentException werfen. Dieser Exception kann ein String als Parameter \u00fcbergeben werden, der im catch -Block mittels getMessage() wieder ausgelesen werden kann. Das gleiche machen wir f\u00fcr den Fall, dass die Summe von zwei Seiten kleiner der dritten Seite ist. Triangle mit eigenen IllegalArgumentExceptions 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 public class Triangle { private int a , b , c ; public Triangle ( int a , int b , int c ) throws IllegalArgumentException { if ( a <= 0 || b <= 0 || c <= 0 ) { throw new IllegalArgumentException ( \"Seiten muessen groesser als 0 sein!\" ); } else if ( a >= ( b + c ) || b >= ( a + c ) || c >= ( a + b )) { throw new IllegalArgumentException ( \"Kein Dreieck!\" ); } else { this . a = a ; this . b = b ; this . c = c ; } } public static void main ( String [] args ) { Triangle d ; try { d = new Triangle ( 3 , 4 , 5 ); //(3,4,0) und (3,4,8) probieren } catch ( IllegalArgumentException e ) { System . out . println ( e . getMessage ()); } } } Der Konstruktor f\u00e4ngt die Exception nicht selbst auf und behandelt sie auch nicht selbst, sondern leitet sie an die aufrufende Methode weiter (Zeile 5 - throws IllegalArgumentException ). Im Konstruktor werden die Parameterwerte gepr\u00fcft und entweder eine IllegalArgumentException geworfen, falls eine Seite kleiner gleich 0 ist (Zeile 9 - throw new ) oder eine IllegalArgumentException geworfen, falls die Summe von zwei Seiten kleiner als die dritte Seite ist (Zeile 13 - throw new ) oder die Objektvariablen die Werte der Parameter bekommen (wenn alles ok ist - Zeilen 17-19 ). Die Erzeugung eines Triangle -Objektes (also der Aufruf des Konstruktors) ist nun in einen try-catch -Block eingebettet (Zeilen 26-32 ). Beachten Sie, dass es sein kann, dass d nach Aufruf des Konstruktors immernoch null ist (n\u00e4mlich dann, wenn eine Exception geworfen wird). Wir haben hier gleich die main -Methode mit in die Klasse genommen, das sollte man nat\u00fcrlich nicht machen.","title":"throw new IllegalArgumentException"},{"location":"exceptions/#eigene-exception-klasse-definieren","text":"Wir erstellen uns eigene Exception-Klassen f\u00fcr die oben beschriebenen \"Fehler\" im Konstruktor von Triangle . Diese eigenen Exception-Klassen erben von der Klasse Exception . Damit sind die eigenen Exceptions checked Exceptions, d.h. sie m\u00fcssen in einem try-catch -Block abgefangen und behandelt werden. Eigene Klasse IllegalTriangleException 1 2 3 4 5 6 7 8 9 10 public class IllegalTriangleException extends Exception { public IllegalTriangleException ( String s ) { super ( s ); } public IllegalTriangleException () { super ( \"Each side has to be smaller than the sum of the other sides!\" ); } } Die Klasse IllegalTriangleException verwenden wir f\u00fcr den Fall, dass die Summe zweier Seiten kleiner als die dritte Seite ist. Eigene Klasse IllegalSideLengthException 1 2 3 4 5 6 7 8 9 10 11 public class IllegalSideLengthException extends Exception { public IllegalSideLengthException ( String s ) { super ( s ); } public IllegalSideLengthException () { super ( \"Sides must be greater than zero!\" ); } } Die Klasse IllegalSideLengthException verwenden wir f\u00fcr den Fall, dass eine Seite kleiner gleich 0 ist. F\u00fcr beide Klassen haben wir jeweils einen parameterlosen Konstruktor definiert, der ein Objekt von Exception erzeugt und dem eine Fehlermeldung als String im Parameter \u00fcbergeben wird. Au\u00dferdem haben wir in beiden Klassen noch einen parametrisierten Konstruktor, dem eine Fehlermeldung als String \u00fcbergeben werden kann. Wir haben nun die Wahl, ob wir den paarmeterlosen oder den parametrisierten Konstruktor verwenden. Die Anwendung dieser beiden Exception-Klassen in der Klasse Triangle k\u00f6nnte nun so aussehen (wir haben hier auch gleich die main -Methode mit in die Klasse genommen, das sollte man nat\u00fcrlich nicht machen): Triangle mit den selbst definierten Exception-Klassen 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public class Triangle { private int a , b , c ; public Triangle ( int a , int b , int c ) throws Exception { if ( a <= 0 || b <= 0 || c <= 0 ) { throw new IllegalTriangleException (); } else if ( a >= ( b + c ) || b >= ( a + c ) || c >= ( a + b )) { throw new IllegalSideLengthException (); } else { this . a = a ; this . b = b ; this . c = c ; } } public static void main ( String [] args ) { Triangle d ; try { d = new Triangle ( 3 , 4 , 5 ); //(3,4,0) und (3,4,8) probieren } catch ( Exception e ) { System . out . println ( e . getMessage ()); } } } Beide eigenen Klassen sind ja auch vom Laufzeittyp Exception , da sie von dieser Klasse geerbt haben. Insofern ist der Parametertyp in der catch -Klausel mit Exception (Zeile 30 ) passend. Wenn Sie anstelle der Zeilen 27-33 nur d = new Triangle(3,4,5); schreiben, stellen Sie fest, dass sich das Programm nicht \u00fcbersetzen l\u00e4sst, da es sich um checked Exceptions handelt, die in einem try-catch -Block abgefangen werden m\u00fcssen. Eclipse bietet Ihnen dann aber einen QuickFix an Surround with try/catch . Das sollten Sie einmal ausprobieren. Wenn Sie anstelle von Exception von der Klasse RunTimeException erben, dann handelt es sich bei Ihren Exceptions um unchecked Exceptions. Es ist aber besseres Programmieren, wenn man checked Exceptions erstellt, denn dazu sind die Exceptions ja da, dass sie abgefangen und behandelt werden. Success Wir haben Exceptions kennengelernt. Solche Laufzeitfehler k\u00f6nnen an verschiedenen Stellen passieren und haben unterschiedliche Typen (siehe Kindklassen von Exception , insb. von RunTimeException ). Mithilfe von try-catch-[finally] k\u00f6nnen wir solche Exceptions abfangen und behandeln. Damit st\u00fcrzt unser Programm nicht mehr ab. Mithilfe von throws zeigt eine Methode an, dass sie eine Exception erzeugen kann. Das Schl\u00fcsselwort throw weist die Laufzeitumgebung an, das angegebene Laufzeitobjekt (eine Exception) zu erzeugen und zu werfen. Checked Exceptions m\u00fcssen behandelt werden (Aufruf der Exception-werfenden Methode in einem try-catch -Block). Unchecked Exceptions k\u00f6nnen behandelt werden, m\u00fcssen aber nicht, sollten aber. K\u00f6nnen wir ja jetzt schlie\u00dflich...","title":"Eigene Exception-Klasse definieren"},{"location":"git/","text":"Git \u00b6 Git ist ein Versionierungswerkzeug f\u00fcr die Softwareentwicklung. Mit Git k\u00f6nnen Sie Ihre Software versionieren, d.h. Versionen Ihrer Software erstellen und zwischen diesen Versionen hin- und herwecheseln sowie im Team gemeinsam an einem Softwareprojekt arbeiten und die einzelnen Entwicklungen aller Teammitglieder geeignet zusammenf\u00fchren. Git ist Open Source und frei verf\u00fcgbar . Entstanden ist Git im Rahmen der Entwicklung von Linux , initiiert durch Linus Torvalds , dem Initiator von Linux. Installation von Git \u00b6 Um Git verwenden zu k\u00f6nnen, m\u00fcssen Sie es zun\u00e4chst installieren. Laden Sie sich Git f\u00fcr Ihr Betriebssystem von der Download-Seite herunter bzw. gehen Sie so vor, wie f\u00fcr Ihr Betriebssystenm beschrieben. Installationshilfen erhalten Sie z.B. auch im frei verf\u00fcgbaren Git-Buch unter Git installieren oder auch im Video \u00fcber die ersten Schritte mit Git. Wenn Sie unter Windows arbeiten, dann erhalten Sie mit Git eine GitBash . Wenn wir von nun an vom Terminal (oder Shell oder Bash ) sprechen, dann verwenden Sie bitte immer diese GitBash . Nach erfolgreicher Installation k\u00f6nnen Sie im Terminal den Befehl git --version eingeben und es sollte eine Ausgabe, wie git version 2 .30.1 oder eine aktuellere Versionsnummer erfolgen. Wir k\u00f6nnen Git nun verwenden und betrachten zun\u00e4chst, wie Git als Versionierungswerkzeug verwendet werden kann und schauen uns danach an, wie es als Kollaborationswerkzeug verwendet wird. Git als Versionierungswerkzeug \u00b6 Die grunds\u00e4tzliche Idee von Git ist, \u00c4nderungen an Dateien und Ordnern so zu speichern, dass alle diese \u00c4nderungen nachverfolgbar sind. Git erzeugt sogenannte Snapshots aller Dateien und Ordner und speichert diese Snapshots nacheinander lokal ab. D.h. alles passiert bei Ihnen lokal auf dem Rechner, Sie ben\u00f6tigen keine Verbindung zu einem Server. Wenn Sie sp\u00e4ter im Team zu Mehreren an einem Projekt arbeiten, dann gleichen Sie immer nur die Historien Ihrer Snapshots ab. Git f\u00fcgt immer nur hinzu und das ist auch korrekt so. Selbst, wenn in sp\u00e4teren Versionen Ihres eine Datei nicht mehr existiert, die in fr\u00fcheren Versionen des Projektes noch existierte, soll diese Datei gar nicht gel\u00f6scht werden, denn es k\u00f6nnte ja sein, dass Sie irgendwann nochmal die fr\u00fchere Version anschauen wollen, die die Datei enthielt. Dieses Skript hier z.B. verwalte ich mit Git. Das bedeutet, dass alle Dateien eines Ordners (und Unterordnern) in einem sogenannten Git-Repository (oder nur Repository ) verwaltet werden. F\u00fcr dieses Skript hier k\u00f6nnte das z.B. so aussehen: Das hei\u00dft, ich erstelle zun\u00e4chst 3 Dateien: Einf\u00fchrung , Wiederholung und Git und \"sage\" Git, dass dies Version1 sein soll. Danach f\u00fcge ich 3 weitere Dateien hinzu Aufgaben , \u00dcbungen und Wrapperklassen und zusammen mit den vorherigen 3 Dateien aus Version 1 ergibt das dann Version 2 . Danach \u00e4ndere ich (f\u00fcge hinzu) die Dateien Aufgaben und \u00fcbungen und f\u00fcge au\u00dferdem neue Dateien f\u00fcr Exceptions und JUnit hinzu und \"sage\", dass das insgesamt Version 3 ergibt usw. Git verwaltet nun diese Versionen und der Vorteil ist, dass ich jede dieser Versionen separat zur Verf\u00fcgung stellen k\u00f6nnte und auch auf diesen Versionen weiterarbeiten. Wir werden in Zukunft in Bezug auf Git aber nicht mehr unbedingt von Versionen sprechen, sondern von Snapshots . Wir schauen uns das nun in einem Besipiel an. git init - ein Repository erstellen \u00b6 Angenommen, wir haben in unserem workspace folgende Ordner-Struktur: In dem workspace gibt es ein Projekt Projekt1 und darin einen src -Ordner mit unseren *.java -Dateien und einen bin -Ordner mit unseren *.class -Dateien. Wir lassen f\u00fcr dieses einf\u00fchrende Beispiel einmal Pakete weg. Diese w\u00fcrden ja als Ordner-Struktur sowohl innerhalb von src als auch von bin auftauchen. So sieht also ein typischer workspace aus. Es gibt darin noch weitere Ordner und Dateien, wie z.B. .idea , .metadata , .classpath , .project , .settings , die von unseren Entwicklungsumgebungen (Eclipse, IntelliJ, ...) angelegt wurden. Wir wollen nun unseren workspace von Git verwalten lassen. Dazu wechseln wir im Terminal in den workspace -Ordner und f\u00fchren dort das Kommando git init aus. Dieses Kommando erstellt das Git-Repository . Es muss genau einmal, n\u00e4mlich ganz am Anfang zur Erstellung des Repositorys ausgef\u00fchrt werden. Im Terminal erscheint Hinweis: Als Name f\u00fcr den initialen Branch wurde 'master' benutzt. Dieser Hinweis: Standard-Branchname kann sich \u00e4ndern. Um den Namen des initialen Branches Hinweis: zu konfigurieren, der in allen neuen Repositories verwendet werden soll und Hinweis: um diese Warnung zu unterdr\u00fccken, f\u00fchren Sie aus: Hinweis: Hinweis: git config --global init.defaultBranch <Name> Hinweis: Hinweis: H\u00e4ufig gew\u00e4hlte Namen statt 'master' sind 'main' , 'trunk' und Hinweis: 'development' . Der gerade erstellte Branch kann mit diesem Befehl Hinweis: umbenannt werden: Hinweis: Hinweis: git branch -m <Name> Leeres Git-Repository in /...IhrPfadZumWorkspaceOrdner.../workspace/.git/ initialisiert Somit wurde ein Git-Repository erstellt. Der workspace -Ordner wird nun von Git verwaltet. Dies erkennen Sie daran, dass in dem workspace -Ordner ein .git -Ordner angelegt wurde: Klicken Sie ruhig mal in den Ordner, um zu sehen, was da alles drin ist. .gitignore - Dateien aus der Verwaltung ausschlie\u00dfen \u00b6 Git w\u00fcrde nun den gesamten workspace -Ordner verwalten. Das w\u00e4re zun\u00e4chst auch gar kein Problem. Aber wenn Sie im Team zu mehreren am selben Projekt (workspace) arbeiten, dann wollen Sie bestimmte Dateien gar nicht untereinander austauschen, z.B. alle Dateien, die von Ihrer IDE erstellt wurden (z.B. .idea , .metadata , .classpath , .project , .settings ). Auch alle Dateien im bin -Ordner m\u00fcssen nicht von Git verwaltet werden, weil Sie ja stets neu durch das Compilieren erzeugt werden. Noch bevor wir nun also unsere erste Version erzeugen wollen, schlie\u00dfen wir zun\u00e4chst einige Ordner und Dateien aus der Verwaltung von Git aus. Dazu wird im workspace -Ordner eine Datei .gitignore erstellt, in die wir alle Dateien und Ordner eintragen, die wir aus der Git-Verwaltung ausschlie\u00dfen wollen. Bevor wir das machen, geben wir im Terminal in unserem workspace -Ordner einmal den Befehl git status ein. Dies wird der am meisten verwendete Befehl f\u00fcr uns sein, der mit dem Befehl bekommen wir Auskunft \u00fcber den aktuellen Status des Repositorys. Die Ausgabe derzeit ist Auf Branch master Noch keine Commits Unversionierte Dateien: ( benutzen Sie \"git add <Datei>...\" , um die \u00c4nderungen zum Commit vorzumerken ) .DS_Store .idea/ .metadata/ Projekt1/ nichts zum Commit vorgemerkt, aber es gibt unversionierte Dateien ( benutzen Sie \"git add\" zum Versionieren ) Das m\u00fcssen wir zum jetzigen Zeitpunkt noch nicht alles verstehen, aber wir sehen, dass Git derzeit die Datei .DS_Store und die Ordner .idea/ , .metadata/ und Projekt1/ verwaltet und wir ja eigentlich nur die Verwaltung von Projekt1/ w\u00fcnschen (und darin auch nicht alles). Wir erstellen uns also im workspace -Ordner eine .gitignore -Datei und geben darin ein: .DS_Store .idea .metadata Projekt1/bin Projekt1/.classpath Projekt1/.project Projekt1/.settings Damit geben wir an, dass die Datei .DS_Store ignoriert werden soll (gibt es nur unter Mac - legt der Finder automatisch zur schnelleren Suche an) sowie die Ordner .idea und .metadata . H\u00e4tten wir .idea/ und .metadata/ geschrieben, w\u00fcrde der Ordner jeweils selbst mit in der Git-Verwaltung sein, jedoch der Kontent nicht. Ansonsten soll auch noch der Ordner Projekt1/bin aus der Git-Verwaltung entfernt werden und alle Dateien und Ordner, die mit einem Punkt beginnen und im Ordner Projekt1 liegen. Wenn man alle Dateien ignorieren m\u00f6chte, die mit einem Punkt beginnen, egal in welchem ordner, dann k\u00f6nnte man auch .* in die .gitignore schreiben. Dann w\u00fcrde allerdings auch die .gitignore selbst dazugeh\u00f6ren. Diese kann und sollte man aber ruhig mit in die Git-Verwaltung aufnehmen. Eine \u00dcbersicht \u00fcber m\u00f6gliche Eintr\u00e4ge in die .gitignore findet man z.B. hier oder hier . Wenn wir jetzt erneut git status eingeben, dann ist die Ausgabe: Auf Branch master Noch keine Commits Unversionierte Dateien: ( benutzen Sie \"git add <Datei>...\" , um die \u00c4nderungen zum Commit vorzumerken ) .gitignore Projekt1/ nichts zum Commit vorgemerkt, aber es gibt unversionierte Dateien ( benutzen Sie \"git add\" zum Versionieren ) D.h. wir sehen, dass die Dateien und Ordner .DS_Store , .idea/ und .metadata/ nun nicht mehr mit verwaltet werden, daf\u00fcr aber die .gitignore . Wir haben jetzt ein Git-Repoitory , aber es ist noch leer. Wir f\u00fcgen nun Dateien diesem Repository hinzu. git add - dem Repository Dateien hinzuf\u00fcgen \u00b6 Wir haben noch keine Ordner und Dateien in unser Repository aufgenommen, d.h. es werden noch keine \u00c4nderungen an diesen Dateien durch Git verwaltet. Um Dateien dem Repository hinzuzuf\u00fcgen, verwenden wir das Kommando git add . Wir wollen den Ordner Projekt1 und die Datei .gitignore dem Repository hinzuf\u00fcgen, um sie von nun an von Git verwalten zu lassen (d.h. ihre \u00c4nderungen zu \"protokollieren\"). Wir geben im Terminal im workspace -Ordner ein: git add .gitignore git add Projekt1 und f\u00fcgen somit den gesamten Ordner Projekt1 (aber nicht die in der .gitignore definierten Dateien und Ordner aus dem Ordner Projekt1 ) und die .gitignore -Datei dem Repository hinzu. git status ergibt nun: Auf Branch master Noch keine Commits Zum Commit vorgemerkte \u00c4nderungen: ( benutzen Sie \"git rm --cached <Datei>...\" zum Entfernen aus der Staging-Area ) neue Datei: .gitignore neue Datei: Projekt1/src/A.java neue Datei: Projekt1/src/B.java D.h. von nun an werden von Git die Dateien .gitignore , Projekt1/src/A.java und Projekt1/src/B.java verwaltet. Die Dateien A.java und B.java sind jetzt noch leer. Wann immer wir eine neue Datei in unserem workspace erstellen und wir wollen, dass sie von Git verwaltet wird, f\u00fcgen wir diese Datei mit git add <datei> dem repository hinzu! Wann immer wir eine neue Datei in unserem workspace erstellen und wir nicht wollen, dass sie von Git verwaltet wird, f\u00fcgen wir diese Datei der .gitignore -Datei hinzu! Mit dem Befehl git add . werden einfach immer alle neuen Dateien hinzugef\u00fcgt. Wir werden diesen Befehl h\u00e4ufig nutzen, um nicht alle neuen Dateien einzeln aufzulisten. Es gibt f\u00fcr add auch die Option --all ( -A ), mit der alle Dateien aus einem Ordner hinzugef\u00fcgt werden. git commit - einen Snapshot erstellen \u00b6 Mit git commit \"speichern\" wir das gesamte Repository. Git merkt sich den Stand aller Dateien und Ordner und den Zeitpunkt des Commits. Zus\u00e4tzlich geben wir zum git commit noch eine Commit-Nachricht an, um den Stand der Arbeit zu beschreiben. In einem Snapshot werden alle \u00c4nderungen im Vergleich zum vorherigen Snapshot gespeichert. Man kann sich also die Versionierung mit Git wie eine Reihe von Commits (Snapshots) vorstellen: Ganz am Anfang ein initiales Commit ( C0 ), dann wurde weiter gearbeitet und ein weiteres Commit ( C1 ) gesetzt und so weiter ( C2 ). Es ist ohne Probleme m\u00f6glich, wieder zum Stand von C1 oder sogar C0 \"zur\u00fcckzuspringen\" (zeigen wir sp\u00e4ter, wie). Zun\u00e4chst erstellen wir unser initiales Commit. Dazu geben wir im Terminal im workspace -Ordner ein: git commit -m \"Initiales Commit. A.java und B.java jeweils leer.\" es erscheint die Ausgabe: [ master ( Root-Commit ) 8236e8a ] Initiales Commit. A.java und B.java jeweils leer. 3 files changed, 8 insertions ( + ) create mode 100644 .gitignore create mode 100644 Projekt1/src/A.java create mode 100644 Projekt1/src/B.java Unser erstes Commit (das sogenannte Root-Commit ) wurde erstellt. Wir haben jetzt einen \"gespeicherten\" Ausgangszustand, zu dem wir immer wieder zur\u00fccksetzen k\u00f6nnten. Unser \"Entwicklungsstrang\" nennt sich Branch . Der Hauptstrang , an dem wir versuchen, alle Entwicklungen immer ordentlich zusammenzuf\u00fchren, nennt sich master -Branch. Das letzte Commit ist stets der HEAD . Derzeit ist unser HEAD also dieses initiale Commit. Die Begriffe sind in der folgenden Abbildung dargestellt: Wir \u00e4ndern nun mal die Datei Projekt1/src/A.java und f\u00fcgen dort einfach ein Zeilenkommentar // Zeile 1 hinzugefuegt // hinzu. Wenn wir nun git status aufrufen, erscheint Auf Branch master \u00c4nderungen, die nicht zum Commit vorgemerkt sind: ( benutzen Sie \"git add <Datei>...\" , um die \u00c4nderungen zum Commit vorzumerken ) ( benutzen Sie \"git restore <Datei>...\" , um die \u00c4nderungen im Arbeitsverzeichnis zu verwerfen ) ge\u00e4ndert: Projekt1/src/A.java keine \u00c4nderungen zum Commit vorgemerkt ( benutzen Sie \"git add\" und/oder \"git commit -a\" ) Wir k\u00f6nnen diese \u00c4nderung nun committen, indem wir die Option -a verwenden (oder zuvor git add Projekt1/src/A.java ): git commit -am \"in A.java Zeile 1 hinzugefuegt\" Wir erhalten die Ausgabe: [ master 44ed3a8 ] in A.java Zeile 1 hinzugefuegt 1 file changed, 2 insertions ( + ) Wir haben jetzt einen neuen HEAD , nicht mehr das Root-Commit mit der \"Nummer\" 8236e8a , sondern nun dieses zweite Commit mit der \"Nummer\" 44ed3a8 . Diese Nummern sind Hash-Werte. Tats\u00e4chlich sind diese Hash-Werte sogar l\u00e4nger. Wir k\u00f6nnen Sie uns mit git log anzeigen lassen. git log und git show \u00b6 Mit git log k\u00f6nnen Sie sich alle Ihre Commits auflisten lassen. In unserem jetzigen Zustand erzeugt git log folgende Ausgabe: commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd ( HEAD -> master ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 18 :13:48 2021 +0200 in A.java Zeile 1 hinzugefuegt commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. Wenn Ihnen diese Ansicht zu un\u00fcbersichtlich ist, k\u00f6nnen Sie die Option --oneline verwenden: git log --oneline erzeugt: 44ed3a8 ( HEAD -> master ) in A.java Zeile 1 hinzugefuegt 8236e8a Initiales Commit. A.java und B.java jeweils leer. git branch und git ckeckout - Branches in Git \u00b6 Unser Repository sieht derzeit so aus: Angenommen, wir wollen etwas ausprobieren und unabh\u00e4ngig von dem Hauptentwicklungsstrang (dem master -Branch) z.B. an Projekt1/src/B.java arbeiten, ohne aber den bisherigen Stand zu \"gef\u00e4rden\". Dazu gibt es die M\u00f6glichkeit, neue, eigene Branches zu erstellen. Diese gehen von einem Commit des master -Branches aus und k\u00f6nnen sp\u00e4ter auch wieder auf den master -Branch f\u00fchren (oder, falls unser Ausprobieren doch nicht erfolgreich war, auch nicht). Einen neuen Branch erstellen wir mit git branch <nameDesNeuenBranches> . Wir erstellen uns einen Branch tryB : git branch tryB Dabei passiert erstmal noch gar nichts. Es wird nur ein Link auf das letzte Commit (den HEAD ) erzeugt und dieser Link hei\u00dft tryB . Wenn wir jetzt einfach erstmal an Projekt1/src/A.java weiterarbeiten w\u00fcrden und die \u00c4nderungen committen, stellen wir fest, dass wir tats\u00e4chlich am master -Branch weiterarbeiten. Um das zu zeigen, \u00e4ndern wir die Datei Projekt1/src/A.java und f\u00fcgen einen weiteren Zeilenkommentar hinzu. // Zeile 1 hinzugefuegt // Zeile 2 hinzugefuegt // Wir wissen bereits, wie wir diese \u00c4nderung committen: git commit -am \"in A.java Zeile 2 hinzugefuegt\" git log ergibt: commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde ( HEAD -> master ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Sat Apr 3 09 :09:54 2021 +0200 in A.java Zeile 2 hinzugefuegt commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd ( tryB ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 18 :13:48 2021 +0200 in A.java Zeile 1 hinzugefuegt commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. Das zeigt uns, dass wir am master -Branch weitergearbeitet haben und dass HEAD auf den master -Branch zeigt. Wir sehen aber auch, dass wir auf dem zweiten Commit einen Link tryB haben. Wir wollen jetzt aber auf diesem tryB -Branch arbeiten und nutzen dazu den Befehl git checkout <branch> : git checkout tryB Damit haben wir 2 Sachen getan: arbeiten wir jetzt auf einem anderen Branch, als dem master -Branch, n\u00e4mlich dem tryB -Branch und setzen wir auf den Zustand auf, den wir mit dem Commit gespeichert hatten ( 44ed3a8 ), auf den tryB zeigt. Den 2. Punkt k\u00f6nnen wir \u00fcberpr\u00fcfen, indem wir uns die Datei Projekt1/src/A.java anschauen. Die sieht n\u00e4mlich jetzt (wieder) so aus: // Zeile 1 hinzugefuegt // Wir f\u00fcgen nun das Gleiche in die Projekt1/src/B.java ein: // Zeile 1 hinzugefuegt // und committen diese \u00c4nderung: git commit -am \"in B.java Zeile 1 hinzugefuegt\" Die Commits lassen wir uns zun\u00e4chst mit git log anzeigen: commit e754d18f0d8cb1e8593edca740fa75b84d5de30f ( HEAD -> tryB ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Sat Apr 3 09 :56:28 2021 +0200 in B.java Zeile 1 hinzugefuegt commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 18 :13:48 2021 +0200 in A.java Zeile 1 hinzugefuegt commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. Wir sehen, dass alle Commits aufgelistet werden, die bis zum aktuellen HEAD f\u00fchren. Es fehlt aber beispielsweise das Commit, das bereits f\u00fcr den master -Branch ausgef\u00fchrt wurde und in dem in Projekt1/src/A.java bereits Zeile 2 hinzugefuegt wurde. Um sich alle Commits auszugeben und sogar eine Graph-\u00e4hnliche Darstellung zu erhalten, verwenden wir git log --all --graph Wir erhalten folgende Ausgabe: * commit e754d18f0d8cb1e8593edca740fa75b84d5de30f ( HEAD -> tryB ) | Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 09 :56:28 2021 +0200 | | in B.java Zeile 1 hinzugefuegt | | * commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde ( master ) | / Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 09 :09:54 2021 +0200 | | in A.java Zeile 2 hinzugefuegt | * commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd | Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Fri Apr 2 18 :13:48 2021 +0200 | | in A.java Zeile 1 hinzugefuegt | * commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. und daraus erkennt man, dass unser Repository (die Commit-Hostorie) derzeit so aussieht: git merge - Branches zusammenf\u00fchren \u00b6 Wir haben folgende Situation: ausgehend von Commit 44ed3a8 ( in A.java Zeile 1 hinzugefuegt ) haben wir auf dem master -Branch weitergearbeitet und dort ein Commit 9c869b6 ( in A.java Zeile 2 hinzugefuegt ) erstellt und parallel dazu auf dem tryB -Branch gearbeitet und dort ein Commit e754d18 ( in B.java Zeile 1 hinzugefuegt ) erstellt. Nun wollen wir beide Branches wieder zusammenf\u00fchren, um mit beiden \u00c4nderungen weiterzuarbeiten. Das Zusammenf\u00fchren von Branches erfolgt mithilfe von git merge <branchToMerge> . Wir wollen gerne den tryB -Branch in den master -Branch mergen , um dann mit dem master -Branch weiterzuarbeiten. Dazu wechseln wir zun\u00e4chst in den master -Branch. das erreichen wir, indem wir checkout verwenden: git checkout master Die Ausgabe ist Zu Branch 'master' gewechselt Nun mergen wir diesen mit dem tryB -Branch, indem wir git merge tryB eingeben. Wichtig ist, dass es sich hierbei auch um ein erzwungenes Commit (sogenanntes Merge-Commit ) handelt, da beide Branches eigene Commits enthielten. Es wird uns eine Commit-nachricht angeboten. Mit ZZ verlassen wir den vi . Wenn wir uns nun die Commit-Logs ausgeben lassen ( git log --all --graph ), dann erhalten wir folgende Ausgabe * commit 7ffabf8646580d6bb2ba289de93e6fe20b894084 ( HEAD -> master, tryB ) | \\ Merge: e754d18 9c869b6 | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 16 :21:12 2021 +0200 | | | | Merge branch 'master' into tryB | | | * commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 09 :09:54 2021 +0200 | | | | in A.java Zeile 2 hinzugefuegt | | * | commit e754d18f0d8cb1e8593edca740fa75b84d5de30f | / Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 09 :56:28 2021 +0200 | | in B.java Zeile 1 hinzugefuegt | * commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd | Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Fri Apr 2 18 :13:48 2021 +0200 | | in A.java Zeile 1 hinzugefuegt | * commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. und erkennen, dass die beiden Branches nun wieder \"vereint\" sind: Wenn wir uns A.java anschauen, dann sehen wir, dass diese Datei 2 Zeilen enth\u00e4lt und die Datei B.java eine. Beide sind also auf dem aktuellsten Stand. Wir \u00fcben Mergen an dieser Stelle nochmal und bilden 2 Branches, in dem einen erstellen wir uns eine \"Klasse\" C.java und in dem anderen eine D.java : git branch classC git branch classD git checkout classC touch Projekt1/src/C.java echo \"// Zeile 1 hinzugefuegt\" >> Projekt1/src/C.java git add Projekt1/src/C.java git commit -m \"in C.java Zeile 1 hinzugefuegt\" git checkout classD touch Projekt1/src/C.java echo \"// Zeile 1 hinzugefuegt\" >> Projekt1/src/D.java git add Projekt1/src/D.java git commit -m \"in D.java Zeile 1 hinzugefuegt\" git checkout master git merge classC Hierbei handelt es sich um ein sogenanntes Fast-Forward-Commit , da der master -Branch keine eigenen \u00c4nderungen enthielt, sondern nur die \u00c4nderungen des classC -Branches in den master -Branch eingef\u00fcgt werden m\u00fcssen. Es gibt hier keine potenziellen Konflikte. Wenn wir nun aber auch den classD -Branch in den master -Branch mergen wollen, enth\u00e4lt sowohl der master -Branch \u00c4nderungen ( C.java ) als auch der classD -Branch ( D.java ). Hierbei handelt es sich also um ein Merge-Commit : git merge classD vi \u00f6ffnet und wir k\u00f6nnen die Commit-Message \u00e4ndern oder sie so lassen. Wir beenden den vi wieder mit ZZ . git log --all --graph zeigt: * commit 15d5e0b00f2a4af5eaa4d84ba55e340f912ccb42 ( HEAD -> master ) | \\ Merge: 0d86294 01f8dfd | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 17 :12:18 2021 +0200 | | | | Merge branch 'classD' | | | * commit 01f8dfd9c68148c984db99dec980d227f1fe4044 ( classD ) | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 17 :05:46 2021 +0200 | | | | in D.java Zeile 1 hinzugefuegt | | * | commit 0d8629458ca0a5e244c121be525f8e647b5c6bd9 ( classC ) | / Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 16 :51:14 2021 +0200 | | in C.java Zeile 1 hinzugefuegt | * commit 7ffabf8646580d6bb2ba289de93e6fe20b894084 ( tryB ) | \\ Merge: e754d18 9c869b6 | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 16 :21:12 2021 +0200 | | | | Merge branch 'master' into tryB | | | * commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 09 :09:54 2021 +0200 | | | | in A.java Zeile 2 hinzugefuegt | | * | commit e754d18f0d8cb1e8593edca740fa75b84d5de30f | / Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 09 :56:28 2021 +0200 | | in B.java Zeile 1 hinzugefuegt | * commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd | Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Fri Apr 2 18 :13:48 2021 +0200 | | in A.java Zeile 1 hinzugefuegt | * commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. Die Commit-Historie unseres Repositories sieht so aus: Eine umfangreiche Beschreibung aller \u00c4nderungen in den jeweiligen Commits erhalten Sie auch durch den Befehl git show --pretty=fuller --abbrev-commit . Konflikte aufl\u00f6sen \u00b6 Gerade bei der Arbeit im Team kann es passieren, dass in verschiedenen Branches an der gleichen Datei \u00c4nderungen durchgef\u00fchrt werden. Wenn diese Branches dann \"gemerged\" werden sollen, kann Git diesen Konflikt nicht alleine aufl\u00f6sen (soll \u00c4nderung A gelten oder \u00c4nderung B oder beide?). Die Aufl\u00f6sung eines solchen Konfliktes muss durch die Entwicklerinnen geschehen. Zur Demonstration erzeugen wir uns erneut zwei Branches, changeA1 und changeA2 und f\u00fchren in beiden Branches eine \u00c4nderung an Projekt1/src/A.java durch: git branch changeA1 git branch changeA2 git checkout changeA1 echo \"// eine \u00c4nderung durch Entwicklerin A\" >> Projekt1/src/A.java git commit -am \"in A eine \u00c4nderung durch Entwicklerin A\" git checkout changeA2 echo \"// eine \u00c4nderung durch Entwicklerin B\" >> Projekt1/src/A.java git commit -am \"in A eine \u00c4nderung durch Entwicklerin B\" Wenn wir jetzt versuchen, die beiden Branches mit git merge changeA1 zu mergen, dann erhalten wir folgende Ausgabe: automatischer Merge von Projekt1/src/A.java KONFLIKT ( Inhalt ) : Merge-Konflikt in Projekt1/src/A.java Automatischer Merge fehlgeschlagen ; beheben Sie die Konflikte und committen Sie dann das Ergebnis. Git kann diesen Konflikt nicht automatisch aufl\u00f6sen. Die Ausgabe von git status hilft dabei nicht wirklich weiter: Auf Branch changeA2 Sie haben nicht zusammengef\u00fchrte Pfade. ( beheben Sie die Konflikte und f\u00fchren Sie \"git commit\" aus ) ( benutzen Sie \"git merge --abort\" , um den Merge abzubrechen ) Nicht zusammengef\u00fchrte Pfade: ( benutzen Sie \"git add/rm <Datei>...\" , um die Aufl\u00f6sung zu markieren ) von beiden ge\u00e4ndert: Projekt1/src/A.java keine \u00c4nderungen zum Commit vorgemerkt ( benutzen Sie \"git add\" und/oder \"git commit -a\" ) Mit git log --merge k\u00f6nnen wir uns die Commits anschauen, die die \u00c4nderungen enthalten, welche f\u00fcr den Konflikt sorgen: commit da1f715199e68f17ea276b07a9c3a6e88b319e8a ( HEAD -> changeA2 ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Sun Apr 4 08 :08:13 2021 +0200 in A eine \u00c4nderung durch Entwicklerin B commit 63a9a40ab267bc53f2a688a45e6813d7c15170c6 ( changeA1 ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Sun Apr 4 08 :07:25 2021 +0200 in A eine \u00c4nderung durch Entwicklerin A Der Befehl git diff zeigt uns den Konflikt ganz konkret an: diff --cc Projekt1/src/A.java index a5c84c3,a920d29..0000000 --- a/Projekt1/src/A.java +++ b/Projekt1/src/A.java @@@ -1,4 -1,4 +1,8 @@@ // Zeile 1 hinzugefuegt // Zeile 2 hinzugefuegt // ++ <<<<<< < HEAD +// eine \u00c4nderung durch Entwicklerin B ++ ======= + // eine \u00c4nderung durch Entwicklerin A ++>>>>>>> changeA1 Diese Darstellung in der Datei finden wir auch wieder, wenn wir uns die Datei Projekt1/src/A.java anschauen: // Zeile 1 hinzugefuegt // Zeile 2 hinzugefuegt // <<<<<< < HEAD // eine \u00c4nderung durch Entwicklerin B ======= // eine \u00c4nderung durch Entwicklerin A >>>>>>> changeA1 In unserer Konflikt-Datei gibt es folgende drei Eintr\u00e4ge: <<<<<<< HEAD ======= >>>>>>> changeA1 Aller Inhalt zwischen den ersten beiden Zeilen enth\u00e4lt die \u00c4nderungen des aktuellen Branches und alle \u00c4nderungen zwischen den letzten beiden Zeilen enth\u00e4lt alle \u00c4nderungen des Branches, in den gemerged werden soll ( changeA1 ). Entwicklungsumgebungen (IntelliJ, Eclipse, Atom, Visual Studio Code usw.) unterst\u00fctzen bei der Aufl\u00f6sung solcher Konflikte. Wir \u00fcbernehmen einfach beide \u00c4nderungen h\u00e4ndisch und committen diese \u00c4nderung. Projekt1/src/A.java sieht also jetzt so aus: // Zeile 1 hinzugefuegt // Zeile 2 hinzugefuegt // // eine \u00c4nderung durch Entwicklerin B // eine \u00c4nderung durch Entwicklerin A und der Commit: git commit -am \"Merge-Konflikt in A.java geloest. Aenderungen A UND B eingefuegt\" . Merge abbrechen \u00b6 Sollten Sie aufgrund der Konfliktmeldung den Merge-Vorgang doch nicht durchf\u00fchren wollen, k\u00f6nnen Sie mit git merge --abort den Merge abbrechen und mit git reset die in Konflikt stehenden Dateien auf einen als funktionierend bekannten Zustand zur\u00fcckzusetzen. git stash - Arbeit unterbrechen \u00b6 Angenommen, Sie haben bereits \u00c4nderungen durchgef\u00fchrt, diese sind aber noch nicht \"fertig\" und Sie wollen Sie deshalb noch nicht committen. Stattdessen m\u00fcssen Sie aber an anderer Stelle zun\u00e4chst noch einen BugFix erledigen. Dann k\u00f6nnen Sie Ihre gegenw\u00e4rtigen \u00c4nderungen \"stashen\" - in einen Stash-Modus setzen, also erstmal verstauen , um daran sp\u00e4ter weiterzuarbeiten: git stash Jetzt k\u00f6nnen Sie erstmal andere \u00c4nderungen durchf\u00fchren und committen und um dann wieder zu Ihren urspr\u00fcnglichen \u00c4nderungen zur\u00fcckzukehren, holen Sie diese wieder aus dem Stash-Modus: git stash pop Einige weitere n\u00fctzliche Befehle \u00b6 Angenommen, Sie haben committed, aber einige \u00c4nderungen vergessen (entweder vorher nicht geadded oder noch gar nicht ge\u00e4ndert), dann k\u00f6nnen Sie den vorherigen Commit \"\u00fcberschreiben\". git commit -m \"zu frueh committed\" // jetzt noch die Aenderungen hinzufuegen git commit --amend Angenommen, Sie haben seit dem letzten Commit \u00c4nderungen an Dateien vorgenommen, die Sie aber gerne verwerfen m\u00f6chten. Sie werden in der Literatur daf\u00fcr Befehle finden, wie z.B. git checkout HEAD oder git reset --hard . Sie sollten damit \u00e4u\u00dferst vorsichtig sein! Bei git checkout HEAD (aslo dem \"Zur\u00fccksetzen\" auf das letzte Commit) bleiben die ge\u00e4nderten Dateien \"modifiziert\". Das hilft also gar nicht wirklich. git reset --hard kann Sie unter Umst\u00e4nden auf ein Commit zur\u00fccksetzen, das noch weiter zur\u00fcck in der Historie liegt, als Sie planen. Verwenden Sie zum Zur\u00fccksetzen Ihrer \u00c4nderungen (Undo) besser git restore <dateiUndo> Geben Sie also die Datei an, die Sie ge\u00e4ndert haben und die wieder auf den Zustand des letzten Commits zur\u00fcckgesetzt werden soll. L\u00f6schen Sie niemals einfach Dateien oder Ordner in dem durch Git verwalteten Ordner (Ihrem Repository) \u00fcber den Finder oder den Dateiexplorer! Die Idee von Git ist die, dass immer nur etwas hinzukommt. Selbst, wenn Sie eine bestimmte Datei nicht mehr ben\u00f6tigen, so kann es ja doch sein, dass diese in fr\u00fcheren Versionen vorkommt. Lassen Sie sie einfach im Verzeichnis! Aliases \u00b6 Es ist ganz hilfreich, sich f\u00fcr einige Optionen Aliase zu definieren, da diese oft verwendet werden. Dazu nutzen Sie git config . Hier einige Beispiele von n\u00fctzlichen Aliases (aus dem Git-Buch ): git config --global alias.co checkout git config --global alias.br branch git config --global alias.ci commit git config --global alias.st status Git als Kollaborationswerkzeug \u00b6 Im vorherigen Abschnitt haben wir diskutiert, wie wir Git zur Versionsverwaltung verwenden k\u00f6nnen. Dazu haben wir ein lokales Git-Repository angelegt. Nun wollen wir betrachten, wie Git als Kollaborationswerkzeug eingesetzt werden kann, d.h. wie mehere Entwicklerinnen zusammen an einem (globalen) Git-Repository arbeiten k\u00f6nnen. Dazu ben\u00f6tigen wir einen Host (Bereitsteller netzbasierter Dienste), der ein zentrales Git-Repository zur Verf\u00fcgung stellen kann. Es gibt mehrere solcher Git-Hosts. Die bekanntesten sind: GitHub GitLab Bibucket Wir zeigen das Verwenden eines zentralen Repositories exemplarisch f\u00fcr GitHub . Sie m\u00fcssen sich in GitHub registrieren . Die Verwendung von GitHub ist kostenlos . Die Idee eines zentralen Repositorys ist die, dass daran mehrere lokale Repositories angebunden sein k\u00f6nnen: \u00dcber das zentrale Repository werden alle lokalen Repositories synchronisiert, so dass alle Repositories \u00fcber den gleichen Stand, d.h. alle Dateien und Ordner sowie die gleiche Commit-Historie verf\u00fcgen. Wichtig ist jedoch, dass man zum Entwickeln nicht permanent online sein muss. Vielmehr kann man beliebig lange offline auf dem eigenen lokalen Repository arbeiten, bis man irgendwann seine \u00c4nderungen in das zentrale Repository schreiben ( push ) bzw. dort abgelegte \u00c4nderungen aus anderen lokalen Repositories lesen ( pull ) m\u00f6chte. Ein zentrales Repository anlegen \u00b6 Sie loggen sich in GitHub (oder dem von Ihnen gew\u00e4hlten Diensteanbieter) ein und klicken auf \"New\": Dann geben Sie einen sprechenden Namen f\u00fcr das Repository ein. Sie k\u00f6nnen w\u00e4hlen, ob das Repository Public (f\u00fcr alle lesbar) oder Private (nur f\u00fcr Eingeladene lesbar) sein soll. Die darunter stehenden Checkboxen sollten Sie nicht anklicken, da Sie ein bereits existierendes lokales Repository mit diesem zentralen Repository verbinden wollen. In Ihrem lokalen Repository haben Sie ja wahrscheinlich bereits eine .gitignore -Datei. W\u00fcrden Sie diese Checkboxen markieren, m\u00fcssten Sie bereits ganz am Anfang mergen . Klicken Sie auf den Button Create repository . Das zentrale Repository ist nun erstellt. Nun m\u00fcssen wir nur noch vorgehen, wie auf der Seite angegeben: Im Terminal f\u00fchren wir im workspace -Ordner (in unserem lokalen Repository - der Ordner, der den .git -Ordner enth\u00e4lt) den Befehl git remote add origin https://github.com/jfreiheit/einfuehrung-git.git aus. https://github.com/jfreiheit/einfuehrung-git.git entspricht dabei der sogenannten Remote-URL und lautet bei Ihnen nat\u00fcrlich anders. Es ist der Pfad (die URL) zu Ihrem zentralen Git-Repository. Mit diesem Befehl verbinden wir unser lokales Git-Repository mit dem zentralen Git-Repository. Wir geben dem zentralen Git-Repository dabei den Namen origin . Den n\u00e4chsten von GitHub vorgeschlagenen Befehl git branch -M main k\u00f6nnen wir ebenfalls ausf\u00fchren. Wir wissen bereits, dass wir damit einen neuen Branch erstellen, n\u00e4mlich main . Wir verlassen also den master -Branch und wechseln zu einem neuen main -Branch. Das kann man machen, muss man aber nicht. Die Option -M steht f\u00fcr --move --force . Damit bestimmen wir, dass wir einen main -Branch erstellen, selbst wenn dieser bereits existierte. Siehe auch die Dokumentation f\u00fcr git branch . Der dritte von GitHub vorgeschlagene Befehl git push -u origin main bewirkt, dass unser komplettes lokales Git-Repository auf das zentrale Git-Repository gespielt wird. Das hei\u00dft, der aktuelle Branch main wird auf das zentrale Git-Repository origin gepushed . Nach Ausf\u00fchrung dieses Befehls ist das zentrale Repository auf dem selben Stand wie das lokale Repository. Alltag mit Git \u00b6 Ihr lokales Repository ist nun mit dem zentralen Repository verkn\u00fcpft. Wenn Sie jetzt \u00c4nderungen an Ihrem Code (Ihrem lokalen Repository) durchf\u00fchren und diese \u00c4nderungen auf dem zentralen Repository speichern wollen, sieht Ihr \"Alltag\" wie folgt aus. git add - eine neue Datei hinzuf\u00fcgen \u00b6 Angenommen, Sie erstellen eine neue Klasse (Datei), z.B. Projekt1/src/E.java , dann f\u00fcgen Sie diese neue Datei mit git add <neueDatei> Ihrem lokalen Repository hinzu: git add Projekt1/src/E.java Wenn Sie sich dann mit git status den Status des Repositorys anschauen, erhalten Sie Auf Branch main Ihr Branch ist auf demselben Stand wie 'origin/main' . Zum Commit vorgemerkte \u00c4nderungen: ( benutzen Sie \"git restore --staged <Datei>...\" zum Entfernen aus der Staging-Area ) neue Datei: Projekt1/src/E.java Neue Dateien f\u00fcgen Sie mittels git add <neueDatei> dem Repository hinzu. git commit - \u00c4nderungen \"speichern\" \u00b6 Angenommen, Sie haben \u00c4nderungen an Dateien hinzugef\u00fcgt, diese Dateien sind aber bereits Teil des Repositorys (wurden also bereits bei Erstellung mit git add hinzugef\u00fcgt). Dann speichern Sie diese \u00c4nderungen mit git commit -am \"Commit-Message\" . Angenommen, wir haben in Projekt1/src/E.java 2 Zeilen hinzugef\u00fcgt, dann committen wir diese \u00c4nderungen z.B. mit git commit -am \"in E.java 2 Zeilen hinzugefuegt\" Die Option -m steht daf\u00fcr, dass wir gleich die Commit-Message mit angeben. Fehlt diese Option, \u00f6ffnet sich ein vi und wir f\u00fcgen die Commit-Message nachtr\u00e4glich hinzu. Den vi verlassen wir mit ZZ . Die Option -a steht f\u00fcr add . Jede \u00c4nderung muss zun\u00e4chst hinzugef\u00fcgt werden. H\u00e4ufig sieht man daf\u00fcr die Verwendung des Befehls git add . . Das l\u00e4sst sich aber mit der Option -a auch beim Commit selbst erledigen. Wenn Sie sich dann mit git status den Status des Repositorys anschauen, erhalten Sie Auf Branch main Ihr Branch ist 1 Commit vor 'origin/main' . ( benutzen Sie \"git push\" , um lokale Commits zu publizieren ) nichts zu committen, Arbeitsverzeichnis unver\u00e4ndert \u00c4nderungen am Code (Repository) \"committen\" (speichern) Sie mittels git commit -am \"Commit-Message\" . git push - \u00c4nderungen auf das zentrale Repository spielen \u00b6 Sie k\u00f6nnen beliebig lange und oft Ihr lokales Repository \u00e4ndern, wie im Abschnitt Git als Versionierungswerkzeug beschrieben. Wenn Sie Ihr lokales Repository auf Ihr zentrales Repository spielen m\u00f6chten, verwenden Sie den Befehl git push . Damit stellen Sie das zentrale Repository auf den Stand Ihres lokalen Repositorys. git push ergibt folgende Ausgabe: Objekte aufz\u00e4hlen: 8 , fertig. Z\u00e4hle Objekte: 100 % ( 8 /8 ) , fertig. Delta-Kompression verwendet bis zu 8 Threads. Komprimiere Objekte: 100 % ( 3 /3 ) , fertig. Schreibe Objekte: 100 % ( 5 /5 ) , 439 Bytes | 439 .00 KiB/s, fertig. Gesamt 5 ( Delta 1 ) , Wiederverwendet 0 ( Delta 0 ) , Pack wiederverwendet 0 remote: Resolving deltas: 100 % ( 1 /1 ) , completed with 1 local object. To https://github.com/jfreiheit/einfuehrung-git.git 15d5e0b..6ddd0dc main -> main Damit \u00fcbernimmt das zentrale Repository den Stand des lokalen Repositorys. Um das zentrale Repository auf den Stand Ihres lokalen Repositorys zu bringen, verwenden Sie git push . Das hei\u00dft, wenn Sie alleine an Ihrem zenztralen Repository arbeiten, m\u00fcssen sie sich nur folgende Befehle merken: git add <datei> // falls die Datei neu erstellt wurde und Ihrem Repository bekannt gemacht (hinzugef\u00fcgt) werden soll git commit -am \"Commit-Message\" // um die \u00c4nderungen ins lokale Repository zu \"speichern\" git push // um das zentrale Repository auf den Stand des lokalen Repositorys zu bringen So sieht einfach sieht der Alltag aus, wenn Sie alleine am (zentralen) Repository arbeiten. Ein existierendes zentrales Repository verwenden \u00b6 Angenommen, jemand anderer besitzt ein zentrales Repository und m\u00f6chte den Code mit Ihnen teilen - angenommen, ich m\u00f6chte mit Ihnen den Code aus meinem Repository https://github.com/jfreiheit/einfuehrung-git.git teilen. Sie k\u00f6nnen dieses Repository klonen (kopieren), indem sie einmalig git clone https://github.com/jfreiheit/einfuehrung-git.git eingeben. Dadurch erstellen Sie sich ein lokales Repository, das einer identischen Kopie (einem Clone) des zentralen Repositorys https://github.com/jfreiheit/einfuehrung-git.git entspricht. Dieses lokale Repository ist dann bereits auch mit dem zentralen Repository verbunden. Angenommen, ich f\u00fchre nun \u00c4nderungen an diesem zentralen Repository durch und somit einige Commits. Damit diese \u00c4nderungen auch Ihrem lokalen Repository bekannt werden, f\u00fchren Sie git pull aus. Damit \"holen\" Sie sich den aktuellen Stand des zentralen Repositories. git config \u00b6 Sollten Sie aufgefordert werden, einige Accountdetails in Ihrer Git-Konfiguration zu speichern, dann machen Sie das. Sie k\u00f6nnen diese Schritte selbst dann vornehmen, wenn Sie nicht dazu aufgefordert werden: git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" In den Strings geben Sie nat\u00fcrlich Ihre Daten an. Weitere Informationen zur Konfiguration von Git finden Sie auch hier . N\u00fctzliche Links zu Git \u00b6 Git Dokumentation Git Buch Lerne Git mit Bitbucket Cloud Git-Tutorial: Git und die wichtigsten Befehle kennenlernen Learn Git Branching Git - Der einfache Einstieg Git in Bildern Visualizing Git Concepts Git Kata noch mehr Git Katas EGit - Git mit Eclipse \u00b6 Mit EGit integrieren Sie Git in Eclipse. Sie k\u00f6nnen pr\u00fcfen, ob Sie EGit bereits in Eclipse installiert haben, indem Sie in Eclipse unter Help \u2192 Eclipse Marketplace den Reiter Installed anklicken und schauen, ob EGit in dieser Liste auftaucht. Wenn nicht, w\u00e4hlen Sie den Reiter Search und geben in die Suchleiste EGit ein und installieren das PlugIn. Sie k\u00f6nnen auch unter Help \u2192 Install new Software... diese URL eintragen, um EGit zu installieren: http://download.eclipse.org/egit/updates . Sie finden die Installationsanleitung auch unter https://www.eclipse.org/egit/ oder z.B. auch hier und hier . Beim Verbinden Ihres lokalen Repositories mit Eclipse k\u00f6nnen Sie z.B. vorgehen wie hier beschrieben oder hier .","title":"Git"},{"location":"git/#git","text":"Git ist ein Versionierungswerkzeug f\u00fcr die Softwareentwicklung. Mit Git k\u00f6nnen Sie Ihre Software versionieren, d.h. Versionen Ihrer Software erstellen und zwischen diesen Versionen hin- und herwecheseln sowie im Team gemeinsam an einem Softwareprojekt arbeiten und die einzelnen Entwicklungen aller Teammitglieder geeignet zusammenf\u00fchren. Git ist Open Source und frei verf\u00fcgbar . Entstanden ist Git im Rahmen der Entwicklung von Linux , initiiert durch Linus Torvalds , dem Initiator von Linux.","title":"Git"},{"location":"git/#installation-von-git","text":"Um Git verwenden zu k\u00f6nnen, m\u00fcssen Sie es zun\u00e4chst installieren. Laden Sie sich Git f\u00fcr Ihr Betriebssystem von der Download-Seite herunter bzw. gehen Sie so vor, wie f\u00fcr Ihr Betriebssystenm beschrieben. Installationshilfen erhalten Sie z.B. auch im frei verf\u00fcgbaren Git-Buch unter Git installieren oder auch im Video \u00fcber die ersten Schritte mit Git. Wenn Sie unter Windows arbeiten, dann erhalten Sie mit Git eine GitBash . Wenn wir von nun an vom Terminal (oder Shell oder Bash ) sprechen, dann verwenden Sie bitte immer diese GitBash . Nach erfolgreicher Installation k\u00f6nnen Sie im Terminal den Befehl git --version eingeben und es sollte eine Ausgabe, wie git version 2 .30.1 oder eine aktuellere Versionsnummer erfolgen. Wir k\u00f6nnen Git nun verwenden und betrachten zun\u00e4chst, wie Git als Versionierungswerkzeug verwendet werden kann und schauen uns danach an, wie es als Kollaborationswerkzeug verwendet wird.","title":"Installation von Git"},{"location":"git/#git-als-versionierungswerkzeug","text":"Die grunds\u00e4tzliche Idee von Git ist, \u00c4nderungen an Dateien und Ordnern so zu speichern, dass alle diese \u00c4nderungen nachverfolgbar sind. Git erzeugt sogenannte Snapshots aller Dateien und Ordner und speichert diese Snapshots nacheinander lokal ab. D.h. alles passiert bei Ihnen lokal auf dem Rechner, Sie ben\u00f6tigen keine Verbindung zu einem Server. Wenn Sie sp\u00e4ter im Team zu Mehreren an einem Projekt arbeiten, dann gleichen Sie immer nur die Historien Ihrer Snapshots ab. Git f\u00fcgt immer nur hinzu und das ist auch korrekt so. Selbst, wenn in sp\u00e4teren Versionen Ihres eine Datei nicht mehr existiert, die in fr\u00fcheren Versionen des Projektes noch existierte, soll diese Datei gar nicht gel\u00f6scht werden, denn es k\u00f6nnte ja sein, dass Sie irgendwann nochmal die fr\u00fchere Version anschauen wollen, die die Datei enthielt. Dieses Skript hier z.B. verwalte ich mit Git. Das bedeutet, dass alle Dateien eines Ordners (und Unterordnern) in einem sogenannten Git-Repository (oder nur Repository ) verwaltet werden. F\u00fcr dieses Skript hier k\u00f6nnte das z.B. so aussehen: Das hei\u00dft, ich erstelle zun\u00e4chst 3 Dateien: Einf\u00fchrung , Wiederholung und Git und \"sage\" Git, dass dies Version1 sein soll. Danach f\u00fcge ich 3 weitere Dateien hinzu Aufgaben , \u00dcbungen und Wrapperklassen und zusammen mit den vorherigen 3 Dateien aus Version 1 ergibt das dann Version 2 . Danach \u00e4ndere ich (f\u00fcge hinzu) die Dateien Aufgaben und \u00fcbungen und f\u00fcge au\u00dferdem neue Dateien f\u00fcr Exceptions und JUnit hinzu und \"sage\", dass das insgesamt Version 3 ergibt usw. Git verwaltet nun diese Versionen und der Vorteil ist, dass ich jede dieser Versionen separat zur Verf\u00fcgung stellen k\u00f6nnte und auch auf diesen Versionen weiterarbeiten. Wir werden in Zukunft in Bezug auf Git aber nicht mehr unbedingt von Versionen sprechen, sondern von Snapshots . Wir schauen uns das nun in einem Besipiel an.","title":"Git als Versionierungswerkzeug"},{"location":"git/#git-init-ein-repository-erstellen","text":"Angenommen, wir haben in unserem workspace folgende Ordner-Struktur: In dem workspace gibt es ein Projekt Projekt1 und darin einen src -Ordner mit unseren *.java -Dateien und einen bin -Ordner mit unseren *.class -Dateien. Wir lassen f\u00fcr dieses einf\u00fchrende Beispiel einmal Pakete weg. Diese w\u00fcrden ja als Ordner-Struktur sowohl innerhalb von src als auch von bin auftauchen. So sieht also ein typischer workspace aus. Es gibt darin noch weitere Ordner und Dateien, wie z.B. .idea , .metadata , .classpath , .project , .settings , die von unseren Entwicklungsumgebungen (Eclipse, IntelliJ, ...) angelegt wurden. Wir wollen nun unseren workspace von Git verwalten lassen. Dazu wechseln wir im Terminal in den workspace -Ordner und f\u00fchren dort das Kommando git init aus. Dieses Kommando erstellt das Git-Repository . Es muss genau einmal, n\u00e4mlich ganz am Anfang zur Erstellung des Repositorys ausgef\u00fchrt werden. Im Terminal erscheint Hinweis: Als Name f\u00fcr den initialen Branch wurde 'master' benutzt. Dieser Hinweis: Standard-Branchname kann sich \u00e4ndern. Um den Namen des initialen Branches Hinweis: zu konfigurieren, der in allen neuen Repositories verwendet werden soll und Hinweis: um diese Warnung zu unterdr\u00fccken, f\u00fchren Sie aus: Hinweis: Hinweis: git config --global init.defaultBranch <Name> Hinweis: Hinweis: H\u00e4ufig gew\u00e4hlte Namen statt 'master' sind 'main' , 'trunk' und Hinweis: 'development' . Der gerade erstellte Branch kann mit diesem Befehl Hinweis: umbenannt werden: Hinweis: Hinweis: git branch -m <Name> Leeres Git-Repository in /...IhrPfadZumWorkspaceOrdner.../workspace/.git/ initialisiert Somit wurde ein Git-Repository erstellt. Der workspace -Ordner wird nun von Git verwaltet. Dies erkennen Sie daran, dass in dem workspace -Ordner ein .git -Ordner angelegt wurde: Klicken Sie ruhig mal in den Ordner, um zu sehen, was da alles drin ist.","title":"git init - ein Repository erstellen"},{"location":"git/#gitignore-dateien-aus-der-verwaltung-ausschlieen","text":"Git w\u00fcrde nun den gesamten workspace -Ordner verwalten. Das w\u00e4re zun\u00e4chst auch gar kein Problem. Aber wenn Sie im Team zu mehreren am selben Projekt (workspace) arbeiten, dann wollen Sie bestimmte Dateien gar nicht untereinander austauschen, z.B. alle Dateien, die von Ihrer IDE erstellt wurden (z.B. .idea , .metadata , .classpath , .project , .settings ). Auch alle Dateien im bin -Ordner m\u00fcssen nicht von Git verwaltet werden, weil Sie ja stets neu durch das Compilieren erzeugt werden. Noch bevor wir nun also unsere erste Version erzeugen wollen, schlie\u00dfen wir zun\u00e4chst einige Ordner und Dateien aus der Verwaltung von Git aus. Dazu wird im workspace -Ordner eine Datei .gitignore erstellt, in die wir alle Dateien und Ordner eintragen, die wir aus der Git-Verwaltung ausschlie\u00dfen wollen. Bevor wir das machen, geben wir im Terminal in unserem workspace -Ordner einmal den Befehl git status ein. Dies wird der am meisten verwendete Befehl f\u00fcr uns sein, der mit dem Befehl bekommen wir Auskunft \u00fcber den aktuellen Status des Repositorys. Die Ausgabe derzeit ist Auf Branch master Noch keine Commits Unversionierte Dateien: ( benutzen Sie \"git add <Datei>...\" , um die \u00c4nderungen zum Commit vorzumerken ) .DS_Store .idea/ .metadata/ Projekt1/ nichts zum Commit vorgemerkt, aber es gibt unversionierte Dateien ( benutzen Sie \"git add\" zum Versionieren ) Das m\u00fcssen wir zum jetzigen Zeitpunkt noch nicht alles verstehen, aber wir sehen, dass Git derzeit die Datei .DS_Store und die Ordner .idea/ , .metadata/ und Projekt1/ verwaltet und wir ja eigentlich nur die Verwaltung von Projekt1/ w\u00fcnschen (und darin auch nicht alles). Wir erstellen uns also im workspace -Ordner eine .gitignore -Datei und geben darin ein: .DS_Store .idea .metadata Projekt1/bin Projekt1/.classpath Projekt1/.project Projekt1/.settings Damit geben wir an, dass die Datei .DS_Store ignoriert werden soll (gibt es nur unter Mac - legt der Finder automatisch zur schnelleren Suche an) sowie die Ordner .idea und .metadata . H\u00e4tten wir .idea/ und .metadata/ geschrieben, w\u00fcrde der Ordner jeweils selbst mit in der Git-Verwaltung sein, jedoch der Kontent nicht. Ansonsten soll auch noch der Ordner Projekt1/bin aus der Git-Verwaltung entfernt werden und alle Dateien und Ordner, die mit einem Punkt beginnen und im Ordner Projekt1 liegen. Wenn man alle Dateien ignorieren m\u00f6chte, die mit einem Punkt beginnen, egal in welchem ordner, dann k\u00f6nnte man auch .* in die .gitignore schreiben. Dann w\u00fcrde allerdings auch die .gitignore selbst dazugeh\u00f6ren. Diese kann und sollte man aber ruhig mit in die Git-Verwaltung aufnehmen. Eine \u00dcbersicht \u00fcber m\u00f6gliche Eintr\u00e4ge in die .gitignore findet man z.B. hier oder hier . Wenn wir jetzt erneut git status eingeben, dann ist die Ausgabe: Auf Branch master Noch keine Commits Unversionierte Dateien: ( benutzen Sie \"git add <Datei>...\" , um die \u00c4nderungen zum Commit vorzumerken ) .gitignore Projekt1/ nichts zum Commit vorgemerkt, aber es gibt unversionierte Dateien ( benutzen Sie \"git add\" zum Versionieren ) D.h. wir sehen, dass die Dateien und Ordner .DS_Store , .idea/ und .metadata/ nun nicht mehr mit verwaltet werden, daf\u00fcr aber die .gitignore . Wir haben jetzt ein Git-Repoitory , aber es ist noch leer. Wir f\u00fcgen nun Dateien diesem Repository hinzu.","title":".gitignore - Dateien aus der Verwaltung ausschlie\u00dfen"},{"location":"git/#git-add-dem-repository-dateien-hinzufugen","text":"Wir haben noch keine Ordner und Dateien in unser Repository aufgenommen, d.h. es werden noch keine \u00c4nderungen an diesen Dateien durch Git verwaltet. Um Dateien dem Repository hinzuzuf\u00fcgen, verwenden wir das Kommando git add . Wir wollen den Ordner Projekt1 und die Datei .gitignore dem Repository hinzuf\u00fcgen, um sie von nun an von Git verwalten zu lassen (d.h. ihre \u00c4nderungen zu \"protokollieren\"). Wir geben im Terminal im workspace -Ordner ein: git add .gitignore git add Projekt1 und f\u00fcgen somit den gesamten Ordner Projekt1 (aber nicht die in der .gitignore definierten Dateien und Ordner aus dem Ordner Projekt1 ) und die .gitignore -Datei dem Repository hinzu. git status ergibt nun: Auf Branch master Noch keine Commits Zum Commit vorgemerkte \u00c4nderungen: ( benutzen Sie \"git rm --cached <Datei>...\" zum Entfernen aus der Staging-Area ) neue Datei: .gitignore neue Datei: Projekt1/src/A.java neue Datei: Projekt1/src/B.java D.h. von nun an werden von Git die Dateien .gitignore , Projekt1/src/A.java und Projekt1/src/B.java verwaltet. Die Dateien A.java und B.java sind jetzt noch leer. Wann immer wir eine neue Datei in unserem workspace erstellen und wir wollen, dass sie von Git verwaltet wird, f\u00fcgen wir diese Datei mit git add <datei> dem repository hinzu! Wann immer wir eine neue Datei in unserem workspace erstellen und wir nicht wollen, dass sie von Git verwaltet wird, f\u00fcgen wir diese Datei der .gitignore -Datei hinzu! Mit dem Befehl git add . werden einfach immer alle neuen Dateien hinzugef\u00fcgt. Wir werden diesen Befehl h\u00e4ufig nutzen, um nicht alle neuen Dateien einzeln aufzulisten. Es gibt f\u00fcr add auch die Option --all ( -A ), mit der alle Dateien aus einem Ordner hinzugef\u00fcgt werden.","title":"git add - dem Repository Dateien hinzuf\u00fcgen"},{"location":"git/#git-commit-einen-snapshot-erstellen","text":"Mit git commit \"speichern\" wir das gesamte Repository. Git merkt sich den Stand aller Dateien und Ordner und den Zeitpunkt des Commits. Zus\u00e4tzlich geben wir zum git commit noch eine Commit-Nachricht an, um den Stand der Arbeit zu beschreiben. In einem Snapshot werden alle \u00c4nderungen im Vergleich zum vorherigen Snapshot gespeichert. Man kann sich also die Versionierung mit Git wie eine Reihe von Commits (Snapshots) vorstellen: Ganz am Anfang ein initiales Commit ( C0 ), dann wurde weiter gearbeitet und ein weiteres Commit ( C1 ) gesetzt und so weiter ( C2 ). Es ist ohne Probleme m\u00f6glich, wieder zum Stand von C1 oder sogar C0 \"zur\u00fcckzuspringen\" (zeigen wir sp\u00e4ter, wie). Zun\u00e4chst erstellen wir unser initiales Commit. Dazu geben wir im Terminal im workspace -Ordner ein: git commit -m \"Initiales Commit. A.java und B.java jeweils leer.\" es erscheint die Ausgabe: [ master ( Root-Commit ) 8236e8a ] Initiales Commit. A.java und B.java jeweils leer. 3 files changed, 8 insertions ( + ) create mode 100644 .gitignore create mode 100644 Projekt1/src/A.java create mode 100644 Projekt1/src/B.java Unser erstes Commit (das sogenannte Root-Commit ) wurde erstellt. Wir haben jetzt einen \"gespeicherten\" Ausgangszustand, zu dem wir immer wieder zur\u00fccksetzen k\u00f6nnten. Unser \"Entwicklungsstrang\" nennt sich Branch . Der Hauptstrang , an dem wir versuchen, alle Entwicklungen immer ordentlich zusammenzuf\u00fchren, nennt sich master -Branch. Das letzte Commit ist stets der HEAD . Derzeit ist unser HEAD also dieses initiale Commit. Die Begriffe sind in der folgenden Abbildung dargestellt: Wir \u00e4ndern nun mal die Datei Projekt1/src/A.java und f\u00fcgen dort einfach ein Zeilenkommentar // Zeile 1 hinzugefuegt // hinzu. Wenn wir nun git status aufrufen, erscheint Auf Branch master \u00c4nderungen, die nicht zum Commit vorgemerkt sind: ( benutzen Sie \"git add <Datei>...\" , um die \u00c4nderungen zum Commit vorzumerken ) ( benutzen Sie \"git restore <Datei>...\" , um die \u00c4nderungen im Arbeitsverzeichnis zu verwerfen ) ge\u00e4ndert: Projekt1/src/A.java keine \u00c4nderungen zum Commit vorgemerkt ( benutzen Sie \"git add\" und/oder \"git commit -a\" ) Wir k\u00f6nnen diese \u00c4nderung nun committen, indem wir die Option -a verwenden (oder zuvor git add Projekt1/src/A.java ): git commit -am \"in A.java Zeile 1 hinzugefuegt\" Wir erhalten die Ausgabe: [ master 44ed3a8 ] in A.java Zeile 1 hinzugefuegt 1 file changed, 2 insertions ( + ) Wir haben jetzt einen neuen HEAD , nicht mehr das Root-Commit mit der \"Nummer\" 8236e8a , sondern nun dieses zweite Commit mit der \"Nummer\" 44ed3a8 . Diese Nummern sind Hash-Werte. Tats\u00e4chlich sind diese Hash-Werte sogar l\u00e4nger. Wir k\u00f6nnen Sie uns mit git log anzeigen lassen.","title":"git commit - einen Snapshot erstellen"},{"location":"git/#git-log-und-git-show","text":"Mit git log k\u00f6nnen Sie sich alle Ihre Commits auflisten lassen. In unserem jetzigen Zustand erzeugt git log folgende Ausgabe: commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd ( HEAD -> master ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 18 :13:48 2021 +0200 in A.java Zeile 1 hinzugefuegt commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. Wenn Ihnen diese Ansicht zu un\u00fcbersichtlich ist, k\u00f6nnen Sie die Option --oneline verwenden: git log --oneline erzeugt: 44ed3a8 ( HEAD -> master ) in A.java Zeile 1 hinzugefuegt 8236e8a Initiales Commit. A.java und B.java jeweils leer.","title":"git log und git show"},{"location":"git/#git-branch-und-git-ckeckout-branches-in-git","text":"Unser Repository sieht derzeit so aus: Angenommen, wir wollen etwas ausprobieren und unabh\u00e4ngig von dem Hauptentwicklungsstrang (dem master -Branch) z.B. an Projekt1/src/B.java arbeiten, ohne aber den bisherigen Stand zu \"gef\u00e4rden\". Dazu gibt es die M\u00f6glichkeit, neue, eigene Branches zu erstellen. Diese gehen von einem Commit des master -Branches aus und k\u00f6nnen sp\u00e4ter auch wieder auf den master -Branch f\u00fchren (oder, falls unser Ausprobieren doch nicht erfolgreich war, auch nicht). Einen neuen Branch erstellen wir mit git branch <nameDesNeuenBranches> . Wir erstellen uns einen Branch tryB : git branch tryB Dabei passiert erstmal noch gar nichts. Es wird nur ein Link auf das letzte Commit (den HEAD ) erzeugt und dieser Link hei\u00dft tryB . Wenn wir jetzt einfach erstmal an Projekt1/src/A.java weiterarbeiten w\u00fcrden und die \u00c4nderungen committen, stellen wir fest, dass wir tats\u00e4chlich am master -Branch weiterarbeiten. Um das zu zeigen, \u00e4ndern wir die Datei Projekt1/src/A.java und f\u00fcgen einen weiteren Zeilenkommentar hinzu. // Zeile 1 hinzugefuegt // Zeile 2 hinzugefuegt // Wir wissen bereits, wie wir diese \u00c4nderung committen: git commit -am \"in A.java Zeile 2 hinzugefuegt\" git log ergibt: commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde ( HEAD -> master ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Sat Apr 3 09 :09:54 2021 +0200 in A.java Zeile 2 hinzugefuegt commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd ( tryB ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 18 :13:48 2021 +0200 in A.java Zeile 1 hinzugefuegt commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. Das zeigt uns, dass wir am master -Branch weitergearbeitet haben und dass HEAD auf den master -Branch zeigt. Wir sehen aber auch, dass wir auf dem zweiten Commit einen Link tryB haben. Wir wollen jetzt aber auf diesem tryB -Branch arbeiten und nutzen dazu den Befehl git checkout <branch> : git checkout tryB Damit haben wir 2 Sachen getan: arbeiten wir jetzt auf einem anderen Branch, als dem master -Branch, n\u00e4mlich dem tryB -Branch und setzen wir auf den Zustand auf, den wir mit dem Commit gespeichert hatten ( 44ed3a8 ), auf den tryB zeigt. Den 2. Punkt k\u00f6nnen wir \u00fcberpr\u00fcfen, indem wir uns die Datei Projekt1/src/A.java anschauen. Die sieht n\u00e4mlich jetzt (wieder) so aus: // Zeile 1 hinzugefuegt // Wir f\u00fcgen nun das Gleiche in die Projekt1/src/B.java ein: // Zeile 1 hinzugefuegt // und committen diese \u00c4nderung: git commit -am \"in B.java Zeile 1 hinzugefuegt\" Die Commits lassen wir uns zun\u00e4chst mit git log anzeigen: commit e754d18f0d8cb1e8593edca740fa75b84d5de30f ( HEAD -> tryB ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Sat Apr 3 09 :56:28 2021 +0200 in B.java Zeile 1 hinzugefuegt commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 18 :13:48 2021 +0200 in A.java Zeile 1 hinzugefuegt commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. Wir sehen, dass alle Commits aufgelistet werden, die bis zum aktuellen HEAD f\u00fchren. Es fehlt aber beispielsweise das Commit, das bereits f\u00fcr den master -Branch ausgef\u00fchrt wurde und in dem in Projekt1/src/A.java bereits Zeile 2 hinzugefuegt wurde. Um sich alle Commits auszugeben und sogar eine Graph-\u00e4hnliche Darstellung zu erhalten, verwenden wir git log --all --graph Wir erhalten folgende Ausgabe: * commit e754d18f0d8cb1e8593edca740fa75b84d5de30f ( HEAD -> tryB ) | Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 09 :56:28 2021 +0200 | | in B.java Zeile 1 hinzugefuegt | | * commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde ( master ) | / Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 09 :09:54 2021 +0200 | | in A.java Zeile 2 hinzugefuegt | * commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd | Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Fri Apr 2 18 :13:48 2021 +0200 | | in A.java Zeile 1 hinzugefuegt | * commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. und daraus erkennt man, dass unser Repository (die Commit-Hostorie) derzeit so aussieht:","title":"git branch und git ckeckout - Branches in Git"},{"location":"git/#git-merge-branches-zusammenfuhren","text":"Wir haben folgende Situation: ausgehend von Commit 44ed3a8 ( in A.java Zeile 1 hinzugefuegt ) haben wir auf dem master -Branch weitergearbeitet und dort ein Commit 9c869b6 ( in A.java Zeile 2 hinzugefuegt ) erstellt und parallel dazu auf dem tryB -Branch gearbeitet und dort ein Commit e754d18 ( in B.java Zeile 1 hinzugefuegt ) erstellt. Nun wollen wir beide Branches wieder zusammenf\u00fchren, um mit beiden \u00c4nderungen weiterzuarbeiten. Das Zusammenf\u00fchren von Branches erfolgt mithilfe von git merge <branchToMerge> . Wir wollen gerne den tryB -Branch in den master -Branch mergen , um dann mit dem master -Branch weiterzuarbeiten. Dazu wechseln wir zun\u00e4chst in den master -Branch. das erreichen wir, indem wir checkout verwenden: git checkout master Die Ausgabe ist Zu Branch 'master' gewechselt Nun mergen wir diesen mit dem tryB -Branch, indem wir git merge tryB eingeben. Wichtig ist, dass es sich hierbei auch um ein erzwungenes Commit (sogenanntes Merge-Commit ) handelt, da beide Branches eigene Commits enthielten. Es wird uns eine Commit-nachricht angeboten. Mit ZZ verlassen wir den vi . Wenn wir uns nun die Commit-Logs ausgeben lassen ( git log --all --graph ), dann erhalten wir folgende Ausgabe * commit 7ffabf8646580d6bb2ba289de93e6fe20b894084 ( HEAD -> master, tryB ) | \\ Merge: e754d18 9c869b6 | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 16 :21:12 2021 +0200 | | | | Merge branch 'master' into tryB | | | * commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 09 :09:54 2021 +0200 | | | | in A.java Zeile 2 hinzugefuegt | | * | commit e754d18f0d8cb1e8593edca740fa75b84d5de30f | / Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 09 :56:28 2021 +0200 | | in B.java Zeile 1 hinzugefuegt | * commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd | Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Fri Apr 2 18 :13:48 2021 +0200 | | in A.java Zeile 1 hinzugefuegt | * commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. und erkennen, dass die beiden Branches nun wieder \"vereint\" sind: Wenn wir uns A.java anschauen, dann sehen wir, dass diese Datei 2 Zeilen enth\u00e4lt und die Datei B.java eine. Beide sind also auf dem aktuellsten Stand. Wir \u00fcben Mergen an dieser Stelle nochmal und bilden 2 Branches, in dem einen erstellen wir uns eine \"Klasse\" C.java und in dem anderen eine D.java : git branch classC git branch classD git checkout classC touch Projekt1/src/C.java echo \"// Zeile 1 hinzugefuegt\" >> Projekt1/src/C.java git add Projekt1/src/C.java git commit -m \"in C.java Zeile 1 hinzugefuegt\" git checkout classD touch Projekt1/src/C.java echo \"// Zeile 1 hinzugefuegt\" >> Projekt1/src/D.java git add Projekt1/src/D.java git commit -m \"in D.java Zeile 1 hinzugefuegt\" git checkout master git merge classC Hierbei handelt es sich um ein sogenanntes Fast-Forward-Commit , da der master -Branch keine eigenen \u00c4nderungen enthielt, sondern nur die \u00c4nderungen des classC -Branches in den master -Branch eingef\u00fcgt werden m\u00fcssen. Es gibt hier keine potenziellen Konflikte. Wenn wir nun aber auch den classD -Branch in den master -Branch mergen wollen, enth\u00e4lt sowohl der master -Branch \u00c4nderungen ( C.java ) als auch der classD -Branch ( D.java ). Hierbei handelt es sich also um ein Merge-Commit : git merge classD vi \u00f6ffnet und wir k\u00f6nnen die Commit-Message \u00e4ndern oder sie so lassen. Wir beenden den vi wieder mit ZZ . git log --all --graph zeigt: * commit 15d5e0b00f2a4af5eaa4d84ba55e340f912ccb42 ( HEAD -> master ) | \\ Merge: 0d86294 01f8dfd | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 17 :12:18 2021 +0200 | | | | Merge branch 'classD' | | | * commit 01f8dfd9c68148c984db99dec980d227f1fe4044 ( classD ) | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 17 :05:46 2021 +0200 | | | | in D.java Zeile 1 hinzugefuegt | | * | commit 0d8629458ca0a5e244c121be525f8e647b5c6bd9 ( classC ) | / Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 16 :51:14 2021 +0200 | | in C.java Zeile 1 hinzugefuegt | * commit 7ffabf8646580d6bb2ba289de93e6fe20b894084 ( tryB ) | \\ Merge: e754d18 9c869b6 | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 16 :21:12 2021 +0200 | | | | Merge branch 'master' into tryB | | | * commit 9c869b672ed42c5af22cbb5c9fdc3419ff863bde | | Author: J. Freiheit <freiheit@htw-berlin.de> | | Date: Sat Apr 3 09 :09:54 2021 +0200 | | | | in A.java Zeile 2 hinzugefuegt | | * | commit e754d18f0d8cb1e8593edca740fa75b84d5de30f | / Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Sat Apr 3 09 :56:28 2021 +0200 | | in B.java Zeile 1 hinzugefuegt | * commit 44ed3a807200ef537f5da0817e0ff3ac0b958ffd | Author: J. Freiheit <freiheit@htw-berlin.de> | Date: Fri Apr 2 18 :13:48 2021 +0200 | | in A.java Zeile 1 hinzugefuegt | * commit 8236e8ac0b2e2c7d5a83df3f2f71bf73297188a6 Author: J. Freiheit <freiheit@htw-berlin.de> Date: Fri Apr 2 08 :42:37 2021 +0200 Initiales Commit. A.java und B.java jeweils leer. Die Commit-Historie unseres Repositories sieht so aus: Eine umfangreiche Beschreibung aller \u00c4nderungen in den jeweiligen Commits erhalten Sie auch durch den Befehl git show --pretty=fuller --abbrev-commit .","title":"git merge - Branches zusammenf\u00fchren"},{"location":"git/#konflikte-auflosen","text":"Gerade bei der Arbeit im Team kann es passieren, dass in verschiedenen Branches an der gleichen Datei \u00c4nderungen durchgef\u00fchrt werden. Wenn diese Branches dann \"gemerged\" werden sollen, kann Git diesen Konflikt nicht alleine aufl\u00f6sen (soll \u00c4nderung A gelten oder \u00c4nderung B oder beide?). Die Aufl\u00f6sung eines solchen Konfliktes muss durch die Entwicklerinnen geschehen. Zur Demonstration erzeugen wir uns erneut zwei Branches, changeA1 und changeA2 und f\u00fchren in beiden Branches eine \u00c4nderung an Projekt1/src/A.java durch: git branch changeA1 git branch changeA2 git checkout changeA1 echo \"// eine \u00c4nderung durch Entwicklerin A\" >> Projekt1/src/A.java git commit -am \"in A eine \u00c4nderung durch Entwicklerin A\" git checkout changeA2 echo \"// eine \u00c4nderung durch Entwicklerin B\" >> Projekt1/src/A.java git commit -am \"in A eine \u00c4nderung durch Entwicklerin B\" Wenn wir jetzt versuchen, die beiden Branches mit git merge changeA1 zu mergen, dann erhalten wir folgende Ausgabe: automatischer Merge von Projekt1/src/A.java KONFLIKT ( Inhalt ) : Merge-Konflikt in Projekt1/src/A.java Automatischer Merge fehlgeschlagen ; beheben Sie die Konflikte und committen Sie dann das Ergebnis. Git kann diesen Konflikt nicht automatisch aufl\u00f6sen. Die Ausgabe von git status hilft dabei nicht wirklich weiter: Auf Branch changeA2 Sie haben nicht zusammengef\u00fchrte Pfade. ( beheben Sie die Konflikte und f\u00fchren Sie \"git commit\" aus ) ( benutzen Sie \"git merge --abort\" , um den Merge abzubrechen ) Nicht zusammengef\u00fchrte Pfade: ( benutzen Sie \"git add/rm <Datei>...\" , um die Aufl\u00f6sung zu markieren ) von beiden ge\u00e4ndert: Projekt1/src/A.java keine \u00c4nderungen zum Commit vorgemerkt ( benutzen Sie \"git add\" und/oder \"git commit -a\" ) Mit git log --merge k\u00f6nnen wir uns die Commits anschauen, die die \u00c4nderungen enthalten, welche f\u00fcr den Konflikt sorgen: commit da1f715199e68f17ea276b07a9c3a6e88b319e8a ( HEAD -> changeA2 ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Sun Apr 4 08 :08:13 2021 +0200 in A eine \u00c4nderung durch Entwicklerin B commit 63a9a40ab267bc53f2a688a45e6813d7c15170c6 ( changeA1 ) Author: J. Freiheit <freiheit@htw-berlin.de> Date: Sun Apr 4 08 :07:25 2021 +0200 in A eine \u00c4nderung durch Entwicklerin A Der Befehl git diff zeigt uns den Konflikt ganz konkret an: diff --cc Projekt1/src/A.java index a5c84c3,a920d29..0000000 --- a/Projekt1/src/A.java +++ b/Projekt1/src/A.java @@@ -1,4 -1,4 +1,8 @@@ // Zeile 1 hinzugefuegt // Zeile 2 hinzugefuegt // ++ <<<<<< < HEAD +// eine \u00c4nderung durch Entwicklerin B ++ ======= + // eine \u00c4nderung durch Entwicklerin A ++>>>>>>> changeA1 Diese Darstellung in der Datei finden wir auch wieder, wenn wir uns die Datei Projekt1/src/A.java anschauen: // Zeile 1 hinzugefuegt // Zeile 2 hinzugefuegt // <<<<<< < HEAD // eine \u00c4nderung durch Entwicklerin B ======= // eine \u00c4nderung durch Entwicklerin A >>>>>>> changeA1 In unserer Konflikt-Datei gibt es folgende drei Eintr\u00e4ge: <<<<<<< HEAD ======= >>>>>>> changeA1 Aller Inhalt zwischen den ersten beiden Zeilen enth\u00e4lt die \u00c4nderungen des aktuellen Branches und alle \u00c4nderungen zwischen den letzten beiden Zeilen enth\u00e4lt alle \u00c4nderungen des Branches, in den gemerged werden soll ( changeA1 ). Entwicklungsumgebungen (IntelliJ, Eclipse, Atom, Visual Studio Code usw.) unterst\u00fctzen bei der Aufl\u00f6sung solcher Konflikte. Wir \u00fcbernehmen einfach beide \u00c4nderungen h\u00e4ndisch und committen diese \u00c4nderung. Projekt1/src/A.java sieht also jetzt so aus: // Zeile 1 hinzugefuegt // Zeile 2 hinzugefuegt // // eine \u00c4nderung durch Entwicklerin B // eine \u00c4nderung durch Entwicklerin A und der Commit: git commit -am \"Merge-Konflikt in A.java geloest. Aenderungen A UND B eingefuegt\" .","title":"Konflikte aufl\u00f6sen"},{"location":"git/#merge-abbrechen","text":"Sollten Sie aufgrund der Konfliktmeldung den Merge-Vorgang doch nicht durchf\u00fchren wollen, k\u00f6nnen Sie mit git merge --abort den Merge abbrechen und mit git reset die in Konflikt stehenden Dateien auf einen als funktionierend bekannten Zustand zur\u00fcckzusetzen.","title":"Merge abbrechen"},{"location":"git/#git-stash-arbeit-unterbrechen","text":"Angenommen, Sie haben bereits \u00c4nderungen durchgef\u00fchrt, diese sind aber noch nicht \"fertig\" und Sie wollen Sie deshalb noch nicht committen. Stattdessen m\u00fcssen Sie aber an anderer Stelle zun\u00e4chst noch einen BugFix erledigen. Dann k\u00f6nnen Sie Ihre gegenw\u00e4rtigen \u00c4nderungen \"stashen\" - in einen Stash-Modus setzen, also erstmal verstauen , um daran sp\u00e4ter weiterzuarbeiten: git stash Jetzt k\u00f6nnen Sie erstmal andere \u00c4nderungen durchf\u00fchren und committen und um dann wieder zu Ihren urspr\u00fcnglichen \u00c4nderungen zur\u00fcckzukehren, holen Sie diese wieder aus dem Stash-Modus: git stash pop","title":"git stash - Arbeit unterbrechen"},{"location":"git/#einige-weitere-nutzliche-befehle","text":"Angenommen, Sie haben committed, aber einige \u00c4nderungen vergessen (entweder vorher nicht geadded oder noch gar nicht ge\u00e4ndert), dann k\u00f6nnen Sie den vorherigen Commit \"\u00fcberschreiben\". git commit -m \"zu frueh committed\" // jetzt noch die Aenderungen hinzufuegen git commit --amend Angenommen, Sie haben seit dem letzten Commit \u00c4nderungen an Dateien vorgenommen, die Sie aber gerne verwerfen m\u00f6chten. Sie werden in der Literatur daf\u00fcr Befehle finden, wie z.B. git checkout HEAD oder git reset --hard . Sie sollten damit \u00e4u\u00dferst vorsichtig sein! Bei git checkout HEAD (aslo dem \"Zur\u00fccksetzen\" auf das letzte Commit) bleiben die ge\u00e4nderten Dateien \"modifiziert\". Das hilft also gar nicht wirklich. git reset --hard kann Sie unter Umst\u00e4nden auf ein Commit zur\u00fccksetzen, das noch weiter zur\u00fcck in der Historie liegt, als Sie planen. Verwenden Sie zum Zur\u00fccksetzen Ihrer \u00c4nderungen (Undo) besser git restore <dateiUndo> Geben Sie also die Datei an, die Sie ge\u00e4ndert haben und die wieder auf den Zustand des letzten Commits zur\u00fcckgesetzt werden soll. L\u00f6schen Sie niemals einfach Dateien oder Ordner in dem durch Git verwalteten Ordner (Ihrem Repository) \u00fcber den Finder oder den Dateiexplorer! Die Idee von Git ist die, dass immer nur etwas hinzukommt. Selbst, wenn Sie eine bestimmte Datei nicht mehr ben\u00f6tigen, so kann es ja doch sein, dass diese in fr\u00fcheren Versionen vorkommt. Lassen Sie sie einfach im Verzeichnis!","title":"Einige weitere n\u00fctzliche Befehle"},{"location":"git/#aliases","text":"Es ist ganz hilfreich, sich f\u00fcr einige Optionen Aliase zu definieren, da diese oft verwendet werden. Dazu nutzen Sie git config . Hier einige Beispiele von n\u00fctzlichen Aliases (aus dem Git-Buch ): git config --global alias.co checkout git config --global alias.br branch git config --global alias.ci commit git config --global alias.st status","title":"Aliases"},{"location":"git/#git-als-kollaborationswerkzeug","text":"Im vorherigen Abschnitt haben wir diskutiert, wie wir Git zur Versionsverwaltung verwenden k\u00f6nnen. Dazu haben wir ein lokales Git-Repository angelegt. Nun wollen wir betrachten, wie Git als Kollaborationswerkzeug eingesetzt werden kann, d.h. wie mehere Entwicklerinnen zusammen an einem (globalen) Git-Repository arbeiten k\u00f6nnen. Dazu ben\u00f6tigen wir einen Host (Bereitsteller netzbasierter Dienste), der ein zentrales Git-Repository zur Verf\u00fcgung stellen kann. Es gibt mehrere solcher Git-Hosts. Die bekanntesten sind: GitHub GitLab Bibucket Wir zeigen das Verwenden eines zentralen Repositories exemplarisch f\u00fcr GitHub . Sie m\u00fcssen sich in GitHub registrieren . Die Verwendung von GitHub ist kostenlos . Die Idee eines zentralen Repositorys ist die, dass daran mehrere lokale Repositories angebunden sein k\u00f6nnen: \u00dcber das zentrale Repository werden alle lokalen Repositories synchronisiert, so dass alle Repositories \u00fcber den gleichen Stand, d.h. alle Dateien und Ordner sowie die gleiche Commit-Historie verf\u00fcgen. Wichtig ist jedoch, dass man zum Entwickeln nicht permanent online sein muss. Vielmehr kann man beliebig lange offline auf dem eigenen lokalen Repository arbeiten, bis man irgendwann seine \u00c4nderungen in das zentrale Repository schreiben ( push ) bzw. dort abgelegte \u00c4nderungen aus anderen lokalen Repositories lesen ( pull ) m\u00f6chte.","title":"Git als Kollaborationswerkzeug"},{"location":"git/#ein-zentrales-repository-anlegen","text":"Sie loggen sich in GitHub (oder dem von Ihnen gew\u00e4hlten Diensteanbieter) ein und klicken auf \"New\": Dann geben Sie einen sprechenden Namen f\u00fcr das Repository ein. Sie k\u00f6nnen w\u00e4hlen, ob das Repository Public (f\u00fcr alle lesbar) oder Private (nur f\u00fcr Eingeladene lesbar) sein soll. Die darunter stehenden Checkboxen sollten Sie nicht anklicken, da Sie ein bereits existierendes lokales Repository mit diesem zentralen Repository verbinden wollen. In Ihrem lokalen Repository haben Sie ja wahrscheinlich bereits eine .gitignore -Datei. W\u00fcrden Sie diese Checkboxen markieren, m\u00fcssten Sie bereits ganz am Anfang mergen . Klicken Sie auf den Button Create repository . Das zentrale Repository ist nun erstellt. Nun m\u00fcssen wir nur noch vorgehen, wie auf der Seite angegeben: Im Terminal f\u00fchren wir im workspace -Ordner (in unserem lokalen Repository - der Ordner, der den .git -Ordner enth\u00e4lt) den Befehl git remote add origin https://github.com/jfreiheit/einfuehrung-git.git aus. https://github.com/jfreiheit/einfuehrung-git.git entspricht dabei der sogenannten Remote-URL und lautet bei Ihnen nat\u00fcrlich anders. Es ist der Pfad (die URL) zu Ihrem zentralen Git-Repository. Mit diesem Befehl verbinden wir unser lokales Git-Repository mit dem zentralen Git-Repository. Wir geben dem zentralen Git-Repository dabei den Namen origin . Den n\u00e4chsten von GitHub vorgeschlagenen Befehl git branch -M main k\u00f6nnen wir ebenfalls ausf\u00fchren. Wir wissen bereits, dass wir damit einen neuen Branch erstellen, n\u00e4mlich main . Wir verlassen also den master -Branch und wechseln zu einem neuen main -Branch. Das kann man machen, muss man aber nicht. Die Option -M steht f\u00fcr --move --force . Damit bestimmen wir, dass wir einen main -Branch erstellen, selbst wenn dieser bereits existierte. Siehe auch die Dokumentation f\u00fcr git branch . Der dritte von GitHub vorgeschlagene Befehl git push -u origin main bewirkt, dass unser komplettes lokales Git-Repository auf das zentrale Git-Repository gespielt wird. Das hei\u00dft, der aktuelle Branch main wird auf das zentrale Git-Repository origin gepushed . Nach Ausf\u00fchrung dieses Befehls ist das zentrale Repository auf dem selben Stand wie das lokale Repository.","title":"Ein zentrales Repository anlegen"},{"location":"git/#alltag-mit-git","text":"Ihr lokales Repository ist nun mit dem zentralen Repository verkn\u00fcpft. Wenn Sie jetzt \u00c4nderungen an Ihrem Code (Ihrem lokalen Repository) durchf\u00fchren und diese \u00c4nderungen auf dem zentralen Repository speichern wollen, sieht Ihr \"Alltag\" wie folgt aus.","title":"Alltag mit Git"},{"location":"git/#git-add-eine-neue-datei-hinzufugen","text":"Angenommen, Sie erstellen eine neue Klasse (Datei), z.B. Projekt1/src/E.java , dann f\u00fcgen Sie diese neue Datei mit git add <neueDatei> Ihrem lokalen Repository hinzu: git add Projekt1/src/E.java Wenn Sie sich dann mit git status den Status des Repositorys anschauen, erhalten Sie Auf Branch main Ihr Branch ist auf demselben Stand wie 'origin/main' . Zum Commit vorgemerkte \u00c4nderungen: ( benutzen Sie \"git restore --staged <Datei>...\" zum Entfernen aus der Staging-Area ) neue Datei: Projekt1/src/E.java Neue Dateien f\u00fcgen Sie mittels git add <neueDatei> dem Repository hinzu.","title":"git add - eine neue Datei hinzuf\u00fcgen"},{"location":"git/#git-commit-anderungen-speichern","text":"Angenommen, Sie haben \u00c4nderungen an Dateien hinzugef\u00fcgt, diese Dateien sind aber bereits Teil des Repositorys (wurden also bereits bei Erstellung mit git add hinzugef\u00fcgt). Dann speichern Sie diese \u00c4nderungen mit git commit -am \"Commit-Message\" . Angenommen, wir haben in Projekt1/src/E.java 2 Zeilen hinzugef\u00fcgt, dann committen wir diese \u00c4nderungen z.B. mit git commit -am \"in E.java 2 Zeilen hinzugefuegt\" Die Option -m steht daf\u00fcr, dass wir gleich die Commit-Message mit angeben. Fehlt diese Option, \u00f6ffnet sich ein vi und wir f\u00fcgen die Commit-Message nachtr\u00e4glich hinzu. Den vi verlassen wir mit ZZ . Die Option -a steht f\u00fcr add . Jede \u00c4nderung muss zun\u00e4chst hinzugef\u00fcgt werden. H\u00e4ufig sieht man daf\u00fcr die Verwendung des Befehls git add . . Das l\u00e4sst sich aber mit der Option -a auch beim Commit selbst erledigen. Wenn Sie sich dann mit git status den Status des Repositorys anschauen, erhalten Sie Auf Branch main Ihr Branch ist 1 Commit vor 'origin/main' . ( benutzen Sie \"git push\" , um lokale Commits zu publizieren ) nichts zu committen, Arbeitsverzeichnis unver\u00e4ndert \u00c4nderungen am Code (Repository) \"committen\" (speichern) Sie mittels git commit -am \"Commit-Message\" .","title":"git commit - \u00c4nderungen \"speichern\""},{"location":"git/#git-push-anderungen-auf-das-zentrale-repository-spielen","text":"Sie k\u00f6nnen beliebig lange und oft Ihr lokales Repository \u00e4ndern, wie im Abschnitt Git als Versionierungswerkzeug beschrieben. Wenn Sie Ihr lokales Repository auf Ihr zentrales Repository spielen m\u00f6chten, verwenden Sie den Befehl git push . Damit stellen Sie das zentrale Repository auf den Stand Ihres lokalen Repositorys. git push ergibt folgende Ausgabe: Objekte aufz\u00e4hlen: 8 , fertig. Z\u00e4hle Objekte: 100 % ( 8 /8 ) , fertig. Delta-Kompression verwendet bis zu 8 Threads. Komprimiere Objekte: 100 % ( 3 /3 ) , fertig. Schreibe Objekte: 100 % ( 5 /5 ) , 439 Bytes | 439 .00 KiB/s, fertig. Gesamt 5 ( Delta 1 ) , Wiederverwendet 0 ( Delta 0 ) , Pack wiederverwendet 0 remote: Resolving deltas: 100 % ( 1 /1 ) , completed with 1 local object. To https://github.com/jfreiheit/einfuehrung-git.git 15d5e0b..6ddd0dc main -> main Damit \u00fcbernimmt das zentrale Repository den Stand des lokalen Repositorys. Um das zentrale Repository auf den Stand Ihres lokalen Repositorys zu bringen, verwenden Sie git push . Das hei\u00dft, wenn Sie alleine an Ihrem zenztralen Repository arbeiten, m\u00fcssen sie sich nur folgende Befehle merken: git add <datei> // falls die Datei neu erstellt wurde und Ihrem Repository bekannt gemacht (hinzugef\u00fcgt) werden soll git commit -am \"Commit-Message\" // um die \u00c4nderungen ins lokale Repository zu \"speichern\" git push // um das zentrale Repository auf den Stand des lokalen Repositorys zu bringen So sieht einfach sieht der Alltag aus, wenn Sie alleine am (zentralen) Repository arbeiten.","title":"git push - \u00c4nderungen auf das zentrale Repository spielen"},{"location":"git/#ein-existierendes-zentrales-repository-verwenden","text":"Angenommen, jemand anderer besitzt ein zentrales Repository und m\u00f6chte den Code mit Ihnen teilen - angenommen, ich m\u00f6chte mit Ihnen den Code aus meinem Repository https://github.com/jfreiheit/einfuehrung-git.git teilen. Sie k\u00f6nnen dieses Repository klonen (kopieren), indem sie einmalig git clone https://github.com/jfreiheit/einfuehrung-git.git eingeben. Dadurch erstellen Sie sich ein lokales Repository, das einer identischen Kopie (einem Clone) des zentralen Repositorys https://github.com/jfreiheit/einfuehrung-git.git entspricht. Dieses lokale Repository ist dann bereits auch mit dem zentralen Repository verbunden. Angenommen, ich f\u00fchre nun \u00c4nderungen an diesem zentralen Repository durch und somit einige Commits. Damit diese \u00c4nderungen auch Ihrem lokalen Repository bekannt werden, f\u00fchren Sie git pull aus. Damit \"holen\" Sie sich den aktuellen Stand des zentralen Repositories.","title":"Ein existierendes zentrales Repository verwenden"},{"location":"git/#git-config","text":"Sollten Sie aufgefordert werden, einige Accountdetails in Ihrer Git-Konfiguration zu speichern, dann machen Sie das. Sie k\u00f6nnen diese Schritte selbst dann vornehmen, wenn Sie nicht dazu aufgefordert werden: git config --global user.email \"you@example.com\" git config --global user.name \"Your Name\" In den Strings geben Sie nat\u00fcrlich Ihre Daten an. Weitere Informationen zur Konfiguration von Git finden Sie auch hier .","title":"git config"},{"location":"git/#nutzliche-links-zu-git","text":"Git Dokumentation Git Buch Lerne Git mit Bitbucket Cloud Git-Tutorial: Git und die wichtigsten Befehle kennenlernen Learn Git Branching Git - Der einfache Einstieg Git in Bildern Visualizing Git Concepts Git Kata noch mehr Git Katas","title":"N\u00fctzliche Links zu Git"},{"location":"git/#egit-git-mit-eclipse","text":"Mit EGit integrieren Sie Git in Eclipse. Sie k\u00f6nnen pr\u00fcfen, ob Sie EGit bereits in Eclipse installiert haben, indem Sie in Eclipse unter Help \u2192 Eclipse Marketplace den Reiter Installed anklicken und schauen, ob EGit in dieser Liste auftaucht. Wenn nicht, w\u00e4hlen Sie den Reiter Search und geben in die Suchleiste EGit ein und installieren das PlugIn. Sie k\u00f6nnen auch unter Help \u2192 Install new Software... diese URL eintragen, um EGit zu installieren: http://download.eclipse.org/egit/updates . Sie finden die Installationsanleitung auch unter https://www.eclipse.org/egit/ oder z.B. auch hier und hier . Beim Verbinden Ihres lokalen Repositories mit Eclipse k\u00f6nnen Sie z.B. vorgehen wie hier beschrieben oder hier .","title":"EGit - Git mit Eclipse"},{"location":"graphics/","text":"Graphics \u00b6 Wir werden unsere GUI nun um eine Komponente erweitern, in der wir zeichnen k\u00f6nnen. Im Prinzip wird unsere GUI immer gezeichnet . Die Steuerelemente sind nur vorformatiert und bestehen aus lauter Linien, Polygonen und Punkten, die zusammen dann so, wie z.B. ein Button aussehen. Wenn wir eine GUI haben und dieses Fenster z.B. die Gr\u00f6\u00dfe \u00e4ndert, wird es dabei jedes Mal neu gezeichnet. Diese (Neu-)Zeichnen wird dadurch angesto\u00dfen, dass f\u00fcr unser JFrame die Methode paint() aufgerufen wird. Diese Methode wird z.B. auch in der Methode setVisible(true) aufgerufen. Jede Komponente (also jedes Steuerelement und jeder Container) hat ihre eigene Objektmethode paint() , in der beschrieben ist, wie diese Komponente zu zeichnen ist. Genauer gesagt, werden in paint() folgende drei Methoden aufgerufen: paintBorder() - zeichnet den Rahmen der Komponente paintChildren() - ruft paint() f\u00fcr alle Kindkomponenten auf (also z.B. alle Steurelemente in einem JPanel ) paintComponent() - zeichnet die Komponente (und ihre Kinder) Damit \u00fcberhaupt Linien und Punkte dargestellt werden k\u00f6nnen, gibt es eine Klasse Graphics , die, etwas vereinfacht gesagt, die Schnittstelle zwischen Hardware (dem Monitor) und dem zu zeichnenden Fenster darstellt. Alle Komponenten eines Fensters teilen sich genau ein Objekt dieser Klasse Graphics . Bei diesem Objekt wird auch vom Graphics-Context ( Grafikkontext ) gesprochen. Diese Klasse stellt eine Vielzahl von Methoden zur Verf\u00fcgung, um einfache geometrische Objekte zu zeichnen, z.B. drawLine() , um eine Linie zu zeichnen, drawOval() , um eine (leere) Ellipse zu zeichnen, drawRect() , um ein (leeres) Rechteck zu zeichnen, drawPolygon() , um ein (leeres) Polygon (also ein Vieleck) zu zeichnen, drawString() , um ein Text zu zeichnen, fillOval() , um eine (ausgef\u00fcllte) Ellipse zu zeichnen, fillRect() , um ein (ausgef\u00fclltes) Rechteck zu zeichnen, fillPolygon() , um ein (ausgef\u00fclltes) Polygon (also ein Vieleck) zu zeichnen. Damit nun alle paintX() -Methoden (also paint() , paintBorder() , paintComponent und paintChildren() ) Zugriff auf diesen Grafikkontext (das Objekt von Graphics ) bekommen, wird es diesen Methoden \u00fcbergeben. Das hei\u00dft, die Methoden sind so deklariert (alle void ): paint(Graphics g) paintBorder(Graphics g) paintChildren(Graphics g) paintComponent(Graphics g) Die Graphics -Klasse gibt es schon seit Java 1.0. Allerdings hat man bereits sehr fr\u00fch festgestellt, dass die Methoden in dieser Klasse nicht gen\u00fcgen, um \"sch\u00f6ne\" Grafiken zu erstellen. Deshalb hat man bereits in Java 1.1 eine neue Klasse Graphics2D eingef\u00fchrt (hat von Graphics geerbt), in der haupts\u00e4chlich die Darstellung der geometrischen Objekte verbessert wurde, aber in der auch einige Methoden dazukamen, um z.B. andere Linienformen (gestrichelt, gepunktet, ...) zu definieren, andere Fonts f\u00fcr den Text usw. Tats\u00e4chlich handelt es sich seit JDK 1.2 bei dem Grafikkontext, also dem Graphics -Objekt g um ein Objekt der Klasse Graphics2D . Eigene geometrische Objekte zeichnen \u00b6 Bevor wir eigene geometrische Objekte zeichnen k\u00f6nnen, schauen wir zun\u00e4chst nochmal auf unser \"Grundger\u00fcst\" f\u00fcr eine GUI (siehe Kapitel GUI Einf\u00fchrung ): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import javax.swing.JFrame ; import javax.swing.JPanel ; public class MyFirstWindow extends JFrame { public MyFirstWindow () { super (); this . setTitle ( \"My first window\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). add ( this . initContent ()); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private JPanel initContent () { JPanel mainPanel = new JPanel (); // hier weitere Container oder Steuerelemente hinzufuegen return mainPanel ; } public static void main ( String [] args ) { new MyFirstWindow (); } } Darin erzeugt die Methode initContent() ein JPanel und gibt es zur\u00fcck. Dieses JPanel wird der ContentPane unseres Fensters hinzugef\u00fcgt (Zeile 13 ). Somit hat das JFrame ein Kind , n\u00e4mlich das der ContentPane hinzugef\u00fcgte JPanel . Wenn das JFrame nun gezeichnet wird, wird f\u00fcr dieses JPanel die Methode paintComponent(Graphics g) aufgerufen. Diese ist f\u00fcr ein JPanel so implementiert, dass ein hellgraues Rechteck ohne Rand ( Border ) gezeichnet wird. W\u00fcrden wir dem mainPanel in der initContent() -Methode nun weitere Komponenten (Container oder Steuerlemente) hinzuf\u00fcgen, so w\u00fcrden diese alle so gezeichnet werden, wie f\u00fcr diese Komponenten die paintComponent(Graphics g) -Methode implementiert ist. Wir wollen nun aber selbst die paintComponent(Graphics g) -Methode f\u00fcr eine Komponente implementieren. Dazu entscheiden wir uns daf\u00fcr, die paintComponent() -Methode von einem JPanel zu implementieren. Aber wie kommen wir an diese Implementierung ran? Indem wir von JPanel erben . Wenn wir eine Klasse erstellen, die von JPanel erbt, dann erben wir auch die Implementierung der paintComponent() -Methode von JPanel und k\u00f6nnen diese \u00fcberschreiben . Wir \u00e4ndern daf\u00fcr unser \"Grundger\u00fcst\": 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 import java.awt.Graphics ; import java.awt.Graphics2D ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class MyFirstDrawingWindow extends JFrame { public MyFirstDrawingWindow () { super (); this . setTitle ( \"Wir zeichnen\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). add ( new Canvas ()); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } public static void main ( String [] args ) { new MyFirstDrawingWindow (); } } An der Darstellung des Fensters \u00e4ndert das zun\u00e4chst gar nichts. Wenn wir das Programm ausf\u00fchren, dann erscheint folgendes Fenster. Das der ContentPane hinzugef\u00fcgte JPanel wird also \"ganz normal\" als hellgraues Rechteck dargestellt. Der gro\u00dfe Unterschied ist, dass es sich nun um ein Objekt unserer inneren Klasse Canvas handelt. Diese hat von JPanel geerbt. Ein Objekt von Canvas ist somit auch ein Objekt vom Typ JPanel . Aber wir k\u00f6nnen in Canvas die Methode paintComponent(Graphics g) \u00fcberschreiben und somit eine eigene Implementierung f\u00fcr das Zeichnen unserer Komponente (einem Canvas -Objekt) erstellen. Innerhalb unserer eigenen Implementierung der paintComponent() -Methode rufen wir zun\u00e4chst die paintComponent() -Methode von JPanel auf. Damit wird ein hellgraues Rechteck gezeichnet. Das sollten wir immer tun, da ansonsten manchmal unsch\u00f6ne Nebeneffekte entstehen. Au\u00dferdem sollten wir auch immer das Graphics -Objekt nach Graphics2D konvertieren, da uns in Graphics2D deutlich mehr Methoden zur Verf\u00fcgung stehen (siehe z.B. hier und hier ). \u00dcbung Die Methode draw3DRect() ist ein Beispiel f\u00fcr eine Methode, die in der Graphics2D -Klasse implementiert ist, aber in der Klasse Graphics nicht vorkommt. 1. Warum funktioniert Graphics2D g2 = (Graphics2D)g; ? 2. Warum funktioniert g.draw3DRect() nicht, aber g2.draw3DRect() doch (wenn jeweils Parameterliste stimmt)? Erste geometrische Objekte \u00b6 Unser Fenster ist nun soweit vorbereitet und wir \u00fcberschreiben die paintComponent() -Methode in unserer Klasse Canvas . Nun k\u00f6nnen wir darin beliebige Grafiken einf\u00fcgen. Dazu rufen wir Methoden von Graphics2D auf. paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar g2 . drawRect ( 40 , 30 , 200 , 200 ); g2 . drawOval ( 40 , 30 , 200 , 200 ); } Die Methode drawRect(int x, int y, int width, int height) zeichnet ein Rechteck mit der Breite width und der H\u00f6he height . Bei uns hat beides den Wert 200 und somit wird ein Quadrat gezeichnet. Die Werte x und y stehen f\u00fcr die Koordinaten des linken oberen Punktes des Rechtecks innerhalb des JPanel s, in dem wir zeichnen (also innerhalb der ContentPane ). Der linke obere Punkt des JPanel hat die Koordinaten (0,0) , also gehen wir in dem Beispiel um 40 Pixel nach rechts und um 30 Pixel nach unten, um mit dem Zeichnen des Quadrates zu beginnen. Die Methode drawOval(int x, int y, int width, int height) zeichnet eine Ellipse mit der Breite width und der H\u00f6he height . Bei uns hat beides den Wert 200 und somit wird ein Kreis gezeichnet. Die Werte x und y stehen f\u00fcr die Koordinaten des linken oberen Punktes des gedachten Tangenetenvierecks um die Ellipse. Der linke obere \"Startpunkt\" ist hier sowohl f\u00fcr den Kreis, als auch f\u00fcr das Quadrat der gleiche. Da auch H\u00f6he und Breite jeweils gleich sind, passen die geometrischen Objekte genau ineinander, d.h. das Quadrat beschreibt das Tangenetenviereck um den Kreis. Sie k\u00f6nnen nun gerne beliebig die Methoden aus Graphics2D ausprobieren. Es macht Spa\u00df! Gerne auch beliebige Muster, z.B. paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 34 35 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar for ( int i = 0 ; i < 10 ; i ++ ) { g2 . drawOval ( 50 + i * 10 , 50 , 80 , 80 ); g2 . drawOval ( 50 + i * 10 , 150 , 80 , 180 ); } } Anstelle der \"vorgefertigten\" Methoden f\u00fcr das Zeichnen von Rechtecken ( drawRect() ) und Ellipsen ( drawOval() ), k\u00f6nnen Sie auch immer erst entsprechende Objekte erzeugen und diese mithilfe der draw() -Methode zeichnen lassen, z.B. paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 34 35 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar Shape rectangle = new Rectangle2D . Double ( 40.0 , 30.0 , 200.0 , 200.0 ); Shape circle = new Ellipse2D . Double ( 40.0 , 30.0 , 200.0 , 200.0 ); g2 . draw ( rectangle ); g2 . draw ( circle ); } Das Interface Shape ist aus dem java.awt -Paket und die geometrischen Objekte sind aus dem java.awt.geom -Paket. Der Vorteil ist, dass f\u00fcr die geometrischen Objekte selbst viele Methoden existieren, um z.B. die Eigenschaften dieser Objekte abzufragen (z.B. H\u00f6he oder Breite). Es gibt viele solcher Klassen - siehe dazu Shape und darin All Known Implementing Classes . Ein Kreisbogen kann z.B. mithilfe der Klassen Arc2D.Double oder Arc2D.Float gezeichnet werden. Ein Kreisbogen ist ein Teil einer Ellipse. Die Konstruktoren erwarten jeweils 7 Parameter (gibt auch jeweils noch andere Konstruktoren): x , x-Wert der linken oberen Ecke des Tangentenvierecks um die (gesamte) Ellipse, y , y-Wert der linken oberen Ecke des Tangentenvierecks um die (gesamte) Ellipse, width , Breite der (gesamten) Ellipse, height , H\u00f6he der (gesamten) Ellipse, start , Startpunkt des Kreisbogens in Grad (0 ist \"3 Uhr\", 90 ist \"12 Uhr\", 180 ist \"9 Uhr\", 270 ist \"6 Uhr\"), extent , L\u00e4nge des Kreisbogens in Grad (90 ist Viertelkreis, 180 ist Halbkreis, positiver Wert \"gegen die Uhr\", negativer Wert \"mit der Uhr\"), type , Auswahl zwischen Arc2D.OPEN , Arc2D.PIE und Arc2D.CHORD , siehe Abbildung. Beispiele paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar Shape arc1 = new Arc2D . Double ( 50.0 , 50.0 , 200.0 , 200.0 , 180.0 , 90.0 , Arc2D . OPEN ); Shape arc2 = new Arc2D . Double ( 50.0 , 50.0 , 200.0 , 200.0 , 180.0 , - 90.0 , Arc2D . OPEN ); Shape arc3 = new Arc2D . Double ( 50.0 , 50.0 , 200.0 , 200.0 , 20.0 , 45.0 , Arc2D . PIE ); Shape arc4 = new Arc2D . Double ( 60.0 , 63.0 , 180.0 , 180.0 , 0.0 , - 180.0 , Arc2D . PIE ); g2 . setStroke ( new BasicStroke ( 4.0f )); // dickere Linie g2 . draw ( arc1 ); g2 . setColor ( Color . RED ); // Zeichenfarbe rot g2 . draw ( arc2 ); g2 . setColor ( Color . BLUE ); g2 . draw ( arc3 ); g2 . setColor ( Color . GREEN ); g2 . draw ( arc4 ); } \u00dcbung Erstellen Sie folgende Zeichnung: Um die geometrischen Objekte gef\u00fcllt darzustellen, verwenden Sie anstelle von draw(Shape s) die fill(Shape s) -Methode. Linien \u00b6 Die Linienart setzen Sie mithilfe der Methode g2.setStroke(Stroke s) . Das Interface Stroke wird von der Klasse BasicStroke implementiert (Beides aus dem java.awt -Paket). Das bedeutet, der Methode setStroke() wird ein BasicStroke -Objekt \u00fcbergeben. Die Klasse BasicStroke besitzt folgende Konstruktoren: BasicStroke() BasicStroke(float width) BasicStroke(float width, int cap, int join) BasicStroke(float width, int cap, int join, float miterlimit) BasicStroke(float width, int cap, int join, float miterlimit, float[] dash, float dash_phase) Dabei gibt - width die Linienst\u00e4rke als float an, z.B. new BasicStroke(4.0f) , - cap beschreibt die Enden einer Linie. Es stehen drei vordefinierte Konstanten zur Verf\u00fcgung: CAP_BUTT , CAP_ROUND und CAP_SQUARE Beispiel: paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 34 35 36 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar g2 . setStroke ( new BasicStroke ( 20 , BasicStroke . CAP_BUTT , BasicStroke . JOIN_MITER )); g2 . drawLine ( 30 , 50 , 200 , 50 ); g2 . setStroke ( new BasicStroke ( 20 , BasicStroke . CAP_ROUND , BasicStroke . JOIN_MITER )); g2 . drawLine ( 30 , 100 , 200 , 100 ); g2 . setStroke ( new BasicStroke ( 20 , BasicStroke . CAP_SQUARE , BasicStroke . JOIN_MITER )); g2 . drawLine ( 30 , 150 , 200 , 150 ); } ergibt: Die Eigenschaft join von BasicStroke gibt an, wie sich zwei Linien an den Endpunkten verbinden. Es gibt die drei vordefinierten Konstanten JOIN_BEVEL , JOIN_MITER und JOIN_ROUND . Die Unterscheidung zeigt am besten die folgende Grafik: Mit dem join von Linien hat auch miterlimit zu tun. Es muss gr\u00f6\u00dfer gleich 1.0f sein und ist nur f\u00fcr JOIN_MITER von Bedeutung. Mit dash kann ein float[] f\u00fcr ein Muster des Strichelns der Linie angegeben werden. Mit dash_phase kann angegeben werden, nach welcher Verz\u00f6gerung die Anwendung des dash -Musters erfolgt. Beispiel: paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar float [] dash1 = { 20.0f }; float [] dash2 = { 20.0f , 40.0f }; g2 . setStroke ( new BasicStroke ( 20.0f , BasicStroke . CAP_BUTT , BasicStroke . JOIN_MITER , 1.0f , dash1 , 0.0f )); g2 . drawLine ( 30 , 50 , 350 , 50 ); g2 . setStroke ( new BasicStroke ( 20.0f , BasicStroke . CAP_BUTT , BasicStroke . JOIN_MITER , 1.0f , dash2 , 0.0f )); g2 . drawLine ( 30 , 100 , 350 , 100 ); g2 . setStroke ( new BasicStroke ( 20.0f , BasicStroke . CAP_BUTT , BasicStroke . JOIN_MITER , 1.0f , dash1 , 10.0f )); g2 . drawLine ( 30 , 150 , 350 , 150 ); } ergibt: Farben \u00b6 Das Java-Farbmodell basiert auf dem RGB-Farbmodell , wobei jede Farbe durch 24Bit repr\u00e4sentiert wird ( 24Bit Farbtiefe ). Das bedeutet, dass f\u00fcr jeden Farbanteil von Rot, Gr\u00fcn, Blau jeweils 8Bit zur Verf\u00fcgung stehen und die einzelnen Farbanteile somit einen Wert zwischen 0 und 255 annehmen k\u00f6nnen. Einige Farben und deren Farbanteile von Rot, Gr\u00fcn und Blau sind in der folgenden Tabelle dargestellt: Farbe Rot-Anteil Gr\u00fcn-Anteil Blau-Anteil Wei\u00df 255 255 255 Schwarz 0 0 0 Grau 127 127 127 Rot 255 0 0 Gr\u00fcn 0 255 0 Blau 0 0 255 Gelb 255 255 0 Magenta 255 0 255 Cyan 0 255 255 Die Klasse Color aus dem java.awt -Paket besitzt sieben Konstruktoren. Die wichtigsten sind public Color(int r, int g, int b) , mit den int -Werten jeweils von 0 bis 255 f\u00fcr die Farbanteile, public Color(float r, float g, float b) , mit den float -Werten jeweils von 0.0f bis 1.0f f\u00fcr die Farbanteile, und die Pendants mit einem zus\u00e4tzlichen Alpha-Anteil f\u00fcr die Transparenz: public Color(int r, int g, int b, int alpha) , 0 bis 255 ( 0 vollst\u00e4ndig transparent, 255 deckend), public Color(float r, float g, float b, float alpha) , 0.0f bis 1.0f ( 0 vollst\u00e4ndig transparent, 1.0 deckend). In Color sind dar\u00fcber hinaus folgende Farben als statische Konstanten definiert: WHITE , BLACK , BLUE , CYAN , DARKGRAY , GRAY , GREEN , LIGHTGRAY , MAGENTA , ORANGE , PINK , RED , YELLOW Beispiel: paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int diffX = 200 ; int diffY = 130 ; Color color ; color = new Color ( 205 , 107 , 117 , 127 ); g2 . setColor ( color ); g2 . fillRect ( 50 , 50 , 150 , 100 ); color = new Color ( 205 , 107 , 117 , 255 ); g2 . setColor ( color ); g2 . fillRect ( 50 , 50 + diffY , 150 , 100 ); g2 . setColor ( Color . WHITE ); g2 . fillRect ( 50 , 50 + 2 * diffY , 150 , 100 ); color = new Color ( 100 , 255 , 100 , 127 ); g2 . setColor ( color ); g2 . fillRect ( 50 + diffX , 50 , 150 , 100 ); color = new Color ( 100 , 255 , 100 , 255 ); g2 . setColor ( color ); g2 . fillRect ( 50 + diffX , 50 + diffY , 150 , 100 ); g2 . setColor ( Color . GREEN ); g2 . fillRect ( 50 + diffX , 50 + 2 * diffY , 150 , 100 ); color = new Color ( 100 , 100 , 255 , 127 ); g2 . setColor ( color ); g2 . fillRect ( 50 + 2 * diffX , 50 , 150 , 100 ); color = new Color ( 100 , 100 , 255 , 255 ); g2 . setColor ( color ); g2 . fillRect ( 50 + 2 * diffX , 50 + diffY , 150 , 100 ); g2 . setColor ( Color . BLUE ); g2 . fillRect ( 50 + 2 * diffX , 50 + 2 * diffY , 150 , 100 ); } ergibt: Mit den Klassen LinearGradientPaint und GradientPaint k\u00f6nnen Farbverl\u00e4ufe implementiert werden. Beispiel: paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar GradientPaint gp = new GradientPaint ( 0 , 0 , Color . RED , 300 , 100 , Color . WHITE ); g2 . setPaint ( gp ); g2 . fillRect ( 50 , 50 , 300 , 100 ); } ergibt: H\u00f6he und Breite abh\u00e4ngig von der Canvas-Gr\u00f6\u00dfe \u00b6 Angenommen, Sie wollen eine geometrischen Figur so zeichnen, dass sich ihre Gr\u00f6\u00dfe der Gr\u00f6\u00dfe des Fensters anpasst. Dazu stehen Ihnen die Methoden getHeight() und getWidth() von JPanel (und somit von Ihrem Canvas -Objekt) zur Verf\u00fcgung. Die linke obere Ecke des JPanels hat die Koordinaten [x=0, y=0] und die rechte untere Ecke hat die Koordinaten [x=this.getWidth(), y= this.getHeight()] , d.h f\u00fcr den linken Rand gilt x = 0 , f\u00fcr den rechten Rand gilt x = this.width() , f\u00fcr den oberen Rand gilt y = 0 und f\u00fcr den unteren Rand gilt y = this.height() . Angenommen, wir wollen ein Rechteck einpassen, das jeweils 30 Pixel von allen vier R\u00e4ndern Abstand hat, dann definieren wir: Beispiel: paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int abstand = 30 ; int links = abstand ; int oben = abstand ; int rechts = this . getWidth () - abstand ; int unten = this . getHeight () - abstand ; int breite = rechts - links ; int hoehe = unten - oben ; g2 . drawRect ( links , oben , breite , hoehe ); } ergibt: noch ein Beispiel - wir passen ein Dreieck in das Fenster ein: paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int abstand = 30 ; int links = abstand ; int oben = abstand ; int rechts = this . getWidth () - abstand ; int unten = this . getHeight () - abstand ; int breite = rechts - links ; int hoehe = unten - oben ; int mitteVertikal = this . getWidth () / 2 ; g2 . drawLine ( links , unten , mitteVertikal , oben ); g2 . drawLine ( mitteVertikal , oben , rechts , unten ); g2 . drawLine ( rechts , unten , links , unten ); } ergibt: Success Wir k\u00f6nnen eigene Grafiken erstellen. Wir erstellen dazu eine innere Klasse, die von JPanel erbt. Der Grund daf\u00fcr ist, dass wir die Methode paintComponent(Graphics g) \u00fcberschreiben wollen und darin mithilfe der Methoden aus der Klasse Grahpcs2D geometrische Objekte erstellen. Au\u00dferdem haben wir das Farbmodell von Java kennengelernt und k\u00f6nnen die Grafiken an die Fenstergr\u00f6\u00dfe anpassen. In der kommenden Lektion lernen wir, wie wir mithilfe der Maus zeichnen k\u00f6nnen.","title":"GUI Graphics"},{"location":"graphics/#graphics","text":"Wir werden unsere GUI nun um eine Komponente erweitern, in der wir zeichnen k\u00f6nnen. Im Prinzip wird unsere GUI immer gezeichnet . Die Steuerelemente sind nur vorformatiert und bestehen aus lauter Linien, Polygonen und Punkten, die zusammen dann so, wie z.B. ein Button aussehen. Wenn wir eine GUI haben und dieses Fenster z.B. die Gr\u00f6\u00dfe \u00e4ndert, wird es dabei jedes Mal neu gezeichnet. Diese (Neu-)Zeichnen wird dadurch angesto\u00dfen, dass f\u00fcr unser JFrame die Methode paint() aufgerufen wird. Diese Methode wird z.B. auch in der Methode setVisible(true) aufgerufen. Jede Komponente (also jedes Steuerelement und jeder Container) hat ihre eigene Objektmethode paint() , in der beschrieben ist, wie diese Komponente zu zeichnen ist. Genauer gesagt, werden in paint() folgende drei Methoden aufgerufen: paintBorder() - zeichnet den Rahmen der Komponente paintChildren() - ruft paint() f\u00fcr alle Kindkomponenten auf (also z.B. alle Steurelemente in einem JPanel ) paintComponent() - zeichnet die Komponente (und ihre Kinder) Damit \u00fcberhaupt Linien und Punkte dargestellt werden k\u00f6nnen, gibt es eine Klasse Graphics , die, etwas vereinfacht gesagt, die Schnittstelle zwischen Hardware (dem Monitor) und dem zu zeichnenden Fenster darstellt. Alle Komponenten eines Fensters teilen sich genau ein Objekt dieser Klasse Graphics . Bei diesem Objekt wird auch vom Graphics-Context ( Grafikkontext ) gesprochen. Diese Klasse stellt eine Vielzahl von Methoden zur Verf\u00fcgung, um einfache geometrische Objekte zu zeichnen, z.B. drawLine() , um eine Linie zu zeichnen, drawOval() , um eine (leere) Ellipse zu zeichnen, drawRect() , um ein (leeres) Rechteck zu zeichnen, drawPolygon() , um ein (leeres) Polygon (also ein Vieleck) zu zeichnen, drawString() , um ein Text zu zeichnen, fillOval() , um eine (ausgef\u00fcllte) Ellipse zu zeichnen, fillRect() , um ein (ausgef\u00fclltes) Rechteck zu zeichnen, fillPolygon() , um ein (ausgef\u00fclltes) Polygon (also ein Vieleck) zu zeichnen. Damit nun alle paintX() -Methoden (also paint() , paintBorder() , paintComponent und paintChildren() ) Zugriff auf diesen Grafikkontext (das Objekt von Graphics ) bekommen, wird es diesen Methoden \u00fcbergeben. Das hei\u00dft, die Methoden sind so deklariert (alle void ): paint(Graphics g) paintBorder(Graphics g) paintChildren(Graphics g) paintComponent(Graphics g) Die Graphics -Klasse gibt es schon seit Java 1.0. Allerdings hat man bereits sehr fr\u00fch festgestellt, dass die Methoden in dieser Klasse nicht gen\u00fcgen, um \"sch\u00f6ne\" Grafiken zu erstellen. Deshalb hat man bereits in Java 1.1 eine neue Klasse Graphics2D eingef\u00fchrt (hat von Graphics geerbt), in der haupts\u00e4chlich die Darstellung der geometrischen Objekte verbessert wurde, aber in der auch einige Methoden dazukamen, um z.B. andere Linienformen (gestrichelt, gepunktet, ...) zu definieren, andere Fonts f\u00fcr den Text usw. Tats\u00e4chlich handelt es sich seit JDK 1.2 bei dem Grafikkontext, also dem Graphics -Objekt g um ein Objekt der Klasse Graphics2D .","title":"Graphics"},{"location":"graphics/#eigene-geometrische-objekte-zeichnen","text":"Bevor wir eigene geometrische Objekte zeichnen k\u00f6nnen, schauen wir zun\u00e4chst nochmal auf unser \"Grundger\u00fcst\" f\u00fcr eine GUI (siehe Kapitel GUI Einf\u00fchrung ): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import javax.swing.JFrame ; import javax.swing.JPanel ; public class MyFirstWindow extends JFrame { public MyFirstWindow () { super (); this . setTitle ( \"My first window\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). add ( this . initContent ()); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private JPanel initContent () { JPanel mainPanel = new JPanel (); // hier weitere Container oder Steuerelemente hinzufuegen return mainPanel ; } public static void main ( String [] args ) { new MyFirstWindow (); } } Darin erzeugt die Methode initContent() ein JPanel und gibt es zur\u00fcck. Dieses JPanel wird der ContentPane unseres Fensters hinzugef\u00fcgt (Zeile 13 ). Somit hat das JFrame ein Kind , n\u00e4mlich das der ContentPane hinzugef\u00fcgte JPanel . Wenn das JFrame nun gezeichnet wird, wird f\u00fcr dieses JPanel die Methode paintComponent(Graphics g) aufgerufen. Diese ist f\u00fcr ein JPanel so implementiert, dass ein hellgraues Rechteck ohne Rand ( Border ) gezeichnet wird. W\u00fcrden wir dem mainPanel in der initContent() -Methode nun weitere Komponenten (Container oder Steuerlemente) hinzuf\u00fcgen, so w\u00fcrden diese alle so gezeichnet werden, wie f\u00fcr diese Komponenten die paintComponent(Graphics g) -Methode implementiert ist. Wir wollen nun aber selbst die paintComponent(Graphics g) -Methode f\u00fcr eine Komponente implementieren. Dazu entscheiden wir uns daf\u00fcr, die paintComponent() -Methode von einem JPanel zu implementieren. Aber wie kommen wir an diese Implementierung ran? Indem wir von JPanel erben . Wenn wir eine Klasse erstellen, die von JPanel erbt, dann erben wir auch die Implementierung der paintComponent() -Methode von JPanel und k\u00f6nnen diese \u00fcberschreiben . Wir \u00e4ndern daf\u00fcr unser \"Grundger\u00fcst\": 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 import java.awt.Graphics ; import java.awt.Graphics2D ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class MyFirstDrawingWindow extends JFrame { public MyFirstDrawingWindow () { super (); this . setTitle ( \"Wir zeichnen\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). add ( new Canvas ()); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } public static void main ( String [] args ) { new MyFirstDrawingWindow (); } } An der Darstellung des Fensters \u00e4ndert das zun\u00e4chst gar nichts. Wenn wir das Programm ausf\u00fchren, dann erscheint folgendes Fenster. Das der ContentPane hinzugef\u00fcgte JPanel wird also \"ganz normal\" als hellgraues Rechteck dargestellt. Der gro\u00dfe Unterschied ist, dass es sich nun um ein Objekt unserer inneren Klasse Canvas handelt. Diese hat von JPanel geerbt. Ein Objekt von Canvas ist somit auch ein Objekt vom Typ JPanel . Aber wir k\u00f6nnen in Canvas die Methode paintComponent(Graphics g) \u00fcberschreiben und somit eine eigene Implementierung f\u00fcr das Zeichnen unserer Komponente (einem Canvas -Objekt) erstellen. Innerhalb unserer eigenen Implementierung der paintComponent() -Methode rufen wir zun\u00e4chst die paintComponent() -Methode von JPanel auf. Damit wird ein hellgraues Rechteck gezeichnet. Das sollten wir immer tun, da ansonsten manchmal unsch\u00f6ne Nebeneffekte entstehen. Au\u00dferdem sollten wir auch immer das Graphics -Objekt nach Graphics2D konvertieren, da uns in Graphics2D deutlich mehr Methoden zur Verf\u00fcgung stehen (siehe z.B. hier und hier ). \u00dcbung Die Methode draw3DRect() ist ein Beispiel f\u00fcr eine Methode, die in der Graphics2D -Klasse implementiert ist, aber in der Klasse Graphics nicht vorkommt. 1. Warum funktioniert Graphics2D g2 = (Graphics2D)g; ? 2. Warum funktioniert g.draw3DRect() nicht, aber g2.draw3DRect() doch (wenn jeweils Parameterliste stimmt)?","title":"Eigene geometrische Objekte zeichnen"},{"location":"graphics/#erste-geometrische-objekte","text":"Unser Fenster ist nun soweit vorbereitet und wir \u00fcberschreiben die paintComponent() -Methode in unserer Klasse Canvas . Nun k\u00f6nnen wir darin beliebige Grafiken einf\u00fcgen. Dazu rufen wir Methoden von Graphics2D auf. paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar g2 . drawRect ( 40 , 30 , 200 , 200 ); g2 . drawOval ( 40 , 30 , 200 , 200 ); } Die Methode drawRect(int x, int y, int width, int height) zeichnet ein Rechteck mit der Breite width und der H\u00f6he height . Bei uns hat beides den Wert 200 und somit wird ein Quadrat gezeichnet. Die Werte x und y stehen f\u00fcr die Koordinaten des linken oberen Punktes des Rechtecks innerhalb des JPanel s, in dem wir zeichnen (also innerhalb der ContentPane ). Der linke obere Punkt des JPanel hat die Koordinaten (0,0) , also gehen wir in dem Beispiel um 40 Pixel nach rechts und um 30 Pixel nach unten, um mit dem Zeichnen des Quadrates zu beginnen. Die Methode drawOval(int x, int y, int width, int height) zeichnet eine Ellipse mit der Breite width und der H\u00f6he height . Bei uns hat beides den Wert 200 und somit wird ein Kreis gezeichnet. Die Werte x und y stehen f\u00fcr die Koordinaten des linken oberen Punktes des gedachten Tangenetenvierecks um die Ellipse. Der linke obere \"Startpunkt\" ist hier sowohl f\u00fcr den Kreis, als auch f\u00fcr das Quadrat der gleiche. Da auch H\u00f6he und Breite jeweils gleich sind, passen die geometrischen Objekte genau ineinander, d.h. das Quadrat beschreibt das Tangenetenviereck um den Kreis. Sie k\u00f6nnen nun gerne beliebig die Methoden aus Graphics2D ausprobieren. Es macht Spa\u00df! Gerne auch beliebige Muster, z.B. paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 34 35 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar for ( int i = 0 ; i < 10 ; i ++ ) { g2 . drawOval ( 50 + i * 10 , 50 , 80 , 80 ); g2 . drawOval ( 50 + i * 10 , 150 , 80 , 180 ); } } Anstelle der \"vorgefertigten\" Methoden f\u00fcr das Zeichnen von Rechtecken ( drawRect() ) und Ellipsen ( drawOval() ), k\u00f6nnen Sie auch immer erst entsprechende Objekte erzeugen und diese mithilfe der draw() -Methode zeichnen lassen, z.B. paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 34 35 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar Shape rectangle = new Rectangle2D . Double ( 40.0 , 30.0 , 200.0 , 200.0 ); Shape circle = new Ellipse2D . Double ( 40.0 , 30.0 , 200.0 , 200.0 ); g2 . draw ( rectangle ); g2 . draw ( circle ); } Das Interface Shape ist aus dem java.awt -Paket und die geometrischen Objekte sind aus dem java.awt.geom -Paket. Der Vorteil ist, dass f\u00fcr die geometrischen Objekte selbst viele Methoden existieren, um z.B. die Eigenschaften dieser Objekte abzufragen (z.B. H\u00f6he oder Breite). Es gibt viele solcher Klassen - siehe dazu Shape und darin All Known Implementing Classes . Ein Kreisbogen kann z.B. mithilfe der Klassen Arc2D.Double oder Arc2D.Float gezeichnet werden. Ein Kreisbogen ist ein Teil einer Ellipse. Die Konstruktoren erwarten jeweils 7 Parameter (gibt auch jeweils noch andere Konstruktoren): x , x-Wert der linken oberen Ecke des Tangentenvierecks um die (gesamte) Ellipse, y , y-Wert der linken oberen Ecke des Tangentenvierecks um die (gesamte) Ellipse, width , Breite der (gesamten) Ellipse, height , H\u00f6he der (gesamten) Ellipse, start , Startpunkt des Kreisbogens in Grad (0 ist \"3 Uhr\", 90 ist \"12 Uhr\", 180 ist \"9 Uhr\", 270 ist \"6 Uhr\"), extent , L\u00e4nge des Kreisbogens in Grad (90 ist Viertelkreis, 180 ist Halbkreis, positiver Wert \"gegen die Uhr\", negativer Wert \"mit der Uhr\"), type , Auswahl zwischen Arc2D.OPEN , Arc2D.PIE und Arc2D.CHORD , siehe Abbildung. Beispiele paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar Shape arc1 = new Arc2D . Double ( 50.0 , 50.0 , 200.0 , 200.0 , 180.0 , 90.0 , Arc2D . OPEN ); Shape arc2 = new Arc2D . Double ( 50.0 , 50.0 , 200.0 , 200.0 , 180.0 , - 90.0 , Arc2D . OPEN ); Shape arc3 = new Arc2D . Double ( 50.0 , 50.0 , 200.0 , 200.0 , 20.0 , 45.0 , Arc2D . PIE ); Shape arc4 = new Arc2D . Double ( 60.0 , 63.0 , 180.0 , 180.0 , 0.0 , - 180.0 , Arc2D . PIE ); g2 . setStroke ( new BasicStroke ( 4.0f )); // dickere Linie g2 . draw ( arc1 ); g2 . setColor ( Color . RED ); // Zeichenfarbe rot g2 . draw ( arc2 ); g2 . setColor ( Color . BLUE ); g2 . draw ( arc3 ); g2 . setColor ( Color . GREEN ); g2 . draw ( arc4 ); } \u00dcbung Erstellen Sie folgende Zeichnung: Um die geometrischen Objekte gef\u00fcllt darzustellen, verwenden Sie anstelle von draw(Shape s) die fill(Shape s) -Methode.","title":"Erste geometrische Objekte"},{"location":"graphics/#linien","text":"Die Linienart setzen Sie mithilfe der Methode g2.setStroke(Stroke s) . Das Interface Stroke wird von der Klasse BasicStroke implementiert (Beides aus dem java.awt -Paket). Das bedeutet, der Methode setStroke() wird ein BasicStroke -Objekt \u00fcbergeben. Die Klasse BasicStroke besitzt folgende Konstruktoren: BasicStroke() BasicStroke(float width) BasicStroke(float width, int cap, int join) BasicStroke(float width, int cap, int join, float miterlimit) BasicStroke(float width, int cap, int join, float miterlimit, float[] dash, float dash_phase) Dabei gibt - width die Linienst\u00e4rke als float an, z.B. new BasicStroke(4.0f) , - cap beschreibt die Enden einer Linie. Es stehen drei vordefinierte Konstanten zur Verf\u00fcgung: CAP_BUTT , CAP_ROUND und CAP_SQUARE Beispiel: paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 34 35 36 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar g2 . setStroke ( new BasicStroke ( 20 , BasicStroke . CAP_BUTT , BasicStroke . JOIN_MITER )); g2 . drawLine ( 30 , 50 , 200 , 50 ); g2 . setStroke ( new BasicStroke ( 20 , BasicStroke . CAP_ROUND , BasicStroke . JOIN_MITER )); g2 . drawLine ( 30 , 100 , 200 , 100 ); g2 . setStroke ( new BasicStroke ( 20 , BasicStroke . CAP_SQUARE , BasicStroke . JOIN_MITER )); g2 . drawLine ( 30 , 150 , 200 , 150 ); } ergibt: Die Eigenschaft join von BasicStroke gibt an, wie sich zwei Linien an den Endpunkten verbinden. Es gibt die drei vordefinierten Konstanten JOIN_BEVEL , JOIN_MITER und JOIN_ROUND . Die Unterscheidung zeigt am besten die folgende Grafik: Mit dem join von Linien hat auch miterlimit zu tun. Es muss gr\u00f6\u00dfer gleich 1.0f sein und ist nur f\u00fcr JOIN_MITER von Bedeutung. Mit dash kann ein float[] f\u00fcr ein Muster des Strichelns der Linie angegeben werden. Mit dash_phase kann angegeben werden, nach welcher Verz\u00f6gerung die Anwendung des dash -Musters erfolgt. Beispiel: paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar float [] dash1 = { 20.0f }; float [] dash2 = { 20.0f , 40.0f }; g2 . setStroke ( new BasicStroke ( 20.0f , BasicStroke . CAP_BUTT , BasicStroke . JOIN_MITER , 1.0f , dash1 , 0.0f )); g2 . drawLine ( 30 , 50 , 350 , 50 ); g2 . setStroke ( new BasicStroke ( 20.0f , BasicStroke . CAP_BUTT , BasicStroke . JOIN_MITER , 1.0f , dash2 , 0.0f )); g2 . drawLine ( 30 , 100 , 350 , 100 ); g2 . setStroke ( new BasicStroke ( 20.0f , BasicStroke . CAP_BUTT , BasicStroke . JOIN_MITER , 1.0f , dash1 , 10.0f )); g2 . drawLine ( 30 , 150 , 350 , 150 ); } ergibt:","title":"Linien"},{"location":"graphics/#farben","text":"Das Java-Farbmodell basiert auf dem RGB-Farbmodell , wobei jede Farbe durch 24Bit repr\u00e4sentiert wird ( 24Bit Farbtiefe ). Das bedeutet, dass f\u00fcr jeden Farbanteil von Rot, Gr\u00fcn, Blau jeweils 8Bit zur Verf\u00fcgung stehen und die einzelnen Farbanteile somit einen Wert zwischen 0 und 255 annehmen k\u00f6nnen. Einige Farben und deren Farbanteile von Rot, Gr\u00fcn und Blau sind in der folgenden Tabelle dargestellt: Farbe Rot-Anteil Gr\u00fcn-Anteil Blau-Anteil Wei\u00df 255 255 255 Schwarz 0 0 0 Grau 127 127 127 Rot 255 0 0 Gr\u00fcn 0 255 0 Blau 0 0 255 Gelb 255 255 0 Magenta 255 0 255 Cyan 0 255 255 Die Klasse Color aus dem java.awt -Paket besitzt sieben Konstruktoren. Die wichtigsten sind public Color(int r, int g, int b) , mit den int -Werten jeweils von 0 bis 255 f\u00fcr die Farbanteile, public Color(float r, float g, float b) , mit den float -Werten jeweils von 0.0f bis 1.0f f\u00fcr die Farbanteile, und die Pendants mit einem zus\u00e4tzlichen Alpha-Anteil f\u00fcr die Transparenz: public Color(int r, int g, int b, int alpha) , 0 bis 255 ( 0 vollst\u00e4ndig transparent, 255 deckend), public Color(float r, float g, float b, float alpha) , 0.0f bis 1.0f ( 0 vollst\u00e4ndig transparent, 1.0 deckend). In Color sind dar\u00fcber hinaus folgende Farben als statische Konstanten definiert: WHITE , BLACK , BLUE , CYAN , DARKGRAY , GRAY , GREEN , LIGHTGRAY , MAGENTA , ORANGE , PINK , RED , YELLOW Beispiel: paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int diffX = 200 ; int diffY = 130 ; Color color ; color = new Color ( 205 , 107 , 117 , 127 ); g2 . setColor ( color ); g2 . fillRect ( 50 , 50 , 150 , 100 ); color = new Color ( 205 , 107 , 117 , 255 ); g2 . setColor ( color ); g2 . fillRect ( 50 , 50 + diffY , 150 , 100 ); g2 . setColor ( Color . WHITE ); g2 . fillRect ( 50 , 50 + 2 * diffY , 150 , 100 ); color = new Color ( 100 , 255 , 100 , 127 ); g2 . setColor ( color ); g2 . fillRect ( 50 + diffX , 50 , 150 , 100 ); color = new Color ( 100 , 255 , 100 , 255 ); g2 . setColor ( color ); g2 . fillRect ( 50 + diffX , 50 + diffY , 150 , 100 ); g2 . setColor ( Color . GREEN ); g2 . fillRect ( 50 + diffX , 50 + 2 * diffY , 150 , 100 ); color = new Color ( 100 , 100 , 255 , 127 ); g2 . setColor ( color ); g2 . fillRect ( 50 + 2 * diffX , 50 , 150 , 100 ); color = new Color ( 100 , 100 , 255 , 255 ); g2 . setColor ( color ); g2 . fillRect ( 50 + 2 * diffX , 50 + diffY , 150 , 100 ); g2 . setColor ( Color . BLUE ); g2 . fillRect ( 50 + 2 * diffX , 50 + 2 * diffY , 150 , 100 ); } ergibt: Mit den Klassen LinearGradientPaint und GradientPaint k\u00f6nnen Farbverl\u00e4ufe implementiert werden. Beispiel: paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar GradientPaint gp = new GradientPaint ( 0 , 0 , Color . RED , 300 , 100 , Color . WHITE ); g2 . setPaint ( gp ); g2 . fillRect ( 50 , 50 , 300 , 100 ); } ergibt:","title":"Farben"},{"location":"graphics/#hohe-und-breite-abhangig-von-der-canvas-groe","text":"Angenommen, Sie wollen eine geometrischen Figur so zeichnen, dass sich ihre Gr\u00f6\u00dfe der Gr\u00f6\u00dfe des Fensters anpasst. Dazu stehen Ihnen die Methoden getHeight() und getWidth() von JPanel (und somit von Ihrem Canvas -Objekt) zur Verf\u00fcgung. Die linke obere Ecke des JPanels hat die Koordinaten [x=0, y=0] und die rechte untere Ecke hat die Koordinaten [x=this.getWidth(), y= this.getHeight()] , d.h f\u00fcr den linken Rand gilt x = 0 , f\u00fcr den rechten Rand gilt x = this.width() , f\u00fcr den oberen Rand gilt y = 0 und f\u00fcr den unteren Rand gilt y = this.height() . Angenommen, wir wollen ein Rechteck einpassen, das jeweils 30 Pixel von allen vier R\u00e4ndern Abstand hat, dann definieren wir: Beispiel: paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int abstand = 30 ; int links = abstand ; int oben = abstand ; int rechts = this . getWidth () - abstand ; int unten = this . getHeight () - abstand ; int breite = rechts - links ; int hoehe = unten - oben ; g2 . drawRect ( links , oben , breite , hoehe ); } ergibt: noch ein Beispiel - wir passen ein Dreieck in das Fenster ein: paintComponent()-Methode in Canvas 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int abstand = 30 ; int links = abstand ; int oben = abstand ; int rechts = this . getWidth () - abstand ; int unten = this . getHeight () - abstand ; int breite = rechts - links ; int hoehe = unten - oben ; int mitteVertikal = this . getWidth () / 2 ; g2 . drawLine ( links , unten , mitteVertikal , oben ); g2 . drawLine ( mitteVertikal , oben , rechts , unten ); g2 . drawLine ( rechts , unten , links , unten ); } ergibt: Success Wir k\u00f6nnen eigene Grafiken erstellen. Wir erstellen dazu eine innere Klasse, die von JPanel erbt. Der Grund daf\u00fcr ist, dass wir die Methode paintComponent(Graphics g) \u00fcberschreiben wollen und darin mithilfe der Methoden aus der Klasse Grahpcs2D geometrische Objekte erstellen. Au\u00dferdem haben wir das Farbmodell von Java kennengelernt und k\u00f6nnen die Grafiken an die Fenstergr\u00f6\u00dfe anpassen. In der kommenden Lektion lernen wir, wie wir mithilfe der Maus zeichnen k\u00f6nnen.","title":"H\u00f6he und Breite abh\u00e4ngig von der Canvas-Gr\u00f6\u00dfe"},{"location":"gui/","text":"Graphical User Interfaces \u00b6 Bis jetzt haben wir unsere Ein- und Ausgaben \u00fcber die Konsole erledigt oder wir haben Testklassen geschrieben, um Funktionalit\u00e4ten unserer Programme zu testen. Nun wollen wir grafische Nutzeroberfl\u00e4chen ( Graphical User Interfaces (GUI) ) erstellen, also Fenster, die Steuerelemente enthalten. Steuerelemente sind Ein- und Ausgabeelemente, Labels (also Text), Buttons, Checkboxes, Radiobuttons usw. Das Java Developement Kit (JDK) beinhaltet verschiedene Bibliotheken zum Erstellen grafischer Nutzeroberfl\u00e4chen: AWT (abstract window toolkit) java.awt ; alt, aber noch viele Sachen, die man heute noch nutzt: Farben, Listener f\u00fcr Maus und Tastur, Grafiken, ... Swing javax.swing ; das verwenden wir zum Erstellen von Fenstern, auch nicht mehr ganz neu JavaFX javafx ; sollte eigentlich Swing abl\u00f6sen, hat sich aber nicht durchgesetzt, seit Java 11 nicht mehr Bestandteil des Standard-JDK Swing ist, wie bereits gesagt, auch nicht mehr neu und wird h\u00e4ufig als veraltet bezeichnet. Allerdings gibt es auch keine Alternativen. JavaFX sollte Swing abl\u00f6sen, hat sich jedoch noch nicht durchgesetzt. Wir verwenden Swing aus zwei Gr\u00fcnden: erstens ist es immernoch das am meisten verwendete Framework f\u00fcr die Erstellung von GUIs in nativen Desktopanwendungen (also alles, was nicht \"Web\" und was nicht \"mobile\" ist), bspw. wurde IntelliJ mit Swing aufgebaut und zweitens geht es uns um die Konzepte , d.h. um den hierarchischen Aufbau der Oberfl\u00e4chen, um Nutzereignisse und die Behandlung dieser. Wir werden uns im 3. Semester in \"Webtechnologien\" mit der Erstellung moderner Weboberfl\u00e4chen besch\u00e4ftigen und dabei auf die Grundlagen aufbauen, die wir hier legen. Die Konzepte sind n\u00e4mlich dieselben. Elemente einer GUI \u00b6 Eine GUI besteht aus verschiedenen Elementen, deren Zusammenspiel erst die Benutzbarkeit der Oberfl\u00e4che erm\u00f6glichen. Unter Benutzbarkeit ist dabei die einfache, intuitive und \u00fcbersichtliche Ein- und Ausgabe von Daten gemeint. Im 6. Semester gibt es eine ganze Lehrveranstaltung zum Thema Usability in unserem Studiengang. Folgende Elemente sind in einer GUI von Bedeutung: Das Fenster stellt den \u00e4u\u00dferen Rahmen einer grafischen Anwendung dar. Es enth\u00e4lt typischerweise einen Rahmen und eine Titelleiste, in der der Name des Fensters bzw. der Anwendung (in der oberen Abbildung Window ) und drei Buttons zum Schlie\u00dfen des Fensters bzw. der Anwendung (das rote Kreuz in der oberen Abbildung), zum Vollbildmodus (das Quadrat) und zum Verkleinern des Fensters in die Taskleiste (der Unterstrich) enthalten sind. Der Rahmen, genau wie die Titelleiste mit den drei Buttons, sind aber optional. Ein Fenster enth\u00e4lt Komponenten . Komponenten sind alle Oberfl\u00e4chen- bzw. Steuerelemente, d.h. Buttons (siehe oben < Back und Next > ), Labels (Texte, z.B. Checkbox ), Checkboxes (die Quadrate, die ein H\u00e4kchen haben k\u00f6nnen oder auch nicht), Ein- und Ausgabefelder, Auswahllisten usw. Steuerlemente sind also alle Elemente, die direkt der Ein- und Ausgabe dienen. Dar\u00fcber hinaus gibt es noch die Komponente Container . Ein Container kann selbst wieder Container enhalten oder Steuerelemente . Container sind nicht direkt sichtbar, sondern sie dienen der Strukturierung einer grafischen Oberfl\u00e4che. Layoutmanager organisieren die Positionierung von Komponenten. Mithilfe von Layoutmanagern kann man Container unter- und/oder nebeneinander positionieren und organisiert somit die Anordnung der Steuerelmente. Men\u00fcs sind einblendbare Befehlsleisten. Es gibt die Men\u00fcs, die meistens oben in der Men\u00fcleiste verankert sind und Kontextmen\u00fcs , die dort erscheinen, wo man, meistens mit der rechten, Maustaste hinklickt. Events ( Ereignisse ) haben zun\u00e4chst nichts mit der Darstellung selbst zu tun. Sie sind aber f\u00fcr die Benutzbarkeit sehr wichtig, denn jede Nutzeraktion l\u00f6st ein Ereignis aus, welches wir im Programm behandeln k\u00f6nnen, z.B. Mausklicks, Mausbewegungen, Tastatureingaben, Bewegen, Vergr\u00f6\u00dfern, Verkleinern des Fensters usw. Wir werden uns sehr ausf\u00fchrlich mit der Behandlung von Ereignissen besch\u00e4ftigen. Zeichenoperationen dienen der Erstellung von Punkten, Linien, Text usw. in Fenstern. W\u00e4hrend die Steuerelemente ein festes Aussehen besitzen (anpassbar, je nach Betriebssystem und unterschiedlichen Look&Feel -Frameworks), k\u00f6nnen mit Zeichenoperationen beliebige Elemente erstellt und dargestellt werden, z.B. Grafiken, Kurven oder Diagramme. Wir werden auf alle diese Elemente eingehen und starten jetzt aber mit unserem ersten Fenster. Ein erstes Fenster mit Swing \u00b6 Wir erstellen uns eine Klasse MyFirstWindow . Von dieser Klasse erzeugen wir uns ein Objekt. Dazu implementieren wir den parameterlosen Konstruktor dieser Klasse. In diesem Konstruktor wird ein JFrame erzeugt - das ist das Fenster bei Swing. Wir haben in dieser Klasse auch eine main() -Methode. Das ist nicht ganz sauber, da die main() -methode ja eigentlich keine Eigenschaft unserer Klasse ist, deren Responsibility die Erstellung eines Fensters ist, aber wir vereinfachen hier zu Anfang: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import javax.swing.JFrame ; public class MyFirstWindow { public MyFirstWindow () { JFrame window = new JFrame (); window . setTitle ( \"My first window\" ); window . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); window . setSize ( 400 , 300 ); window . setLocation ( 300 , 200 ); window . setVisible ( true ); } public static void main ( String [] args ) { new MyFirstWindow (); } } Wenn wir diese Klasse ausf\u00fchren, erscheint folgendes Fenster: Das Aussehen ist betriebssystemabh\u00e4ngig. Probieren Sie die drei \"Kn\u00f6pfe\" in der Titelleiste aus, sie funktionieren bereits, d.h. das Fenster l\u00e4sst sich in die Taskleiste verkleinern, es l\u00e4sst sich in den Vollbildmodus umschalten und es kann geschlossen werden (und damit das ganze Programm). Sie k\u00f6nnen es auch bereits in der Gr\u00f6\u00dfe ver\u00e4ndern. Wir betrachten das Programm im Detail: In Zeile 8 wird ein Objekt der Klasse JFrame erzeugt. Diese Klasse muss aus dem javax.swing -Paket importiert werden (Zeile 1 ). Sollte der Import bei Ihnen nicht funktionieren, m\u00fcssen Sie in Ihre module-info.java noch requires java.desktop; einf\u00fcgen, um dieses Modul zu laden. Die Klasse JFrame repr\u00e4sentiert ein Fenster im Swing-Paket. Das bedeutet, dass wir, wenn wir in Zukunft eine GUI mithilfe von Swing erstellen, immer damit beginnen, ein Objekt der Klasse JFrame zu erzeugen - n\u00e4mlich ein Fenster. Die Klasse JFrame stellt eine Unmenge an Objektmethoden zur Verf\u00fcgung, um das Fenster zu ver\u00e4ndern. Viele dieser Methoden sind auch aus Klassen des java.awt -Pakets geerbt, z.B. von Frame , von Component , von Container oder von Window , aber dazu kommen wir sp\u00e4ter. Wir wenden einige dieser Methoden bereits an: In Zeile 9 setzen wir mithilfe der Objektmethode setTitle() einen Titel f\u00fcr unser Fenster, hier \"My first window\" . Um den Titel zu setzen, gibt es auch einen parametrisierten Konstruktor von JFrame , dem dieser Titel \u00fcbergeben werden kann. In Zeile 10 definieren wir, was passieren soll, wenn wir auf den Schlie\u00dfen -Buttons des Fensters klicken (also auf das rote Kreuz oder den roten Kreis in der Titelleiste). Mit der statischen Konstanten EXIT_ON_CLOSE aus der Klasse JFrame legen wir fest, dass sowohl das Fenster geschlossen als auch das Programm beendet werden soll, wenn wir den Schlie\u00dfen -Button anklicken. Diese Option ist auch die einzig empfohlene Option f\u00fcr das Schlie\u00dfen des (Haupt-)Fensters. Leider ist sie nicht Standard, so dass wir das immer mitprogrammieren m\u00fcssen. Sollten Sie diese Anweisung vergessen, so schlie\u00dft sich zwar das Fenster, nicht jedoch das Programm. In Zeile 11 legen wir die Gr\u00f6\u00dfe des Fensters in Pixeln fest. Hier wird die Breite mit 400 Pixeln und die H\u00f6he mit 300 Pixeln festgelegt. Die Gr\u00f6\u00dfe des Fensters ist somit abh\u00e4ngig von der Aufl\u00f6sung Ihres Monitors. Wenn Sie diese Angabe \"vergessen\", erscheint das Fenster genau so gro\u00df, wie es n\u00f6tig ist, um alle Steuerelemente in dem Fenster darzustellen. Sie w\u00fcrden also nur die drei Kn\u00f6pfe in der Titelleiste sehen. Diese \"minimal erforderliche\" Gr\u00f6\u00dfe eines Fensters erreicht man auch mit der Objektmethode pack() , die das Fenster genau so gro\u00df darstellt, dass alle Steuerlemente sichtbar sind. In Zeile 12 legen wir fest, wo das Fenster auf unserem Monitor erscheint. Die linke obere Ecke des Monitors hat die Koordinaten (0,0) . Der erste Parameterwert in setLocation() legt fest, wie weit nach rechts der linke obere Punkt des Fensters auf unserem Monitor verschoben wird und der zweite Parameterwert legt fest, wie weit nach unten der linke obere Punkt des Fensters verschoben wird. Hier verschieben wir also das Fenster um 300 Pixel nach rechts und um 200 Pixel nach unten. Wenn Sie diese Angabe nicht treffen, erscheint das Fenster in der linken oberen Ecke des Monitors. In Zeile 13 setzen wir das Fenster auf sichtbar . Diese Anweisung sollten wir nicht vegessen, denn ansonsten sieht man das Fenster nicht und Sie wundern sich. setDefaultCloseOperation() \u00b6 Mit der Objektmethode setDefaultCloseOperation() wird das Verhalten bei Schlie\u00dfen des Fensters definiert. Daf\u00fcr wurden Konstanten in der Klasse JFrame definiert (genauer gesagt in der Klasse javax.swing.WindowConstants ). Es wird empfohlen, dass wir f\u00fcr unser Hauptfenster stets JFrame.EXIT_ON_CLOSE ) verwenden, da dann beim Schlie\u00dfen des Fensters auch das Programm beendet wird. Das ist aber leider nicht der Standardwert, deshalb m\u00fcssen wir es immer explizit angeben. Hier eine \u00dcbersicht der vordefinierten Konstanten und ihrer Bedeutung: Konstante Bedeutung DO_NOTHING_ON_CLOSE Es wird keine Aktion ausgef\u00fchrt. Die Reaktion auf das Schlie\u00dfen muss vom Benutzer selbst \u00fcber einen WindowListener realisiert werden. (windowClosing) HIDE_ON_CLOSE Versteckt das Fenster vor dem Benutzer. Alle Objekte und Ressourcen bleiben im Speicher erhalten und das Fenster kann jederzeit wieder sichtbar gemacht werden. DISPOSE_ON_CLOSE Das Fenster wird vom Bildschirm entfernt und alle Objekte und Ressourcen freigegeben. Wenn das letzte Fenster mit dieser Eigenschaft geschlossen wird verh\u00e4lt sich die Anwendung wie bei EXIT_ON_CLOSE. EXIT_ON_CLOSE Beendet die Anwendung und alle Fenster werden geschlossen und Ressourcen freigegeben. (System.exit(0)) Kurzer \u00dcberblick JFrame \u00b6 Ein JFrame ist der \u00e4u\u00dfere Rahmen einer Swing-Anwendung. Die Klasse befindet sich im Paket javax.swing . Ein Fenster ( JFrame ) hat eine Titelleiste mit den drei bekannten Schaltfl\u00e4chen ( decorated ); setUndecorated(boolean v) einen Rahmen ( javax.swing.Border ) Sichtbarkeit; setVisible(boolean v) Transparenz; setOpacity(float f) (0 durchsichtig; 1.0 undurchsichtig) eine Gr\u00f6\u00dfe; setSize(int b, int h) eine Position; setLocation(int x, int y) eine Form; setShape(Shape s) und kann im Vordergrund sein; toFront() im Hintergrund sein; toBack() Unsere Klasse ist selbst ein Fenster \u00b6 Ehe wir weitere Methoden f\u00fcr JFrame ausprobieren, \u00e4ndern wir die Implementierung unserer Klasse leicht. Derzeit haben wir in unserer Klasse ein Fenster erzeugt. Nun soll unsere Klasse selbst (besser gesagt: ein Objekt unserer Klasse) ein Fenster sein. Dazu lassen wir unsere Klasse von JFrame erben: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import javax.swing.JFrame ; public class MyFirstWindow extends JFrame { public MyFirstWindow () { super (); // Konstruktor von JFrame this . setTitle ( \"My first window\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } public static void main ( String [] args ) { new MyFirstWindow (); } } Die wesentlichen \u00c4nderungen sind: Die Klasse MyFirstWindow erbt von JFrame (Zeile 3 ). Jedes Objekt der Klasse MyFirstWindow ist also (auch) ein Objekt der Klasse JFrame - und damit selbst ein Fenster. Im Konstruktor von MyFirstWindow rufen wir mit super(); den Konstruktor von JFrame auf (Zeile 8 ). Damit wird das Fenster erstellt. Die Objektmethoden von JFrame werden jetzt alle von der Referenz this aufgerufen, dem Fenster-Objekt. Wir werden auf diesem Grundger\u00fcst f\u00fcr die Erstellung eines Fensters aufbauen, d.h. wir verwenden in Zukunft diese zweite Variante und ziehen sie der ersten vor. Die Content Pane des Fensters \u00b6 Bevor wir dem Fenster nun Komponenten hinzuf\u00fcgen, ist es noch erw\u00e4hnenswert, dass ein Fenster aus verschiedenen \"Schichten\" besteht, sogenannten panes . Die folgende Abbildung zeigt die panes eines JFrames. Um dies besser zu erl\u00e4utern, versuchen wir, die Hintergrundfarbe des Fensters neu zu setzen. Dazu steht in der Klasse JFrame die Methode setBackground(Color) zur Verf\u00fcgung. Diese Methode erwartet ein Color , welche im java.awt -Paket zur Verf\u00fcgung steht. Der erste Implementierungsversuch w\u00e4re deshalb wie folgt: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import java.awt.Color ; import javax.swing.JFrame ; public class MyFirstWindow extends JFrame { public MyFirstWindow () { super (); this . setTitle ( \"My first window\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . setBackground ( Color . CYAN ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } public static void main ( String [] args ) { new MyFirstWindow (); } } Wir wollen unseren Fesnterhintergrund also mit der vorderfinierten Farbe CYAN einf\u00e4rben. Wenn wir dieses Programm ausf\u00fchren, erhalten wir folgendes Fenster: Zwar f\u00e4rbt sich die Titelleiste des Fensters, aber der Rest bleibt offensichtlich grau. Das liegt daran, dass die Content Pane des Fensters vor dem Hintergrund liegt. Alle Komponenten f\u00fcgen wir der Content Pane des Fensters hinzu! Das gilt auch f\u00fcr F\u00e4rbungen des Hintergrunds. Die Content Pane ist dazu da, die Komponenten hinzuzuf\u00fcgen und darzustellen. Wenn wir einen anderen Hintergrund f\u00fcr das Fenster (unterhalb der Titelleiste) w\u00fcnschen, dann m\u00fcssen wir den Hintergrund der Content Pane einf\u00e4rben. Den Zugriff auf die Content Pane erhalten wir mithilfe der Objektmethode . getContentPane () Unser Beispiel des Einf\u00e4rbens des Hintergrundes sieht also korrekt so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import java.awt.Color ; import javax.swing.JFrame ; public class MyFirstWindow extends JFrame { public MyFirstWindow () { super (); this . setTitle ( \"My first window\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). setBackground ( Color . CYAN ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } public static void main ( String [] args ) { new MyFirstWindow (); } } Beachten Sie, dass die Content Pane des Fensters zwar nun CYAN ist, daf\u00fcr aber nicht mehr die Titelleiste. Wenn wir diese auch f\u00e4rben sollen, dann gehen wir auch noch wie oben vor. Container-Komponenten \u00b6 Ehe wir Steuerelemente zun unserem Fenster hinzuf\u00fcgen, wollen wir auf die Unterscheidung zwischen Steuerelementen und Containern eingehen. Ein Fenster enth\u00e4lt Komponenten ( JComponent ). Komponenten k\u00f6nnen sein: Steuerelemente ; das sind die sichtbaren Teile im Fenster, d.h. Buttons, Eingabefelder, Checkboxen usw. und Container ; diese sieht man nicht direkt, sie dienen der Strukturierung der GUI. Container k\u00f6nnen weitere Komponenten (also Container oder Steuerelemente ) enthalten. Steuerlelemente enthalten aber keine weiteren Komponenten . Durch das Verschachteln von Containern in Containern entsteht eine \"Hierarchie\" (oder besser gesagt: eine \"Baumstruktur\") in unserer GUI: Wichtig ist: die Knoten des Baumes sind Container und die Bl\u00e4tter des Baumes sind Steuerelemente Inhalt der Content Pane \u00b6 Die Content Pane ist selbst ein Container . Zur Content Pane k\u00f6nnen neue Komponenten ( Container oder Steuerelemente ) hinzugef\u00fcgt werden. Zum Hinzuf\u00fcgen neuer Komponenten wird die Objektmethode add() verwendet. Eine typische Klasse f\u00fcr einen Container ist die Klasse JPanel . JPanels k\u00f6nnen also ineinander verschachtelt werden, d.h. ein JPanel kann selbst wieder anderer JPanels entahlten (oder Steuerlemente ). Typische Sterelemente (die in der Baumstruktur die \u201cBl\u00e4tter\u201c bilden), sind JButton , JLabel , JCheckBox , JRadioButton , ... Erweitern des Fensters um ein JPanel \u00b6 Wir f\u00fcgen unserer Content Pane nun ein JPanel (einen Container ) hinzu und werden dieses JPanel danach mit weiteren Komponenten bef\u00fcllen. Unser neues Grundger\u00fcst eines Fensters sieht nun so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 import java.awt.Color ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class MyFirstWindow extends JFrame { public MyFirstWindow () { super (); this . setTitle ( \"My first window\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). setBackground ( Color . CYAN ); JPanel content = this . initContent (); this . getContentPane (). add ( content ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private JPanel initContent () { JPanel mainPanel = new JPanel (); // hier weitere Container oder Steuerelemente hinzufuegen return mainPanel ; } public static void main ( String [] args ) { new MyFirstWindow (); } } In Zeile 15 deklarieren wir eine Referenzvariable namens content vom Typ JPanel . Dazu muss die Klasse JPanel aus dem javax.swing -Paket importiert werden (Zeile 3 ). Dieses JPanel wird durch die Methode initContent() erzeugt, welche ein JPanel zur\u00fcckgibt (Zeile 27 ). In der Methode initContent() wird dieses JPanel erzeugt (Zeile 25 ) unter Verwendung des parameterlosen Konstruktors von JPanel . Das so erzeugte Fenster sieht so aus: Beachten Sie , dass der Hintergrund nun nicht mehr CYAN gef\u00e4rbt ist! Deshalb werden wir diese Anweisung auch gleich entfernen. Der Grund daf\u00fcr ist, dass zwar die Content Pane cyan ist, aber davor befindet sich jetzt ein JPanel ( content ), welches grau (Standardwert) ist. Dieses JPanel bef\u00fcllt die gesamte Content Pane . Diese ist also gar nicht mehr zu sehen. Erweitern der initContent()-Methode \u00b6 Wir werden die initContent() -Methode nun sukzessive erweitern, indem wir Steuerelemente (und sp\u00e4ter auch weitere Container , also JPanel ) hinzuf\u00fcgen. Dabei ist das generelle Vorgehen stets gleich: Steuerelement-Objekt erzeugen Steuerelement-Objekt dem Container (dem JPanel ) hinzuf\u00fcgen Wir betrachten nur die initContent() -Methode (die erforderlichen Klassen m\u00fcssen aus dem javax.swing -Paket importiert werden - oder Sie w\u00e4hlen import javax.swing.*; ): 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 private JPanel initContent () { JPanel mainPanel = new JPanel (); // Steuerlement-Objekte erstellen JLabel label = new JLabel ( \"Name: \" ); JTextField input = new JTextField ( 10 ); JButton button = new JButton ( \"Klick mich!\" ); // Steuerlement-Objekte dem Container (JPanel) hinzufuegen mainPanel . add ( label ); mainPanel . add ( input ); mainPanel . add ( button ); return mainPanel ; } Das Fenster sieht nun so aus: Wir haben also ein JLabel (einen Text) hinzugef\u00fcgt (\"Name\"), ein JTextField (ein Eingabefeld, f\u00fcr das die Breite 10 Zeichen definiert wurde) sowie ein JButton (ein Button, auf dem \"Klick mich!\" steht). Bei allen drei Elementen handelt es sich um Steuerelemente . Beachten Sie, dass die Elemente nebeneinander angeordnet sind. Das ist die Standardeinstellung f\u00fcr ein JPanel . Solche Einstellungen k\u00f6nnen sp\u00e4ter mit einem Layout-Manager ge\u00e4ndert werden. Die Steuerelemente werden solange nebeneinander angeordnet, solange sie nebeneinander passen. Wenn Sie die Fensterbreite schmaler gestalten (mit der Maus zusammenschieben), schieben sich die Steuerlemente untereinander. Um aber Kontrolle \u00fcber die Anordnung der Steuerlemente zu gelangen, betrachten wir nun Layout-Manager . Layout-Manager \u00b6 Layout-Manager dienen der Anordnung von Komponenten. Es gibt viele Layout-Manager ( FlowLayout , BorderLAyout , CardLayout , OverlayLayout , GridLayout , GridBagLayout , BoxLayout , GroupLayout , ...). Wir werden aber nicht alle betrachten, da dies erstens auf Dauer langweilig ist und zweitens Layout-Manager ineinander verschachtelt werden k\u00f6nnen. Vielmehr k\u00f6nnen Container ineinander verschachtelt werden und diesen Containern unterschiedliche Layout-Manager zugewiesen werden. Es wird also einem Container ein Layout-Manager zugewisen und die Komponenten in diesem Container sind dann so angeordnet, wie der Layout-Manager es definiert (nebeneinander oder untereinander oder \u00fcbereinander ...). Das Zuweisen eines Layout-Managers zu einem Container erfolgt mithilfe von setLayout ( new Layoutmanager ()) // Layoutmanager durch entsprechenden Namen ersetzen Wir betrachten im Folgenden drei Layout-Manager und diese gen\u00fcgen v\u00f6llig f\u00fcr alle GUIs, die wir erstellen wollen: FlowLayout GridLayout BorderLayout Alle drei LayoutManager bedinden sich im java.awt -Paket, also java.awt.FlowLayout , java.awt.GridLayout und java.awt.BorderLayout . FlowLayout \u00b6 FlowLayout ist der Standard-Layout-Manager f\u00fcr ein JPanel . Das hei\u00dft, wenn wir einem JPanel keinen (anderen) Layout-Manager zuweisen, ist es im FlowLayout . FlowLayout ordnet die Komponenten nebeneinander in einer Zeile an (wenn sie in eine Zeile passen \u2013 ansonsten weitere Zeile). Das Zuweisen eines Containers zum FlowLayout erfolgt mittels setLayout(new FlowLayout()); . F\u00fcr FlowLayout steht aber nicht nur der parameterlose Konstruktor zur Verf\u00fcgung, sondern auch FlowLayout(int align) , wobei f\u00fcr align folgende vordefinierte Konstanten verwendet werden k\u00f6nnen: FlowLayout.CENTER ; ordnet alle Komponenten mittig an, ist der Standard-Wert FlowLayout.LEFT ; ordnet alle Komponenten linksb\u00fcndig an FlowLayout.RIGHT ; ordnet alle Komponenten rechtsb\u00fcndig an FlowLayout(int align, int hgap, int vgap) , wobei align wie oben und hgap den horizontalen Abstand zwischen den Komponenten und vgap den vertikalen Abstand zwischen den Komponenten beschreibt Beispiele: Beim FlowLayout bleiben die Steuerelemente stets in ihrer Standardgr\u00f6\u00dfe! \u00dcbung F\u00fcgen Sie in Ihre initContent() -Methode 6 Buttons ein (wie in der oberen Abbildung). Lassen Sie das mainPanel im FlowLayout . Probieren Sie ruhig mal die verschiedenen align -Werte. Ver\u00e4ndern Sie mit der Maus die Gr\u00f6\u00dfe des Fensters. Beachten Sie, dass sich die Gr\u00f6\u00dfe der Buttons nicht \u00e4ndert. GridLayout \u00b6 GridLayout ordnet Komponenten innerhalb eines rechteckigen Gitters (einem grid ) an. Das Zuweisen eines Containers zum GridLayout erfolgt mittels setLayout(new GridLayout(int rows, int columns)); . Dabei geben rows die Anzahl der Zeilen des Gitters und columns die Anzahl der Spalten des Gitters an. Dabei wird aber immmer zuerst versucht, ein Rechteck zur erzeugen mit der Zeilenanzahl als ma\u00dfgeblichem Wert ! Das verdeutlichen die folgenden Beispiele: F\u00fcr GridLayout gibt es noch einen weiteren parametrisierten Konstruktor, n\u00e4mlich GridLayout(int rows, int columns, int hgap, int vgap) , wobei hgap und vgap die gleiche Bedutung haben, wie beim FlowLayout . Wichtig ist, dass sich die Gr\u00f6\u00dfe der Komponenten der Gr\u00f6\u00dfe des Containes anpasst, in der die Komponenten enthalten sind. das bedeutet, dass mit der Gr\u00f6\u00dfe des Containers auch die Steuerlemente gr\u00f6\u00dfer werden! Das bedeutet, dass im Gegensatz zum FlowLayout z.B. Buttons in diesem Layout-Manager keine feste Gr\u00f6\u00dfe haben! \u00dcbung Verwenden Sie die initContent() -Methode aus der FlowLayout -\u00dcbung (mit den 6 Buttons). Weisen Sie dem mainPanel das GridLayout zu. Probieren Sie ruhig mal verschiedene rows , columns , hgap , vgap -Werte. Ver\u00e4ndern Sie mit der Maus die Gr\u00f6\u00dfe des Fensters. Beachten Sie, dass sich die Gr\u00f6\u00dfe der Buttons \u00e4ndert ! BorderLayout \u00b6 BorderLayout ist der Standard-Layout-Manager f\u00fcr ein JFrame . BorderLayout ordnet Komponenten in f\u00fcnf Felder ( North , South , East , West ) und die Mitte ( Center ) an. BorderLayout besitzt einen parameterlosen Konstruktor BoderLayout() und einen parametrisierten Konstruktor BorderLayout(int hgap, int vgap) mit hgap und vgap wie zuvor. Um Komponenten zu einem Container im BoderLayout hinzuzuf\u00fcgen, gibt es nun zwei verschiedene add() -Methoden: add(Component comp) f\u00fcgt die Komponente comp dem Center hinzu (entspricht add(comp, BorderLayout.CENTER) ), add(Component comp, Object constraints) , wobei constraints eine der folgenden vordefinierten Werte annehmen kann: BorderLayout.NORTH ; f\u00fcgt comp dem oberen Feld hinzu, BorderLayout.SOUTH ; f\u00fcgt comp dem unteren Feld hinzu, BorderLayout.EAST ; f\u00fcgt comp dem linken Feld hinzu, BorderLayout.WEST ; f\u00fcgt comp dem rechten Feld hinzu, BorderLayout.CENTER ; f\u00fcgt comp der Mitte hinzu. Angenommen, die initContent() -Methode sieht so aus: 23 24 25 26 27 28 29 30 31 32 33 34 35 private JPanel initContent () { JPanel mainPanel = new JPanel (); mainPanel . setLayout ( new BorderLayout ()); mainPanel . add ( new JButton ( \"NORTH\" ), BorderLayout . NORTH ); mainPanel . add ( new JButton ( \"SOUTH\" ), BorderLayout . SOUTH ); mainPanel . add ( new JButton ( \"EAST\" ), BorderLayout . EAST ); mainPanel . add ( new JButton ( \"WEST\" ), BorderLayout . WEST ); mainPanel . add ( new JButton ( \"CENTER\" ), BorderLayout . CENTER ); return mainPanel ; } , dann wird folgendes Fenster erzeugt: Beachten Sie: die Nord-, S\u00fcd-Buttons behalten ihre H\u00f6he, skalieren auf Fensterbreite die Ost-, West-Buttons behalten ihre Breite, skalieren auf Fensterh\u00f6he (minus H\u00f6he f\u00fcr Norden und S\u00fcden) der Center-Button wird eingepasst (k\u00f6nnte z.B. auch ganz verschwinden) \u00dcbung Verwenden Sie die initContent() -Methode von oben (mit den 5 Buttons). Lassen Sie einzelne Buttons weg. Erkl\u00e4ren Sie jeweils das Ergebnis! Verschachteln von Layout-Managern \u00b6 Eigentlich ist die \u00dcberschrift irref\u00fchrend, denn es werden nicht die Layout-Manger verschachtelt, sondern die Container, denen jeweils andere Layout-Manager zugewiesen werden k\u00f6nnen. Wir wollen das an einem Beispiel demonstrieren. Wir betrachten dazu wieder nur die initContent() -Methode. Alles andere bleibt in unserem \"Grundger\u00fcst\", das wir in der Klasse MyFirstWindow erstellt haben, gleich. Wir beginnen damit, dass das mainPanel im BorderLayout ist und dass diesem mainPanel drei weitere JPanel hinzugef\u00fcgt werden. Das erste JPanel hei\u00dft oben , ist im FlowLayout und wird dem Norden des mainPanel s hinzugef\u00fcgt. Das zweite JPanel hei\u00dft mitte , ist im GridLayout und wird dem Center des mainPanel s hinzugef\u00fcgt. Das dritte JPanel hei\u00dft unten , ist im FlowLayout und wird dem S\u00fcden des mainPanel s hinzugef\u00fcgt. 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 private JPanel initContent () { JPanel mainPanel = new JPanel (); mainPanel . setLayout ( new BorderLayout ()); JPanel oben = new JPanel (); oben . setLayout ( new FlowLayout ( FlowLayout . CENTER , 10 , 10 )); JPanel mitte = new JPanel (); mitte . setLayout ( new GridLayout ( 3 , 2 , 10 , 10 )); JPanel unten = new JPanel (); unten . setLayout ( new FlowLayout ( FlowLayout . RIGHT , 5 , 5 )); mainPanel . add ( oben , BorderLayout . NORTH ); mainPanel . add ( mitte , BorderLayout . CENTER ); mainPanel . add ( unten , BorderLayout . SOUTH ); return mainPanel ; } Die einzelnen JPanel sind nicht unterscheidbar, da sie keinen Rand ( Border ) besitzen und alle einen grauen Hintergrund haben. Es sind \"nur\" Container , die uns helfen, die GUI zu strukturieren. Sichtbar sind erst die Steuerelemente, die wir nun den einzelnen JPanel hinzuf\u00fcgen: 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 private JPanel initContent () { JPanel mainPanel = new JPanel (); mainPanel . setLayout ( new BorderLayout ()); JPanel oben = new JPanel (); oben . setLayout ( new FlowLayout ( FlowLayout . CENTER , 10 , 10 )); oben . add ( new JLabel ( \"Name : \" )); oben . add ( new JTextField ( 10 )); oben . setBackground ( Color . LIGHT_GRAY ); JPanel mitte = new JPanel (); mitte . setLayout ( new GridLayout ( 3 , 2 , 10 , 10 )); mitte . add ( new JButton ( \"Button 1\" )); mitte . add ( new JButton ( \"Button 2\" )); mitte . add ( new JButton ( \"Button 3\" )); mitte . add ( new JButton ( \"Button 4\" )); mitte . add ( new JButton ( \"Button 5\" )); mitte . add ( new JButton ( \"Button 6\" )); mitte . setBackground ( Color . GREEN ); JPanel unten = new JPanel (); unten . setLayout ( new FlowLayout ( FlowLayout . RIGHT , 5 , 5 )); unten . add ( new JButton ( \"Abbruch\" )); unten . add ( new JButton ( \"OK\" )); unten . setBackground ( Color . LIGHT_GRAY ); mainPanel . add ( oben , BorderLayout . NORTH ); mainPanel . add ( mitte , BorderLayout . CENTER ); mainPanel . add ( unten , BorderLayout . SOUTH ); return mainPanel ; } Zur besseren Erkennung wurde den einzelnen JPanel auch noch jeweils eine Hintergrundfarbe zugeordnet (Zeilen 32 , 42 und 48 ). Somit ergibt sich folgende Ansicht: Das JPanel oben ist im FlowLayout . Diesem Panel werden zwei Steuerelemente hinzugef\u00fcgt: ein JLabel ( \"Name\" ) und ein JTextField der Breite 10 (Zeichen). Da das Panel im FlowLayout ist, erscheinen beide Steuerelmente nebeneinander (weil sie nebeneinander passen). Die Steuerelemente sind zentriert angeordnet ( FlowLayout.CENTER ) und haben einen horizontalen und vertikalen Abstand zu den Nachbarn von 10 Pixeln. Dem Panel wurde die Hintergrundfarbe LIGHT-GRAY zugewiesen. Das JPanel mitte ist im GridLayout mit 3 Zeilen und 2 Spalten. Diesem Panel werden 6 JButton zugeordnet. Die Buttons haben einen vertikalen und horizontalen Abstand von jeweils 10 Pixeln (zwischen den Buttons ist der Abstand also 20). Beachten Sie, dass die Gr\u00f6\u00dfe der Buttons an die Fenstergr\u00f6\u00dfe angepasst sind. Mit wachsender Fenstergr\u00f6\u00dfe wachsen auch die Button-Gr\u00f6\u00dfen. Dem Panel wurde die Hintergrundfarbe GREEN zugewiesen. Das JPanel unten ist im FlowLayout . Diesem Panel werden zwei JButton hinzugef\u00fcgt. Das das Panel im FlowLayout ist, erscheinen beide Steuerelmente nebeneinander (weil sie nebeneinander passen). Die Steuerelemente sind rechtsb\u00fcndig angeordnet ( FlowLayout.RIGHT ) und haben einen horizontalen und vertikalen Abstand zu den Nachbarn von jeweils 5 Pixeln. Beachten Sie, dass die Buttons in ihrer Standardgr\u00f6\u00dfe sind (und stets bleiben). Dem Panel wurde die Hintergrundfarbe LIGHT-GRAY zugewiesen. Noch ein Wort zu den Gr\u00f6\u00dfen: Die Gr\u00f6\u00dfe des Fensters ist mit 300 x 200 vorgegeben. Der \"Norden\" geht \u00fcber die gesamte Breite. Die H\u00f6he des \"Nordens\" ergibt sich aus den Standardh\u00f6hen von JLabel und JTextField plus den vertikalen Abst\u00e4nden nach oben und unten von jeweils 10 Pixeln. Der \"S\u00fcden\" geht ebenfalls \u00fcber die gesamte Breite. Die H\u00f6he des \"S\u00fcdens\" ergibt sich aus der Standardh\u00f6he von JButton plus den vertikalen Abst\u00e4nden nach oben und unten von jeweils 5 Pixeln. Das Center -Feld geht ebenfalls \u00fcber die gesamte Breite, da es kein EAST - und kein WEST -Feld gibt. Die H\u00f6he des Center -Feldes ergibt sich aus der Fensterh\u00f6he minus der H\u00f6he f\u00fcr die Titelleiste, minus der H\u00f6he f\u00fcr den \"Norden\" und minus der H\u00f6he f\u00fcr den \"S\u00fcden\". Das Center -Feld f\u00fcllt also den verbleibenden Rest des Platzes im Fenster aus. Sie k\u00f6nnen beliebig viele Container in beliebiger Tiefe ineinanderschachteln und den Containern unterschiedliche Layout_Manager zuweisen. Damit gelingt ihnen jede denkbare Gestaltung grafischer Nutzeroberfl\u00e4chen. Weitere Anregungen zur Verwendung von Layout-Managern finden Sie z.B. hier . \u00dcbung \u00c4ndern Sie ausschlie\u00dflich die H\u00f6he des Fensters und dann einmal ausschlie\u00dflich die Breite des Fensters und begr\u00fcnden Sie da jeweilige Ergebnis! Success Wir haben unser erstes Fenster erstellt! Au\u00dferdem k\u00f6nnen wir dem Fenster Steuerelemente hinzuf\u00fcgen. Diese k\u00f6nnen wir mithilfe von Containern und Layout-Manager positionieren, so dass wir ordentlich positionierte Grafische Nutzeroberfl\u00e4chen erstellen k\u00f6nnen. Im n\u00e4chsten Schritt schauen wir uns an, wie wir auf Ereignisse reagieren k\u00f6nnen, z.B. auf das Klicken eines Buttons.","title":"GUI Einf\u00fchrung"},{"location":"gui/#graphical-user-interfaces","text":"Bis jetzt haben wir unsere Ein- und Ausgaben \u00fcber die Konsole erledigt oder wir haben Testklassen geschrieben, um Funktionalit\u00e4ten unserer Programme zu testen. Nun wollen wir grafische Nutzeroberfl\u00e4chen ( Graphical User Interfaces (GUI) ) erstellen, also Fenster, die Steuerelemente enthalten. Steuerelemente sind Ein- und Ausgabeelemente, Labels (also Text), Buttons, Checkboxes, Radiobuttons usw. Das Java Developement Kit (JDK) beinhaltet verschiedene Bibliotheken zum Erstellen grafischer Nutzeroberfl\u00e4chen: AWT (abstract window toolkit) java.awt ; alt, aber noch viele Sachen, die man heute noch nutzt: Farben, Listener f\u00fcr Maus und Tastur, Grafiken, ... Swing javax.swing ; das verwenden wir zum Erstellen von Fenstern, auch nicht mehr ganz neu JavaFX javafx ; sollte eigentlich Swing abl\u00f6sen, hat sich aber nicht durchgesetzt, seit Java 11 nicht mehr Bestandteil des Standard-JDK Swing ist, wie bereits gesagt, auch nicht mehr neu und wird h\u00e4ufig als veraltet bezeichnet. Allerdings gibt es auch keine Alternativen. JavaFX sollte Swing abl\u00f6sen, hat sich jedoch noch nicht durchgesetzt. Wir verwenden Swing aus zwei Gr\u00fcnden: erstens ist es immernoch das am meisten verwendete Framework f\u00fcr die Erstellung von GUIs in nativen Desktopanwendungen (also alles, was nicht \"Web\" und was nicht \"mobile\" ist), bspw. wurde IntelliJ mit Swing aufgebaut und zweitens geht es uns um die Konzepte , d.h. um den hierarchischen Aufbau der Oberfl\u00e4chen, um Nutzereignisse und die Behandlung dieser. Wir werden uns im 3. Semester in \"Webtechnologien\" mit der Erstellung moderner Weboberfl\u00e4chen besch\u00e4ftigen und dabei auf die Grundlagen aufbauen, die wir hier legen. Die Konzepte sind n\u00e4mlich dieselben.","title":"Graphical User Interfaces"},{"location":"gui/#elemente-einer-gui","text":"Eine GUI besteht aus verschiedenen Elementen, deren Zusammenspiel erst die Benutzbarkeit der Oberfl\u00e4che erm\u00f6glichen. Unter Benutzbarkeit ist dabei die einfache, intuitive und \u00fcbersichtliche Ein- und Ausgabe von Daten gemeint. Im 6. Semester gibt es eine ganze Lehrveranstaltung zum Thema Usability in unserem Studiengang. Folgende Elemente sind in einer GUI von Bedeutung: Das Fenster stellt den \u00e4u\u00dferen Rahmen einer grafischen Anwendung dar. Es enth\u00e4lt typischerweise einen Rahmen und eine Titelleiste, in der der Name des Fensters bzw. der Anwendung (in der oberen Abbildung Window ) und drei Buttons zum Schlie\u00dfen des Fensters bzw. der Anwendung (das rote Kreuz in der oberen Abbildung), zum Vollbildmodus (das Quadrat) und zum Verkleinern des Fensters in die Taskleiste (der Unterstrich) enthalten sind. Der Rahmen, genau wie die Titelleiste mit den drei Buttons, sind aber optional. Ein Fenster enth\u00e4lt Komponenten . Komponenten sind alle Oberfl\u00e4chen- bzw. Steuerelemente, d.h. Buttons (siehe oben < Back und Next > ), Labels (Texte, z.B. Checkbox ), Checkboxes (die Quadrate, die ein H\u00e4kchen haben k\u00f6nnen oder auch nicht), Ein- und Ausgabefelder, Auswahllisten usw. Steuerlemente sind also alle Elemente, die direkt der Ein- und Ausgabe dienen. Dar\u00fcber hinaus gibt es noch die Komponente Container . Ein Container kann selbst wieder Container enhalten oder Steuerelemente . Container sind nicht direkt sichtbar, sondern sie dienen der Strukturierung einer grafischen Oberfl\u00e4che. Layoutmanager organisieren die Positionierung von Komponenten. Mithilfe von Layoutmanagern kann man Container unter- und/oder nebeneinander positionieren und organisiert somit die Anordnung der Steuerelmente. Men\u00fcs sind einblendbare Befehlsleisten. Es gibt die Men\u00fcs, die meistens oben in der Men\u00fcleiste verankert sind und Kontextmen\u00fcs , die dort erscheinen, wo man, meistens mit der rechten, Maustaste hinklickt. Events ( Ereignisse ) haben zun\u00e4chst nichts mit der Darstellung selbst zu tun. Sie sind aber f\u00fcr die Benutzbarkeit sehr wichtig, denn jede Nutzeraktion l\u00f6st ein Ereignis aus, welches wir im Programm behandeln k\u00f6nnen, z.B. Mausklicks, Mausbewegungen, Tastatureingaben, Bewegen, Vergr\u00f6\u00dfern, Verkleinern des Fensters usw. Wir werden uns sehr ausf\u00fchrlich mit der Behandlung von Ereignissen besch\u00e4ftigen. Zeichenoperationen dienen der Erstellung von Punkten, Linien, Text usw. in Fenstern. W\u00e4hrend die Steuerelemente ein festes Aussehen besitzen (anpassbar, je nach Betriebssystem und unterschiedlichen Look&Feel -Frameworks), k\u00f6nnen mit Zeichenoperationen beliebige Elemente erstellt und dargestellt werden, z.B. Grafiken, Kurven oder Diagramme. Wir werden auf alle diese Elemente eingehen und starten jetzt aber mit unserem ersten Fenster.","title":"Elemente einer GUI"},{"location":"gui/#ein-erstes-fenster-mit-swing","text":"Wir erstellen uns eine Klasse MyFirstWindow . Von dieser Klasse erzeugen wir uns ein Objekt. Dazu implementieren wir den parameterlosen Konstruktor dieser Klasse. In diesem Konstruktor wird ein JFrame erzeugt - das ist das Fenster bei Swing. Wir haben in dieser Klasse auch eine main() -Methode. Das ist nicht ganz sauber, da die main() -methode ja eigentlich keine Eigenschaft unserer Klasse ist, deren Responsibility die Erstellung eines Fensters ist, aber wir vereinfachen hier zu Anfang: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import javax.swing.JFrame ; public class MyFirstWindow { public MyFirstWindow () { JFrame window = new JFrame (); window . setTitle ( \"My first window\" ); window . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); window . setSize ( 400 , 300 ); window . setLocation ( 300 , 200 ); window . setVisible ( true ); } public static void main ( String [] args ) { new MyFirstWindow (); } } Wenn wir diese Klasse ausf\u00fchren, erscheint folgendes Fenster: Das Aussehen ist betriebssystemabh\u00e4ngig. Probieren Sie die drei \"Kn\u00f6pfe\" in der Titelleiste aus, sie funktionieren bereits, d.h. das Fenster l\u00e4sst sich in die Taskleiste verkleinern, es l\u00e4sst sich in den Vollbildmodus umschalten und es kann geschlossen werden (und damit das ganze Programm). Sie k\u00f6nnen es auch bereits in der Gr\u00f6\u00dfe ver\u00e4ndern. Wir betrachten das Programm im Detail: In Zeile 8 wird ein Objekt der Klasse JFrame erzeugt. Diese Klasse muss aus dem javax.swing -Paket importiert werden (Zeile 1 ). Sollte der Import bei Ihnen nicht funktionieren, m\u00fcssen Sie in Ihre module-info.java noch requires java.desktop; einf\u00fcgen, um dieses Modul zu laden. Die Klasse JFrame repr\u00e4sentiert ein Fenster im Swing-Paket. Das bedeutet, dass wir, wenn wir in Zukunft eine GUI mithilfe von Swing erstellen, immer damit beginnen, ein Objekt der Klasse JFrame zu erzeugen - n\u00e4mlich ein Fenster. Die Klasse JFrame stellt eine Unmenge an Objektmethoden zur Verf\u00fcgung, um das Fenster zu ver\u00e4ndern. Viele dieser Methoden sind auch aus Klassen des java.awt -Pakets geerbt, z.B. von Frame , von Component , von Container oder von Window , aber dazu kommen wir sp\u00e4ter. Wir wenden einige dieser Methoden bereits an: In Zeile 9 setzen wir mithilfe der Objektmethode setTitle() einen Titel f\u00fcr unser Fenster, hier \"My first window\" . Um den Titel zu setzen, gibt es auch einen parametrisierten Konstruktor von JFrame , dem dieser Titel \u00fcbergeben werden kann. In Zeile 10 definieren wir, was passieren soll, wenn wir auf den Schlie\u00dfen -Buttons des Fensters klicken (also auf das rote Kreuz oder den roten Kreis in der Titelleiste). Mit der statischen Konstanten EXIT_ON_CLOSE aus der Klasse JFrame legen wir fest, dass sowohl das Fenster geschlossen als auch das Programm beendet werden soll, wenn wir den Schlie\u00dfen -Button anklicken. Diese Option ist auch die einzig empfohlene Option f\u00fcr das Schlie\u00dfen des (Haupt-)Fensters. Leider ist sie nicht Standard, so dass wir das immer mitprogrammieren m\u00fcssen. Sollten Sie diese Anweisung vergessen, so schlie\u00dft sich zwar das Fenster, nicht jedoch das Programm. In Zeile 11 legen wir die Gr\u00f6\u00dfe des Fensters in Pixeln fest. Hier wird die Breite mit 400 Pixeln und die H\u00f6he mit 300 Pixeln festgelegt. Die Gr\u00f6\u00dfe des Fensters ist somit abh\u00e4ngig von der Aufl\u00f6sung Ihres Monitors. Wenn Sie diese Angabe \"vergessen\", erscheint das Fenster genau so gro\u00df, wie es n\u00f6tig ist, um alle Steuerelemente in dem Fenster darzustellen. Sie w\u00fcrden also nur die drei Kn\u00f6pfe in der Titelleiste sehen. Diese \"minimal erforderliche\" Gr\u00f6\u00dfe eines Fensters erreicht man auch mit der Objektmethode pack() , die das Fenster genau so gro\u00df darstellt, dass alle Steuerlemente sichtbar sind. In Zeile 12 legen wir fest, wo das Fenster auf unserem Monitor erscheint. Die linke obere Ecke des Monitors hat die Koordinaten (0,0) . Der erste Parameterwert in setLocation() legt fest, wie weit nach rechts der linke obere Punkt des Fensters auf unserem Monitor verschoben wird und der zweite Parameterwert legt fest, wie weit nach unten der linke obere Punkt des Fensters verschoben wird. Hier verschieben wir also das Fenster um 300 Pixel nach rechts und um 200 Pixel nach unten. Wenn Sie diese Angabe nicht treffen, erscheint das Fenster in der linken oberen Ecke des Monitors. In Zeile 13 setzen wir das Fenster auf sichtbar . Diese Anweisung sollten wir nicht vegessen, denn ansonsten sieht man das Fenster nicht und Sie wundern sich.","title":"Ein erstes Fenster mit Swing"},{"location":"gui/#setdefaultcloseoperation","text":"Mit der Objektmethode setDefaultCloseOperation() wird das Verhalten bei Schlie\u00dfen des Fensters definiert. Daf\u00fcr wurden Konstanten in der Klasse JFrame definiert (genauer gesagt in der Klasse javax.swing.WindowConstants ). Es wird empfohlen, dass wir f\u00fcr unser Hauptfenster stets JFrame.EXIT_ON_CLOSE ) verwenden, da dann beim Schlie\u00dfen des Fensters auch das Programm beendet wird. Das ist aber leider nicht der Standardwert, deshalb m\u00fcssen wir es immer explizit angeben. Hier eine \u00dcbersicht der vordefinierten Konstanten und ihrer Bedeutung: Konstante Bedeutung DO_NOTHING_ON_CLOSE Es wird keine Aktion ausgef\u00fchrt. Die Reaktion auf das Schlie\u00dfen muss vom Benutzer selbst \u00fcber einen WindowListener realisiert werden. (windowClosing) HIDE_ON_CLOSE Versteckt das Fenster vor dem Benutzer. Alle Objekte und Ressourcen bleiben im Speicher erhalten und das Fenster kann jederzeit wieder sichtbar gemacht werden. DISPOSE_ON_CLOSE Das Fenster wird vom Bildschirm entfernt und alle Objekte und Ressourcen freigegeben. Wenn das letzte Fenster mit dieser Eigenschaft geschlossen wird verh\u00e4lt sich die Anwendung wie bei EXIT_ON_CLOSE. EXIT_ON_CLOSE Beendet die Anwendung und alle Fenster werden geschlossen und Ressourcen freigegeben. (System.exit(0))","title":"setDefaultCloseOperation()"},{"location":"gui/#kurzer-uberblick-jframe","text":"Ein JFrame ist der \u00e4u\u00dfere Rahmen einer Swing-Anwendung. Die Klasse befindet sich im Paket javax.swing . Ein Fenster ( JFrame ) hat eine Titelleiste mit den drei bekannten Schaltfl\u00e4chen ( decorated ); setUndecorated(boolean v) einen Rahmen ( javax.swing.Border ) Sichtbarkeit; setVisible(boolean v) Transparenz; setOpacity(float f) (0 durchsichtig; 1.0 undurchsichtig) eine Gr\u00f6\u00dfe; setSize(int b, int h) eine Position; setLocation(int x, int y) eine Form; setShape(Shape s) und kann im Vordergrund sein; toFront() im Hintergrund sein; toBack()","title":"Kurzer \u00dcberblick JFrame"},{"location":"gui/#unsere-klasse-ist-selbst-ein-fenster","text":"Ehe wir weitere Methoden f\u00fcr JFrame ausprobieren, \u00e4ndern wir die Implementierung unserer Klasse leicht. Derzeit haben wir in unserer Klasse ein Fenster erzeugt. Nun soll unsere Klasse selbst (besser gesagt: ein Objekt unserer Klasse) ein Fenster sein. Dazu lassen wir unsere Klasse von JFrame erben: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 import javax.swing.JFrame ; public class MyFirstWindow extends JFrame { public MyFirstWindow () { super (); // Konstruktor von JFrame this . setTitle ( \"My first window\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } public static void main ( String [] args ) { new MyFirstWindow (); } } Die wesentlichen \u00c4nderungen sind: Die Klasse MyFirstWindow erbt von JFrame (Zeile 3 ). Jedes Objekt der Klasse MyFirstWindow ist also (auch) ein Objekt der Klasse JFrame - und damit selbst ein Fenster. Im Konstruktor von MyFirstWindow rufen wir mit super(); den Konstruktor von JFrame auf (Zeile 8 ). Damit wird das Fenster erstellt. Die Objektmethoden von JFrame werden jetzt alle von der Referenz this aufgerufen, dem Fenster-Objekt. Wir werden auf diesem Grundger\u00fcst f\u00fcr die Erstellung eines Fensters aufbauen, d.h. wir verwenden in Zukunft diese zweite Variante und ziehen sie der ersten vor.","title":"Unsere Klasse ist selbst ein Fenster"},{"location":"gui/#die-content-pane-des-fensters","text":"Bevor wir dem Fenster nun Komponenten hinzuf\u00fcgen, ist es noch erw\u00e4hnenswert, dass ein Fenster aus verschiedenen \"Schichten\" besteht, sogenannten panes . Die folgende Abbildung zeigt die panes eines JFrames. Um dies besser zu erl\u00e4utern, versuchen wir, die Hintergrundfarbe des Fensters neu zu setzen. Dazu steht in der Klasse JFrame die Methode setBackground(Color) zur Verf\u00fcgung. Diese Methode erwartet ein Color , welche im java.awt -Paket zur Verf\u00fcgung steht. Der erste Implementierungsversuch w\u00e4re deshalb wie folgt: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import java.awt.Color ; import javax.swing.JFrame ; public class MyFirstWindow extends JFrame { public MyFirstWindow () { super (); this . setTitle ( \"My first window\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . setBackground ( Color . CYAN ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } public static void main ( String [] args ) { new MyFirstWindow (); } } Wir wollen unseren Fesnterhintergrund also mit der vorderfinierten Farbe CYAN einf\u00e4rben. Wenn wir dieses Programm ausf\u00fchren, erhalten wir folgendes Fenster: Zwar f\u00e4rbt sich die Titelleiste des Fensters, aber der Rest bleibt offensichtlich grau. Das liegt daran, dass die Content Pane des Fensters vor dem Hintergrund liegt. Alle Komponenten f\u00fcgen wir der Content Pane des Fensters hinzu! Das gilt auch f\u00fcr F\u00e4rbungen des Hintergrunds. Die Content Pane ist dazu da, die Komponenten hinzuzuf\u00fcgen und darzustellen. Wenn wir einen anderen Hintergrund f\u00fcr das Fenster (unterhalb der Titelleiste) w\u00fcnschen, dann m\u00fcssen wir den Hintergrund der Content Pane einf\u00e4rben. Den Zugriff auf die Content Pane erhalten wir mithilfe der Objektmethode . getContentPane () Unser Beispiel des Einf\u00e4rbens des Hintergrundes sieht also korrekt so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 import java.awt.Color ; import javax.swing.JFrame ; public class MyFirstWindow extends JFrame { public MyFirstWindow () { super (); this . setTitle ( \"My first window\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). setBackground ( Color . CYAN ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } public static void main ( String [] args ) { new MyFirstWindow (); } } Beachten Sie, dass die Content Pane des Fensters zwar nun CYAN ist, daf\u00fcr aber nicht mehr die Titelleiste. Wenn wir diese auch f\u00e4rben sollen, dann gehen wir auch noch wie oben vor.","title":"Die Content Pane des Fensters"},{"location":"gui/#container-komponenten","text":"Ehe wir Steuerelemente zun unserem Fenster hinzuf\u00fcgen, wollen wir auf die Unterscheidung zwischen Steuerelementen und Containern eingehen. Ein Fenster enth\u00e4lt Komponenten ( JComponent ). Komponenten k\u00f6nnen sein: Steuerelemente ; das sind die sichtbaren Teile im Fenster, d.h. Buttons, Eingabefelder, Checkboxen usw. und Container ; diese sieht man nicht direkt, sie dienen der Strukturierung der GUI. Container k\u00f6nnen weitere Komponenten (also Container oder Steuerelemente ) enthalten. Steuerlelemente enthalten aber keine weiteren Komponenten . Durch das Verschachteln von Containern in Containern entsteht eine \"Hierarchie\" (oder besser gesagt: eine \"Baumstruktur\") in unserer GUI: Wichtig ist: die Knoten des Baumes sind Container und die Bl\u00e4tter des Baumes sind Steuerelemente","title":"Container-Komponenten"},{"location":"gui/#inhalt-der-content-pane","text":"Die Content Pane ist selbst ein Container . Zur Content Pane k\u00f6nnen neue Komponenten ( Container oder Steuerelemente ) hinzugef\u00fcgt werden. Zum Hinzuf\u00fcgen neuer Komponenten wird die Objektmethode add() verwendet. Eine typische Klasse f\u00fcr einen Container ist die Klasse JPanel . JPanels k\u00f6nnen also ineinander verschachtelt werden, d.h. ein JPanel kann selbst wieder anderer JPanels entahlten (oder Steuerlemente ). Typische Sterelemente (die in der Baumstruktur die \u201cBl\u00e4tter\u201c bilden), sind JButton , JLabel , JCheckBox , JRadioButton , ...","title":"Inhalt der Content Pane"},{"location":"gui/#erweitern-des-fensters-um-ein-jpanel","text":"Wir f\u00fcgen unserer Content Pane nun ein JPanel (einen Container ) hinzu und werden dieses JPanel danach mit weiteren Komponenten bef\u00fcllen. Unser neues Grundger\u00fcst eines Fensters sieht nun so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 import java.awt.Color ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class MyFirstWindow extends JFrame { public MyFirstWindow () { super (); this . setTitle ( \"My first window\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). setBackground ( Color . CYAN ); JPanel content = this . initContent (); this . getContentPane (). add ( content ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private JPanel initContent () { JPanel mainPanel = new JPanel (); // hier weitere Container oder Steuerelemente hinzufuegen return mainPanel ; } public static void main ( String [] args ) { new MyFirstWindow (); } } In Zeile 15 deklarieren wir eine Referenzvariable namens content vom Typ JPanel . Dazu muss die Klasse JPanel aus dem javax.swing -Paket importiert werden (Zeile 3 ). Dieses JPanel wird durch die Methode initContent() erzeugt, welche ein JPanel zur\u00fcckgibt (Zeile 27 ). In der Methode initContent() wird dieses JPanel erzeugt (Zeile 25 ) unter Verwendung des parameterlosen Konstruktors von JPanel . Das so erzeugte Fenster sieht so aus: Beachten Sie , dass der Hintergrund nun nicht mehr CYAN gef\u00e4rbt ist! Deshalb werden wir diese Anweisung auch gleich entfernen. Der Grund daf\u00fcr ist, dass zwar die Content Pane cyan ist, aber davor befindet sich jetzt ein JPanel ( content ), welches grau (Standardwert) ist. Dieses JPanel bef\u00fcllt die gesamte Content Pane . Diese ist also gar nicht mehr zu sehen.","title":"Erweitern des Fensters um ein JPanel"},{"location":"gui/#erweitern-der-initcontent-methode","text":"Wir werden die initContent() -Methode nun sukzessive erweitern, indem wir Steuerelemente (und sp\u00e4ter auch weitere Container , also JPanel ) hinzuf\u00fcgen. Dabei ist das generelle Vorgehen stets gleich: Steuerelement-Objekt erzeugen Steuerelement-Objekt dem Container (dem JPanel ) hinzuf\u00fcgen Wir betrachten nur die initContent() -Methode (die erforderlichen Klassen m\u00fcssen aus dem javax.swing -Paket importiert werden - oder Sie w\u00e4hlen import javax.swing.*; ): 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 private JPanel initContent () { JPanel mainPanel = new JPanel (); // Steuerlement-Objekte erstellen JLabel label = new JLabel ( \"Name: \" ); JTextField input = new JTextField ( 10 ); JButton button = new JButton ( \"Klick mich!\" ); // Steuerlement-Objekte dem Container (JPanel) hinzufuegen mainPanel . add ( label ); mainPanel . add ( input ); mainPanel . add ( button ); return mainPanel ; } Das Fenster sieht nun so aus: Wir haben also ein JLabel (einen Text) hinzugef\u00fcgt (\"Name\"), ein JTextField (ein Eingabefeld, f\u00fcr das die Breite 10 Zeichen definiert wurde) sowie ein JButton (ein Button, auf dem \"Klick mich!\" steht). Bei allen drei Elementen handelt es sich um Steuerelemente . Beachten Sie, dass die Elemente nebeneinander angeordnet sind. Das ist die Standardeinstellung f\u00fcr ein JPanel . Solche Einstellungen k\u00f6nnen sp\u00e4ter mit einem Layout-Manager ge\u00e4ndert werden. Die Steuerelemente werden solange nebeneinander angeordnet, solange sie nebeneinander passen. Wenn Sie die Fensterbreite schmaler gestalten (mit der Maus zusammenschieben), schieben sich die Steuerlemente untereinander. Um aber Kontrolle \u00fcber die Anordnung der Steuerlemente zu gelangen, betrachten wir nun Layout-Manager .","title":"Erweitern der initContent()-Methode"},{"location":"gui/#layout-manager","text":"Layout-Manager dienen der Anordnung von Komponenten. Es gibt viele Layout-Manager ( FlowLayout , BorderLAyout , CardLayout , OverlayLayout , GridLayout , GridBagLayout , BoxLayout , GroupLayout , ...). Wir werden aber nicht alle betrachten, da dies erstens auf Dauer langweilig ist und zweitens Layout-Manager ineinander verschachtelt werden k\u00f6nnen. Vielmehr k\u00f6nnen Container ineinander verschachtelt werden und diesen Containern unterschiedliche Layout-Manager zugewiesen werden. Es wird also einem Container ein Layout-Manager zugewisen und die Komponenten in diesem Container sind dann so angeordnet, wie der Layout-Manager es definiert (nebeneinander oder untereinander oder \u00fcbereinander ...). Das Zuweisen eines Layout-Managers zu einem Container erfolgt mithilfe von setLayout ( new Layoutmanager ()) // Layoutmanager durch entsprechenden Namen ersetzen Wir betrachten im Folgenden drei Layout-Manager und diese gen\u00fcgen v\u00f6llig f\u00fcr alle GUIs, die wir erstellen wollen: FlowLayout GridLayout BorderLayout Alle drei LayoutManager bedinden sich im java.awt -Paket, also java.awt.FlowLayout , java.awt.GridLayout und java.awt.BorderLayout .","title":"Layout-Manager"},{"location":"gui/#flowlayout","text":"FlowLayout ist der Standard-Layout-Manager f\u00fcr ein JPanel . Das hei\u00dft, wenn wir einem JPanel keinen (anderen) Layout-Manager zuweisen, ist es im FlowLayout . FlowLayout ordnet die Komponenten nebeneinander in einer Zeile an (wenn sie in eine Zeile passen \u2013 ansonsten weitere Zeile). Das Zuweisen eines Containers zum FlowLayout erfolgt mittels setLayout(new FlowLayout()); . F\u00fcr FlowLayout steht aber nicht nur der parameterlose Konstruktor zur Verf\u00fcgung, sondern auch FlowLayout(int align) , wobei f\u00fcr align folgende vordefinierte Konstanten verwendet werden k\u00f6nnen: FlowLayout.CENTER ; ordnet alle Komponenten mittig an, ist der Standard-Wert FlowLayout.LEFT ; ordnet alle Komponenten linksb\u00fcndig an FlowLayout.RIGHT ; ordnet alle Komponenten rechtsb\u00fcndig an FlowLayout(int align, int hgap, int vgap) , wobei align wie oben und hgap den horizontalen Abstand zwischen den Komponenten und vgap den vertikalen Abstand zwischen den Komponenten beschreibt Beispiele: Beim FlowLayout bleiben die Steuerelemente stets in ihrer Standardgr\u00f6\u00dfe! \u00dcbung F\u00fcgen Sie in Ihre initContent() -Methode 6 Buttons ein (wie in der oberen Abbildung). Lassen Sie das mainPanel im FlowLayout . Probieren Sie ruhig mal die verschiedenen align -Werte. Ver\u00e4ndern Sie mit der Maus die Gr\u00f6\u00dfe des Fensters. Beachten Sie, dass sich die Gr\u00f6\u00dfe der Buttons nicht \u00e4ndert.","title":"FlowLayout"},{"location":"gui/#gridlayout","text":"GridLayout ordnet Komponenten innerhalb eines rechteckigen Gitters (einem grid ) an. Das Zuweisen eines Containers zum GridLayout erfolgt mittels setLayout(new GridLayout(int rows, int columns)); . Dabei geben rows die Anzahl der Zeilen des Gitters und columns die Anzahl der Spalten des Gitters an. Dabei wird aber immmer zuerst versucht, ein Rechteck zur erzeugen mit der Zeilenanzahl als ma\u00dfgeblichem Wert ! Das verdeutlichen die folgenden Beispiele: F\u00fcr GridLayout gibt es noch einen weiteren parametrisierten Konstruktor, n\u00e4mlich GridLayout(int rows, int columns, int hgap, int vgap) , wobei hgap und vgap die gleiche Bedutung haben, wie beim FlowLayout . Wichtig ist, dass sich die Gr\u00f6\u00dfe der Komponenten der Gr\u00f6\u00dfe des Containes anpasst, in der die Komponenten enthalten sind. das bedeutet, dass mit der Gr\u00f6\u00dfe des Containers auch die Steuerlemente gr\u00f6\u00dfer werden! Das bedeutet, dass im Gegensatz zum FlowLayout z.B. Buttons in diesem Layout-Manager keine feste Gr\u00f6\u00dfe haben! \u00dcbung Verwenden Sie die initContent() -Methode aus der FlowLayout -\u00dcbung (mit den 6 Buttons). Weisen Sie dem mainPanel das GridLayout zu. Probieren Sie ruhig mal verschiedene rows , columns , hgap , vgap -Werte. Ver\u00e4ndern Sie mit der Maus die Gr\u00f6\u00dfe des Fensters. Beachten Sie, dass sich die Gr\u00f6\u00dfe der Buttons \u00e4ndert !","title":"GridLayout"},{"location":"gui/#borderlayout","text":"BorderLayout ist der Standard-Layout-Manager f\u00fcr ein JFrame . BorderLayout ordnet Komponenten in f\u00fcnf Felder ( North , South , East , West ) und die Mitte ( Center ) an. BorderLayout besitzt einen parameterlosen Konstruktor BoderLayout() und einen parametrisierten Konstruktor BorderLayout(int hgap, int vgap) mit hgap und vgap wie zuvor. Um Komponenten zu einem Container im BoderLayout hinzuzuf\u00fcgen, gibt es nun zwei verschiedene add() -Methoden: add(Component comp) f\u00fcgt die Komponente comp dem Center hinzu (entspricht add(comp, BorderLayout.CENTER) ), add(Component comp, Object constraints) , wobei constraints eine der folgenden vordefinierten Werte annehmen kann: BorderLayout.NORTH ; f\u00fcgt comp dem oberen Feld hinzu, BorderLayout.SOUTH ; f\u00fcgt comp dem unteren Feld hinzu, BorderLayout.EAST ; f\u00fcgt comp dem linken Feld hinzu, BorderLayout.WEST ; f\u00fcgt comp dem rechten Feld hinzu, BorderLayout.CENTER ; f\u00fcgt comp der Mitte hinzu. Angenommen, die initContent() -Methode sieht so aus: 23 24 25 26 27 28 29 30 31 32 33 34 35 private JPanel initContent () { JPanel mainPanel = new JPanel (); mainPanel . setLayout ( new BorderLayout ()); mainPanel . add ( new JButton ( \"NORTH\" ), BorderLayout . NORTH ); mainPanel . add ( new JButton ( \"SOUTH\" ), BorderLayout . SOUTH ); mainPanel . add ( new JButton ( \"EAST\" ), BorderLayout . EAST ); mainPanel . add ( new JButton ( \"WEST\" ), BorderLayout . WEST ); mainPanel . add ( new JButton ( \"CENTER\" ), BorderLayout . CENTER ); return mainPanel ; } , dann wird folgendes Fenster erzeugt: Beachten Sie: die Nord-, S\u00fcd-Buttons behalten ihre H\u00f6he, skalieren auf Fensterbreite die Ost-, West-Buttons behalten ihre Breite, skalieren auf Fensterh\u00f6he (minus H\u00f6he f\u00fcr Norden und S\u00fcden) der Center-Button wird eingepasst (k\u00f6nnte z.B. auch ganz verschwinden) \u00dcbung Verwenden Sie die initContent() -Methode von oben (mit den 5 Buttons). Lassen Sie einzelne Buttons weg. Erkl\u00e4ren Sie jeweils das Ergebnis!","title":"BorderLayout"},{"location":"gui/#verschachteln-von-layout-managern","text":"Eigentlich ist die \u00dcberschrift irref\u00fchrend, denn es werden nicht die Layout-Manger verschachtelt, sondern die Container, denen jeweils andere Layout-Manager zugewiesen werden k\u00f6nnen. Wir wollen das an einem Beispiel demonstrieren. Wir betrachten dazu wieder nur die initContent() -Methode. Alles andere bleibt in unserem \"Grundger\u00fcst\", das wir in der Klasse MyFirstWindow erstellt haben, gleich. Wir beginnen damit, dass das mainPanel im BorderLayout ist und dass diesem mainPanel drei weitere JPanel hinzugef\u00fcgt werden. Das erste JPanel hei\u00dft oben , ist im FlowLayout und wird dem Norden des mainPanel s hinzugef\u00fcgt. Das zweite JPanel hei\u00dft mitte , ist im GridLayout und wird dem Center des mainPanel s hinzugef\u00fcgt. Das dritte JPanel hei\u00dft unten , ist im FlowLayout und wird dem S\u00fcden des mainPanel s hinzugef\u00fcgt. 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 private JPanel initContent () { JPanel mainPanel = new JPanel (); mainPanel . setLayout ( new BorderLayout ()); JPanel oben = new JPanel (); oben . setLayout ( new FlowLayout ( FlowLayout . CENTER , 10 , 10 )); JPanel mitte = new JPanel (); mitte . setLayout ( new GridLayout ( 3 , 2 , 10 , 10 )); JPanel unten = new JPanel (); unten . setLayout ( new FlowLayout ( FlowLayout . RIGHT , 5 , 5 )); mainPanel . add ( oben , BorderLayout . NORTH ); mainPanel . add ( mitte , BorderLayout . CENTER ); mainPanel . add ( unten , BorderLayout . SOUTH ); return mainPanel ; } Die einzelnen JPanel sind nicht unterscheidbar, da sie keinen Rand ( Border ) besitzen und alle einen grauen Hintergrund haben. Es sind \"nur\" Container , die uns helfen, die GUI zu strukturieren. Sichtbar sind erst die Steuerelemente, die wir nun den einzelnen JPanel hinzuf\u00fcgen: 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 private JPanel initContent () { JPanel mainPanel = new JPanel (); mainPanel . setLayout ( new BorderLayout ()); JPanel oben = new JPanel (); oben . setLayout ( new FlowLayout ( FlowLayout . CENTER , 10 , 10 )); oben . add ( new JLabel ( \"Name : \" )); oben . add ( new JTextField ( 10 )); oben . setBackground ( Color . LIGHT_GRAY ); JPanel mitte = new JPanel (); mitte . setLayout ( new GridLayout ( 3 , 2 , 10 , 10 )); mitte . add ( new JButton ( \"Button 1\" )); mitte . add ( new JButton ( \"Button 2\" )); mitte . add ( new JButton ( \"Button 3\" )); mitte . add ( new JButton ( \"Button 4\" )); mitte . add ( new JButton ( \"Button 5\" )); mitte . add ( new JButton ( \"Button 6\" )); mitte . setBackground ( Color . GREEN ); JPanel unten = new JPanel (); unten . setLayout ( new FlowLayout ( FlowLayout . RIGHT , 5 , 5 )); unten . add ( new JButton ( \"Abbruch\" )); unten . add ( new JButton ( \"OK\" )); unten . setBackground ( Color . LIGHT_GRAY ); mainPanel . add ( oben , BorderLayout . NORTH ); mainPanel . add ( mitte , BorderLayout . CENTER ); mainPanel . add ( unten , BorderLayout . SOUTH ); return mainPanel ; } Zur besseren Erkennung wurde den einzelnen JPanel auch noch jeweils eine Hintergrundfarbe zugeordnet (Zeilen 32 , 42 und 48 ). Somit ergibt sich folgende Ansicht: Das JPanel oben ist im FlowLayout . Diesem Panel werden zwei Steuerelemente hinzugef\u00fcgt: ein JLabel ( \"Name\" ) und ein JTextField der Breite 10 (Zeichen). Da das Panel im FlowLayout ist, erscheinen beide Steuerelmente nebeneinander (weil sie nebeneinander passen). Die Steuerelemente sind zentriert angeordnet ( FlowLayout.CENTER ) und haben einen horizontalen und vertikalen Abstand zu den Nachbarn von 10 Pixeln. Dem Panel wurde die Hintergrundfarbe LIGHT-GRAY zugewiesen. Das JPanel mitte ist im GridLayout mit 3 Zeilen und 2 Spalten. Diesem Panel werden 6 JButton zugeordnet. Die Buttons haben einen vertikalen und horizontalen Abstand von jeweils 10 Pixeln (zwischen den Buttons ist der Abstand also 20). Beachten Sie, dass die Gr\u00f6\u00dfe der Buttons an die Fenstergr\u00f6\u00dfe angepasst sind. Mit wachsender Fenstergr\u00f6\u00dfe wachsen auch die Button-Gr\u00f6\u00dfen. Dem Panel wurde die Hintergrundfarbe GREEN zugewiesen. Das JPanel unten ist im FlowLayout . Diesem Panel werden zwei JButton hinzugef\u00fcgt. Das das Panel im FlowLayout ist, erscheinen beide Steuerelmente nebeneinander (weil sie nebeneinander passen). Die Steuerelemente sind rechtsb\u00fcndig angeordnet ( FlowLayout.RIGHT ) und haben einen horizontalen und vertikalen Abstand zu den Nachbarn von jeweils 5 Pixeln. Beachten Sie, dass die Buttons in ihrer Standardgr\u00f6\u00dfe sind (und stets bleiben). Dem Panel wurde die Hintergrundfarbe LIGHT-GRAY zugewiesen. Noch ein Wort zu den Gr\u00f6\u00dfen: Die Gr\u00f6\u00dfe des Fensters ist mit 300 x 200 vorgegeben. Der \"Norden\" geht \u00fcber die gesamte Breite. Die H\u00f6he des \"Nordens\" ergibt sich aus den Standardh\u00f6hen von JLabel und JTextField plus den vertikalen Abst\u00e4nden nach oben und unten von jeweils 10 Pixeln. Der \"S\u00fcden\" geht ebenfalls \u00fcber die gesamte Breite. Die H\u00f6he des \"S\u00fcdens\" ergibt sich aus der Standardh\u00f6he von JButton plus den vertikalen Abst\u00e4nden nach oben und unten von jeweils 5 Pixeln. Das Center -Feld geht ebenfalls \u00fcber die gesamte Breite, da es kein EAST - und kein WEST -Feld gibt. Die H\u00f6he des Center -Feldes ergibt sich aus der Fensterh\u00f6he minus der H\u00f6he f\u00fcr die Titelleiste, minus der H\u00f6he f\u00fcr den \"Norden\" und minus der H\u00f6he f\u00fcr den \"S\u00fcden\". Das Center -Feld f\u00fcllt also den verbleibenden Rest des Platzes im Fenster aus. Sie k\u00f6nnen beliebig viele Container in beliebiger Tiefe ineinanderschachteln und den Containern unterschiedliche Layout_Manager zuweisen. Damit gelingt ihnen jede denkbare Gestaltung grafischer Nutzeroberfl\u00e4chen. Weitere Anregungen zur Verwendung von Layout-Managern finden Sie z.B. hier . \u00dcbung \u00c4ndern Sie ausschlie\u00dflich die H\u00f6he des Fensters und dann einmal ausschlie\u00dflich die Breite des Fensters und begr\u00fcnden Sie da jeweilige Ergebnis! Success Wir haben unser erstes Fenster erstellt! Au\u00dferdem k\u00f6nnen wir dem Fenster Steuerelemente hinzuf\u00fcgen. Diese k\u00f6nnen wir mithilfe von Containern und Layout-Manager positionieren, so dass wir ordentlich positionierte Grafische Nutzeroberfl\u00e4chen erstellen k\u00f6nnen. Im n\u00e4chsten Schritt schauen wir uns an, wie wir auf Ereignisse reagieren k\u00f6nnen, z.B. auf das Klicken eines Buttons.","title":"Verschachteln von Layout-Managern"},{"location":"hilfen/","text":"Hilfen \u00b6 Hier erl\u00e4utern wir in losem Zusammenhang einzelne Aspekte.","title":"Hilfen"},{"location":"hilfen/#hilfen","text":"Hier erl\u00e4utern wir in losem Zusammenhang einzelne Aspekte.","title":"Hilfen"},{"location":"interfaces/","text":"Interfaces \u00b6 Interfaces sind auch abstrakte Klassen. Interfaces enthalten ausschlie\u00dflich abstrakte Methoden (keine Methode darf implementiert sein). Interfaces beschreiben Schnittstellen . F\u00fcr Interfaces wird nicht das Schl\u00fcsselwort class , sondern interface verwendet. Klassen erben nicht von Interfaces, sondern implementieren sie. Deshalb wird auch nicht das Schl\u00fcsselwort extends , sondern das Schl\u00fcsselwort implements verwendet. W\u00e4hrend in Java nur von genau einer Klasse geerbt werden kann (also auch nur von genau einer abstrakten Klasse), kann eine Klasse beliebig viele Interfaces implementieren. Interfaces sind automatisch abstract , d.h. das Schl\u00fcsselwort abstract muss nicht angegeben werden. Auch die Methoden in Interfaces m\u00fcssen nicht als abstrakt gekennzeichnet werden. Interfaces k\u00f6nnen, wie abstrakte Klassen auch, als Typen verwendet werden. Abtrakte Klasse Interface k\u00f6nnen abstrakte und nicht-abstrakte (also implementierte) Methoden haben k\u00f6nnen nur abstrakte Methoden beinhalten es kann nur von einer (abstrakten) Klasse geerbt werden (Schl\u00fcsselwort extends ) es k\u00f6nnen beliebig viele Interfaces implementiert werden (Schl\u00fcsselwort implemenets ), mehrere Interfaces durch Komma getrennt abstrakte Klassen k\u00f6nnen selbst Interfaces implementieren Interfaces k\u00f6nnen keine abstrakten Klassen implementieren (alle Methoden m\u00fcssen ja abstrakt sein) das Schl\u00fcsselwort abstract deklariert eine abstrakte Klasse (und eine abstrakte Methode) das Schl\u00fcsselwort interface deklariert ein Interface eine abstrakte Klasse kann von einer anderen abstrakten Klasse erben und mehrere Interfaces implementieren ein Interface kann nur von einem anderen Interface erben abtrakte Klassen k\u00f6nnen final Variablen (Konstanten), nicht-finale Variablen, statische und nicht-statische Variablen als Eigenschaften beinhalten Interfaces k\u00f6nnen nur statische Konstanten ( static final ) als Eigenschaften beinhalten die Eigenschaften einer abstrakten Klasse k\u00f6nnen private , protected , default und public sein in Interfaces sind alle Eigenschaften public Bsp.: public abstract class Shape{ public abstract void draw(); } Bsp.: public interface Drawable{ void draw(); } Das Interface Comparable \u00b6 Ehe wir uns ein eigenes Interface schreiben, schauen wir uns zun\u00e4chst die Verwendung eines bereits existierenden Interfaces an. Es handelt sich um das Interface Comparable aus dem java.lang -Paket. Wenn Sie sich die Java-Dokumentation dieses Interfaces einmal anschauen, dann sehen Sie, dass es von sehr vielen Klassen implementiert wird. Dieses Interface enth\u00e4lt genau eine (nat\u00fcrlich abstrakte) Methode compareTo() . Diese Methode kennen wir auch schon, denn wir haben sie betrachtet, als wir in Prog1 Strings kennengelernt haben. Die Methode this.compareTo(Object obj) wird verwendet, um zu vergleichen, ob this gr\u00f6\u00dfer, kleiner oder gleich obj ist. Das bedeutet, dass wir compareTo() in unserer Klasse implementieren sollten, wenn wir die Objekte unserer Klasse der Gr\u00f6\u00dfe nach ordnen wollen, wenn wir also erm\u00f6glichen wollen, dass die Objekte der Klasse sortiert werden k\u00f6nnen. Die Methode this.compareTo(Object obj) gibt ein int zur\u00fcck, f\u00fcr dessen Wert Folgendes gelten soll: ist der zur\u00fcckgegebene int -Wert positiv ( > 0 ), dann ist this gr\u00f6\u00dfer als obj , ist der zur\u00fcckgegebene int -Wert negativ ( < 0 ), dann ist this kleiner als obj , ist der zur\u00fcckgegebene int -Wert 0 , dann ist this gleich obj . Angenommen, wir wollen f\u00fcr die folgende Klasse Rectangle (aus dem Abschnitt Abstrakte Klassen ) festlegen, dass die Rechtecke der Gr\u00f6\u00dfe nach geordnet werden k\u00f6nnen. Gegeben ist also zun\u00e4chst folgende Klasse (wir verwenden hier auch Shape aus Abstrakte Klassen ): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class Rectangle extends Shape { private int width , height ; public Rectangle ( int width , int height ) { this . width = width ; this . height = height ; } @Override public double perimeter () { return ( 2.0 * ( this . width + this . height )); } @Override public double area () { return ( this . width * this . height ); } } Die Klasse Rectangle erbt also von der abstrakten Klasse Shape und muss deshalb die Methoden perimeter() und area() implementieren. Nun geben wir an, dass Rectangle auch das Interface Comparable implementieren soll. Dazu erg\u00e4nzen wir die erste Zeile um implements Comparable , d.h. die Klassendeklaration sieht jetzt so aus: 1 2 public class Rectangle extends Shape implements Comparable { Wenn Sie das hinzuf\u00fcgen, stellen wir fest, dass ein Fehler erzeugt wird (die Klasse l\u00e4sst sich nicht compilieren). Die Fehlerausgabe besagt: The type Rectangle must implement the inherited abstract method Comparable.compareTo(Object) . Es werden zwei QuickFixes angeboten, entweder Add unimplemented methods oder Make type Rectangle abstract . Letzteres wollen wir aber nicht ( Rectangle soll nicht zu einer abstrakten Klasse gemacht werden). Also w\u00e4hlen wir Add unimplemented methods . Eclipse f\u00fcgt uns die compareTo() -Methode in den Code ein: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 public class Rectangle extends Shape implements Comparable { private int width , height ; public Rectangle ( int width , int height ) { this . width = width ; this . height = height ; } @Override public double perimeter () { return ( 2.0 * ( this . width + this . height )); } @Override public double area () { return ( this . width * this . height ); } @Override public int compareTo ( Object o ) { // TODO Auto-generated method stub return 0 ; } } Jetzt l\u00e4sst sich der Code bereits compilieren, wir erhalten aber noch eine Warnung: Comparable is a raw type. References to generic type Comparable<T> should be parameterized Diese Warnung besagt, dass wir, wie wir das von Collections bereits kennen, auch das Interface Comparable typisieren sollen. Das wollen wir auch tun, denn wir implementieren dieses Interface hier f\u00fcr unsere Klasse Rectangle . Wir typisieren deshalb Comparable mit Rectangle : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 public class Rectangle extends Shape implements Comparable < Rectangle > { private int width , height ; public Rectangle ( int width , int height ) { this . width = width ; this . height = height ; } @Override public double perimeter () { return ( 2.0 * ( this . width + this . height )); } @Override public double area () { return ( this . width * this . height ); } @Override public int compareTo ( Object o ) { // TODO Auto-generated method stub return 0 ; } } Interssanterweise ist nun zwar unsere Warnung weg, aber daf\u00fcr erhalten wir erneut einen Fehler: The type Rectangle must implement the inherited abstract method Comparable<Rectangle>.compareTo ( Rectangle ) Dadurch, dass wir Comparable mit Rectangle typisieren (was korrekt ist), wird nun verlangt, dass wir nicht mehr die Methode @Override public int compareTo ( Object o ) { // TODO Auto-generated method stub return 0 ; } implementieren, sondern die Methode @Override public int compareTo ( Rectangle o ) { // TODO Auto-generated method stub return 0 ; } Der Typ des Parameters hat sich durch unsere Typisierung also ge\u00e4ndert. Das ist gut, denn dann m\u00fcssen wir nicht mehr, wie z.B. bei equals(Object o) , pr\u00fcfen, ob es sich bei dem \u00fcbergebenen Objekt tats\u00e4chlich um ein Rectangle handelt. Wir \u00e4ndern also den Parametertyp in compareTo() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 public class Rectangle extends Shape implements Comparable < Rectangle > { private int width , height ; public Rectangle ( int width , int height ) { this . width = width ; this . height = height ; } @Override public double perimeter () { return ( 2.0 * ( this . width + this . height )); } @Override public double area () { return ( this . width * this . height ); } @Override public int compareTo ( Rectangle o ) { // TODO Auto-generated method stub return 0 ; } } In Zukunft typisieren wir das Comparable -Interface noch bevor wir Add unimplemented methods w\u00e4hlen. Wir typisieren es stets mit der Klasse, in der wir das Interface implementieren. F\u00fcr die Implementierung m\u00fcssen wir uns nun \u00fcberlegen, wann ein Rectangle -Objekt gr\u00f6\u00dfer (kleiner/gleich) sein soll, als ein anderes. Da compareTo() ein int zur\u00fcckgibt, k\u00f6nnten wir z.B. die Summen von height und width verwenden: 23 24 25 26 27 @Override public int compareTo ( Rectangle o ) { int diff = ( this . height + this . width ) - ( o . height + o . width ); return diff ; } Wenn die Summe von height und width von this gr\u00f6\u00dfer ist, als von o , dann geben wir eine positive int -Zahl zur\u00fcck, wenn sie kleiner ist, dann eine negative int -Zahl und wenn sie gleich sind, dann 0 . Damit entsprechen wir den Vorgaben von compareTo() . Laufzeittypen eines Rectangle -Objektes \u00b6 Ein Rectangle -Objekt ist nicht nur vom Laufzeittyp Rectangle , sondern auch von Laufzaittyp Shape , wegen public class Rectangle extends Shape , vom Laufzeittyp Comparable , wegen public class Rectangle implements Comparable und vom Laufzeittyp Object , weil das immer so ist, weil jede Klasse implizit von Object erbt. Wir k\u00f6nnten nun also in jeder beliebigen Klasse eine Sortiermethode haben, z.B.: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public static void sortieren ( Comparable [] unsorted ) { for ( int bubble = 1 ; bubble < unsorted . length ; bubble ++ ) { for ( int index = 0 ; index < unsorted . length - bubble ; index ++ ) { if ( unsorted [ index ] . compareTo ( unsorted [ index + 1 ] ) > 0 ) { Comparable tmp = unsorted [ index ] ; unsorted [ index ] = unsorted [ index + 1 ] ; unsorted [ index + 1 ] = tmp ; } } } } Die Methode implementiert Bubble-Sort. In Zeile 7 verwenden wir die compareTo() -Methode. Das geht genau deshalb, weil klar ist, dass ein Objekt, das (auch) vom Typ Comparable ist, diese Methode auf jeden Fall als Eigenschaft besitzt. Wenn wir nun in der Klasse, in der die Methode sortieren() implmentiert ist, folgende main() -Methode haben: public static void main ( String [] args ) { Rectangle [] rectArr = new Rectangle [ 6 ] ; rectArr [ 0 ] = new Rectangle ( 9 , 13 ); rectArr [ 1 ] = new Rectangle ( 4 , 17 ); rectArr [ 2 ] = new Rectangle ( 12 , 5 ); rectArr [ 3 ] = new Rectangle ( 8 , 9 ); rectArr [ 4 ] = new Rectangle ( 10 , 11 ); rectArr [ 5 ] = new Rectangle ( 5 , 15 ); System . out . printf ( \"%n%n------------------------ unsortiert --------------------------%n%n\" ); for ( Rectangle r : rectArr ) { System . out . println ( r . toString ()); } System . out . printf ( \"%n%n------------------------- sortiert ---------------------------%n%n\" ); sortieren ( rectArr ); for ( Rectangle r : rectArr ) { System . out . println ( r . toString ()); } } dann erhalten wir folgende Ausgabe: ------------------------ unsortiert -------------------------- [ 9 x 13 = 117 ,00 ] [ 4 x 17 = 68 ,00 ] [ 12 x 5 = 60 ,00 ] [ 8 x 9 = 72 ,00 ] [ 10 x 11 = 110 ,00 ] [ 5 x 15 = 75 ,00 ] ------------------------- sortiert --------------------------- [ 12 x 5 = 60 ,00 ] [ 8 x 9 = 72 ,00 ] [ 5 x 15 = 75 ,00 ] [ 4 x 17 = 68 ,00 ] [ 10 x 11 = 110 ,00 ] [ 9 x 13 = 117 ,00 ] f\u00fcr den Fall, dass wir in unserer Klasse Rectangle auch die toString() -Methode wie folgt implementiert haben: @Override public String toString () { String s = String . format ( \"[ %2d x %2d = %6.2f ] \" , this . width , this . height , this . area ()); return s ; } Success Wir haben f\u00fcr unsere Klasse Rectangle das Interface Comparable implementiert. Das bedeutet, dass wir in Rectangle die Methode compareTo() so implementiert haben, dass Rectangle -Objekte der Gr\u00f6\u00dfe nach sortiert werden k\u00f6nnen. Wir haben also eine Ordnung \u00fcber Rectangle -Objekte definiert. Nach \"au\u00dfen\" ist sichtbar, dass wir eine solche Ordnung implementiert haben, dass Rectangle -Objekte also sortierbar sind, weil sie (auch) vom Typ Comparable sind. F\u00fcr alle Objekte, die in Java existieren, wissen wir, dass sie sortierbar sind, sobald sie auch vom Typ Comparable sind. Comparable stellt also eine Schnittstelle zur Sortierbarkeit dar. Wenn wir eine eigene Klasse schreiben und wir eine Ordnung \u00fcber die Objekte dieser Klasse definieren k\u00f6nnen, sollten wir das Interface Comparable implementieren, denn dadurch geben wir nach \"au\u00dfen\" an, das sich die Objekte der Klasse sortieren ( ordnen ) lassen. Zwischenfazit \u00b6 Wir haben nun schon mehrere Methoden kennengelernt, die wir f\u00fcr eigene Klassen implementieren sollten. Die toString() -Methode erben wir von Objects . Wir sollten toString() f\u00fcr \"unsere\" Klassen \u00fcberschreiben, damit wir eine textuelle Repr\u00e4sentation unserer Objekte haben. toString() wird implizit angewendet, sobald eine String -Repr\u00e4sentation erforderlich ist, z.B. ist System.out.println(refVariable); das Gleiche wie System.out.println(refVariable.toString()); . Die equals() -Methode erben wir ebenfalls von Objects . Wir sollten equals() f\u00fcr \"unsere\" Klassen implementieren, um zu definieren, wann Objekte \"unserer\" Klasse gleich sind. Hierbei ist wichtig, zu beachten, dass refVar1 == refVar2 ein reiner Referenzvergleich ist, der nichts dar\u00fcber aussagt, ob die Objekte gleich sind, sondern nur ein true ergibt, wenn beide Variablen auf dasselbe Objekt zeigen. Die Gleichheit von Objekten wird mittels equals() -Methode definiert. Die hashCode() -Methode erben wir ebenfalls von Objects . Wir sollten hashCode() genau dann implementieren, wenn wir equals() implementieren. Wichtig ist, dass zwei Objekte den gleichen Hash-Code haben ( hashCode() liefert den gleichen int -Wert zur\u00fcck), wenn die beiden Objekte laut equals() gleich sind. Gut ist dar\u00fcber hinaus (aber nicht Bedingung), dass zwei Objekte einen unterschiedlichen Hash-Code haben, wenn sie laut equals() -Methode nicht gleich sind ( equals() liefert false zur\u00fcck). Der Hash-Code wird bei Hash-basierten Datentypen, wie z.B. Collections verwendet, um diese einzusortieren. Die Methode compareTo() muss implementiert werden, wenn wir das Interface Comparable implementieren. Mithilfe von compareTo() legen wir eine Ordnung \u00fcber die Objekte der Klasse fest, d.h. wir geben an, wann ein Objekt gr\u00f6\u00dfer/kleiner/gleich einem anderen Objekt der gleichen Klasse ist. Dadurch, dass wir das Comparable -Interface implementieren, zeigen wir nach \"au\u00dfen\", dass die Objekte unserer Klasse sortierbar sind. jetzt kommt noch ein Abschnitt f\u00fcr \"Fortgeschrittene\" - kann auch gerne ignoriert werden, aber vielleicht interessiert es ja einige von Ihnen Eine bessere Implementierung \u00b6 Wir haben bereits bei der Implementierung der Klasse Rectangle gesehen, dass wir das Interface Comparable bei der Implementierung von Rectangle typisieren sollten. Das w\u00e4re f\u00fcr eine wirklich korrekte Implementierung der Methode sortieren() ebenfalls angebracht. Dann w\u00fcrden wir in dieser Methode Comparable mit Rectangle typisieren: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public static void sortieren ( Comparable < Rectangle >[] unsorted ) { for ( int bubble = 1 ; bubble < unsorted . length ; bubble ++ ) { for ( int index = 0 ; index < unsorted . length - bubble ; index ++ ) { if ( unsorted [ index ] . compareTo (( Rectangle ) unsorted [ index + 1 ] ) > 0 ) { Comparable < Rectangle > tmp = unsorted [ index ] ; unsorted [ index ] = unsorted [ index + 1 ] ; unsorted [ index + 1 ] = tmp ; } } } } Wenn wir also den Typ Comparable verwenden, dann erg\u00e4nzen wir ihn um die Typisierung <Rectangle> (Zeilen 1 und 9 ). Das f\u00fchrt allerdings dazu, dass wir dann auch in Zeile 7 den Typ von unsorted[index+1] nach Rectangle konvertieren m\u00fcssen ( (Rectangle) unsorted[index+1] ). Damit verlieren wir aber unsere allgemeine Anwendbarkeit der Methode sortieren() f\u00fcr alle Klassen, die Comparable implementiert haben. Insbesondere w\u00fcrde die Methode dann nicht mehr f\u00fcr z.B. die Klasse Circle anwendbar sein: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public class Circle extends Shape implements Comparable < Circle > { private double radius ; public Circle ( double radius ) { this . radius = radius ; } @Override public double perimeter () { return Math . PI * 2.0 * this . radius ; } @Override public double area () { return Math . PI * this . radius * this . radius ; } @Override public int compareTo ( Circle o ) { if ( this . radius > o . radius ) return 1 ; else if ( this . radius < o . radius ) return - 1 ; else return 0 ; // this.radius == o.radius } @Override public String toString () { String s = String . format ( \"(radius: %.2f -> area: %.2f ] \" , this . radius , this . area ()); return s ; } } Wenn wir nun versuchen w\u00fcrden, die sortieren() -Methode auf ein Circle[] anzuwenden, lie\u00dfe sich das Programm gar nicht compilieren: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public static void main ( String [] args ) { Circle [] circArr = new Circle [ 6 ] ; circArr [ 0 ] = new Circle ( 5.0 ); circArr [ 1 ] = new Circle ( 5.5 ); circArr [ 2 ] = new Circle ( 4.0 ); circArr [ 3 ] = new Circle ( 2.5 ); circArr [ 4 ] = new Circle ( 7.0 ); circArr [ 5 ] = new Circle ( 1.0 ); System . out . printf ( \"%n%n------------------------ unsortiert --------------------------%n%n\" ); for ( Circle c : circArr ) { System . out . println ( c . toString ()); } System . out . printf ( \"%n%n------------------------- sortiert ---------------------------%n%n\" ); // sortieren(circArr); // Fehler for ( Circle c : circArr ) { System . out . println ( c . toString ()); } } Deshalb w\u00e4re es eine bessere Implementierung , wenn wir das Interface Comparable nicht in den konkreten Klassen Rectangle und Circle (und jede weitere Klasse, die wir auf der Basis von Shape erstellen), sondern gleich in der Abstrakten Klasse Shape : public abstract class Shape implements Comparable < Shape > { public abstract double perimeter (); public abstract double area (); } Da Shape eine abstrakte Klasse ist, muss die Methode compareTo() nicht in Shape implementiert werden. Diese Methode w\u00fcrde nun abstract an alle Klassen vererbt, die von Shape erben: Rectangle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public class Rectangle extends Shape { private int width , height ; public Rectangle ( int width , int height ) { this . width = width ; this . height = height ; } @Override public double perimeter () { return ( 2.0 * ( this . width + this . height )); } @Override public double area () { return ( this . width * this . height ); } @Override public int compareTo ( Shape o ) { Rectangle r = ( Rectangle ) o ; int diff = ( this . height + this . width ) - ( r . height + r . width ); return diff ; } @Override public String toString () { String s = String . format ( \"[ %2d x %2d = %6.2f ] \" , this . width , this . height , this . area ()); return s ; } } Circle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public class Circle extends Shape { private double radius ; public Circle ( double radius ) { this . radius = radius ; } @Override public double perimeter () { return Math . PI * 2.0 * this . radius ; } @Override public double area () { return Math . PI * this . radius * this . radius ; } @Override public int compareTo ( Shape o ) { Circle c = ( Circle ) o ; if ( this . radius > c . radius ) return 1 ; else if ( this . radius < c . radius ) return - 1 ; else return 0 ; // this.radius == c.radius } @Override public String toString () { String s = String . format ( \"(radius: %.2f -> area: %.2f ] \" , this . radius , this . area ()); return s ; } } Beachten Sie, dass die Klassen Rectangle und Circle jetzt nur noch von Shape erben, aber nicht mehr das Interface Comparable implementieren (jeweils Zeile 1 ). Es darf nicht mehrmals von einer Klasse implementiert werden und Shape implementiert es ja bereits. Da Shape diese Interface aber \"implementiert\", wird die Methode compareTo() als abstrakte Methode an die Klassen Rectangle und Circle vererbt. Die Methode muss also von diesen Klassen implementiert werden. Nun wird sie aber mit dem Parametertyp Shape vererbt (Zeile 24 bzw. 23 ). Dieser Parameter muss deshalb zun\u00e4chst innerhalb der Methode compareTo() konvertiert werden (Zeile 25 bzw. 26 ). Die allgemeine Anwendung der Methode sortieren() in der Testklasse gelingt nun aber: TestklasseShape.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 public class TestklasseShape { public static void sortieren ( Comparable < Shape >[] unsorted ) { for ( int bubble = 1 ; bubble < unsorted . length ; bubble ++ ) { for ( int index = 0 ; index < unsorted . length - bubble ; index ++ ) { if ( unsorted [ index ] . compareTo (( Shape ) unsorted [ index + 1 ] ) > 0 ) { Comparable < Shape > tmp = unsorted [ index ] ; unsorted [ index ] = unsorted [ index + 1 ] ; unsorted [ index + 1 ] = tmp ; } } } } public static void main ( String [] args ) { Rectangle [] rectArr = new Rectangle [ 6 ] ; rectArr [ 0 ] = new Rectangle ( 9 , 13 ); rectArr [ 1 ] = new Rectangle ( 4 , 17 ); rectArr [ 2 ] = new Rectangle ( 12 , 5 ); rectArr [ 3 ] = new Rectangle ( 8 , 9 ); rectArr [ 4 ] = new Rectangle ( 10 , 11 ); rectArr [ 5 ] = new Rectangle ( 5 , 15 ); System . out . printf ( \"%n%n------------------------ unsortiert --------------------------%n%n\" ); for ( Rectangle r : rectArr ) { System . out . println ( r . toString ()); } System . out . printf ( \"%n%n------------------------- sortiert ---------------------------%n%n\" ); sortieren ( rectArr ); for ( Rectangle r : rectArr ) { System . out . println ( r . toString ()); } Circle [] circArr = new Circle [ 6 ] ; circArr [ 0 ] = new Circle ( 5.0 ); circArr [ 1 ] = new Circle ( 5.5 ); circArr [ 2 ] = new Circle ( 4.0 ); circArr [ 3 ] = new Circle ( 2.5 ); circArr [ 4 ] = new Circle ( 7.0 ); circArr [ 5 ] = new Circle ( 1.0 ); System . out . printf ( \"%n%n------------------------ unsortiert --------------------------%n%n\" ); for ( Circle c : circArr ) { System . out . println ( c . toString ()); } System . out . printf ( \"%n%n------------------------- sortiert ---------------------------%n%n\" ); sortieren ( circArr ); for ( Circle c : circArr ) { System . out . println ( c . toString ()); } } } Wir k\u00f6nnen nun alle Objekte sortieren lassen, die auf der Klasse Shape basieren. ------------------------ unsortiert -------------------------- [ 9 x 13 = 117 ,00 ] [ 4 x 17 = 68 ,00 ] [ 12 x 5 = 60 ,00 ] [ 8 x 9 = 72 ,00 ] [ 10 x 11 = 110 ,00 ] [ 5 x 15 = 75 ,00 ] ------------------------- sortiert --------------------------- [ 12 x 5 = 60 ,00 ] [ 8 x 9 = 72 ,00 ] [ 5 x 15 = 75 ,00 ] [ 4 x 17 = 68 ,00 ] [ 10 x 11 = 110 ,00 ] [ 9 x 13 = 117 ,00 ] ------------------------ unsortiert -------------------------- ( radius: 5 ,00 -> area: 78 ,54 ] ( radius: 5 ,50 -> area: 95 ,03 ] ( radius: 4 ,00 -> area: 50 ,27 ] ( radius: 2 ,50 -> area: 19 ,63 ] ( radius: 7 ,00 -> area: 153 ,94 ] ( radius: 1 ,00 -> area: 3 ,14 ] ------------------------- sortiert --------------------------- ( radius: 1 ,00 -> area: 3 ,14 ] ( radius: 2 ,50 -> area: 19 ,63 ] ( radius: 4 ,00 -> area: 50 ,27 ] ( radius: 5 ,00 -> area: 78 ,54 ] ( radius: 5 ,50 -> area: 95 ,03 ] ( radius: 7 ,00 -> area: 153 ,94 ] Eine noch bessere Implementierung \u00b6 Obwohl wir nun in Shape das Interface Comparable implementieren, geben wir die Verantwortung der Implementierung der Methode compareTo() an die konkreten Klassen Rectangle und Circle weiter. Es stellt sich die Frage, ob sich die compareTo() -Methode nicht bereits in Shape implementieren lie\u00dfe. Die Antwort auf diese Frage sollte ja lauten, denn ansonsten sollten wir das Interface gar nicht bereits durch die abstrakte Klasse Shape implementieren lassen. Wir haben in Shape gen\u00fcgend Informationen, um die compareTo() -Methode zu implementieren. Wir k\u00f6nnen daf\u00fcr entweder perimeter() oder area() verwenden. Wir entscheiden uns f\u00fcr die Verwendung von area() : Shape.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public abstract class Shape implements Comparable < Shape > { public abstract double perimeter (); public abstract double area (); @Override public int compareTo ( Shape o ) { if ( this . area () > o . area ()) return 1 ; else if ( this . area () < o . area ()) return - 1 ; else return 0 ; // this.area() == o.area() } } In abstrakten Klassen m\u00fcssen nicht, im Gegensatz zu Interfaces, alle Methoden abstrakt sein. Es k\u00f6nnen auch Methoden bereits implementiert werden. Diese Methoden m\u00fcssen dann nicht mehr in den Klassen implementiert werden, die von der abstrakten Klasse erben. Die Klassen Rectangle und Circle ben\u00f6tigen also keine eigene Implementierung der compareTo() -Methode mehr: Rectangle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public class Rectangle extends Shape { private int width , height ; public Rectangle ( int width , int height ) { this . width = width ; this . height = height ; } @Override public double perimeter () { return ( 2.0 * ( this . width + this . height )); } @Override public double area () { return ( this . width * this . height ); } @Override public String toString () { String s = String . format ( \"[ %2d x %2d = %6.2f ] \" , this . width , this . height , this . area ()); return s ; } } Circle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 public class Circle extends Shape { private double radius ; public Circle ( double radius ) { this . radius = radius ; } @Override public double perimeter () { return Math . PI * 2.0 * this . radius ; } @Override public double area () { return Math . PI * this . radius * this . radius ; } @Override public String toString () { String s = String . format ( \"(radius: %.2f -> area: %.2f ] \" , this . radius , this . area ()); return s ; } } Wir haben ausgenutzt, dass in der Klasse Shape bereits gen\u00fcgend Informationen vorliegen, um die Methode compareTo() korrekt f\u00fcr alle Klassen zu implementieren, die von Shape erben. Diese Methode muss dann von diesen konkreten Klassen nicht mehr implementiert werden. Wir vermeiden so doppelten Code. Die testklasseShape bleibt unver\u00e4ndert f\u00fcr alle abgeleiteten Klassen aus Shape anwendbar.","title":"Interfaces"},{"location":"interfaces/#interfaces","text":"Interfaces sind auch abstrakte Klassen. Interfaces enthalten ausschlie\u00dflich abstrakte Methoden (keine Methode darf implementiert sein). Interfaces beschreiben Schnittstellen . F\u00fcr Interfaces wird nicht das Schl\u00fcsselwort class , sondern interface verwendet. Klassen erben nicht von Interfaces, sondern implementieren sie. Deshalb wird auch nicht das Schl\u00fcsselwort extends , sondern das Schl\u00fcsselwort implements verwendet. W\u00e4hrend in Java nur von genau einer Klasse geerbt werden kann (also auch nur von genau einer abstrakten Klasse), kann eine Klasse beliebig viele Interfaces implementieren. Interfaces sind automatisch abstract , d.h. das Schl\u00fcsselwort abstract muss nicht angegeben werden. Auch die Methoden in Interfaces m\u00fcssen nicht als abstrakt gekennzeichnet werden. Interfaces k\u00f6nnen, wie abstrakte Klassen auch, als Typen verwendet werden. Abtrakte Klasse Interface k\u00f6nnen abstrakte und nicht-abstrakte (also implementierte) Methoden haben k\u00f6nnen nur abstrakte Methoden beinhalten es kann nur von einer (abstrakten) Klasse geerbt werden (Schl\u00fcsselwort extends ) es k\u00f6nnen beliebig viele Interfaces implementiert werden (Schl\u00fcsselwort implemenets ), mehrere Interfaces durch Komma getrennt abstrakte Klassen k\u00f6nnen selbst Interfaces implementieren Interfaces k\u00f6nnen keine abstrakten Klassen implementieren (alle Methoden m\u00fcssen ja abstrakt sein) das Schl\u00fcsselwort abstract deklariert eine abstrakte Klasse (und eine abstrakte Methode) das Schl\u00fcsselwort interface deklariert ein Interface eine abstrakte Klasse kann von einer anderen abstrakten Klasse erben und mehrere Interfaces implementieren ein Interface kann nur von einem anderen Interface erben abtrakte Klassen k\u00f6nnen final Variablen (Konstanten), nicht-finale Variablen, statische und nicht-statische Variablen als Eigenschaften beinhalten Interfaces k\u00f6nnen nur statische Konstanten ( static final ) als Eigenschaften beinhalten die Eigenschaften einer abstrakten Klasse k\u00f6nnen private , protected , default und public sein in Interfaces sind alle Eigenschaften public Bsp.: public abstract class Shape{ public abstract void draw(); } Bsp.: public interface Drawable{ void draw(); }","title":"Interfaces"},{"location":"interfaces/#das-interface-comparable","text":"Ehe wir uns ein eigenes Interface schreiben, schauen wir uns zun\u00e4chst die Verwendung eines bereits existierenden Interfaces an. Es handelt sich um das Interface Comparable aus dem java.lang -Paket. Wenn Sie sich die Java-Dokumentation dieses Interfaces einmal anschauen, dann sehen Sie, dass es von sehr vielen Klassen implementiert wird. Dieses Interface enth\u00e4lt genau eine (nat\u00fcrlich abstrakte) Methode compareTo() . Diese Methode kennen wir auch schon, denn wir haben sie betrachtet, als wir in Prog1 Strings kennengelernt haben. Die Methode this.compareTo(Object obj) wird verwendet, um zu vergleichen, ob this gr\u00f6\u00dfer, kleiner oder gleich obj ist. Das bedeutet, dass wir compareTo() in unserer Klasse implementieren sollten, wenn wir die Objekte unserer Klasse der Gr\u00f6\u00dfe nach ordnen wollen, wenn wir also erm\u00f6glichen wollen, dass die Objekte der Klasse sortiert werden k\u00f6nnen. Die Methode this.compareTo(Object obj) gibt ein int zur\u00fcck, f\u00fcr dessen Wert Folgendes gelten soll: ist der zur\u00fcckgegebene int -Wert positiv ( > 0 ), dann ist this gr\u00f6\u00dfer als obj , ist der zur\u00fcckgegebene int -Wert negativ ( < 0 ), dann ist this kleiner als obj , ist der zur\u00fcckgegebene int -Wert 0 , dann ist this gleich obj . Angenommen, wir wollen f\u00fcr die folgende Klasse Rectangle (aus dem Abschnitt Abstrakte Klassen ) festlegen, dass die Rechtecke der Gr\u00f6\u00dfe nach geordnet werden k\u00f6nnen. Gegeben ist also zun\u00e4chst folgende Klasse (wir verwenden hier auch Shape aus Abstrakte Klassen ): 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 public class Rectangle extends Shape { private int width , height ; public Rectangle ( int width , int height ) { this . width = width ; this . height = height ; } @Override public double perimeter () { return ( 2.0 * ( this . width + this . height )); } @Override public double area () { return ( this . width * this . height ); } } Die Klasse Rectangle erbt also von der abstrakten Klasse Shape und muss deshalb die Methoden perimeter() und area() implementieren. Nun geben wir an, dass Rectangle auch das Interface Comparable implementieren soll. Dazu erg\u00e4nzen wir die erste Zeile um implements Comparable , d.h. die Klassendeklaration sieht jetzt so aus: 1 2 public class Rectangle extends Shape implements Comparable { Wenn Sie das hinzuf\u00fcgen, stellen wir fest, dass ein Fehler erzeugt wird (die Klasse l\u00e4sst sich nicht compilieren). Die Fehlerausgabe besagt: The type Rectangle must implement the inherited abstract method Comparable.compareTo(Object) . Es werden zwei QuickFixes angeboten, entweder Add unimplemented methods oder Make type Rectangle abstract . Letzteres wollen wir aber nicht ( Rectangle soll nicht zu einer abstrakten Klasse gemacht werden). Also w\u00e4hlen wir Add unimplemented methods . Eclipse f\u00fcgt uns die compareTo() -Methode in den Code ein: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 public class Rectangle extends Shape implements Comparable { private int width , height ; public Rectangle ( int width , int height ) { this . width = width ; this . height = height ; } @Override public double perimeter () { return ( 2.0 * ( this . width + this . height )); } @Override public double area () { return ( this . width * this . height ); } @Override public int compareTo ( Object o ) { // TODO Auto-generated method stub return 0 ; } } Jetzt l\u00e4sst sich der Code bereits compilieren, wir erhalten aber noch eine Warnung: Comparable is a raw type. References to generic type Comparable<T> should be parameterized Diese Warnung besagt, dass wir, wie wir das von Collections bereits kennen, auch das Interface Comparable typisieren sollen. Das wollen wir auch tun, denn wir implementieren dieses Interface hier f\u00fcr unsere Klasse Rectangle . Wir typisieren deshalb Comparable mit Rectangle : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 public class Rectangle extends Shape implements Comparable < Rectangle > { private int width , height ; public Rectangle ( int width , int height ) { this . width = width ; this . height = height ; } @Override public double perimeter () { return ( 2.0 * ( this . width + this . height )); } @Override public double area () { return ( this . width * this . height ); } @Override public int compareTo ( Object o ) { // TODO Auto-generated method stub return 0 ; } } Interssanterweise ist nun zwar unsere Warnung weg, aber daf\u00fcr erhalten wir erneut einen Fehler: The type Rectangle must implement the inherited abstract method Comparable<Rectangle>.compareTo ( Rectangle ) Dadurch, dass wir Comparable mit Rectangle typisieren (was korrekt ist), wird nun verlangt, dass wir nicht mehr die Methode @Override public int compareTo ( Object o ) { // TODO Auto-generated method stub return 0 ; } implementieren, sondern die Methode @Override public int compareTo ( Rectangle o ) { // TODO Auto-generated method stub return 0 ; } Der Typ des Parameters hat sich durch unsere Typisierung also ge\u00e4ndert. Das ist gut, denn dann m\u00fcssen wir nicht mehr, wie z.B. bei equals(Object o) , pr\u00fcfen, ob es sich bei dem \u00fcbergebenen Objekt tats\u00e4chlich um ein Rectangle handelt. Wir \u00e4ndern also den Parametertyp in compareTo() : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 public class Rectangle extends Shape implements Comparable < Rectangle > { private int width , height ; public Rectangle ( int width , int height ) { this . width = width ; this . height = height ; } @Override public double perimeter () { return ( 2.0 * ( this . width + this . height )); } @Override public double area () { return ( this . width * this . height ); } @Override public int compareTo ( Rectangle o ) { // TODO Auto-generated method stub return 0 ; } } In Zukunft typisieren wir das Comparable -Interface noch bevor wir Add unimplemented methods w\u00e4hlen. Wir typisieren es stets mit der Klasse, in der wir das Interface implementieren. F\u00fcr die Implementierung m\u00fcssen wir uns nun \u00fcberlegen, wann ein Rectangle -Objekt gr\u00f6\u00dfer (kleiner/gleich) sein soll, als ein anderes. Da compareTo() ein int zur\u00fcckgibt, k\u00f6nnten wir z.B. die Summen von height und width verwenden: 23 24 25 26 27 @Override public int compareTo ( Rectangle o ) { int diff = ( this . height + this . width ) - ( o . height + o . width ); return diff ; } Wenn die Summe von height und width von this gr\u00f6\u00dfer ist, als von o , dann geben wir eine positive int -Zahl zur\u00fcck, wenn sie kleiner ist, dann eine negative int -Zahl und wenn sie gleich sind, dann 0 . Damit entsprechen wir den Vorgaben von compareTo() .","title":"Das Interface Comparable"},{"location":"interfaces/#laufzeittypen-eines-rectangle-objektes","text":"Ein Rectangle -Objekt ist nicht nur vom Laufzeittyp Rectangle , sondern auch von Laufzaittyp Shape , wegen public class Rectangle extends Shape , vom Laufzeittyp Comparable , wegen public class Rectangle implements Comparable und vom Laufzeittyp Object , weil das immer so ist, weil jede Klasse implizit von Object erbt. Wir k\u00f6nnten nun also in jeder beliebigen Klasse eine Sortiermethode haben, z.B.: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public static void sortieren ( Comparable [] unsorted ) { for ( int bubble = 1 ; bubble < unsorted . length ; bubble ++ ) { for ( int index = 0 ; index < unsorted . length - bubble ; index ++ ) { if ( unsorted [ index ] . compareTo ( unsorted [ index + 1 ] ) > 0 ) { Comparable tmp = unsorted [ index ] ; unsorted [ index ] = unsorted [ index + 1 ] ; unsorted [ index + 1 ] = tmp ; } } } } Die Methode implementiert Bubble-Sort. In Zeile 7 verwenden wir die compareTo() -Methode. Das geht genau deshalb, weil klar ist, dass ein Objekt, das (auch) vom Typ Comparable ist, diese Methode auf jeden Fall als Eigenschaft besitzt. Wenn wir nun in der Klasse, in der die Methode sortieren() implmentiert ist, folgende main() -Methode haben: public static void main ( String [] args ) { Rectangle [] rectArr = new Rectangle [ 6 ] ; rectArr [ 0 ] = new Rectangle ( 9 , 13 ); rectArr [ 1 ] = new Rectangle ( 4 , 17 ); rectArr [ 2 ] = new Rectangle ( 12 , 5 ); rectArr [ 3 ] = new Rectangle ( 8 , 9 ); rectArr [ 4 ] = new Rectangle ( 10 , 11 ); rectArr [ 5 ] = new Rectangle ( 5 , 15 ); System . out . printf ( \"%n%n------------------------ unsortiert --------------------------%n%n\" ); for ( Rectangle r : rectArr ) { System . out . println ( r . toString ()); } System . out . printf ( \"%n%n------------------------- sortiert ---------------------------%n%n\" ); sortieren ( rectArr ); for ( Rectangle r : rectArr ) { System . out . println ( r . toString ()); } } dann erhalten wir folgende Ausgabe: ------------------------ unsortiert -------------------------- [ 9 x 13 = 117 ,00 ] [ 4 x 17 = 68 ,00 ] [ 12 x 5 = 60 ,00 ] [ 8 x 9 = 72 ,00 ] [ 10 x 11 = 110 ,00 ] [ 5 x 15 = 75 ,00 ] ------------------------- sortiert --------------------------- [ 12 x 5 = 60 ,00 ] [ 8 x 9 = 72 ,00 ] [ 5 x 15 = 75 ,00 ] [ 4 x 17 = 68 ,00 ] [ 10 x 11 = 110 ,00 ] [ 9 x 13 = 117 ,00 ] f\u00fcr den Fall, dass wir in unserer Klasse Rectangle auch die toString() -Methode wie folgt implementiert haben: @Override public String toString () { String s = String . format ( \"[ %2d x %2d = %6.2f ] \" , this . width , this . height , this . area ()); return s ; } Success Wir haben f\u00fcr unsere Klasse Rectangle das Interface Comparable implementiert. Das bedeutet, dass wir in Rectangle die Methode compareTo() so implementiert haben, dass Rectangle -Objekte der Gr\u00f6\u00dfe nach sortiert werden k\u00f6nnen. Wir haben also eine Ordnung \u00fcber Rectangle -Objekte definiert. Nach \"au\u00dfen\" ist sichtbar, dass wir eine solche Ordnung implementiert haben, dass Rectangle -Objekte also sortierbar sind, weil sie (auch) vom Typ Comparable sind. F\u00fcr alle Objekte, die in Java existieren, wissen wir, dass sie sortierbar sind, sobald sie auch vom Typ Comparable sind. Comparable stellt also eine Schnittstelle zur Sortierbarkeit dar. Wenn wir eine eigene Klasse schreiben und wir eine Ordnung \u00fcber die Objekte dieser Klasse definieren k\u00f6nnen, sollten wir das Interface Comparable implementieren, denn dadurch geben wir nach \"au\u00dfen\" an, das sich die Objekte der Klasse sortieren ( ordnen ) lassen.","title":"Laufzeittypen eines Rectangle-Objektes"},{"location":"interfaces/#zwischenfazit","text":"Wir haben nun schon mehrere Methoden kennengelernt, die wir f\u00fcr eigene Klassen implementieren sollten. Die toString() -Methode erben wir von Objects . Wir sollten toString() f\u00fcr \"unsere\" Klassen \u00fcberschreiben, damit wir eine textuelle Repr\u00e4sentation unserer Objekte haben. toString() wird implizit angewendet, sobald eine String -Repr\u00e4sentation erforderlich ist, z.B. ist System.out.println(refVariable); das Gleiche wie System.out.println(refVariable.toString()); . Die equals() -Methode erben wir ebenfalls von Objects . Wir sollten equals() f\u00fcr \"unsere\" Klassen implementieren, um zu definieren, wann Objekte \"unserer\" Klasse gleich sind. Hierbei ist wichtig, zu beachten, dass refVar1 == refVar2 ein reiner Referenzvergleich ist, der nichts dar\u00fcber aussagt, ob die Objekte gleich sind, sondern nur ein true ergibt, wenn beide Variablen auf dasselbe Objekt zeigen. Die Gleichheit von Objekten wird mittels equals() -Methode definiert. Die hashCode() -Methode erben wir ebenfalls von Objects . Wir sollten hashCode() genau dann implementieren, wenn wir equals() implementieren. Wichtig ist, dass zwei Objekte den gleichen Hash-Code haben ( hashCode() liefert den gleichen int -Wert zur\u00fcck), wenn die beiden Objekte laut equals() gleich sind. Gut ist dar\u00fcber hinaus (aber nicht Bedingung), dass zwei Objekte einen unterschiedlichen Hash-Code haben, wenn sie laut equals() -Methode nicht gleich sind ( equals() liefert false zur\u00fcck). Der Hash-Code wird bei Hash-basierten Datentypen, wie z.B. Collections verwendet, um diese einzusortieren. Die Methode compareTo() muss implementiert werden, wenn wir das Interface Comparable implementieren. Mithilfe von compareTo() legen wir eine Ordnung \u00fcber die Objekte der Klasse fest, d.h. wir geben an, wann ein Objekt gr\u00f6\u00dfer/kleiner/gleich einem anderen Objekt der gleichen Klasse ist. Dadurch, dass wir das Comparable -Interface implementieren, zeigen wir nach \"au\u00dfen\", dass die Objekte unserer Klasse sortierbar sind. jetzt kommt noch ein Abschnitt f\u00fcr \"Fortgeschrittene\" - kann auch gerne ignoriert werden, aber vielleicht interessiert es ja einige von Ihnen","title":"Zwischenfazit"},{"location":"interfaces/#eine-bessere-implementierung","text":"Wir haben bereits bei der Implementierung der Klasse Rectangle gesehen, dass wir das Interface Comparable bei der Implementierung von Rectangle typisieren sollten. Das w\u00e4re f\u00fcr eine wirklich korrekte Implementierung der Methode sortieren() ebenfalls angebracht. Dann w\u00fcrden wir in dieser Methode Comparable mit Rectangle typisieren: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public static void sortieren ( Comparable < Rectangle >[] unsorted ) { for ( int bubble = 1 ; bubble < unsorted . length ; bubble ++ ) { for ( int index = 0 ; index < unsorted . length - bubble ; index ++ ) { if ( unsorted [ index ] . compareTo (( Rectangle ) unsorted [ index + 1 ] ) > 0 ) { Comparable < Rectangle > tmp = unsorted [ index ] ; unsorted [ index ] = unsorted [ index + 1 ] ; unsorted [ index + 1 ] = tmp ; } } } } Wenn wir also den Typ Comparable verwenden, dann erg\u00e4nzen wir ihn um die Typisierung <Rectangle> (Zeilen 1 und 9 ). Das f\u00fchrt allerdings dazu, dass wir dann auch in Zeile 7 den Typ von unsorted[index+1] nach Rectangle konvertieren m\u00fcssen ( (Rectangle) unsorted[index+1] ). Damit verlieren wir aber unsere allgemeine Anwendbarkeit der Methode sortieren() f\u00fcr alle Klassen, die Comparable implementiert haben. Insbesondere w\u00fcrde die Methode dann nicht mehr f\u00fcr z.B. die Klasse Circle anwendbar sein: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 public class Circle extends Shape implements Comparable < Circle > { private double radius ; public Circle ( double radius ) { this . radius = radius ; } @Override public double perimeter () { return Math . PI * 2.0 * this . radius ; } @Override public double area () { return Math . PI * this . radius * this . radius ; } @Override public int compareTo ( Circle o ) { if ( this . radius > o . radius ) return 1 ; else if ( this . radius < o . radius ) return - 1 ; else return 0 ; // this.radius == o.radius } @Override public String toString () { String s = String . format ( \"(radius: %.2f -> area: %.2f ] \" , this . radius , this . area ()); return s ; } } Wenn wir nun versuchen w\u00fcrden, die sortieren() -Methode auf ein Circle[] anzuwenden, lie\u00dfe sich das Programm gar nicht compilieren: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 public static void main ( String [] args ) { Circle [] circArr = new Circle [ 6 ] ; circArr [ 0 ] = new Circle ( 5.0 ); circArr [ 1 ] = new Circle ( 5.5 ); circArr [ 2 ] = new Circle ( 4.0 ); circArr [ 3 ] = new Circle ( 2.5 ); circArr [ 4 ] = new Circle ( 7.0 ); circArr [ 5 ] = new Circle ( 1.0 ); System . out . printf ( \"%n%n------------------------ unsortiert --------------------------%n%n\" ); for ( Circle c : circArr ) { System . out . println ( c . toString ()); } System . out . printf ( \"%n%n------------------------- sortiert ---------------------------%n%n\" ); // sortieren(circArr); // Fehler for ( Circle c : circArr ) { System . out . println ( c . toString ()); } } Deshalb w\u00e4re es eine bessere Implementierung , wenn wir das Interface Comparable nicht in den konkreten Klassen Rectangle und Circle (und jede weitere Klasse, die wir auf der Basis von Shape erstellen), sondern gleich in der Abstrakten Klasse Shape : public abstract class Shape implements Comparable < Shape > { public abstract double perimeter (); public abstract double area (); } Da Shape eine abstrakte Klasse ist, muss die Methode compareTo() nicht in Shape implementiert werden. Diese Methode w\u00fcrde nun abstract an alle Klassen vererbt, die von Shape erben: Rectangle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public class Rectangle extends Shape { private int width , height ; public Rectangle ( int width , int height ) { this . width = width ; this . height = height ; } @Override public double perimeter () { return ( 2.0 * ( this . width + this . height )); } @Override public double area () { return ( this . width * this . height ); } @Override public int compareTo ( Shape o ) { Rectangle r = ( Rectangle ) o ; int diff = ( this . height + this . width ) - ( r . height + r . width ); return diff ; } @Override public String toString () { String s = String . format ( \"[ %2d x %2d = %6.2f ] \" , this . width , this . height , this . area ()); return s ; } } Circle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 public class Circle extends Shape { private double radius ; public Circle ( double radius ) { this . radius = radius ; } @Override public double perimeter () { return Math . PI * 2.0 * this . radius ; } @Override public double area () { return Math . PI * this . radius * this . radius ; } @Override public int compareTo ( Shape o ) { Circle c = ( Circle ) o ; if ( this . radius > c . radius ) return 1 ; else if ( this . radius < c . radius ) return - 1 ; else return 0 ; // this.radius == c.radius } @Override public String toString () { String s = String . format ( \"(radius: %.2f -> area: %.2f ] \" , this . radius , this . area ()); return s ; } } Beachten Sie, dass die Klassen Rectangle und Circle jetzt nur noch von Shape erben, aber nicht mehr das Interface Comparable implementieren (jeweils Zeile 1 ). Es darf nicht mehrmals von einer Klasse implementiert werden und Shape implementiert es ja bereits. Da Shape diese Interface aber \"implementiert\", wird die Methode compareTo() als abstrakte Methode an die Klassen Rectangle und Circle vererbt. Die Methode muss also von diesen Klassen implementiert werden. Nun wird sie aber mit dem Parametertyp Shape vererbt (Zeile 24 bzw. 23 ). Dieser Parameter muss deshalb zun\u00e4chst innerhalb der Methode compareTo() konvertiert werden (Zeile 25 bzw. 26 ). Die allgemeine Anwendung der Methode sortieren() in der Testklasse gelingt nun aber: TestklasseShape.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 public class TestklasseShape { public static void sortieren ( Comparable < Shape >[] unsorted ) { for ( int bubble = 1 ; bubble < unsorted . length ; bubble ++ ) { for ( int index = 0 ; index < unsorted . length - bubble ; index ++ ) { if ( unsorted [ index ] . compareTo (( Shape ) unsorted [ index + 1 ] ) > 0 ) { Comparable < Shape > tmp = unsorted [ index ] ; unsorted [ index ] = unsorted [ index + 1 ] ; unsorted [ index + 1 ] = tmp ; } } } } public static void main ( String [] args ) { Rectangle [] rectArr = new Rectangle [ 6 ] ; rectArr [ 0 ] = new Rectangle ( 9 , 13 ); rectArr [ 1 ] = new Rectangle ( 4 , 17 ); rectArr [ 2 ] = new Rectangle ( 12 , 5 ); rectArr [ 3 ] = new Rectangle ( 8 , 9 ); rectArr [ 4 ] = new Rectangle ( 10 , 11 ); rectArr [ 5 ] = new Rectangle ( 5 , 15 ); System . out . printf ( \"%n%n------------------------ unsortiert --------------------------%n%n\" ); for ( Rectangle r : rectArr ) { System . out . println ( r . toString ()); } System . out . printf ( \"%n%n------------------------- sortiert ---------------------------%n%n\" ); sortieren ( rectArr ); for ( Rectangle r : rectArr ) { System . out . println ( r . toString ()); } Circle [] circArr = new Circle [ 6 ] ; circArr [ 0 ] = new Circle ( 5.0 ); circArr [ 1 ] = new Circle ( 5.5 ); circArr [ 2 ] = new Circle ( 4.0 ); circArr [ 3 ] = new Circle ( 2.5 ); circArr [ 4 ] = new Circle ( 7.0 ); circArr [ 5 ] = new Circle ( 1.0 ); System . out . printf ( \"%n%n------------------------ unsortiert --------------------------%n%n\" ); for ( Circle c : circArr ) { System . out . println ( c . toString ()); } System . out . printf ( \"%n%n------------------------- sortiert ---------------------------%n%n\" ); sortieren ( circArr ); for ( Circle c : circArr ) { System . out . println ( c . toString ()); } } } Wir k\u00f6nnen nun alle Objekte sortieren lassen, die auf der Klasse Shape basieren. ------------------------ unsortiert -------------------------- [ 9 x 13 = 117 ,00 ] [ 4 x 17 = 68 ,00 ] [ 12 x 5 = 60 ,00 ] [ 8 x 9 = 72 ,00 ] [ 10 x 11 = 110 ,00 ] [ 5 x 15 = 75 ,00 ] ------------------------- sortiert --------------------------- [ 12 x 5 = 60 ,00 ] [ 8 x 9 = 72 ,00 ] [ 5 x 15 = 75 ,00 ] [ 4 x 17 = 68 ,00 ] [ 10 x 11 = 110 ,00 ] [ 9 x 13 = 117 ,00 ] ------------------------ unsortiert -------------------------- ( radius: 5 ,00 -> area: 78 ,54 ] ( radius: 5 ,50 -> area: 95 ,03 ] ( radius: 4 ,00 -> area: 50 ,27 ] ( radius: 2 ,50 -> area: 19 ,63 ] ( radius: 7 ,00 -> area: 153 ,94 ] ( radius: 1 ,00 -> area: 3 ,14 ] ------------------------- sortiert --------------------------- ( radius: 1 ,00 -> area: 3 ,14 ] ( radius: 2 ,50 -> area: 19 ,63 ] ( radius: 4 ,00 -> area: 50 ,27 ] ( radius: 5 ,00 -> area: 78 ,54 ] ( radius: 5 ,50 -> area: 95 ,03 ] ( radius: 7 ,00 -> area: 153 ,94 ]","title":"Eine bessere Implementierung"},{"location":"interfaces/#eine-noch-bessere-implementierung","text":"Obwohl wir nun in Shape das Interface Comparable implementieren, geben wir die Verantwortung der Implementierung der Methode compareTo() an die konkreten Klassen Rectangle und Circle weiter. Es stellt sich die Frage, ob sich die compareTo() -Methode nicht bereits in Shape implementieren lie\u00dfe. Die Antwort auf diese Frage sollte ja lauten, denn ansonsten sollten wir das Interface gar nicht bereits durch die abstrakte Klasse Shape implementieren lassen. Wir haben in Shape gen\u00fcgend Informationen, um die compareTo() -Methode zu implementieren. Wir k\u00f6nnen daf\u00fcr entweder perimeter() oder area() verwenden. Wir entscheiden uns f\u00fcr die Verwendung von area() : Shape.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public abstract class Shape implements Comparable < Shape > { public abstract double perimeter (); public abstract double area (); @Override public int compareTo ( Shape o ) { if ( this . area () > o . area ()) return 1 ; else if ( this . area () < o . area ()) return - 1 ; else return 0 ; // this.area() == o.area() } } In abstrakten Klassen m\u00fcssen nicht, im Gegensatz zu Interfaces, alle Methoden abstrakt sein. Es k\u00f6nnen auch Methoden bereits implementiert werden. Diese Methoden m\u00fcssen dann nicht mehr in den Klassen implementiert werden, die von der abstrakten Klasse erben. Die Klassen Rectangle und Circle ben\u00f6tigen also keine eigene Implementierung der compareTo() -Methode mehr: Rectangle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 public class Rectangle extends Shape { private int width , height ; public Rectangle ( int width , int height ) { this . width = width ; this . height = height ; } @Override public double perimeter () { return ( 2.0 * ( this . width + this . height )); } @Override public double area () { return ( this . width * this . height ); } @Override public String toString () { String s = String . format ( \"[ %2d x %2d = %6.2f ] \" , this . width , this . height , this . area ()); return s ; } } Circle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 public class Circle extends Shape { private double radius ; public Circle ( double radius ) { this . radius = radius ; } @Override public double perimeter () { return Math . PI * 2.0 * this . radius ; } @Override public double area () { return Math . PI * this . radius * this . radius ; } @Override public String toString () { String s = String . format ( \"(radius: %.2f -> area: %.2f ] \" , this . radius , this . area ()); return s ; } } Wir haben ausgenutzt, dass in der Klasse Shape bereits gen\u00fcgend Informationen vorliegen, um die Methode compareTo() korrekt f\u00fcr alle Klassen zu implementieren, die von Shape erben. Diese Methode muss dann von diesen konkreten Klassen nicht mehr implementiert werden. Wir vermeiden so doppelten Code. Die testklasseShape bleibt unver\u00e4ndert f\u00fcr alle abgeleiteten Klassen aus Shape anwendbar.","title":"Eine noch bessere Implementierung"},{"location":"junit/","text":"JUnit-Tests \u00b6 Testen von Programmen ist wichtig. Ohne Testen ist es kaum m\u00f6glich, Fehler in Programmen zu entdecken. Bis jetzt haben wir unsere Programme immer durch reines Anwenden getestet, d.h. wir haben die implementierten Methoden aufgerufen und ihnen unterschiedliche Parameterwerte \u00fcbergeben. Wir werden das jetzt \u00e4ndern und nutzen daf\u00fcr JUnit . Allgemeines zum (Unit-)Testen \u00b6 Der ber\u00fchmte Informatiker Edsger W. Dijkstra hat \u00fcber das Testen gesagt: Durch Testen kann man stets nur die Anwesenheit, nie aber die Abwesenheit von Fehlern beweisen Das bedeutet, wir k\u00f6nnen durch das Testen Fehler finden. Wenn wir aber keine finden, dann wissen wir nicht, ob das Programm dann auch keine Fehler mehr enth\u00e4lt. Es ist leider nicht m\u00f6glich, grunds\u00e4tzlich die Fehlerfreiheit von Programmen zu pr\u00fcfen. Aber das Testen stellt ein wichtiges Werkzeug dar, um Fehler zu entdecken. Es gibt verschiedene Arten von Tests: In der Abbildung erkennen wir, dass die Unit-tests, die wir hier kennenlernen wollen, am besten automatisierbar, am h\u00e4ufigsten und am einfachsten sind. Mit Unit-Tests k\u00f6nnen wir Methoden und Klassen testen, wobei wir die Tests implementieren. Die Idee ist, dass wir funktionale Einzelteile eines Programms separat und isoliert vom Rest auf ihre Korrektheit hin \u00fcberpr\u00fcfen. Wir versuchen extra, so wenig wie m\u00f6glich die Effekte anderer Funktionalit\u00e4ten bzw. Komponenten in die Tests einflie\u00dfen zu lassen. Das erfolgt dann in den Komponenten- bzw. Integrationstests. Das hat zwei Vorteile: einerseits ist der zu pr\u00fcfende Funktionsumfang \u00fcberschaubar und andererseits k\u00f6nnen diese Unit-Tests leicht automatisiert ausgef\u00fchrt werden. Es gibt, wie bereits eingangs erw\u00e4hnt, keine Garantie von Fehlerfreiheit. Ein Nachteil der Unit-Tests besteht darin, dass sie schwierig f\u00fcr Methoden zu gestalten sind, in denen es Abh\u00e4ngigkeiten von der Laufzeitumgebung oder anderen Komponenten gibt. Test-Driven Development \u00b6 Unit Tests k\u00f6nnen entweder nach Erstellung des Programmcodes geschrieben werden, um diesen nachtr\u00e4glich zu testen oder vor Erstellung des Programmcodes. Wenn wir die Tests vor der Erstellung des Programmcodes erstellen, dann beschreiben wir mit den Tests die Anforderungen an den zu erstellenden Code. Wir werden hier lernen, wie die Erstellung der Tests und des Programmcodes Hand-in_Hand erfolgen k\u00f6nnen. Diese Vorgehensweise nennt sich Test-driven developement (TDD) . Wir werden, wie \u00fcblich, TDD anhand eines Beispiels einf\u00fchren. Unser Vorgehen l\u00e4sst sich wie folgt beschreiben: Wir schreiben einen Test, der die Anforderung f\u00fcr einen m\u00f6glichst kleinen iterativen Schritt bei der Erstellung des Programmcodes beschreibt. Wir schreiben m\u00f6glichst wenig Programmcode, so dass der Test genau erf\u00fcllt wird. Wir gehen wieder zu 1. und beschreiben den n\u00e4chsten m\u00f6glichst kleinen iterativen Schritt durch einen Test. Wir wiederholen 2. f\u00fcr den neuen Test usw. Die folgende Abbildung visualisiert das Vorgehen. Ausgangspunkt ist immer ein Test. Wir implementieren solange, bis dieser und alle vorher implementierten Tests erfolgreich durchlaufen werden. Dann schreiben wir einen weiteren Test und implementieren wieder so lange, bis dieser und alle vorher geschreibenen Tests erfolgreich durchlaufen werden. Dieses Vorgehen wird so lange wiederholt, so lange wir weitere Testf\u00e4lle hinzuf\u00fcgen k\u00f6nnen, die jeweils neue Anforderungen beschreiben. Zur Implementierung des Codes geh\u00f6rt auch das Refactoring, d.h. wir verbessern bisher geschriebenen Code durch neue Tests. TDD f\u00fcr einen Time-Zeit-Umrechner \u00b6 Angenommen, wir wollen einen einfachen Konverter erstellen, der eine Uhrzeit im 12-Stunden-Zeitsystem (mit am und pm ) in eine 24-Stundendarstellung umwandelt (von String nach String ). Im Web findet man einige Beispiel, z.B. hier . Dazu erstellen wir uns zun\u00e4chst eine Klasse UmrechnungTimeZeit.java , die die Methode convert() enth\u00e4lt. Diese Methode erwartet einen String mit einer 12-Stunden-Zeit time und gibt einen String zur\u00fcck, der die time im 24-Stundenformat darstellt. UmrechnungTimeZeit.java public class UmrechnungTimeZeit { public String convert ( String time ) { return \"\" ; } } Das ist unsere Klasse in der Augangssituation. Bevor wir anfangen, zu implemntieren, wollen wir uns zun\u00e4chst einen ersten einfachen Test schreiben, der uns eine erste Anforderung (einen ersten Testfall) beschreibt. Dazu w\u00e4hlen wir in Eclipse File --> New --> JUnit Test Case . Es erscheint folgendes Fenster: Wir w\u00e4hlen New JUnit Jupiter test aus und benennen unsere Testklasse TestUmrechnungTimeZeit und geben an, dass die Class under test die Klasse UmrechnungTimeZeit ist (Auswahl durch Browse... ). Wenn wir dann auf Finish klicken, erscheint: Das best\u00e4tigen wir mit OK . Es wird die TestUmrechnungTimeZeit.java erstellt, die so aussieht: TestUmrechnungTimeZeit.java import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.Test ; class TestUmrechnungTimeZeit { @Test void test () { fail ( \"Not yet implemented\" ); } } Sollten Fehler beim Import der junit.jupiter -Pakete angezeigt werden, dann m\u00fcssen Sie in Ihre module-info.java noch folgende Anweisung einf\u00fcgen: Einf\u00fcgen in die module-info.java requires org . junit . jupiter . api ; Eine JUnit-Testklasse \u00b6 Die Klasse TestUmrechnungTimeZeit.java ist eine JUnit-Testklasse. Eine JUnit-Testklasse enth\u00e4lt keine main() -Methode, ist aber ausf\u00fchrbar. Sie enth\u00e4lt stattdessen Methoden, die mit @Test annotiert sind. Diese @Test -Methoden enthalten Zusicherungen (sogenannte Assertions ). Mit diesen Assertions geben Sie das erwartete Ergebnis des Testfalls an. Assertions \u00b6 Es gibt unterschiedliche M\u00f6glichkeiten, das tats\u00e4chliche Ergebnis der Ausf\u00fchrung mit dem erwarteten Ergebnis zu vergleichen: Gleichheit, Ungleichheit, kleiner, gr\u00f6\u00dfer null , nicht null gleiche Objekte ( equals() ) Diese Vergleiche werden mittels Assertions durchgef\u00fchrt. Folgende Tabelle gibt einen \u00dcberblick \u00fcber einige der am meisten verwendeten Assertions an. Alle Assertions, die es gibt, finden Sie hier . Assertion Beschreibung fail(message) L\u00e4sst den Test scheitern (fail) mit Nachricht message . Wird genutzt, um zu \u00fcberpr\u00fcfen, ob Code unerreichbar ist oder bevor der Test implementiert ist. assertTrue(cond,m) \u00dcberpr\u00fcft, ob Bedingung cond wahr ist oder scheitert mit Nachricht m assertFalse(cond,m) \u00dcberpr\u00fcft, ob Bedingung cond false ist oder scheitert mit Nachricht m assertEquals(a,b,m) \u00dcberpr\u00fcft, ob Parameter a und b gleich sind oder scheitert mit Nachricht m assertArrayEquals(a,b,m) \u00dcberpr\u00fcft, ob Inhalte der Arrays a und b gleich sind oder scheitert mit Nachricht m assertNull(o,m) \u00dcberpr\u00fcft, ob Object o==null ist oder scheitert mit Nachricht m assertNotNull(o,m) \u00dcberpr\u00fcft, ob Object o!=null ist oder scheitert mit Nachricht m assertSame(o1,o2,m) \u00dcberpr\u00fcft, ob Objektreferenz o1==o2 ist oder scheitert mit Nachricht m assertNotSame(o1,o2,m) \u00dcberpr\u00fcft, ob Objektreferenz o1!=o2 ist oder scheitert mit Nachricht m Derzeit verwenden wir in unserer Testklasse nur die Assertion fail() . Diese steht aber nur daf\u00fcr, dass wir diesen Test noch implementieren m\u00fcssen. Das machen wir jetzt. Eine erste Testmethode f\u00fcr unser Beispiel \u00b6 Zun\u00e4chst einmal schauen wir uns an, wie wir unsere Testklasse ausf\u00fchren. Dazu w\u00e4hlen wir in Eclipse unter Run --> Run As ... --> JUnit Test . Oder Sie w\u00e4hlen gleich den mittleren der gezeigten drei Buttons . Dann erhalten Sie folgendes Bild: Auf der linken Seite sehen Sie im JUnit -Reiter einen roten Querbalken. Dieser zeigt an, dass ein Test fehlgeschlagen ist. Im Editor-Fenster wird der fehlgeschlagene Test rot markiert. Es ist klar, dass der Test fehlschl\u00e4gt, denn das bezweckt ja die Assertion fail() . Links unten sieht man den Failure trace . Dort ist in der ertsen Zeile die Fehlermeldung Not yet implemented zu sehen - das ist die Nachricht, die der fail() -Assertion \u00fcbergeben wurde. Wir implementieren nun die erste Testmethode. Dazu benennen wir die Methode test() um in testConvert1amTo1() . In unserem ersten Test wollen wir \u00fcberpr\u00fcfen, ob unsere Methode convert(String time) korrekt arbeitet, wenn ihr der String 1:00 am \u00fcbergeben wird. Die Idee ist nun die folgende: wir definieren unsere Testmethode so, dass wir angeben, welches Ergebnis wir erwarten, wenn der String 1:00 am \u00fcbergeben wird. Wir erwarten das Ergebnis 1:00 . Generell sollte eine Testmethode in der folgenden Form aufgebaut sein: given (preperation) : gibt die Voraussetzungen des Tests an, z.B. die Erzeugung eines Objektes; bei uns: die Erzeugung eines UmrechnungTimeZeit -Objektes, when (execution) : beschreibt, was und wie ausgef\u00fchrt werden soll; bei uns: die Ausf\u00fchrung der Methode convert() mit dem Parameterwert \"1:00 am\" , then (verification) : beschreibt, wie sich das Ergebnis der Ausf\u00fchrung in Bezug auf das erwartete Ergebnis verhalten soll; bei uns: assertEquals(tatsaechlichesErgebnis, \"1:00\") . Nach Umbenennung der Methode test() in TestUmrechnungTimeZeit.java in testConvert1amTo1(String time) und Implementierung dieser Methode sieht die Klasse TestUmrechnungTimeZeit.java nun so aus: TestUmrechnungTimeZeit.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.Test ; class TestUmrechnungTimeZeit { @Test void testConvert1amTo1 () { // preperation --> given UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // execution --> when String zeit = utz . convert ( \"1:00 am\" ); // verification --> then assertEquals ( zeit , \"1:00\" ); } } In der Testmethode erzeugen wir uns also zun\u00e4chst ein Objekt von UmrechnungTimeZeit , damit wir die Objektmethode convert() \u00fcberhaupt aufrufen k\u00f6nnen (Zeile 9 ). Dann rufen wir die convert() -Methode auf und \u00fcbergeben ihr den String \"1:00 am\" . Das Ergebnis der Methode wird in der Variablen zeit gespeichert (Zeile 12 ). Dann vergleichen wir das tats\u00e4chliche Ergebnis ( zeit ) mit dem erwarteten Ergebnis ( \"1:00\" ) und wollen, dass beide gleich sind ( assertEquals() ). Somit haben wir einen m\u00f6glichst kleinen iterativen Schritt hin zur fertigen Implementierung als Test beschrieben. Unsere n\u00e4chste Aufgabe ist nun, m\u00f6glichst wenig Programmcode zu schreiben, so dass der Test genau erf\u00fcllt wird. Diese Aufgabe erledigen wir auf ganz simple Weise, indem unsere convert() -Methode einfach den String \"1:00\" zur\u00fcckgibt. UmrechnungTimeZeit.java 1 2 3 4 5 6 7 8 public class UmrechnungTimeZeit { public String convert ( String time ) { return \"1:00\" ; } } Das erscheint uns auf den ersten Blick v\u00f6llig sinnlos - und das ist es nat\u00fcrlich irgendwie auch. Aber wir erinnern uns: wir wollen m\u00f6glichst wenig Programmcode schreiben, so dass der Test genau erf\u00fcllt wird. Und das machen wir hier. Wenn wir nun unsere Testklasse ausf\u00fchren, dann sehen wir: Auf der linken Seite ist nun ein gr\u00fcner Balken zu sehen, d.h. alle unsere Tests (bis jetzt haben wir nur einen) sind korrekt. Unsere Methode convert() arbeitet in Bezug auf unsere Tests korrekt. Nun f\u00fcgen wir einen zweiten Test hinzu. Dazu k\u00f6nnen wir die Methode testConvert1amTo1() einfach kopieren. Die neue Methode nennen wir testConvert1amTo1() , da wir nun testen wollen, ob unsere Methode auch den String \"2:00 am\" korrekt nach \"2:00\" umwandelt. Mit diesem Test beherzigen wir das Prinzip, den n\u00e4chsten m\u00f6glichst kleinen iterativen Schritt durch einen Test zu beschreiben. Dieser m\u00f6glichst kleine Schritt ist f\u00fcr uns der Schritt von \"1:00 am\" nach \"2:00 am\" . Die neue Testmethode sieht so aus: TestUmrechnungTimeZeit.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.Test ; class TestUmrechnungTimeZeit { @Test void testConvert1amTo1 () { // preperation --> given UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // execution --> when String zeit = utz . convert ( \"1:00 am\" ); // verification --> then assertEquals ( zeit , \"1:00\" ); } @Test void testConvert2amTo2 () { // preperation --> given UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // execution --> when String zeit = utz . convert ( \"2:00 am\" ); // verification --> then assertEquals ( zeit , \"2:00\" ); } } Wenn wir die Testklasse nun ausf\u00fchren, ohne die convert() -Methode zu \u00e4ndern, erhalten wir folgendes Bild: Der Balken im JUnit -Fenster ist rot. Darunter wird uns angegeben, dass der Testfall testConvert1amTo1() immer noch korrekt ist (gr\u00fcner Haken), aber der Testfall testConvert2amTo2() ist gescheitert (blaues Kreuz). Im Editorfenster ist rot unterlegt, welche Assertion gescheitert ist ( assertEquals(zeit, \"2:00\"); ). Wir brauchen nun also eine Idee, wie wir die convert() -Methode anpassen k\u00f6nnen, so dass beide Testf\u00e4lle korrekt ausgef\u00fchrt werden. Wir versuchen es mit der Idee, einfach die ersten vier Zeichen des \u00fcbergebenen Strings time zur\u00fcckzugeben: UmrechnungTimeZeit.java 1 2 3 4 5 6 7 8 public class UmrechnungTimeZeit { public String convert ( String time ) { return time . substring ( 0 , 4 ); } } Wenn wir nun unsere Testklasse ausf\u00fchren, dann sind beide Testf\u00e4lle korrekt. Auf diese Art und Weise entwickeln wir nach und nach eine Implementierung der convert() -Methode. Dazu f\u00fcgen wir nach und nach immer weitere Testf\u00e4lle unserer Testklasse hinzu. Mindestens noch f\u00fcr folgende F\u00e4lle: time erwartetes Ergebnis \"1:15 am\" \"1:15\" \"11:00 am\" \"11:00\" \"11:15 am\" \"11:15\" \"1:00 pm\" \"13:00\" \"2:00 pm\" \"14:00\" \"1:15 pm\" \"13:15\" \"11:00 pm\" \"23:00\" \"11:15 pm\" \"23:15\" \"12:00 am\" \"0:00\" \"12:01 am\" \"0:01\" \"12:00 pm\" \"12:00\" \"12:01 pm\" \"12:01\" \"12:00 noon\" \"12:00\" \"12:00 midnight\" \"0:00\" Das Auswahl der Testwerte ist ganz offensichtlich ein wichtiges Thema und bestimmt die Korrektheit der sp\u00e4teren Implementierung mit. Es ist wichtig, keinen Testfall zu vergessen. Leider gibt es daf\u00fcr keine formalen Regeln, sondern nur intuitive Vorgaben. Es wird immer versucht, \"Grenzwerte\" zu ermitteln, um wirklich alle Testf\u00e4lle abzudecken. Quellcode aus dem Video \u00b6 Im Video \u00fcber JUnit wurde folgender Quellcode erzeugt: UmrechnungTimeZeit.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 package videos.video4 ; import static org.junit.jupiter.api.Assertions.assertEquals ; import org.junit.jupiter.api.Test ; public class UmrechnungTimeZeit { public String convert ( String time ) { final int LAST_THREE_CHARS = 3 ; // \" pm\" or \" am\" if ( time . endsWith ( \"am\" )) { return time . substring ( 0 ,( time . length () - LAST_THREE_CHARS )); } else // ends with pm { final int DIFFERENCE_BETWEEN_H_TO_HH = 12 ; int hourInt = this . getHoursInt ( time ); hourInt += DIFFERENCE_BETWEEN_H_TO_HH ; String minutes = this . getMinutesStr ( time ); String zeit = hourInt + \":\" + minutes ; return zeit ; } } String getHoursStr ( String time ) { String [] allStr = time . split ( \":\" ); return allStr [ 0 ] ; } String getMinutesStr ( String time ) { final int FIRST_TWO_CHARS = 2 ; String [] allStr = time . split ( \":\" ); String afterDouble = allStr [ 1 ] ; String minutesStr = afterDouble . substring ( 0 , FIRST_TWO_CHARS ); return minutesStr ; } int getHoursInt ( String time ) { String hoursStr = this . getHoursStr ( time ); int hoursInt = Integer . valueOf ( hoursStr ); return hoursInt ; } } UmrechnungTimeZeit.javapackage videos.video4 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.Test ; class UmrechnungTimeZeitTest { @Test void testConvert1amTo1 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"1:00 am\" ); // than (verification) assertEquals ( zeit , \"1:00\" , \"1:00 am to 1:00 not working\" ); } @Test void testConvert2amTo2 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"2:00 am\" ); // than (verification) assertEquals ( zeit , \"2:00\" , \"2:00 am to 2:00 not working\" ); } @Test void testConvert9amTo9 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"9:00 am\" ); // than (verification) assertEquals ( \"9:00\" , zeit ); } @Test void testConvert10amTo10 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"10:00 am\" ); // than (verification) assertEquals ( \"10:00\" , zeit ); } @Test void testConvert1115amTo1115 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"11:15 am\" ); // than (verification) assertEquals ( \"11:15\" , zeit ); } @Test void testConvert1pmTo13 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"1:00 pm\" ); // than (verification) assertEquals ( \"13:00\" , zeit ); } @Test void testConvert3pmTo15 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"3:00 pm\" ); // than (verification) assertEquals ( \"15:00\" , zeit ); } @Test void testConvert545pmTo1745 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"5:45 pm\" ); // than (verification) assertEquals ( \"17:45\" , zeit ); } @Test void testConvert11pmTo23 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"11:00 pm\" ); // than (verification) assertEquals ( \"23:00\" , zeit ); } @Test void testGetHoursStr11pm () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String hour = utz . getHoursStr ( \"11:00 pm\" ); // than (verification) assertEquals ( \"11\" , hour ); } @Test void testGetHoursStr1pm () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String hour = utz . getHoursStr ( \"1:00 pm\" ); // than (verification) assertEquals ( \"1\" , hour ); } @Test void testGetHoursInt1pm () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) int hours = utz . getHoursInt ( \"1:00 pm\" ); // than (verification) assertEquals ( 1 , hours ); } @Test void testGetHoursInt11pm () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) int hours = utz . getHoursInt ( \"11:00 pm\" ); // than (verification) assertEquals ( 11 , hours ); } @Test void testGetMinutes1pm () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String minutes = utz . getMinutesStr ( \"1:00 pm\" ); // than (verification) assertEquals ( \"00\" , minutes ); } @Test void testGetMinutes11pm () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String minutes = utz . getMinutesStr ( \"11:00 pm\" ); // than (verification) assertEquals ( \"00\" , minutes ); } } module-info.java module SoSe2021 { requires java . desktop ; requires org . junit . jupiter . api ; } Annotationen \u00b6 Neben den Assertions gibt es auch noch Annotationen , die beim Testen eine Rolle spielen. Eine Annotation haben wir bereits verwendet: @Test . Hier einen \u00dcberblick \u00fcber die h\u00e4ufigsten Annotationen: Annotation Beschreibung @Test public void method() Die Methode ist eine Testmethode @BeforeEach public void method() Die Methode wird vor jedem Test ausgef\u00fchrt @AfterEach public void method() Die Methode wird nach jedem Test ausgef\u00fchrt @BeforeAll public static void method() Die Methode wird einmalig ausgef\u00fchrt bevor die Tests starten (static!) @AfterAll public static void method() Die Methode wird einmalig ausgef\u00fchrt nachdem die Tests gelaufen sind Ein Beispiel \u00b6 Wir betrachten die Klasse Power mit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 public class Power { private int base ; private int exp ; public Power ( int base , int exp ) { this . base = base ; this . exp = exp ; } public double value () { double value = 1.0 ; if ( exp > 0 ) { for ( int i = 0 ; i < exp ; i ++ ) { value *= base ; } } else { for ( int i = 0 ; i <- exp ; i ++ ) { value *= base ; } value = 1.0 / value ; } return value ; } @Override public String toString () { return \"(\" + this . base + \"^\" + this . exp + \")\" ; } public void print () { System . out . println ( this . toString ()); } @Override public boolean equals ( Object o ) { if ( o == null ) return false ; if ( this == o ) return true ; if ( this . getClass () != o . getClass ()) return false ; Power p = ( Power ) o ; return ( this . base == p . base && this . exp == p . exp ); } @Override public int hashCode () { return 7 * this . base + 11 * this . exp ; } } F\u00fcr diese Klasse erstellen wir eine Testklasse, die neben der Annotation @Test auch die Annotationen @BeforeAll und @BeforeEach exemplarisch verwendet. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.Test ; class PowerTest { static Power p1 , p2 , p3 , p4 ; static int testnr = 1 ; @BeforeAll public static void setup () { p1 = new Power ( 2 , 3 ); p2 = new Power ( 2 , 3 ); p3 = new Power ( - 2 , 3 ); p4 = new Power ( 2 , - 3 ); } @BeforeEach public void printBeforeTests () { System . out . printf ( \"%n %n --------------- Test %d ------------ %n\" , testnr ); p1 . print (); p2 . print (); testnr ++ ; } @Test void testToString () { String s = p1 . toString (); assertEquals ( \"(2^3)\" , s , \"Strings are not equal!\" ); } @Test void testPower () { assertNotNull ( p1 , \"no Power object\" ); } @Test void testValue () { double value = p1 . value (); assertEquals ( value , 8.0 , \"2^3 should be 8.0\" ); } @Test public void testEqualsObject () { assertTrue ( p1 . equals ( p2 ), \" 2^3 should be equal to 2^3!\" ); } } Diese Testklasse deckt nat\u00fcrlich viel zu wenige Testf\u00e4lle ab, aber es geht hier nur ums Prinzip. F\u00fchren Sie die Testklasse aus und beobachten Sie dabei auch die Konsole. Vor jeden Test ( @BeforeEach ) gibt es eine Ausgabe auf die Konsole. Bevor irgendein Test ( @Test ) ausgef\u00fchrt wird ( @BeforeAll ) werden verschiedene Objekte der Klasse Power erzeugt. In den Testf\u00e4llen werden aber nur p1 und p2 verwendet. Das m\u00fcsste nat\u00fcrlich noch deutlich erweitert werden. Success Wir haben JUnit-Testing kennengelernt. Unit-Tests sind eine gute M\u00f6glichkeit, einzelne Methoden automatisiert zu testen. Mithilfe von Unit-Tests k\u00f6nnen wir Code so entwicklen, dass alle formulierten Tests erfolgreich bestehen. Werden erst die Tests geschrieben und gegen die Tests implementiert, wird dieses Programmierverfahren Test-driven development genannt. Unit-Tests k\u00f6nnen aber auch verwendet werden, um existierenden Code zu testen. JUnit ist das Framework f\u00fcr Java-Unit-Tests. Ausf\u00fchrliche Informationen zu JUnit sind hier zu finden.","title":"JUnit-Tests"},{"location":"junit/#junit-tests","text":"Testen von Programmen ist wichtig. Ohne Testen ist es kaum m\u00f6glich, Fehler in Programmen zu entdecken. Bis jetzt haben wir unsere Programme immer durch reines Anwenden getestet, d.h. wir haben die implementierten Methoden aufgerufen und ihnen unterschiedliche Parameterwerte \u00fcbergeben. Wir werden das jetzt \u00e4ndern und nutzen daf\u00fcr JUnit .","title":"JUnit-Tests"},{"location":"junit/#allgemeines-zum-unit-testen","text":"Der ber\u00fchmte Informatiker Edsger W. Dijkstra hat \u00fcber das Testen gesagt: Durch Testen kann man stets nur die Anwesenheit, nie aber die Abwesenheit von Fehlern beweisen Das bedeutet, wir k\u00f6nnen durch das Testen Fehler finden. Wenn wir aber keine finden, dann wissen wir nicht, ob das Programm dann auch keine Fehler mehr enth\u00e4lt. Es ist leider nicht m\u00f6glich, grunds\u00e4tzlich die Fehlerfreiheit von Programmen zu pr\u00fcfen. Aber das Testen stellt ein wichtiges Werkzeug dar, um Fehler zu entdecken. Es gibt verschiedene Arten von Tests: In der Abbildung erkennen wir, dass die Unit-tests, die wir hier kennenlernen wollen, am besten automatisierbar, am h\u00e4ufigsten und am einfachsten sind. Mit Unit-Tests k\u00f6nnen wir Methoden und Klassen testen, wobei wir die Tests implementieren. Die Idee ist, dass wir funktionale Einzelteile eines Programms separat und isoliert vom Rest auf ihre Korrektheit hin \u00fcberpr\u00fcfen. Wir versuchen extra, so wenig wie m\u00f6glich die Effekte anderer Funktionalit\u00e4ten bzw. Komponenten in die Tests einflie\u00dfen zu lassen. Das erfolgt dann in den Komponenten- bzw. Integrationstests. Das hat zwei Vorteile: einerseits ist der zu pr\u00fcfende Funktionsumfang \u00fcberschaubar und andererseits k\u00f6nnen diese Unit-Tests leicht automatisiert ausgef\u00fchrt werden. Es gibt, wie bereits eingangs erw\u00e4hnt, keine Garantie von Fehlerfreiheit. Ein Nachteil der Unit-Tests besteht darin, dass sie schwierig f\u00fcr Methoden zu gestalten sind, in denen es Abh\u00e4ngigkeiten von der Laufzeitumgebung oder anderen Komponenten gibt.","title":"Allgemeines zum (Unit-)Testen"},{"location":"junit/#test-driven-development","text":"Unit Tests k\u00f6nnen entweder nach Erstellung des Programmcodes geschrieben werden, um diesen nachtr\u00e4glich zu testen oder vor Erstellung des Programmcodes. Wenn wir die Tests vor der Erstellung des Programmcodes erstellen, dann beschreiben wir mit den Tests die Anforderungen an den zu erstellenden Code. Wir werden hier lernen, wie die Erstellung der Tests und des Programmcodes Hand-in_Hand erfolgen k\u00f6nnen. Diese Vorgehensweise nennt sich Test-driven developement (TDD) . Wir werden, wie \u00fcblich, TDD anhand eines Beispiels einf\u00fchren. Unser Vorgehen l\u00e4sst sich wie folgt beschreiben: Wir schreiben einen Test, der die Anforderung f\u00fcr einen m\u00f6glichst kleinen iterativen Schritt bei der Erstellung des Programmcodes beschreibt. Wir schreiben m\u00f6glichst wenig Programmcode, so dass der Test genau erf\u00fcllt wird. Wir gehen wieder zu 1. und beschreiben den n\u00e4chsten m\u00f6glichst kleinen iterativen Schritt durch einen Test. Wir wiederholen 2. f\u00fcr den neuen Test usw. Die folgende Abbildung visualisiert das Vorgehen. Ausgangspunkt ist immer ein Test. Wir implementieren solange, bis dieser und alle vorher implementierten Tests erfolgreich durchlaufen werden. Dann schreiben wir einen weiteren Test und implementieren wieder so lange, bis dieser und alle vorher geschreibenen Tests erfolgreich durchlaufen werden. Dieses Vorgehen wird so lange wiederholt, so lange wir weitere Testf\u00e4lle hinzuf\u00fcgen k\u00f6nnen, die jeweils neue Anforderungen beschreiben. Zur Implementierung des Codes geh\u00f6rt auch das Refactoring, d.h. wir verbessern bisher geschriebenen Code durch neue Tests.","title":"Test-Driven Development"},{"location":"junit/#tdd-fur-einen-time-zeit-umrechner","text":"Angenommen, wir wollen einen einfachen Konverter erstellen, der eine Uhrzeit im 12-Stunden-Zeitsystem (mit am und pm ) in eine 24-Stundendarstellung umwandelt (von String nach String ). Im Web findet man einige Beispiel, z.B. hier . Dazu erstellen wir uns zun\u00e4chst eine Klasse UmrechnungTimeZeit.java , die die Methode convert() enth\u00e4lt. Diese Methode erwartet einen String mit einer 12-Stunden-Zeit time und gibt einen String zur\u00fcck, der die time im 24-Stundenformat darstellt. UmrechnungTimeZeit.java public class UmrechnungTimeZeit { public String convert ( String time ) { return \"\" ; } } Das ist unsere Klasse in der Augangssituation. Bevor wir anfangen, zu implemntieren, wollen wir uns zun\u00e4chst einen ersten einfachen Test schreiben, der uns eine erste Anforderung (einen ersten Testfall) beschreibt. Dazu w\u00e4hlen wir in Eclipse File --> New --> JUnit Test Case . Es erscheint folgendes Fenster: Wir w\u00e4hlen New JUnit Jupiter test aus und benennen unsere Testklasse TestUmrechnungTimeZeit und geben an, dass die Class under test die Klasse UmrechnungTimeZeit ist (Auswahl durch Browse... ). Wenn wir dann auf Finish klicken, erscheint: Das best\u00e4tigen wir mit OK . Es wird die TestUmrechnungTimeZeit.java erstellt, die so aussieht: TestUmrechnungTimeZeit.java import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.Test ; class TestUmrechnungTimeZeit { @Test void test () { fail ( \"Not yet implemented\" ); } } Sollten Fehler beim Import der junit.jupiter -Pakete angezeigt werden, dann m\u00fcssen Sie in Ihre module-info.java noch folgende Anweisung einf\u00fcgen: Einf\u00fcgen in die module-info.java requires org . junit . jupiter . api ;","title":"TDD f\u00fcr einen Time-Zeit-Umrechner"},{"location":"junit/#eine-junit-testklasse","text":"Die Klasse TestUmrechnungTimeZeit.java ist eine JUnit-Testklasse. Eine JUnit-Testklasse enth\u00e4lt keine main() -Methode, ist aber ausf\u00fchrbar. Sie enth\u00e4lt stattdessen Methoden, die mit @Test annotiert sind. Diese @Test -Methoden enthalten Zusicherungen (sogenannte Assertions ). Mit diesen Assertions geben Sie das erwartete Ergebnis des Testfalls an.","title":"Eine JUnit-Testklasse"},{"location":"junit/#assertions","text":"Es gibt unterschiedliche M\u00f6glichkeiten, das tats\u00e4chliche Ergebnis der Ausf\u00fchrung mit dem erwarteten Ergebnis zu vergleichen: Gleichheit, Ungleichheit, kleiner, gr\u00f6\u00dfer null , nicht null gleiche Objekte ( equals() ) Diese Vergleiche werden mittels Assertions durchgef\u00fchrt. Folgende Tabelle gibt einen \u00dcberblick \u00fcber einige der am meisten verwendeten Assertions an. Alle Assertions, die es gibt, finden Sie hier . Assertion Beschreibung fail(message) L\u00e4sst den Test scheitern (fail) mit Nachricht message . Wird genutzt, um zu \u00fcberpr\u00fcfen, ob Code unerreichbar ist oder bevor der Test implementiert ist. assertTrue(cond,m) \u00dcberpr\u00fcft, ob Bedingung cond wahr ist oder scheitert mit Nachricht m assertFalse(cond,m) \u00dcberpr\u00fcft, ob Bedingung cond false ist oder scheitert mit Nachricht m assertEquals(a,b,m) \u00dcberpr\u00fcft, ob Parameter a und b gleich sind oder scheitert mit Nachricht m assertArrayEquals(a,b,m) \u00dcberpr\u00fcft, ob Inhalte der Arrays a und b gleich sind oder scheitert mit Nachricht m assertNull(o,m) \u00dcberpr\u00fcft, ob Object o==null ist oder scheitert mit Nachricht m assertNotNull(o,m) \u00dcberpr\u00fcft, ob Object o!=null ist oder scheitert mit Nachricht m assertSame(o1,o2,m) \u00dcberpr\u00fcft, ob Objektreferenz o1==o2 ist oder scheitert mit Nachricht m assertNotSame(o1,o2,m) \u00dcberpr\u00fcft, ob Objektreferenz o1!=o2 ist oder scheitert mit Nachricht m Derzeit verwenden wir in unserer Testklasse nur die Assertion fail() . Diese steht aber nur daf\u00fcr, dass wir diesen Test noch implementieren m\u00fcssen. Das machen wir jetzt.","title":"Assertions"},{"location":"junit/#eine-erste-testmethode-fur-unser-beispiel","text":"Zun\u00e4chst einmal schauen wir uns an, wie wir unsere Testklasse ausf\u00fchren. Dazu w\u00e4hlen wir in Eclipse unter Run --> Run As ... --> JUnit Test . Oder Sie w\u00e4hlen gleich den mittleren der gezeigten drei Buttons . Dann erhalten Sie folgendes Bild: Auf der linken Seite sehen Sie im JUnit -Reiter einen roten Querbalken. Dieser zeigt an, dass ein Test fehlgeschlagen ist. Im Editor-Fenster wird der fehlgeschlagene Test rot markiert. Es ist klar, dass der Test fehlschl\u00e4gt, denn das bezweckt ja die Assertion fail() . Links unten sieht man den Failure trace . Dort ist in der ertsen Zeile die Fehlermeldung Not yet implemented zu sehen - das ist die Nachricht, die der fail() -Assertion \u00fcbergeben wurde. Wir implementieren nun die erste Testmethode. Dazu benennen wir die Methode test() um in testConvert1amTo1() . In unserem ersten Test wollen wir \u00fcberpr\u00fcfen, ob unsere Methode convert(String time) korrekt arbeitet, wenn ihr der String 1:00 am \u00fcbergeben wird. Die Idee ist nun die folgende: wir definieren unsere Testmethode so, dass wir angeben, welches Ergebnis wir erwarten, wenn der String 1:00 am \u00fcbergeben wird. Wir erwarten das Ergebnis 1:00 . Generell sollte eine Testmethode in der folgenden Form aufgebaut sein: given (preperation) : gibt die Voraussetzungen des Tests an, z.B. die Erzeugung eines Objektes; bei uns: die Erzeugung eines UmrechnungTimeZeit -Objektes, when (execution) : beschreibt, was und wie ausgef\u00fchrt werden soll; bei uns: die Ausf\u00fchrung der Methode convert() mit dem Parameterwert \"1:00 am\" , then (verification) : beschreibt, wie sich das Ergebnis der Ausf\u00fchrung in Bezug auf das erwartete Ergebnis verhalten soll; bei uns: assertEquals(tatsaechlichesErgebnis, \"1:00\") . Nach Umbenennung der Methode test() in TestUmrechnungTimeZeit.java in testConvert1amTo1(String time) und Implementierung dieser Methode sieht die Klasse TestUmrechnungTimeZeit.java nun so aus: TestUmrechnungTimeZeit.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.Test ; class TestUmrechnungTimeZeit { @Test void testConvert1amTo1 () { // preperation --> given UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // execution --> when String zeit = utz . convert ( \"1:00 am\" ); // verification --> then assertEquals ( zeit , \"1:00\" ); } } In der Testmethode erzeugen wir uns also zun\u00e4chst ein Objekt von UmrechnungTimeZeit , damit wir die Objektmethode convert() \u00fcberhaupt aufrufen k\u00f6nnen (Zeile 9 ). Dann rufen wir die convert() -Methode auf und \u00fcbergeben ihr den String \"1:00 am\" . Das Ergebnis der Methode wird in der Variablen zeit gespeichert (Zeile 12 ). Dann vergleichen wir das tats\u00e4chliche Ergebnis ( zeit ) mit dem erwarteten Ergebnis ( \"1:00\" ) und wollen, dass beide gleich sind ( assertEquals() ). Somit haben wir einen m\u00f6glichst kleinen iterativen Schritt hin zur fertigen Implementierung als Test beschrieben. Unsere n\u00e4chste Aufgabe ist nun, m\u00f6glichst wenig Programmcode zu schreiben, so dass der Test genau erf\u00fcllt wird. Diese Aufgabe erledigen wir auf ganz simple Weise, indem unsere convert() -Methode einfach den String \"1:00\" zur\u00fcckgibt. UmrechnungTimeZeit.java 1 2 3 4 5 6 7 8 public class UmrechnungTimeZeit { public String convert ( String time ) { return \"1:00\" ; } } Das erscheint uns auf den ersten Blick v\u00f6llig sinnlos - und das ist es nat\u00fcrlich irgendwie auch. Aber wir erinnern uns: wir wollen m\u00f6glichst wenig Programmcode schreiben, so dass der Test genau erf\u00fcllt wird. Und das machen wir hier. Wenn wir nun unsere Testklasse ausf\u00fchren, dann sehen wir: Auf der linken Seite ist nun ein gr\u00fcner Balken zu sehen, d.h. alle unsere Tests (bis jetzt haben wir nur einen) sind korrekt. Unsere Methode convert() arbeitet in Bezug auf unsere Tests korrekt. Nun f\u00fcgen wir einen zweiten Test hinzu. Dazu k\u00f6nnen wir die Methode testConvert1amTo1() einfach kopieren. Die neue Methode nennen wir testConvert1amTo1() , da wir nun testen wollen, ob unsere Methode auch den String \"2:00 am\" korrekt nach \"2:00\" umwandelt. Mit diesem Test beherzigen wir das Prinzip, den n\u00e4chsten m\u00f6glichst kleinen iterativen Schritt durch einen Test zu beschreiben. Dieser m\u00f6glichst kleine Schritt ist f\u00fcr uns der Schritt von \"1:00 am\" nach \"2:00 am\" . Die neue Testmethode sieht so aus: TestUmrechnungTimeZeit.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.Test ; class TestUmrechnungTimeZeit { @Test void testConvert1amTo1 () { // preperation --> given UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // execution --> when String zeit = utz . convert ( \"1:00 am\" ); // verification --> then assertEquals ( zeit , \"1:00\" ); } @Test void testConvert2amTo2 () { // preperation --> given UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // execution --> when String zeit = utz . convert ( \"2:00 am\" ); // verification --> then assertEquals ( zeit , \"2:00\" ); } } Wenn wir die Testklasse nun ausf\u00fchren, ohne die convert() -Methode zu \u00e4ndern, erhalten wir folgendes Bild: Der Balken im JUnit -Fenster ist rot. Darunter wird uns angegeben, dass der Testfall testConvert1amTo1() immer noch korrekt ist (gr\u00fcner Haken), aber der Testfall testConvert2amTo2() ist gescheitert (blaues Kreuz). Im Editorfenster ist rot unterlegt, welche Assertion gescheitert ist ( assertEquals(zeit, \"2:00\"); ). Wir brauchen nun also eine Idee, wie wir die convert() -Methode anpassen k\u00f6nnen, so dass beide Testf\u00e4lle korrekt ausgef\u00fchrt werden. Wir versuchen es mit der Idee, einfach die ersten vier Zeichen des \u00fcbergebenen Strings time zur\u00fcckzugeben: UmrechnungTimeZeit.java 1 2 3 4 5 6 7 8 public class UmrechnungTimeZeit { public String convert ( String time ) { return time . substring ( 0 , 4 ); } } Wenn wir nun unsere Testklasse ausf\u00fchren, dann sind beide Testf\u00e4lle korrekt. Auf diese Art und Weise entwickeln wir nach und nach eine Implementierung der convert() -Methode. Dazu f\u00fcgen wir nach und nach immer weitere Testf\u00e4lle unserer Testklasse hinzu. Mindestens noch f\u00fcr folgende F\u00e4lle: time erwartetes Ergebnis \"1:15 am\" \"1:15\" \"11:00 am\" \"11:00\" \"11:15 am\" \"11:15\" \"1:00 pm\" \"13:00\" \"2:00 pm\" \"14:00\" \"1:15 pm\" \"13:15\" \"11:00 pm\" \"23:00\" \"11:15 pm\" \"23:15\" \"12:00 am\" \"0:00\" \"12:01 am\" \"0:01\" \"12:00 pm\" \"12:00\" \"12:01 pm\" \"12:01\" \"12:00 noon\" \"12:00\" \"12:00 midnight\" \"0:00\" Das Auswahl der Testwerte ist ganz offensichtlich ein wichtiges Thema und bestimmt die Korrektheit der sp\u00e4teren Implementierung mit. Es ist wichtig, keinen Testfall zu vergessen. Leider gibt es daf\u00fcr keine formalen Regeln, sondern nur intuitive Vorgaben. Es wird immer versucht, \"Grenzwerte\" zu ermitteln, um wirklich alle Testf\u00e4lle abzudecken.","title":"Eine erste Testmethode f\u00fcr unser Beispiel"},{"location":"junit/#quellcode-aus-dem-video","text":"Im Video \u00fcber JUnit wurde folgender Quellcode erzeugt: UmrechnungTimeZeit.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 package videos.video4 ; import static org.junit.jupiter.api.Assertions.assertEquals ; import org.junit.jupiter.api.Test ; public class UmrechnungTimeZeit { public String convert ( String time ) { final int LAST_THREE_CHARS = 3 ; // \" pm\" or \" am\" if ( time . endsWith ( \"am\" )) { return time . substring ( 0 ,( time . length () - LAST_THREE_CHARS )); } else // ends with pm { final int DIFFERENCE_BETWEEN_H_TO_HH = 12 ; int hourInt = this . getHoursInt ( time ); hourInt += DIFFERENCE_BETWEEN_H_TO_HH ; String minutes = this . getMinutesStr ( time ); String zeit = hourInt + \":\" + minutes ; return zeit ; } } String getHoursStr ( String time ) { String [] allStr = time . split ( \":\" ); return allStr [ 0 ] ; } String getMinutesStr ( String time ) { final int FIRST_TWO_CHARS = 2 ; String [] allStr = time . split ( \":\" ); String afterDouble = allStr [ 1 ] ; String minutesStr = afterDouble . substring ( 0 , FIRST_TWO_CHARS ); return minutesStr ; } int getHoursInt ( String time ) { String hoursStr = this . getHoursStr ( time ); int hoursInt = Integer . valueOf ( hoursStr ); return hoursInt ; } } UmrechnungTimeZeit.javapackage videos.video4 ; import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.Test ; class UmrechnungTimeZeitTest { @Test void testConvert1amTo1 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"1:00 am\" ); // than (verification) assertEquals ( zeit , \"1:00\" , \"1:00 am to 1:00 not working\" ); } @Test void testConvert2amTo2 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"2:00 am\" ); // than (verification) assertEquals ( zeit , \"2:00\" , \"2:00 am to 2:00 not working\" ); } @Test void testConvert9amTo9 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"9:00 am\" ); // than (verification) assertEquals ( \"9:00\" , zeit ); } @Test void testConvert10amTo10 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"10:00 am\" ); // than (verification) assertEquals ( \"10:00\" , zeit ); } @Test void testConvert1115amTo1115 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"11:15 am\" ); // than (verification) assertEquals ( \"11:15\" , zeit ); } @Test void testConvert1pmTo13 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"1:00 pm\" ); // than (verification) assertEquals ( \"13:00\" , zeit ); } @Test void testConvert3pmTo15 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"3:00 pm\" ); // than (verification) assertEquals ( \"15:00\" , zeit ); } @Test void testConvert545pmTo1745 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"5:45 pm\" ); // than (verification) assertEquals ( \"17:45\" , zeit ); } @Test void testConvert11pmTo23 () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String zeit = utz . convert ( \"11:00 pm\" ); // than (verification) assertEquals ( \"23:00\" , zeit ); } @Test void testGetHoursStr11pm () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String hour = utz . getHoursStr ( \"11:00 pm\" ); // than (verification) assertEquals ( \"11\" , hour ); } @Test void testGetHoursStr1pm () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String hour = utz . getHoursStr ( \"1:00 pm\" ); // than (verification) assertEquals ( \"1\" , hour ); } @Test void testGetHoursInt1pm () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) int hours = utz . getHoursInt ( \"1:00 pm\" ); // than (verification) assertEquals ( 1 , hours ); } @Test void testGetHoursInt11pm () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) int hours = utz . getHoursInt ( \"11:00 pm\" ); // than (verification) assertEquals ( 11 , hours ); } @Test void testGetMinutes1pm () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String minutes = utz . getMinutesStr ( \"1:00 pm\" ); // than (verification) assertEquals ( \"00\" , minutes ); } @Test void testGetMinutes11pm () { // given (preperation) UmrechnungTimeZeit utz = new UmrechnungTimeZeit (); // when (execution) String minutes = utz . getMinutesStr ( \"11:00 pm\" ); // than (verification) assertEquals ( \"00\" , minutes ); } } module-info.java module SoSe2021 { requires java . desktop ; requires org . junit . jupiter . api ; }","title":"Quellcode aus dem Video"},{"location":"junit/#annotationen","text":"Neben den Assertions gibt es auch noch Annotationen , die beim Testen eine Rolle spielen. Eine Annotation haben wir bereits verwendet: @Test . Hier einen \u00dcberblick \u00fcber die h\u00e4ufigsten Annotationen: Annotation Beschreibung @Test public void method() Die Methode ist eine Testmethode @BeforeEach public void method() Die Methode wird vor jedem Test ausgef\u00fchrt @AfterEach public void method() Die Methode wird nach jedem Test ausgef\u00fchrt @BeforeAll public static void method() Die Methode wird einmalig ausgef\u00fchrt bevor die Tests starten (static!) @AfterAll public static void method() Die Methode wird einmalig ausgef\u00fchrt nachdem die Tests gelaufen sind","title":"Annotationen"},{"location":"junit/#ein-beispiel","text":"Wir betrachten die Klasse Power mit 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 public class Power { private int base ; private int exp ; public Power ( int base , int exp ) { this . base = base ; this . exp = exp ; } public double value () { double value = 1.0 ; if ( exp > 0 ) { for ( int i = 0 ; i < exp ; i ++ ) { value *= base ; } } else { for ( int i = 0 ; i <- exp ; i ++ ) { value *= base ; } value = 1.0 / value ; } return value ; } @Override public String toString () { return \"(\" + this . base + \"^\" + this . exp + \")\" ; } public void print () { System . out . println ( this . toString ()); } @Override public boolean equals ( Object o ) { if ( o == null ) return false ; if ( this == o ) return true ; if ( this . getClass () != o . getClass ()) return false ; Power p = ( Power ) o ; return ( this . base == p . base && this . exp == p . exp ); } @Override public int hashCode () { return 7 * this . base + 11 * this . exp ; } } F\u00fcr diese Klasse erstellen wir eine Testklasse, die neben der Annotation @Test auch die Annotationen @BeforeAll und @BeforeEach exemplarisch verwendet. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 import static org.junit.jupiter.api.Assertions.* ; import org.junit.jupiter.api.BeforeAll ; import org.junit.jupiter.api.BeforeEach ; import org.junit.jupiter.api.Test ; class PowerTest { static Power p1 , p2 , p3 , p4 ; static int testnr = 1 ; @BeforeAll public static void setup () { p1 = new Power ( 2 , 3 ); p2 = new Power ( 2 , 3 ); p3 = new Power ( - 2 , 3 ); p4 = new Power ( 2 , - 3 ); } @BeforeEach public void printBeforeTests () { System . out . printf ( \"%n %n --------------- Test %d ------------ %n\" , testnr ); p1 . print (); p2 . print (); testnr ++ ; } @Test void testToString () { String s = p1 . toString (); assertEquals ( \"(2^3)\" , s , \"Strings are not equal!\" ); } @Test void testPower () { assertNotNull ( p1 , \"no Power object\" ); } @Test void testValue () { double value = p1 . value (); assertEquals ( value , 8.0 , \"2^3 should be 8.0\" ); } @Test public void testEqualsObject () { assertTrue ( p1 . equals ( p2 ), \" 2^3 should be equal to 2^3!\" ); } } Diese Testklasse deckt nat\u00fcrlich viel zu wenige Testf\u00e4lle ab, aber es geht hier nur ums Prinzip. F\u00fchren Sie die Testklasse aus und beobachten Sie dabei auch die Konsole. Vor jeden Test ( @BeforeEach ) gibt es eine Ausgabe auf die Konsole. Bevor irgendein Test ( @Test ) ausgef\u00fchrt wird ( @BeforeAll ) werden verschiedene Objekte der Klasse Power erzeugt. In den Testf\u00e4llen werden aber nur p1 und p2 verwendet. Das m\u00fcsste nat\u00fcrlich noch deutlich erweitert werden. Success Wir haben JUnit-Testing kennengelernt. Unit-Tests sind eine gute M\u00f6glichkeit, einzelne Methoden automatisiert zu testen. Mithilfe von Unit-Tests k\u00f6nnen wir Code so entwicklen, dass alle formulierten Tests erfolgreich bestehen. Werden erst die Tests geschrieben und gegen die Tests implementiert, wird dieses Programmierverfahren Test-driven development genannt. Unit-Tests k\u00f6nnen aber auch verwendet werden, um existierenden Code zu testen. JUnit ist das Framework f\u00fcr Java-Unit-Tests. Ausf\u00fchrliche Informationen zu JUnit sind hier zu finden.","title":"Ein Beispiel"},{"location":"klausurvorbereitung/","text":"Klausurvorbereitung \u00b6 Alle wesentlichen Konzepte, die wir f\u00fcr die Klausur ben\u00f6tigen, haben wir jetzt in diesem und im vergangenen Semester gelernt. Wir wollen diese Kenntnisse nun durch mehrere Anwendungen vertiefen. Ganz vereinzelt wird dabei auch etwas Neues auftauchen. Dabei handelt es sich aber nicht um ein neues Konzept, sondern bspw. um einen Listener, den wir noch nicht hatten. Solche \"\u00dcberraschungen\" werden Sie aber in der Klausur nicht erleben. Dieses Kapitel wird hier so aufgebaut sein, dass es immer eine Aufgabe (eine Probeklausur) gibt und die dazugeh\u00f6rige L\u00f6sung, die aber \"aufgeklappt\" werden muss. Sie k\u00f6nnen ja immer zuerst probieren, die L\u00f6sung selbst\u00e4ndig zu entwickeln. Wenn Sie am Ende alle Aufgaben selbst\u00e4ndig l\u00f6sen k\u00f6nnen, sind Sie mit Sicherheit sehr gut auf die Klausur vorbereitet. Wir beginnen aber noch kurz mit allgemeinen Betrachtungen zum Grundger\u00fcst. Eines der nachfolgend vorgestellten Grundger\u00fcste werden Sie mit Sicherheit bei der Klausur verwenden k\u00f6nnen. M\u00f6gliche Grundger\u00fcste \u00b6 Wie Sie wissen, ist das Fenster ( JFrame ) im BorderLayout . Das bedeutet, dass das Fenster in f\u00fcnf Bereiche ( Container ) unterteilt ist. Sie m\u00fcssen sich bei der Konfiguration \u00fcberlegen, ob \"gezeichnet\" werden soll, d.h. ob das JPanel im CENTER des Fensters eine eigene Klasse ist, oder ob es mithilfe einer Methode erzeugt werden kann und welche der f\u00fcndf Bereiche Sie ben\u00f6tigen. Wir erl\u00e4utern das an Beispielen und beginnen mit einem Grundger\u00fcst, welches wir f\u00fcr das Zeichnen verwenden k\u00f6nnen, welches also eine Canvas enth\u00e4lt. Grundger\u00fcst mit Canvas 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 import java.awt.BorderLayout ; import java.awt.Graphics ; import java.awt.Graphics2D ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class GrundgeruestMitCanvas extends JFrame { Canvas canvas ; public GrundgeruestMitCanvas () { super (); this . setTitle ( \"GrundgeruestMitCanvas\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); // von den folgenden vier Zeilen werden eventuell eine oder mehrere oder alle auskommentiert this . getContentPane (). add ( this . initNorth (), BorderLayout . NORTH ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . getContentPane (). add ( this . initEast (), BorderLayout . EAST ); this . getContentPane (). add ( this . initWest (), BorderLayout . WEST ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } private JPanel initNorth () { JPanel north = new JPanel (); // hier das JPanel fuer NORTH befuellen return north ; } private JPanel initSouth () { JPanel south = new JPanel (); // hier das JPanel fuer SOUTH befuellen return south ; } private JPanel initEast () { JPanel east = new JPanel (); // hier das JPanel fuer EAST befuellen return east ; } private JPanel initWest () { JPanel west = new JPanel (); // hier das JPanel fuer WEST befuellen return west ; } public static void main ( String [] args ) { new GrundgeruestMitCanvas (); } } In diesem Grundger\u00fcst werden alle f\u00fcnf Bereiche des Fensters mit JPanel bef\u00fcllt. Das CENTER wird mit einem Objekt der Klasse Canvas bef\u00fcllt, welche von JPanel erbt. Diese Klasse wird ben\u00f6tigt, um in die paintComponent() -Methode zu zeichnen. Sollten Sie z.B. kein Panel im EAST - und im WEST -Bereich des Fensters ben\u00f6tigen, dann l\u00f6schen Sie einfach die Zeilen 23 und 24 sowei die beiden Methoden initEast() und initWest() . Ein Grundger\u00fcst ohne Canvas , also ohne Zeichnen, k\u00f6nnte dann so aussehen: Grundger\u00fcst ohne Canvas 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 import java.awt.BorderLayout ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class GrundgeruestOhneCanvas extends JFrame { JPanel content ; public GrundgeruestOhneCanvas () { super (); this . setTitle ( \"GrundgeruestMitCanvas\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . content = this . initCenter (); this . getContentPane (). add ( this . content , BorderLayout . CENTER ); // von den folgenden vier Zeilen werden eventuell eine oder mehrere oder alle auskommentiert this . getContentPane (). add ( this . initNorth (), BorderLayout . NORTH ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . getContentPane (). add ( this . initEast (), BorderLayout . EAST ); this . getContentPane (). add ( this . initWest (), BorderLayout . WEST ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private JPanel initCenter () { JPanel center = new JPanel (); // hier das JPanel fuer CENTER befuellen return center ; } private JPanel initNorth () { JPanel north = new JPanel (); // hier das JPanel fuer NORTH befuellen return north ; } private JPanel initSouth () { JPanel south = new JPanel (); // hier das JPanel fuer SOUTH befuellen return south ; } private JPanel initEast () { JPanel east = new JPanel (); // hier das JPanel fuer EAST befuellen return east ; } private JPanel initWest () { JPanel west = new JPanel (); // hier das JPanel fuer WEST befuellen return west ; } public static void main ( String [] args ) { new GrundgeruestOhneCanvas (); } } Beachten Sie, dass JPanel ohne Angabe eines LayoutManagers im FlowLayout sind. Das k\u00f6nnen Sie \u00e4ndern und die einzelnen JPanel auch noch weiter verschachteln . Eines dieser beiden Grundger\u00fcste k\u00f6nnen wir nun stets verwenden. Es muss dann jeweils \"nur\" noch angepasst werden. Wir beginnen mal mit einer Aufgabe. Quadrat \u00b6 Aufgabe Quadrat Schreiben Sie eine Klasse Quadrat , die folgendes Fenster darstellt: Es gibt also eine Zeichenfl\u00e4che ( Canvas ) und zwei Buttons new und fill . Nach dem Klicken des Buttons new soll ein schwarzes unausgef\u00fclltes Quadrat mit der Strichst\u00e4rke 3.0 so in der Zeichenfl\u00e4che erscheinen, dass es mittig in der Zeichenfl\u00e4che angeordnet ist und der k\u00fcrzere der beiden Abst\u00e4nde (links/rechts oder oben/unten) ca. 10% der Zeichenfl\u00e4che gro\u00df ist. Nach dem Klicken des Buttons new steht darin nicht mehr new , sondern refresh . Nach Klicken des Buttons fill soll das Quadrat mit einer zuf\u00e4llig gew\u00e4hlten Farbe bef\u00fcllt werden. Es soll aber trotzdem noch der schwarze Rand bleiben (am einfachsten: einmal mit der zuf\u00e4llig gew\u00e4hlten Farbe bef\u00fcllt und danach nochmal unbef\u00fcllt schwarz malen). Der Button wechselt den Text auf unfill . Nach dem Klicken auf unfill soll das Quadrat wieder unausgef\u00fcllt sein. Die zuf\u00e4llig erzeugte Farbe soll so lange die Farbe zum Ausf\u00fcllen bleiben, bis der refresh -Button geklickt wird, d.h. durch mehrmaliges Klicken des Button fill und unfill \u00e4ndert sich die Farbe zum Bef\u00fcllen des Quadrats nicht, erst durch Klicken des Button refresh wird eine neue Farbe erzeugt, die dann wieder bis zum n\u00e4chsten Klicken von refresh bleibt. Implementieren Sie den MouseListener und den MouseMotionListener so, dass Sie bei gedr\u00fcckter Maustaste die Gr\u00f6\u00dfe des Quadrates \u00e4ndern. Wenn Sie mit der Maus auf eine Kante des Quadrates ( +/-10px ) klicken und dann die Maus gedr\u00fcckt halten, \u00e4ndert sich die Gr\u00f6\u00dfe des Quadrates entsprechend. Wenn Sie weit weg von (also mehr als 10px von der Kante entfernt) einer Kante klicken (egal, ob im Quadrat oder au\u00dferhalb), passiert gar nichts. Die Gr\u00f6\u00dfen\u00e4nderungen sollen stets sofort sichtbar sein. Nach Loslassen der Maustaste bleibt das Quadrat in der eingestellten Gr\u00f6\u00dfe. Das Quadrat bleibt stets m\u00f6glichst mittig. Tipp : An welche Kante Sie klicken, ist egal. Klicken Sie auf eine vertikale Kante (links oder rechts), brauchen Sie nur die \u00c4nderungen des x-Wertes zu ber\u00fccksichtigen, klicken Sie auf eine horizontale Kante (oben oder unten), brauchen Sie nur die \u00c4nderungen der y-Werte zu ber\u00fccksichtigen, um die neue Gr\u00f6\u00dfe des Quadrates zu ermitteln. L\u00f6sung Quadrat Zuerst \u00fcberlegen wir uns, welches Grundger\u00fcst wir verwenden und wie wir es anpassen. Wir m\u00fcssen zeichnen , also das Grundger\u00fcst mit Canvas . Von den Nord-, S\u00fcd-, Ost-, West-Bereichen ben\u00f6tigen wir nur den S\u00fcden (dort kommen die 'new'- und fill -Buttons rein). Also ist das unser Ausgangspunkt, in das wir schonmal die Buttons eingef\u00fcgt haben: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 import java.awt.BorderLayout ; import java.awt.Graphics ; import java.awt.Graphics2D ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Quadrat extends JFrame { Canvas canvas ; public Quadrat () { super (); this . setTitle ( \"Quadrat\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } private JPanel initSouth () { JPanel south = new JPanel (); JButton newBtn = new JButton ( \"new\" ); JButton fillBtn = new JButton ( \"fill\" ); south . add ( newBtn ); south . add ( fillBtn ); return south ; } public static void main ( String [] args ) { new Quadrat (); } } Von den initXXX() -Methoden ben\u00f6tigen wir auch nur noch initSouth() . Die anderen drei sind deshalb gel\u00f6scht. Die Implementierung des ActionListener f\u00fcr den new -Button erledigen wir mit einer anonymen Klasse. Wir m\u00fcssen uns \u00fcberlegen, ob es notwendig ist, f\u00fcr das Quadrat eine eigene Datenstruktur (z.B. Klasse) anzulegen. Zun\u00e4chst machen wir das einmal ohne, sondern geben nur in einer globalen Variablen zeigeQuadrat an, ob das Quadrat gezeichnet werden soll oder nicht. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 import java.awt.BasicStroke ; import java.awt.BorderLayout ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Quadrat extends JFrame { Canvas canvas ; boolean zeigeQuadrat = false ; public Quadrat () { super (); this . setTitle ( \"Quadrat\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar if ( Quadrat . this . zeigeQuadrat ) { g2 . setStroke ( new BasicStroke ( 3.0f )); int canvasWidth = this . getWidth (); int canvasHeight = this . getHeight (); if ( canvasHeight > canvasWidth ) { int abstand = ( int )( canvasWidth * 0.1 ); int seiteQuadrat = ( int )( canvasWidth * 0.8 ); int oben = ( canvasHeight - seiteQuadrat ) / 2 ; g2 . drawRect ( abstand , oben , seiteQuadrat , seiteQuadrat ); } else { int abstand = ( int )( canvasHeight * 0.1 ); int seiteQuadrat = ( int )( canvasHeight * 0.8 ); int links = ( canvasWidth - seiteQuadrat ) / 2 ; g2 . drawRect ( links , abstand , seiteQuadrat , seiteQuadrat ); } } } } private JPanel initSouth () { JPanel south = new JPanel (); JButton newBtn = new JButton ( \"new\" ); newBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Quadrat . this . zeigeQuadrat = true ; JButton thisBtn = ( JButton ) e . getSource (); // kann nur der newBtn sein! thisBtn . setText ( \"refresh\" ); Quadrat . this . canvas . repaint (); } }); JButton fillBtn = new JButton ( \"fill\" ); south . add ( newBtn ); south . add ( fillBtn ); return south ; } public static void main ( String [] args ) { new Quadrat (); } } Wenn die Variable zeigeQuadrat durch den Buttonklick auf true gesetzt wurde (Zeile 74 ), dann wird in der paintComponent() -Methode das Quadrat dargestellt (Zeile 40 ). Zur korrekten Darstellung des Quadrates ist es von Bedeutung, ob das Fenster (die Canvas ) h\u00f6her als breit ist oder umgedreht (Zeile 45 ). Ist es h\u00f6her als breit, dann wird es in die Breite der Canvas eingepasst, d.h. der Abstand nach links ist 1/10 der Canvas -Breite (Zeile 47 ) und die Seitenl\u00e4nge des Quadrates ist 8/10 der Breite (Zeile 48 ). Der Abstand des Quadrates nach oben muss entsprechend berechnet werden (Zeile 49 ). Ist es breiter als hoch, dann wird es in die H\u00f6he der Canvas eingepasst, d.h. der Abstand nach oben ist 1/10 der Canvas -H\u00f6he (Zeile 54 ) und die Seitenl\u00e4nge des Quadrates ist 8/10 der H\u00f6he (Zeile 55 ). Der Abstand des Quadrates nach links muss entsprechend berechnet werden (Zeile 56 ). In der actionPerformed() -Methode f\u00fcr den Button wird nicht nur zeigeQuadrat auf true gesetzt, sondern die Canvas auch neu gezeichnet (Zeile 77 )! Die Quelle des ActionEvent kann nur der Button selbst sein, da wir eine anonyme Klasse zur Implementierung des ActionListener verwenden. Deshalb k\u00f6nnen wir die Quelle ohne Pr\u00fcfung in einen JButton konvertieren (Zeile 75 ). Mithilfe der setText() -methode f\u00fcr JButton setzen wir den neuen Buttontext auf refresh (Zeile 76 ). Die Implementierung des ActionListener f\u00fcr den fill -Button erledigen wir erneut mit einer anonymen Klasse. Wir gehen \u00e4hnlich vor, wie beim new -Button und erstellen eine globale Variable fuelleQuadrat . Diese gibt an, ob das Quadrat bef\u00fcllt gezeichnet werden soll oder nicht. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 import java.awt.BasicStroke ; import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.util.Random ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Quadrat extends JFrame { Canvas canvas ; boolean zeigeQuadrat = false ; boolean fuelleQuadrat = false ; public Quadrat () { super (); this . setTitle ( \"Quadrat\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar if ( Quadrat . this . zeigeQuadrat ) { g2 . setStroke ( new BasicStroke ( 3.0f )); int canvasWidth = this . getWidth (); int canvasHeight = this . getHeight (); Random r = new Random (); int rot = r . nextInt ( 256 ); int gruen = r . nextInt ( 256 ); int blau = r . nextInt ( 256 ); g2 . setColor ( new Color ( rot , gruen , blau )); if ( canvasHeight > canvasWidth ) { int abstand = ( int )( canvasWidth * 0.1 ); int seiteQuadrat = ( int )( canvasWidth * 0.8 ); int oben = ( canvasHeight - seiteQuadrat ) / 2 ; if ( fuelleQuadrat ) { g2 . fillRect ( abstand , oben , seiteQuadrat , seiteQuadrat ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( abstand , oben , seiteQuadrat , seiteQuadrat ); } else { int abstand = ( int )( canvasHeight * 0.1 ); int seiteQuadrat = ( int )( canvasHeight * 0.8 ); int links = ( canvasWidth - seiteQuadrat ) / 2 ; if ( fuelleQuadrat ) { g2 . fillRect ( links , abstand , seiteQuadrat , seiteQuadrat ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( links , abstand , seiteQuadrat , seiteQuadrat ); } } } } private JPanel initSouth () { JPanel south = new JPanel (); JButton newBtn = new JButton ( \"new\" ); newBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Quadrat . this . zeigeQuadrat = true ; JButton thisBtn = ( JButton ) e . getSource (); // kann nur der newBtn sein! thisBtn . setText ( \"refresh\" ); Quadrat . this . canvas . repaint (); } }); JButton fillBtn = new JButton ( \"fill\" ); fillBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { JButton thisBtn = ( JButton ) e . getSource (); if ( thisBtn . getText (). equals ( \"fill\" )) { Quadrat . this . fuelleQuadrat = true ; thisBtn . setText ( \"unfill\" ); } else { Quadrat . this . fuelleQuadrat = false ; thisBtn . setText ( \"fill\" ); } Quadrat . this . canvas . repaint (); } }); south . add ( newBtn ); south . add ( fillBtn ); return south ; } public static void main ( String [] args ) { new Quadrat (); } } Die Farbe zum Ausf\u00fcllen erzeugen wir zuf\u00e4llig mithilfe von Random (Zeilen 48-52 ). Es wird jeweils zuerst aus das ausgef\u00fcllte Quadrat gezeichnet (Zeile 61 bzw. 73 ) falls fuelleQuadrat den Wert true hat (Zeile 59 bzw. 71 ). Nach dem Zeichnen des bef\u00fcllten Quadrates wird die Zeichenfarbe wieder auf schwarz gestellt (Zeile 63 bzw. 75 ) und dann das nichtausgef\u00fcllte Quadrat gezeichnet. In der actionPerformed() _Methode m\u00fcssen wir unterscheiden, ob im Button fill steht oder unfill (zeile 108 ). Je nachdem wird fuelleQuadrat auf true oder false gesetzt und der Text im Button entsprechend ge\u00e4ndert. Um nicht bei jeden Aufruf von paintComponent() eine neue F\u00fcllfarbe zuf\u00e4llig zu erzeugen, muss das Erzeugen der Farbe ausgelagert werden. Da auf die Farbe sowohl in paintComponent() ( View ) als auch in actionPerfomed() ( Controller ) zugegriffen wird, muss diese als globale Referenz deklariert werden. Wahrscheinlich ist es gut, die Farbe beim ersten Mal zu erzeugen, wenn der new -Button geklickt wird und dann immer durch das Klicken des refresh -Buttons. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 import java.awt.BasicStroke ; import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.util.Random ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Quadrat extends JFrame { Canvas canvas ; boolean zeigeQuadrat = false ; boolean fuelleQuadrat = false ; Color aktuelleFuellfarbe = Color . WHITE ; public Quadrat () { super (); this . setTitle ( \"Quadrat\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar if ( Quadrat . this . zeigeQuadrat ) { g2 . setStroke ( new BasicStroke ( 3.0f )); int canvasWidth = this . getWidth (); int canvasHeight = this . getHeight (); g2 . setColor ( Quadrat . this . aktuelleFuellfarbe ); if ( canvasHeight > canvasWidth ) { int abstand = ( int )( canvasWidth * 0.1 ); int seiteQuadrat = ( int )( canvasWidth * 0.8 ); int oben = ( canvasHeight - seiteQuadrat ) / 2 ; if ( fuelleQuadrat ) { g2 . fillRect ( abstand , oben , seiteQuadrat , seiteQuadrat ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( abstand , oben , seiteQuadrat , seiteQuadrat ); } else { int abstand = ( int )( canvasHeight * 0.1 ); int seiteQuadrat = ( int )( canvasHeight * 0.8 ); int links = ( canvasWidth - seiteQuadrat ) / 2 ; if ( fuelleQuadrat ) { g2 . fillRect ( links , abstand , seiteQuadrat , seiteQuadrat ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( links , abstand , seiteQuadrat , seiteQuadrat ); } } } } private JPanel initSouth () { JPanel south = new JPanel (); JButton newBtn = new JButton ( \"new\" ); newBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { JButton thisBtn = ( JButton ) e . getSource (); if ( thisBtn . getText (). equals ( \"new\" )) { Quadrat . this . zeigeQuadrat = true ; thisBtn . setText ( \"refresh\" ); } Random r = new Random (); int rot = r . nextInt ( 256 ); int gruen = r . nextInt ( 256 ); int blau = r . nextInt ( 256 ); Quadrat . this . aktuelleFuellfarbe = new Color ( rot , gruen , blau ); Quadrat . this . canvas . repaint (); } }); JButton fillBtn = new JButton ( \"fill\" ); fillBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { JButton thisBtn = ( JButton ) e . getSource (); if ( thisBtn . getText (). equals ( \"fill\" )) { Quadrat . this . fuelleQuadrat = true ; thisBtn . setText ( \"unfill\" ); } else { Quadrat . this . fuelleQuadrat = false ; thisBtn . setText ( \"fill\" ); } Quadrat . this . canvas . repaint (); } }); south . add ( newBtn ); south . add ( fillBtn ); return south ; } public static void main ( String [] args ) { new Quadrat (); } } F\u00fcr eine geeignete Implementierung des MouseListener und des MouseMotionListener ben\u00f6tigen wir globalen Zugriff auf die Gr\u00f6\u00dfe und die Position des Quadrates. Wir m\u00fcssen ja mit der Maus erkennen k\u00f6nnen, ob wir eine Kante des Quadrates getroffen haben. Wir lagern deshalb einige Werte des Quadrates global aus (und Umbenennungen): int quadratLinks, quadratRechts, quadratOben, quadratUnten, quadratLaenge; In paintComponent() werden diese globalen Variablen nun mit Werten belegt: if ( canvasHeight > canvasWidth ) { Quadrat . this . quadratLinks = ( int )( canvasWidth * 0.1 ); Quadrat . this . quadratLaenge = ( int )( canvasWidth * 0.8 ); Quadrat . this . quadratRechts = Quadrat . this . quadratLinks + Quadrat . this . quadratLaenge ; Quadrat . this . quadratOben = ( canvasHeight - Quadrat . this . quadratLaenge ) / 2 ; Quadrat . this . quadratUnten = Quadrat . this . quadratOben + Quadrat . this . quadratLaenge ; if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } else { Quadrat . this . quadratOben = ( int )( canvasHeight * 0.1 ); Quadrat . this . quadratLaenge = ( int )( canvasHeight * 0.8 ); Quadrat . this . quadratLinks = ( canvasWidth - Quadrat . this . quadratLaenge ) / 2 ; Quadrat . this . quadratRechts = Quadrat . this . quadratLinks + Quadrat . this . quadratLaenge ; Quadrat . this . quadratUnten = Quadrat . this . quadratOben + Quadrat . this . quadratLaenge ; if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } Nun implementieren wir MouseListener und MouseMotionListener und melden canvas daran animport java.awt.BasicStroke ; import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.Random ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Quadrat extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; boolean zeigeQuadrat = false ; boolean fuelleQuadrat = false ; Color aktuelleFuellfarbe = Color . WHITE ; int quadratLinks , quadratRechts , quadratOben , quadratUnten , quadratLaenge ; public Quadrat () { super (); this . setTitle ( \"Quadrat\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar if ( Quadrat . this . zeigeQuadrat ) { g2 . setStroke ( new BasicStroke ( 3.0f )); int canvasWidth = this . getWidth (); int canvasHeight = this . getHeight (); g2 . setColor ( Quadrat . this . aktuelleFuellfarbe ); if ( canvasHeight > canvasWidth ) { Quadrat . this . quadratLinks = ( int )( canvasWidth * 0.1 ); Quadrat . this . quadratLaenge = ( int )( canvasWidth * 0.8 ); Quadrat . this . quadratRechts = Quadrat . this . quadratLinks + Quadrat . this . quadratLaenge ; Quadrat . this . quadratOben = ( canvasHeight - Quadrat . this . quadratLaenge ) / 2 ; Quadrat . this . quadratUnten = Quadrat . this . quadratOben + Quadrat . this . quadratLaenge ; if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } else { Quadrat . this . quadratOben = ( int )( canvasHeight * 0.1 ); Quadrat . this . quadratLaenge = ( int )( canvasHeight * 0.8 ); Quadrat . this . quadratLinks = ( canvasWidth - Quadrat . this . quadratLaenge ) / 2 ; Quadrat . this . quadratRechts = Quadrat . this . quadratLinks + Quadrat . this . quadratLaenge ; Quadrat . this . quadratUnten = Quadrat . this . quadratOben + Quadrat . this . quadratLaenge ; if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } } } } private JPanel initSouth () { JPanel south = new JPanel (); JButton newBtn = new JButton ( \"new\" ); newBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { JButton thisBtn = ( JButton ) e . getSource (); if ( thisBtn . getText (). equals ( \"new\" )) { Quadrat . this . zeigeQuadrat = true ; thisBtn . setText ( \"refresh\" ); } Random r = new Random (); int rot = r . nextInt ( 256 ); int gruen = r . nextInt ( 256 ); int blau = r . nextInt ( 256 ); Quadrat . this . aktuelleFuellfarbe = new Color ( rot , gruen , blau ); Quadrat . this . canvas . repaint (); } }); JButton fillBtn = new JButton ( \"fill\" ); fillBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { JButton thisBtn = ( JButton ) e . getSource (); if ( thisBtn . getText (). equals ( \"fill\" )) { Quadrat . this . fuelleQuadrat = true ; thisBtn . setText ( \"unfill\" ); } else { Quadrat . this . fuelleQuadrat = false ; thisBtn . setText ( \"fill\" ); } Quadrat . this . canvas . repaint (); } }); south . add ( newBtn ); south . add ( fillBtn ); return south ; } public static void main ( String [] args ) { new Quadrat (); } @Override public void mousePressed ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mousePressed x=\" + x + \", y=\" + y ); } @Override public void mouseDragged ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseDragged x=\" + x + \", y=\" + y ); } @Override public void mouseReleased ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseReleased x=\" + x + \", y=\" + y ); } @Override public void mouseMoved ( MouseEvent e ) {} @Override public void mouseClicked ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } F\u00fcr das eigentliche Verschieben r\u00e4cht sich jetzt, dass wir uns anfangs keine gute Datenstruktur \u00fcberlegt hatten. Es wird jetzt alles ein wenig komplizierter, da wir mehrere Unterscheidungen treffen m\u00fcssen: Wir m\u00fcssen unterscheiden, ob das Quadrat nun gerade bewegt wird oder nicht. Wir m\u00fcssen unterscheiden, ob wir die linke Kante bewegen, oder die rechte oder die untere oder die obere. F\u00fcr alle dieses Unterscheidungen erstellen wir uns globale Variablen. if ( canvasHeight > canvasWidth ) { Quadrat . this . quadratLinks = ( int )( canvasWidth * 0.1 ); Quadrat . this . quadratLaenge = ( int )( canvasWidth * 0.8 ); Quadrat . this . quadratRechts = Quadrat . this . quadratLinks + Quadrat . this . quadratLaenge ; Quadrat . this . quadratOben = ( canvasHeight - Quadrat . this . quadratLaenge ) / 2 ; Quadrat . this . quadratUnten = Quadrat . this . quadratOben + Quadrat . this . quadratLaenge ; if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } else { Quadrat . this . quadratOben = ( int )( canvasHeight * 0.1 ); Quadrat . this . quadratLaenge = ( int )( canvasHeight * 0.8 ); Quadrat . this . quadratLinks = ( canvasWidth - Quadrat . this . quadratLaenge ) / 2 ; Quadrat . this . quadratRechts = Quadrat . this . quadratLinks + Quadrat . this . quadratLaenge ; Quadrat . this . quadratUnten = Quadrat . this . quadratOben + Quadrat . this . quadratLaenge ; if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } Nun implementieren wir MouseListener und MouseMotionListener und melden canvas daran an. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 import java.awt.BasicStroke ; import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.Random ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Quadrat extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; boolean zeigeQuadrat = false ; boolean fuelleQuadrat = false ; Color aktuelleFuellfarbe = Color . WHITE ; int quadratLinks , quadratRechts , quadratOben , quadratUnten , quadratLaenge ; boolean bewegt = false ; boolean linkeKante = false ; boolean rechteKante = false ; boolean obereKante = false ; boolean untereKante = false ; int warX = 0 ; int warY = 0 ; public Quadrat () { super (); this . setTitle ( \"Quadrat\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar if ( Quadrat . this . zeigeQuadrat ) { g2 . setStroke ( new BasicStroke ( 3.0f )); int canvasWidth = this . getWidth (); int canvasHeight = this . getHeight (); g2 . setColor ( Quadrat . this . aktuelleFuellfarbe ); if ( ! Quadrat . this . bewegt ) { if ( canvasHeight > canvasWidth ) { Quadrat . this . quadratLinks = ( int )( canvasWidth * 0.1 ); Quadrat . this . quadratLaenge = ( int )( canvasWidth * 0.8 ); Quadrat . this . quadratRechts = Quadrat . this . quadratLinks + Quadrat . this . quadratLaenge ; Quadrat . this . quadratOben = ( canvasHeight - Quadrat . this . quadratLaenge ) / 2 ; Quadrat . this . quadratUnten = Quadrat . this . quadratOben + Quadrat . this . quadratLaenge ; if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } else { Quadrat . this . quadratOben = ( int )( canvasHeight * 0.1 ); Quadrat . this . quadratLaenge = ( int )( canvasHeight * 0.8 ); Quadrat . this . quadratLinks = ( canvasWidth - Quadrat . this . quadratLaenge ) / 2 ; Quadrat . this . quadratRechts = Quadrat . this . quadratLinks + Quadrat . this . quadratLaenge ; Quadrat . this . quadratUnten = Quadrat . this . quadratOben + Quadrat . this . quadratLaenge ; if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } } else // bewegt { if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } } } } private JPanel initSouth () { JPanel south = new JPanel (); JButton newBtn = new JButton ( \"new\" ); newBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { JButton thisBtn = ( JButton ) e . getSource (); if ( thisBtn . getText (). equals ( \"new\" )) { Quadrat . this . zeigeQuadrat = true ; thisBtn . setText ( \"refresh\" ); } Random r = new Random (); int rot = r . nextInt ( 256 ); int gruen = r . nextInt ( 256 ); int blau = r . nextInt ( 256 ); Quadrat . this . aktuelleFuellfarbe = new Color ( rot , gruen , blau ); Quadrat . this . canvas . repaint (); } }); JButton fillBtn = new JButton ( \"fill\" ); fillBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { JButton thisBtn = ( JButton ) e . getSource (); if ( thisBtn . getText (). equals ( \"fill\" )) { Quadrat . this . fuelleQuadrat = true ; thisBtn . setText ( \"unfill\" ); } else { Quadrat . this . fuelleQuadrat = false ; thisBtn . setText ( \"fill\" ); } Quadrat . this . canvas . repaint (); } }); south . add ( newBtn ); south . add ( fillBtn ); return south ; } public static void main ( String [] args ) { new Quadrat (); } @Override public void mousePressed ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mousePressed x=\" + x + \", y=\" + y ); int linksX = this . quadratLinks ; int rechtsX = this . quadratRechts ; int obenY = this . quadratOben ; int untenY = this . quadratUnten ; if ( x > linksX - 10 && x < linksX + 10 ) { this . bewegt = true ; this . linkeKante = true ; this . warX = x ; } else if ( x > rechtsX - 10 && x < rechtsX + 10 ) { this . bewegt = true ; this . rechteKante = true ; this . warX = x ; } else if ( y > obenY - 10 && y < obenY + 10 ) { this . bewegt = true ; this . obereKante = true ; this . warY = y ; } else if ( y > untenY - 10 && y < untenY + 10 ) { this . bewegt = true ; this . untereKante = true ; this . warY = y ; } } @Override public void mouseDragged ( MouseEvent e ) { if ( this . bewegt ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseDragged x=\" + x + \", y=\" + y ); if ( this . linkeKante ) { int diffX = x - this . warX ; this . quadratLinks = this . quadratLinks + diffX ; this . quadratOben = this . quadratOben + diffX ; this . quadratLaenge = this . quadratLaenge - 2 * diffX ; this . warX = x ; } else if ( this . rechteKante ) { int diffX = x - this . warX ; this . quadratLinks = this . quadratLinks - diffX ; this . quadratOben = this . quadratOben - diffX ; this . quadratLaenge = this . quadratLaenge + 2 * diffX ; this . warX = x ; } else if ( this . obereKante ) { int diffY = y - this . warY ; this . quadratLinks = this . quadratLinks + diffY ; this . quadratOben = this . quadratOben + diffY ; this . quadratLaenge = this . quadratLaenge - 2 * diffY ; this . warY = y ; } else if ( this . untereKante ) { int diffY = y - this . warY ; this . quadratLinks = this . quadratLinks - diffY ; this . quadratOben = this . quadratOben - diffY ; this . quadratLaenge = this . quadratLaenge + 2 * diffY ; this . warY = y ; } Quadrat . this . canvas . repaint (); } } @Override public void mouseReleased ( MouseEvent e ) { this . bewegt = false ; Quadrat . this . canvas . repaint (); } @Override public void mouseMoved ( MouseEvent e ) {} @Override public void mouseClicked ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } In mousePressed() bestimmen wir zun\u00e4chst, ob wir in der N\u00e4he der linken oder der rechten oder der oberen oder unteren Kante geklickt haben. Wenn ja, dann setzen wir die entsprechenden Variablen und merken uns, wo ( warX oder warY ) wir hingeklickt hatten. In mouseDragged() wird zun\u00e4chst ermittelt, ob wir \u00fcberhaupt im bewegt -Modus sind. Wenn ja, ermitteln wir, wie weit und wohin wir uns seit dem letzten Aufruf von mouseDragged() bewegt haben. Dementsprechend werden die Variablen f\u00fcr das Quadrat neu gesetzt. Wenn wir die Maus wieder loslassen ( mouseReleased() ) wird bewegt wieder auf false gesetzt und das Quadrat wird somit wieder \"normal\" durch die paintComponent() -Methode dargestellt. Schachbrett \u00b6 Aufgabe Schachbrett Schreiben Sie eine Klasse Schachbrett , die folgendes Fenster darstellt: Es werden 8x8 Rechtecke dargestellt \u2013 abwechselnd mit grauem und wei\u00dfem Hintergrund bitte beachten: die dargestellten Rechtecke sind gezeichnet, es handelt sich nicht um einzelne JPanels!!! (ist f\u00fcr sp\u00e4ter wichtig) das 8x8-Feld der Rechtecke f\u00fcllt die Zeichenfl\u00e4che vollst\u00e4ndig , d.h. wenn Sie die Gr\u00f6\u00dfe des Fensters ver\u00e4ndern, passt sich auch das 8x8-Feld entsprechend an Implementieren Sie den MausListener so, dass Sie durch Mausklick auf die Zeichenfl\u00e4che einen ausgef\u00fcllten Kreis in das Rechteck malen, in das Sie geklickt haben. Die Abbildung zeigt das Schachbrett nach einem Mausklick auf das Rechteck in der 2. Zeile und 4. Spalte. Versuchen Sie, die Kreise m\u00f6glichst zentriert in die Rechtecke zu malen. Eine gute Gr\u00f6\u00dfe f\u00fcr den Durchmesser der Kreise ist \u2153 der Breite oder H\u00f6he der Rechtecke. Klicken Sie mehrmals mit der Maus, werden entsprechend mehrere Kreise dargestellt. F\u00fcgen Sie dem S\u00fcden des Fensters ein JPanel hinzu. Dieses JPanel enth\u00e4lt einen JButton 'clear field' . Nach Dr\u00fccken dieses Buttons werden alle roten Kreise wieder gel\u00f6scht. Erweitern Sie Ihre Implementierung nun so, dass durch einen Mausklick nicht nur ein roter Kreis gezeichnet wird, sondern auch noch eine horizontale und eine vertikale Linie in der Zeile und der Spalte, in der der Kreis gezeichnet wird. in der Zeile und Spalte des Kreises erscheint jeweils mittig eine rote Linie Abbildung zeigt Schachbrett nach mehreren Mausklicks Die Linien m\u00fcssen nicht, wie im Bild dargestellt, in der Mitte der Rechtecke anfangen. Sie k\u00f6nnen auch komplett durchgezeichnet werden, d.h. vom Beginn bis zum Ende einer Zeile bzw. Spalte. Erweitern Sie Ihre Implementierung nun so, dass es nicht mehr m\u00f6glich ist, dass 2 Kreise in der gleichen Spalte oder in der gleichen Zeile erscheinen. Wenn Sie ein Rechteck anklicken, in dessen Zeile oder Spalte bereits ein anderer Kreis ist, so soll kein neuer Kreis gezeichnet werden, sondern das Rechteck als gr\u00fcnes Rechteck erscheinen. In das gr\u00fcne Rechteck wurde geklickt - es erscheint kein Kreis, da in der Zeile bereits ein Kreis ist \u2013 stattdessen ein gr\u00fcnes Rechteck. In das gr\u00fcne Rechteck wurde geklickt - es erscheint kein Kreis, da in der Zeile bereits ein Kreis ist - stattdessen ein gr\u00fcnes Rechteck. Das Rechteck bleibt nur bis zum n\u00e4chsten Klick markiert (gr\u00fcn). Zusatzaufgabe: Erweitern Sie die Schritte 5 und 6 auch auf die Diagonalen, d.h. es sollen auch die jeweiligen Diagonalen der Punkte eingezeichnet werden und keine zwei Punkte d\u00fcrfen in der gleichen Diagonalen liegen. L\u00f6sung Schachbrett Zuerst \u00fcberlegen wir uns, welches Grundger\u00fcst wir verwenden und wie wir es anpassen. Wir m\u00fcssen zeichnen , also das Grundger\u00fcst mit Canvas . Von den Nord-, S\u00fcd-, Ost-, West-Bereichen ben\u00f6tigen wir nur den S\u00fcden (dort kommt der 'clear field'-Button rein). Also ist das unser Ausgangspunkt: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 import java.awt.BorderLayout ; import java.awt.Graphics ; import java.awt.Graphics2D ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Schachbrett extends JFrame { Canvas canvas ; public Schachbrett () { super (); this . setTitle ( \"Schachbrett\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); // NORTH, EAST, WEST geloescht this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } private JPanel initSouth () { JPanel south = new JPanel (); // hier das JPanel fuer SOUTH befuellen return south ; } public static void main ( String [] args ) { new Schachbrett (); } } Von den initXXX() -Methoden ben\u00f6tigen wir auch nur noch initSouth() . Die anderen drei sind deshalb gel\u00f6scht. Jetzt k\u00f6nnen wir mit dem Zeichnen des Schachbretts beginnen. Dazu k\u00f6nnten wir \"einfach\" 64 gleich gro\u00dfe Rechtecke in die Canvas zeichnen. Wir sollten hier aber unbedingt daf\u00fcr ein Model , d.h. eine Datenstruktur erstellen und diese dann in der View darstellen. F\u00fcr eine solche Datenstruktur (f\u00fcr ein Model ) gibt es drei Gr\u00fcnde: wir wollen sp\u00e4ter erkennen, in welches Feld geklickt wurde und wir wollen erkennen k\u00f6nnen, in welches Feld bereits geklickt wurde und wir wollen erkennen k\u00f6nnen, welche Felder Nachbarfelder sind. Da die Dimensionen hier fest sind (8x8), kann man das in einem (zweidimensionalen) Array erledigen. Als Typ jedes einzelnen Elementes sollte boolean gen\u00fcgen - markiert oder nicht markiert. Wenn Sie sich nicht sicher sind, ob zwei Zust\u00e4nde gen\u00fcgen, k\u00f6nnen Sie auch eine enum als Typ verwenden. Wir machen das mal, dann bleibt die L\u00f6sung flexibler und wir \u00fcben enum nochmal. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 import java.awt.BorderLayout ; import java.awt.Graphics ; import java.awt.Graphics2D ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Schachbrett extends JFrame { Canvas canvas ; enum State { MARKIERT , UNMARKIERT }; State [][] field ; public Schachbrett () { super (); this . setTitle ( \"Schachbrett\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . initField (); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); // NORTH, EAST, WEST geloescht this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private void initField () { this . field = new State [ 8 ][ 8 ] ; for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { this . field [ row ][ col ] = State . UNMARKIERT ; } } } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } private JPanel initSouth () { JPanel south = new JPanel (); // hier das JPanel fuer SOUTH befuellen return south ; } public static void main ( String [] args ) { new Schachbrett (); } } Wir h\u00e4tten das field auch im Konstruktor erzeugen und bef\u00fcllen k\u00f6nnen, lagern es aber in eine eigene Methode aus und rufen diese im Konstruktor auf. Alles, was wir funktional in eine eigene Methode auslagern k\u00f6nnen, sollten wir auch auslagern - liest sich viel besser! Jetzt \u00fcberlegen wir, wie wir das Schachbrett darstellen (die View ). Die Darstellung erfolgt am besten mit der fillRect() -Methode. Diese erwartet die Koordinaten des linken oberen Punktes und die Breite und die H\u00f6he des Rechtecks. Breite und H\u00f6he ergeben sich aus der Breite und H\u00f6he der Canvas , jeweils geteilt durch 8 . Aus der Position des zu zeichnenden Rechtecks in einer Zeile ergibt sich dann der x -Wert f\u00fcr den linken oberen Punkt und aus der Position des zu zeichnenden Feldes in der Spalte ergibt sich der y -Wert des linken oberen Punktes. Wir \u00e4ndern nun nur die paintComponent() -Methode (die View ), da es nur um die Darstellung geht: 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int canvasHeight = this . getHeight (); int canvasWidth = this . getWidth (); int heightRect = canvasHeight / 8 ; int widthRect = canvasWidth / 8 ; boolean grey = true ; for ( int row = 0 ; row < Schachbrett . this . field . length ; row ++ ) { int y = row * heightRect ; // y-Wert des linken oberen Punktes grey = ! grey ; // mit gleichen Farbe anfangen, wie aufgehoert for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length ; col ++ ) { int x = col * widthRect ; // x-Wert des linken oberen Punktes if ( grey ) { g2 . setColor ( Color . LIGHT_GRAY ); grey = false ; } else { g2 . setColor ( Color . WHITE ); grey = true ; } g2 . fillRect ( x , y , widthRect , heightRect ); } } } } Wir laufen also durch das field -Array und ermitteln f\u00fcr die aktuelle Zeile den y -Wert und f\u00fcr die jeweils aktuelle Spalte den x -Wert. Damit wir immer zwischen Grau und Wei\u00df umschalten, erstellen wir uns eine boole'sche Variable grey , die abwechselnd true und false wird, je nachdem, ob wir als n\u00e4chstes ein graues oder ein wei\u00dfes Feld zeichnen wollen. Nach jeder Zeile \u00e4ndert sich die Farbe jedoch nicht (wir fangen in der neuen Zeile mit der gleichen Farbe an, wie wir in der alten Zeile aufgeh\u00f6rt haben). Deshalb mussten wir noch die Anweisung in Zeile 61 hinzuf\u00fcgen. Das Schachbrett wird nun so gezeichnet, wie wir das wollten. Wenn das Fenster vergr\u00f6\u00dfert oder verkleinert wird, dann passen sich die Felder entsprechend an, da wir alles abh\u00e4ngig von der Breite und H\u00f6he der Canvas berechnen. Wir k\u00f6nnen aber die Fenstergr\u00f6\u00dfe aber gleich etwas quadratischer gestalten (z.B. this.setSize(400, 400); ). Jetzt k\u00fcmmern wir uns um die roten Punkte inmitten des Rechtecks, falls wir mit der Maus darauf geklickt haben. Dazu ben\u00f6tigen wir den MouseListener , denn es geht um einen Mausklick (also entweder mouseClicked() oder mousePressed() ) und nicht um eine Bewegung der Maus. Wir entscheiden uns f\u00fcr mouseClicked() - das ist nun also unser Controller . Wir implementieren zun\u00e4chst den MouseListener und pr\u00fcfen, ob damit alles funktioniert (ob wir z.B. nicht vergessen haben, an den MouseListener anzumelden.) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Schachbrett extends JFrame implements MouseListener { Canvas canvas ; enum State { MARKIERT , UNMARKIERT }; State [][] field ; public Schachbrett () { super (); this . setTitle ( \"Schachbrett\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . initField (); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); // NORTH, EAST, WEST geloescht this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private void initField () { this . field = new State [ 8 ][ 8 ] ; for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { this . field [ row ][ col ] = State . UNMARKIERT ; } } } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int canvasHeight = this . getHeight (); int canvasWidth = this . getWidth (); int heightRect = canvasHeight / 8 ; int widthRect = canvasWidth / 8 ; boolean grey = true ; for ( int row = 0 ; row < Schachbrett . this . field . length ; row ++ ) { int y = row * heightRect ; // y-Wert des linken oberen Punktes grey = ! grey ; // mit einer anderen Farbe anfangen, als aufgehoert for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length ; col ++ ) { int x = col * widthRect ; // x-Wert des linken oberen Punktes if ( grey ) { g2 . setColor ( Color . LIGHT_GRAY ); grey = false ; } else { g2 . setColor ( Color . WHITE ); grey = true ; } g2 . fillRect ( x , y , widthRect , heightRect ); } } } } private JPanel initSouth () { JPanel south = new JPanel (); // hier das JPanel fuer SOUTH befuellen return south ; } public static void main ( String [] args ) { new Schachbrett (); } @Override public void mouseClicked ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked: [x=\" + x + \", \" + y + \"]\" ); } @Override public void mousePressed ( MouseEvent e ) {} @Override public void mouseReleased ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } Wir f\u00fcgen das implements MouseListener im Klassenkopf ein und importieren den MouseListener aus dem java.awt.event -Paket (lassen wir nat\u00fcrlich Eclipse erledigen). Wir lassen Eclipse durch Add unimplemented methods die Methoden aus dem MouseListener hinzuf\u00fcgen. Dabei wird auch MouseEvent importiert. Da wir uns f\u00fcr die Implementierung von mouseClicked() entschieden haben, k\u00f6nnen wir die anderen Methoden ein wenig verkleinern, um \u00dcbersicht zu bewahren. In mouseClicked() k\u00f6nnen wir schonmal die Koordinaten des MouseEvent abfragen und eine Ausgabe auf die Konsole durchf\u00fchren, um zu kontrollieren, ob alles funktioniert. Unbedingt m\u00fcssen wir nat\u00fcrlich canvas an den MouseListener anmelden (Zeile 25 ). mouseClicked() wird aufgerufen, wenn wir in das Feld klicken - die Koordinaten des Klicks in die Canvas werden auf der Konsole ausgegeben. Nun m\u00fcssten wir uns \u00fcberlegen, auf welches Rechteck aus dem field -Array wir geklickt haben. Dieses Rechteck wollen wir als MARKIERT speichern. Angenommen, wir kennen die Koordinaten x und y des Mausklicks in die Canvas . Um nun zu wissen, in welche \"Spalte\" oder \"Zeile\" wir geklickt haben, m\u00fcssen wir die Breite und H\u00f6he der Rechtecke kennen. Diese kennen wir aber in mouseClicked() nicht, da die Breite und H\u00f6he der Rechtecke jeweils von der Breite und H\u00f6he der Canvas abh\u00e4ngig ist (welche sich \u00e4ndern k\u00f6nnen). Die H\u00f6he und Breite der Rechtecke ist somit eine Eigenschaft der Canvas und um auf diese Eigenschaft zuzugreifen, m\u00fcssen wir sie global verf\u00fcgbar machen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Schachbrett extends JFrame implements MouseListener { Canvas canvas ; enum State { MARKIERT , UNMARKIERT }; State [][] field ; public Schachbrett () { super (); this . setTitle ( \"Schachbrett\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . initField (); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); // NORTH, EAST, WEST geloescht this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private void initField () { this . field = new State [ 8 ][ 8 ] ; for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { this . field [ row ][ col ] = State . UNMARKIERT ; } } } private class Canvas extends JPanel { int heightRect = 0 ; int widthRect = 0 ; @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int canvasHeight = this . getHeight (); int canvasWidth = this . getWidth (); this . heightRect = canvasHeight / 8 ; this . widthRect = canvasWidth / 8 ; boolean grey = true ; for ( int row = 0 ; row < Schachbrett . this . field . length ; row ++ ) { int y = row * this . heightRect ; // y-Wert des linken oberen Punktes grey = ! grey ; // mit einer anderen Farbe anfangen, als aufgehoert for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length ; col ++ ) { int x = col * this . widthRect ; // x-Wert des linken oberen Punktes if ( grey ) { g2 . setColor ( Color . LIGHT_GRAY ); grey = false ; } else { g2 . setColor ( Color . WHITE ); grey = true ; } g2 . fillRect ( x , y , this . widthRect , this . heightRect ); } } } } private JPanel initSouth () { JPanel south = new JPanel (); // hier das JPanel fuer SOUTH befuellen return south ; } public static void main ( String [] args ) { new Schachbrett (); } @Override public void mouseClicked ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked: [x=\" + x + \", \" + y + \"]\" ); int spalte = x / this . canvas . widthRect ; int zeile = y / this . canvas . heightRect ; this . field [ zeile ][ spalte ] = State . MARKIERT ; System . out . println ( \"mouseClicked: [zeile = \" + zeile + \", spalte = \" + spalte + \"]\" ); this . canvas . repaint (); } @Override public void mousePressed ( MouseEvent e ) {} @Override public void mouseReleased ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } Die Variablen heightRect und widthRect werden in den Zeilen 50 und 51 als global deklariert. In den Zeilen 61 und 62 bekommen diese Variablen ihren Wert abh\u00e4ngig von der Gr\u00f6\u00dfe der Canvas . Nun k\u00f6nnen wir auf diese Werte in der mouseClicked() -Methode \u00fcber die canvas -Referenz zugreifen (Zeilen 105 und 106 ). F\u00fcr die Berechnung der zeile und spalte verwenden wir die Integer-Division (wie oft passt ein Rechteck in x bzw. in y ?). Das entsprechende Feld setzen wir auf MARKIERT (Zeile 108 ). Zur Kontrolle noch eine Konsolenausgabe (Zeile 109 ). Damit wir es nicht vergessen, sicherheitshalber schonmal das repaint() der canvas (Zeile 110 ). In alle als MARKIERT markierten Felder zeichnen wir nun einen roten Kreis. Gezeichnet wird immer in der paintComponent() : 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int canvasHeight = this . getHeight (); int canvasWidth = this . getWidth (); this . heightRect = canvasHeight / 8 ; this . widthRect = canvasWidth / 8 ; boolean grey = true ; for ( int row = 0 ; row < Schachbrett . this . field . length ; row ++ ) { int y = row * this . heightRect ; // y-Wert des linken oberen Punktes grey = ! grey ; // mit einer anderen Farbe anfangen, als aufgehoert for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length ; col ++ ) { int x = col * this . widthRect ; // x-Wert des linken oberen Punktes if ( grey ) { g2 . setColor ( Color . LIGHT_GRAY ); grey = false ; } else { g2 . setColor ( Color . WHITE ); grey = true ; } g2 . fillRect ( x , y , this . widthRect , this . heightRect ); if ( Schachbrett . this . field [ row ][ col ] == State . MARKIERT ) { int abstandX = this . widthRect / 3 ; int abstandY = this . heightRect / 3 ; int durchmesser = this . widthRect / 3 ; g2 . setColor ( Color . RED ); g2 . fillOval ( x + abstandX , y + abstandY , durchmesser , durchmesser ); } } } } Da die linke obere \"Ecke\" des Kreises weiter rechts und weiter unten als die linke obere Ecke des Rechtecks ist, f\u00fcgen wir noch einen abstandX und einen abstandY hinzu, der sich jeweils aus dem Drittel der Rechtecksbreite und der Recjtecksh\u00f6he ergibt (Zeilen 84 und 85 ). Der Durchmesser des Kreises ist dann ebenfalls ein Drittel (somit bleibt das dritte Dtrittel als Abstand rechts - der Kreis ist recht mittig) - Zeile 86 . Wir setzen die Farbe auf rot und zeichnen den Kreis (Zeilen 87 und 88 ). Die roten vertikalen und horizontalen Linien k\u00f6nnten wir nun auch noch gleich zeichnen: 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int canvasHeight = this . getHeight (); int canvasWidth = this . getWidth (); this . heightRect = canvasHeight / 8 ; this . widthRect = canvasWidth / 8 ; boolean grey = true ; for ( int row = 0 ; row < Schachbrett . this . field . length ; row ++ ) { int y = row * this . heightRect ; // y-Wert des linken oberen Punktes grey = ! grey ; // mit einer anderen Farbe anfangen, als aufgehoert for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length ; col ++ ) { int x = col * this . widthRect ; // x-Wert des linken oberen Punktes if ( grey ) { g2 . setColor ( Color . LIGHT_GRAY ); grey = false ; } else { g2 . setColor ( Color . WHITE ); grey = true ; } g2 . fillRect ( x , y , this . widthRect , this . heightRect ); } } for ( int row = 0 ; row < Schachbrett . this . field . length ; row ++ ) { int y = row * this . heightRect ; for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length ; col ++ ) { int x = col * this . widthRect ; if ( Schachbrett . this . field [ row ][ col ] == State . MARKIERT ) { int abstandX = this . widthRect / 3 ; int abstandY = this . heightRect / 3 ; int durchmesser = this . widthRect / 3 ; g2 . setColor ( Color . RED ); g2 . fillOval ( x + abstandX , y + abstandY , durchmesser , durchmesser ); g2 . setStroke ( new BasicStroke ( 3.0f )); g2 . drawLine (( this . widthRect / 2 ), y + ( this . heightRect / 2 ), canvasWidth - ( this . widthRect / 2 ), y + ( this . heightRect / 2 )); g2 . drawLine ( x + ( this . widthRect / 2 ), ( this . heightRect / 2 ), x + ( this . widthRect / 2 ), canvasHeight - ( this . heightRect / 2 )); } } } } Das Zeichnen passiert jetzt in zwei for -Schleifen. Zun\u00e4chst werden die grauen und wei\u00dfen Rechtecke gezeichnet und erst danach die roten Kreise und Linien. H\u00e4tten wir auch die Linien in der ersten for -Schleife gezeichnet, w\u00e4ren sie teilweise von den nachfolgenden Rechtecken abgedeckt und somit nur teilweise sichtbar gewesen. Das Zeichnen der beiden Linien (vertikal und horizontal) erfolgt in den Zeilen 99-101 . Zun\u00e4chst wird die Strichst\u00e4rke etwas erh\u00f6ht (auf 3.0f px). In Zeile 100 wird die horizontale Linie gezeichnet. Diese Linie k\u00f6nnte auch bei x=0 beginnen und bei canvasWidth aufh\u00f6ren. Um sie in der Mitte des ersten Rechtecks beginnen zu lassen, wird statt x=0 x=(this.rectWidth/2) gew\u00e4hlt. Um sie in der Mitte des letzten Rechtecks enden zu lassen, wird statt x=canvasWidth x=canvasWidth-(this.rectWidth/2) gew\u00e4hlt. In welcher Zeile diese Linie gezeichnet wird, ergibt sich aus dem Wert von y . Dieser Wert bestimmt aber die oberste Kante der Zeile. Um die Linie in die Mitte der Zeile zu zeichnen, wird jeweils this.heightRect/2 zu y addiert. Das Zeichnen der vertikalen Linie in Zeile 101 ist ganz \u00e4hnlich, nur dass der Wert von x bestimmt, in welche Spaqlte die Linie gezeichnet wird und die y -Werte jeweils so angepasst werden, dass die Linie nicht ganz oben beginnt und ganz oben endet, sondern jeweils mittig im Rechteck. Um zu verhindern, dass zwei rote Punkte in derselben Zeile bzw. in derselben Spalte sind, m\u00fcssen wir im Controller eine weitere Bedingung einbauen, die pr\u00fcft, ob das angeklickte Feld \u00fcberhaupt auf MARKIERT gesetzt werden darf. Dazu muss f\u00fcr eine gegebene zeile und eine gegebene spalte gepr\u00fcft werden, ob sich darin bereits ein MARKIERT es field befindet. Es wird also die mouseClicked() -Methode angepasst: 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 @Override public void mouseClicked ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked: [x=\" + x + \", \" + y + \"]\" ); int spalte = x / this . canvas . widthRect ; int zeile = y / this . canvas . heightRect ; boolean bereitsMarkiert = false ; if ( Schachbrett . this . field [ zeile ][ spalte ] == State . MARKIERT ) { bereitsMarkiert = true ; } for ( int row = 0 ; row < Schachbrett . this . field . length && ! bereitsMarkiert ; row ++ ) { if ( Schachbrett . this . field [ row ][ spalte ] == State . MARKIERT ) { bereitsMarkiert = true ; } } for ( int col = 0 ; col < Schachbrett . this . field [ zeile ] . length && ! bereitsMarkiert ; col ++ ) { if ( Schachbrett . this . field [ zeile ][ col ] == State . MARKIERT ) { bereitsMarkiert = true ; } } if ( ! bereitsMarkiert ) { this . field [ zeile ][ spalte ] = State . MARKIERT ; } System . out . println ( \"mouseClicked: [zeile = \" + zeile + \", spalte = \" + spalte + \"]\" ); this . canvas . repaint (); } Wir erstellen uns eine Variable bereitsMarkiert , in der wir uns merken wollen, ob ein bereits MARKIERT es field in der zeile oder in der spalte existiert (Zeile 134 ). In den Zeilen 135-138 wird gepr\u00fcft, ob das Feld selbst in zeile und spalte bereits MARKIERT ist. In den Zeilen 140-146 wird gepr\u00fcft, ob in der spalte ein bereits MARKIERT es field existiert. In den Zeilen 148-154 wird gepr\u00fcft, ob in der zeile ein bereits MARKIERT es field existiert. Nur, wenn keine der drei Bedingungen erf\u00fcllt sind, kann das field[zeile][spalte] auf MARKIERT gesetzt werden. Somit wird die Anforderung , dass keine zwei Felder in einer Zeile bzw. in einer Spalte auf MARKIERT gesetzt sein d\u00fcrfen, erf\u00fcllt. Die Pr\u00fcfung geschieht \"nur\" im Controller ! Wie kann nun daf\u00fcr gesorgt werden, dass das Feld gr\u00fcn erscheint, wenn es zwar angeklickt wird, aber bereits ein markiertes Feld in der Zeile bzw. der Spalte existiert? Eine einfache M\u00f6glichkeit w\u00e4re, einfach einen neuen State hinzuzuf\u00fcgen, z.B. GRUEN . Wir k\u00f6nnen uns aber auch zwei globale Variablen gruenZeile und gruenSpalte erzeugen und wenn diese jeweils einen Wert besitzen, der innerhalb des field -Bereiches liegt, dann solll dieses Feld einen gr\u00fcnen Hintergrund bekommen. Es gibt viele M\u00f6glichkeiten, wir nehmen mal die ersteimport java.awt.BasicStroke ; import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Schachbrett extends JFrame implements MouseListener { Canvas canvas ; enum State { MARKIERT , UNMARKIERT , GREEN }; State [][] field ; public Schachbrett () { super (); this . setTitle ( \"Schachbrett\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . initField (); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); // NORTH, EAST, WEST geloescht this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private void initField () { this . field = new State [ 8 ][ 8 ] ; for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { this . field [ row ][ col ] = State . UNMARKIERT ; } } } private class Canvas extends JPanel { int heightRect = 0 ; int widthRect = 0 ; @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int canvasHeight = this . getHeight (); int canvasWidth = this . getWidth (); this . heightRect = canvasHeight / 8 ; this . widthRect = canvasWidth / 8 ; boolean grey = true ; for ( int row = 0 ; row < Schachbrett . this . field . length ; row ++ ) { int y = row * this . heightRect ; // y-Wert des linken oberen Punktes grey = ! grey ; // mit einer anderen Farbe anfangen, als aufgehoert for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length ; col ++ ) { int x = col * this . widthRect ; // x-Wert des linken oberen Punktes if ( grey ) { g2 . setColor ( Color . LIGHT_GRAY ); grey = false ; } else { g2 . setColor ( Color . WHITE ); grey = true ; } if ( Schachbrett . this . field [ row ][ col ] == State . GREEN ) { g2 . setColor ( Color . GREEN ); Schachbrett . this . field [ row ][ col ] = State . UNMARKIERT ; } g2 . fillRect ( x , y , this . widthRect , this . heightRect ); } } for ( int row = 0 ; row < Schachbrett . this . field . length ; row ++ ) { int y = row * this . heightRect ; for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length ; col ++ ) { int x = col * this . widthRect ; if ( Schachbrett . this . field [ row ][ col ] == State . MARKIERT ) { int abstandX = this . widthRect / 3 ; int abstandY = this . heightRect / 3 ; int durchmesser = this . widthRect / 3 ; g2 . setColor ( Color . RED ); g2 . fillOval ( x + abstandX , y + abstandY , durchmesser , durchmesser ); g2 . setStroke ( new BasicStroke ( 3.0f )); g2 . drawLine (( this . widthRect / 2 ), y + ( this . heightRect / 2 ), canvasWidth - ( this . widthRect / 2 ), y + ( this . heightRect / 2 )); g2 . drawLine ( x + ( this . widthRect / 2 ), ( this . heightRect / 2 ), x + ( this . widthRect / 2 ), canvasHeight - ( this . heightRect / 2 )); } } } } } private JPanel initSouth () { JPanel south = new JPanel (); // hier das JPanel fuer SOUTH befuellen return south ; } public static void main ( String [] args ) { new Schachbrett (); } @Override public void mouseClicked ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked: [x=\" + x + \", \" + y + \"]\" ); int spalte = x / this . canvas . widthRect ; int zeile = y / this . canvas . heightRect ; boolean bereitsMarkiert = false ; if ( Schachbrett . this . field [ zeile ][ spalte ] == State . MARKIERT ) { bereitsMarkiert = true ; } for ( int row = 0 ; row < Schachbrett . this . field . length && ! bereitsMarkiert ; row ++ ) { if ( Schachbrett . this . field [ row ][ spalte ] == State . MARKIERT ) { bereitsMarkiert = true ; } } for ( int col = 0 ; col < Schachbrett . this . field [ zeile ] . length && ! bereitsMarkiert ; col ++ ) { if ( Schachbrett . this . field [ zeile ][ col ] == State . MARKIERT ) { bereitsMarkiert = true ; } } if ( ! bereitsMarkiert ) { this . field [ zeile ][ spalte ] = State . MARKIERT ; } else { this . field [ zeile ][ spalte ] = State . GREEN ; } System . out . println ( \"mouseClicked: [zeile = \" + zeile + \", spalte = \" + spalte + \"]\" ); this . canvas . repaint (); } @Override public void mousePressed ( MouseEvent e ) {} @Override public void mouseReleased ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } Jetzt wird der clear field -Button erzeugt und f\u00fcr diesen Button der ActionListener implementiert. Das kann alles innerhalb der initSouth() -Methode passieren. Das L\u00f6schen des Feldes besteht darin, alle Felder auf UNMARKIERT zu setzen. Das erledigt bereits die initField() -Methode. Diese Methode muss also nur aufgerufen werden und danach die canvas neu gezeichnet: 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 @Override public void mouseClicked ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked: [x=\" + x + \", \" + y + \"]\" ); int spalte = x / this . canvas . widthRect ; int zeile = y / this . canvas . heightRect ; boolean bereitsMarkiert = false ; if ( Schachbrett . this . field [ zeile ][ spalte ] == State . MARKIERT ) { bereitsMarkiert = true ; } for ( int row = 0 ; row < Schachbrett . this . field . length && ! bereitsMarkiert ; row ++ ) { if ( Schachbrett . this . field [ row ][ spalte ] == State . MARKIERT ) { bereitsMarkiert = true ; } } for ( int col = 0 ; col < Schachbrett . this . field [ zeile ] . length && ! bereitsMarkiert ; col ++ ) { if ( Schachbrett . this . field [ zeile ][ col ] == State . MARKIERT ) { bereitsMarkiert = true ; } } if ( ! bereitsMarkiert ) { this . field [ zeile ][ spalte ] = State . MARKIERT ; } System . out . println ( \"mouseClicked: [zeile = \" + zeile + \", spalte = \" + spalte + \"]\" ); this . canvas . repaint (); } Wir erstellen uns eine Variable bereitsMarkiert , in der wir uns merken wollen, ob ein bereits MARKIERT es field in der zeile oder in der spalte existiert (Zeile 134 ). In den Zeilen 135-138 wird gepr\u00fcft, ob das Feld selbst in zeile und spalte bereits MARKIERT ist. In den Zeilen 140-146 wird gepr\u00fcft, ob in der spalte ein bereits MARKIERT es field existiert. In den Zeilen 148-154 wird gepr\u00fcft, ob in der zeile ein bereits MARKIERT es field existiert. Nur, wenn keine der drei Bedingungen erf\u00fcllt sind, kann das field[zeile][spalte] auf MARKIERT gesetzt werden. Somit wird die Anforderung , dass keine zwei Felder in einer Zeile bzw. in einer Spalte auf MARKIERT gesetzt sein d\u00fcrfen, erf\u00fcllt. Die Pr\u00fcfung geschieht \"nur\" im Controller ! Wie kann nun daf\u00fcr gesorgt werden, dass das Feld gr\u00fcn erscheint, wenn es zwar angeklickt wird, aber bereits ein markiertes Feld in der Zeile bzw. der Spalte existiert? Eine einfache M\u00f6glichkeit w\u00e4re, einfach einen neuen State hinzuzuf\u00fcgen, z.B. GRUEN . Wir k\u00f6nnen uns aber auch zwei globale Variablen gruenZeile und gruenSpalte erzeugen und wenn diese jeweils einen Wert besitzen, der innerhalb des field -Bereiches liegt, dann solll dieses Feld einen gr\u00fcnen Hintergrund bekommen. Es gibt viele M\u00f6glichkeiten, wir nehmen mal die erste: 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 private JPanel initSouth () { JPanel south = new JPanel (); JButton clearBtn = new JButton ( \"clear field\" ); clearBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Schachbrett . this . initField (); Schachbrett . this . canvas . repaint (); } }); south . add ( clearBtn ); return south ; } Die \u00dcberpr\u00fcfung eines \"Konfliktfalls\" f\u00fcr die Diagonalen kann ebenfalls in der mouseClicked() -Methode als zus\u00e4tzliche Bedingung eingef\u00fcgt werden. Dazu m\u00fcssen wir nur die Frage beantworten, wie wir ermitteln k\u00f6nnen, ob ein Feld mit den Koordinaten zeile1 und spalte1 auf einer Diagonalen des Feldes zeile und spalte liegt. Nehmen wir an, zeile=3 und spalte=4 . Dann w\u00e4ren z.B. zeile1=0 und spalte1=1 auf einer Diagonalen und auch zeile1=1 und spalte1=2 und auch zeile1=2 und spalte1=3 und auch zeile1=4 und spalte1=5 und auch zeile1=5 und spalte1=6 und auch zeile1=6 und spalte1=7 . F\u00fcr die andere Diagonale gilt zeile1=2 und spalte1=5 und auch zeile1=1 und spalte1=6 und auch zeile1=0 und spalte1=7 , aber auch zeile1=4 und spalte1=3 und auch zeile1=5 und spalte1=2 und auch zeile1=6 und spalte1=1 und auch zeile1=7 und spalte1=0 . Es gilt also, dass | zeile1 - zeile | == | spalte1 - spalte | , damit die Felder in zeile, spalte und zeile1, spalte1 in einer Diagonalen liegen. 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 @Override public void mouseClicked ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked: [x=\" + x + \", \" + y + \"]\" ); int spalte = x / this . canvas . widthRect ; int zeile = y / this . canvas . heightRect ; boolean bereitsMarkiert = false ; if ( Schachbrett . this . field [ zeile ][ spalte ] == State . MARKIERT ) { bereitsMarkiert = true ; } for ( int row = 0 ; row < Schachbrett . this . field . length && ! bereitsMarkiert ; row ++ ) { if ( Schachbrett . this . field [ row ][ spalte ] == State . MARKIERT ) { bereitsMarkiert = true ; } } for ( int col = 0 ; col < Schachbrett . this . field [ zeile ] . length && ! bereitsMarkiert ; col ++ ) { if ( Schachbrett . this . field [ zeile ][ col ] == State . MARKIERT ) { bereitsMarkiert = true ; } } // Diagonalen for ( int row = 0 ; row < Schachbrett . this . field . length && ! bereitsMarkiert ; row ++ ) { for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length && ! bereitsMarkiert ; col ++ ) { if ( ! ( col == spalte && row == zeile )) // nicht das Feld selbst betrachten { if (( Math . abs ( col - spalte ) == Math . abs ( row - zeile )) && Schachbrett . this . field [ row ][ col ] == State . MARKIERT ) { bereitsMarkiert = true ; } } } } if ( ! bereitsMarkiert ) { this . field [ zeile ][ spalte ] = State . MARKIERT ; } else { this . field [ zeile ][ spalte ] = State . GREEN ; } System . out . println ( \"mouseClicked: [zeile = \" + zeile + \", spalte = \" + spalte + \"]\" ); this . canvas . repaint (); } Schiebepuzzle \u00b6 Aufgabe Schiebepuzzle Implementieren Sie folgendes Puzzle: obige Abbildung zeigt den Anfangszustand des Puzzles ( 2 \u00fcber 1 links) obige Abbildung zeigt den Endzustand des Puzzles ( 1 \u00fcber 2 links) Das Puzzle besteht aus 5 \u201eKacheln\u201c, 3 gelben und 2 roten. Die roten Kacheln sind mit einer 1 und einer 2 nummeriert. Am Anfang steht die rote Kachel mit der 2 \u00fcber der roten Kachel mit der 1 . (siehe erste Abb.) Ziel des Puzzles ist es, die beiden roten Kacheln zu vertauschen. Wenn links die 1 \u00fcber der 2 steht, ist das Puzzle beendet. Wo die gelben Kacheln im Endzustand sind, ist egal (siehe zweite Abb.). Ein Feld ist stets frei (grau dargestellt). In dieses Feld kann eine benachbarte Kachel geschoben werden. Zeigen Sie oben die Anzahl der Z\u00fcge an. Wenn der Endzustand erreicht ist, kann nicht mehr gezogen werden! Der Button Neustart setzt alles wieder auf Anfang. Die Programmierung bleibt ganz Ihnen \u00fcberlassen. Zum Schieben einer Kachel auf das leere Feld, klickt man auf die Kachel selbst. Diese \u201ebewegt\u201c sich dann auf das leere (graue) Feld und hinterl\u00e4sst ein leeres (graues) Feld (siehe folgende Abb.) Tipps: Sie ben\u00f6tigen keine Canvas und kein \u00dcberschreiben der paintComponent() -Methode! Am einfachsten bekommt man ein Label in die Mitte eines Panels gesetzt, wenn das Panel im GridLayout(1,1) (oder sogar parameterlos) ist und Sie f\u00fcr das Label label.setHorizontalAlignment(JLabel.CENTER); definieren die (Schrift-)Farbe eines Labels setzt man mit label.setForeground(Color); die (Hintergrund-Farbe eines Panels setzt man mit panel.setBackground(Color); f\u00fcr das Identifizieren des entsprechenden Panels, auf das man geklickt hat, k\u00f6nnte es hilfreich sein, sich daf\u00fcr eine eigene Klasse zu schreiben (die von JPanel erbt). Muss aber nicht. wahrscheinlich ist es am einfachsten, ein zweidimensionales Array 2x3 als Datenstruktur f\u00fcr Ihr Puzzle zu verwenden L\u00f6sung Schiebepuzzleimport java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Font ; import java.awt.GridLayout ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import javax.swing.* ; public class Puzzle extends JFrame { JLabel infoLabel ; int anzMoves ; enum State { EINS , ZWEI , LEER , GELB } State [][] field ; MyPanel [][] panels ; JPanel mainPanel ; Puzzle () { super ( \"Puzzle\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). add ( this . infoLabelPanel (), BorderLayout . NORTH ); this . getContentPane (). add ( this . mainPanelStart (), BorderLayout . CENTER ); this . getContentPane (). add ( this . buttonPanel (), BorderLayout . SOUTH ); this . setSize ( 500 , 400 ); this . setVisible ( true ); } /**************************************** * erstmal alles fuer das Model * initiale Belegung von field */ void initialisiereField () { this . field = new State [ 2 ][ 3 ] ; this . field [ 0 ][ 0 ] = State . ZWEI ; this . field [ 0 ][ 1 ] = State . LEER ; this . field [ 0 ][ 2 ] = State . GELB ; this . field [ 1 ][ 0 ] = State . EINS ; this . field [ 1 ][ 1 ] = State . GELB ; this . field [ 1 ][ 2 ] = State . GELB ; } /** * Hilfsmethode, um zu wissen, in welcher Zeile sich das leere Feld befindet * damit ist makeMove() etwas kuerzer * @return zeile von LEER */ int getLeerZeile () { for ( int zeile = 0 ; zeile < 2 ; zeile ++ ) for ( int spalte = 0 ; spalte < 3 ; spalte ++ ) if ( this . field [ zeile ][ spalte ]== State . LEER ) return zeile ; return - 1 ; // fehlerfall - kommt aber nicht vor } /** * Hilfsmethode, um zu wissen, in welcher Zeile sich das leere Feld befindet * damit ist makeMove() etwas kuerzer * @return spalte von LEER */ int getLeerSpalte () { for ( int zeile = 0 ; zeile < 2 ; zeile ++ ) for ( int spalte = 0 ; spalte < 3 ; spalte ++ ) if ( this . field [ zeile ][ spalte ]== State . LEER ) return spalte ; return - 1 ; // fehlerfall - kommt aber nicht vor } /** * von field[fromZeile][fromSpalte] aus wird gezogen * es wird geprueft, ob die leere Kachel entweder in der gleichen zeile * ist --> dann muss die spalte von LEER entweder links oder rechts sein (+/+ 1) * oder in der gleichen spalte --> dann muss die zeile von LEER entweder * darueber oder darunter sein (+/+ 1) * @param fromZeile * @param fromSpalte * @return ob zug ausgefuehrt wurde oder nicht */ boolean makeMove ( int fromZeile , int fromSpalte ) { if ( this . field [ fromZeile ][ fromSpalte ]!= State . LEER ) { int zeileLeer = this . getLeerZeile (); int spalteLeer = this . getLeerSpalte (); if (( Math . abs ( zeileLeer - fromZeile ) == 1 && spalteLeer - fromSpalte == 0 ) || ( zeileLeer - fromZeile == 0 && Math . abs ( spalteLeer - fromSpalte ) == 1 )) { this . field [ zeileLeer ][ spalteLeer ]= this . field [ fromZeile ][ fromSpalte ] ; this . field [ fromZeile ][ fromSpalte ]= State . LEER ; this . printField (); // nur zum debuggen this . anzMoves ++ ; return true ; } } return false ; } /** * definition des endzustands (links oben EINS, links unten ZWEI) * @return ob endzustand erreicht oder nicht */ boolean ende () { return ( this . field [ 0 ][ 0 ]== State . EINS && this . field [ 1 ][ 0 ]== State . ZWEI ); } /********************************************* * jetzt alles fuer die View - ganz zu Anfang */ JPanel initialiserePanels () { this . panels = new MyPanel [ 2 ][ 3 ] ; for ( int zeile = 0 ; zeile < 2 ; zeile ++ ) { for ( int spalte = 0 ; spalte < 3 ; spalte ++ ) { this . panels [ zeile ][ spalte ] = new MyPanel ( zeile , spalte ); this . panels [ zeile ][ spalte ] . view ( this . field [ zeile ][ spalte ] ); this . mainPanel . add ( this . panels [ zeile ][ spalte ] ); } } return this . mainPanel ; } JPanel mainPanelStart () { this . mainPanel = new JPanel (); this . mainPanel . setLayout ( new GridLayout ( 2 , 3 , 3 , 3 )); this . initialisiereField (); // model this . initialiserePanels (); // view return mainPanel ; } JPanel infoLabelPanel () { JPanel infoPanel = new JPanel (); this . infoLabel = new JLabel ( \"Anzahl Zuege : \" + this . anzMoves ); this . infoLabel . setFont ( new Font ( \"Verdana\" , Font . ITALIC , 18 )); infoPanel . add ( this . infoLabel ); return infoPanel ; } JPanel buttonPanel () { JPanel buttonPanel = new JPanel (); JButton neuStart = new JButton ( \"Neustart\" ); neuStart . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Puzzle . this . restart (); } }); buttonPanel . add ( neuStart ); return buttonPanel ; } /** * jetzt f\u00fcr Restart und Update * Restart: nach Druecken des Buttons \"Neustart\" * Update: nach jedem Zug */ void restart () { this . anzMoves = 0 ; this . infoLabel . setFont ( new Font ( \"Verdana\" , Font . ITALIC , 18 )); this . initialisiereField (); this . updatePanels (); } void updateLabel ( boolean ende ) { if ( ende ) { this . infoLabel . setFont ( new Font ( \"Verdana\" , Font . ITALIC | Font . BOLD , 18 )); this . infoLabel . setText ( \"Ende! Anzahl Zuege : \" + this . anzMoves ); } else { this . infoLabel . setText ( \"Anzahl Zuege : \" + this . anzMoves ); } } void updatePanels () { for ( int zeile = 0 ; zeile < 2 ; zeile ++ ) { for ( int spalte = 0 ; spalte < 3 ; spalte ++ ) { this . panels [ zeile ][ spalte ] . view ( this . field [ zeile ][ spalte ] ); } } this . updateLabel ( this . ende ()); } /** * das ist nur zum \"Debuggen\" - aber ganz nuetzlich */ void printField () { for ( int zeile = 0 ; zeile < 2 ; zeile ++ ) { for ( int spalte = 0 ; spalte < 3 ; spalte ++ ) { if ( this . field [ zeile ][ spalte ]== State . LEER ) System . out . print ( \" -\" ); else if ( this . field [ zeile ][ spalte ]== State . EINS ) System . out . print ( \" 1\" ); else if ( this . field [ zeile ][ spalte ]== State . ZWEI ) System . out . print ( \" 2\" ); else if ( this . field [ zeile ][ spalte ]== State . GELB ) System . out . print ( \" o\" ); } System . out . println (); } System . out . println (); } /** * die Klasse f\u00fcr die \"Kacheln\" * die \"Kacheln\" sind JPanels (mit allen JPanel-Methoden) * ausserdem noch nuetzliche Objekteigenschaften: zeile, spalte und das Label, * das auf der Kachel ist (f\u00fcr GELB und LEER ist das Label leer) */ class MyPanel extends JPanel implements MouseListener { int zeile ; int spalte ; JLabel label ; MyPanel ( int zeile , int spalte ) { super (); this . zeile = zeile ; this . spalte = spalte ; this . setLayout ( new GridLayout ()); this . label = new JLabel (); this . label . setHorizontalAlignment ( JLabel . CENTER ); this . label . setForeground ( Color . WHITE ); this . label . setFont ( new Font ( \"Verdana\" , Font . BOLD , 48 )); this . add ( label ); this . addMouseListener ( this ); } void view ( State state ) { switch ( state ) // geht natuerlich auch mit if(state==State.EINS) usw. { case EINS : this . setBackground ( Color . RED ); this . label . setText ( \"1\" ); break ; case ZWEI : this . setBackground ( Color . RED ); this . label . setText ( \"2\" ); break ; case LEER : this . setBackground ( Color . LIGHT_GRAY ); this . label . setText ( \"\" ); break ; case GELB : this . setBackground ( Color . YELLOW ); this . label . setText ( \"\" ); break ; } } @Override public void mouseClicked ( MouseEvent e ) { if ( ! Puzzle . this . ende () && Puzzle . this . makeMove ( this . zeile , this . spalte )) Puzzle . this . updatePanels (); } @Override public void mousePressed ( MouseEvent e ) {} @Override public void mouseReleased ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } public static void main ( String [] args ) { new Puzzle (); } } Rechtecke anordnen \u00b6 Aufgabe Rechtecke anordnen Implementieren Sie folgende GUI: die Abbildung zeigt die Ausgangssituation Die Zeichenfl\u00e4che ist in 4 gleichgro\u00dfe Teile unterteilt. Diese Unterteilung wird durch Linien dargestellt. Durch Dr\u00fccken des Buttons rectangle erscheint (beim ersten Mal ein gr\u00fcnes) Rechteck. Dieses Rechteck kann dann mit gedr\u00fcckter Maustaste verschoben werden. Sobald es im linken oberen Feld ist, wird es dort fixiert und kann nicht mehr bewegt werden. die obige Abbildung zeigt die Situation, in der das gr\u00fcne Rechteck fixiert ist und nicht mehr bewegt werden kann Nachdem das gr\u00fcne (erste) Rechteck fixiert ist, kann der Button rectangle ein weiteres Mal gedr\u00fcckt werden. Es erscheint ein rotes Rechteck. Das rote Rechteck soll in das rechte obere Feld. Nachdem auch das rote Rechteck fixiert ist, kann der Button rectangle ein weiteres Mal gedr\u00fcckt werden. Es erscheint ein gelbes Rechteck. Das gelbe Rechteck soll in das linke untere Feld. Nun kann der Button rectangle ein weiteres Mal gedr\u00fcckt werden. Es erscheint ein dunkelgraues Rechteck. Das dunkelgraue Rechteck soll in das rechte untere Feld. Wenn auch das graue Rechteck fixiert ist, ist die Endesituation erreicht (siehe Label oben in der folgenden Abbildung): Nach Klick auf den Button clear wird wieder die Ausgangssituation hergestellt: L\u00f6sung Rechtecke anordnen MyRectangle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 import java.awt.Color ; import java.awt.Point ; public class MyRectangle { int x1 , y1 , x2 , y2 ; Color color ; boolean fixed ; MyRectangle ( int x1 , int y1 , int x2 , int y2 , Color color ) { this . x1 = x1 ; this . y1 = y1 ; this . x2 = x2 ; this . y2 = y2 ; this . color = color ; this . fixed = false ; } boolean inside ( int x , int y ) { return ( this . x1 <= x && this . x2 >= x && this . y1 <= y && this . y2 >= y ); } boolean inside ( Point p ) { return inside ( p . x , p . y ); } void move ( int diffX , int diffY ) { if ( ! this . fixed ) { this . x1 = this . x1 + diffX ; this . y1 = this . y1 + diffY ; this . x2 = this . x2 + diffX ; this . y2 = this . y2 + diffY ; } } Color getColor () { return this . color ; } Point getLinksOben () { return new Point ( this . x1 , this . y1 ); } Point getRechtsOben () { return new Point ( this . x2 , this . y1 ); } Point getLinksUnten () { return new Point ( this . x1 , this . y2 ); } Point getRechtsUnten () { return new Point ( this . x2 , this . y2 ); } } RechteckeAnordnen.javaimport java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Font ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.ArrayList ; import java.util.List ; import javax.swing.* ; public class RechteckeAnordnen extends JFrame { JButton resetButton , newRectButton ; MyRectangle aktRechteck = null ; List < MyRectangle > rectangles = new ArrayList <> (); Canvas canvas ; JLabel infoLabel ; int anzRectFixed = 0 ; RechteckeAnordnen () { super ( \"Rechtecke fixieren\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . createInfoPanel (), BorderLayout . NORTH ); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . getContentPane (). add ( this . createButtons (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setVisible ( true ); } JPanel createInfoPanel () { JPanel infoPanel = new JPanel (); this . infoLabel = new JLabel ( this . anzRectFixed + \" Rechtecke fixiert\" ); this . infoLabel . setFont ( new Font ( \"Verdana\" , Font . ITALIC , 18 )); infoPanel . add ( this . infoLabel ); return infoPanel ; } JPanel createButtons () { JPanel buttonPanel = new JPanel (); this . resetButton = new JButton ( \"clear\" ); this . resetButton . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { RechteckeAnordnen . this . aktRechteck = null ; RechteckeAnordnen . this . anzRectFixed = 0 ; RechteckeAnordnen . this . rectangles . clear (); RechteckeAnordnen . this . infoLabel . setFont ( new Font ( \"Verdana\" , Font . ITALIC , 18 )); RechteckeAnordnen . this . infoLabel . setText ( RechteckeAnordnen . this . anzRectFixed + \" Rechtecke fixiert\" ); RechteckeAnordnen . this . canvas . repaint (); } }); buttonPanel . add ( resetButton ); this . newRectButton = new JButton ( \"rectangle\" ); this . newRectButton . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { if ( RechteckeAnordnen . this . aktRechteck == null && RechteckeAnordnen . this . anzRectFixed < 4 ) { int x = RechteckeAnordnen . this . canvas . getWidth () / 4 ; int y = RechteckeAnordnen . this . canvas . getHeight () / 4 ; Color color = null ; switch ( RechteckeAnordnen . this . rectangles . size ()) { case 0 : color = Color . GREEN ; break ; case 1 : color = Color . RED ; break ; case 2 : color = Color . YELLOW ; break ; case 3 : color = Color . DARK_GRAY ; break ; default : color = Color . WHITE ; break ; } RechteckeAnordnen . this . aktRechteck = new MyRectangle ( x , y , x + 2 * x , y + 2 * y , color ); RechteckeAnordnen . this . canvas . repaint (); } } }); buttonPanel . add ( newRectButton ); return buttonPanel ; } class Canvas extends JPanel implements MouseListener , MouseMotionListener { boolean move = false ; Point from ; Canvas () { this . setBorder ( BorderFactory . createLineBorder ( Color . black )); this . addMouseListener ( this ); this . addMouseMotionListener ( this ); } @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; int widthPanel = this . getWidth (); // Breite der Canvas int heightPanel = this . getHeight (); // Hoehe der Canvas g2 . drawLine ( widthPanel / 2 , 0 , widthPanel / 2 , heightPanel ); g2 . drawLine ( 0 , heightPanel / 2 , widthPanel , heightPanel / 2 ); for ( MyRectangle rect : RechteckeAnordnen . this . rectangles ) { g2 . setColor ( rect . color ); int x = rect . x1 ; int y = rect . y1 ; int width = rect . x2 - rect . x1 ; int height = rect . y2 - rect . y1 ; g2 . fill3DRect ( x , y , width , height , true ); } if ( RechteckeAnordnen . this . aktRechteck != null ) { g2 . setColor ( RechteckeAnordnen . this . aktRechteck . color ); int x = RechteckeAnordnen . this . aktRechteck . x1 ; int y = RechteckeAnordnen . this . aktRechteck . y1 ; int width = RechteckeAnordnen . this . aktRechteck . x2 - RechteckeAnordnen . this . aktRechteck . x1 ; int height = RechteckeAnordnen . this . aktRechteck . y2 - RechteckeAnordnen . this . aktRechteck . y1 ; g2 . fill3DRect ( x , y , width , height , true ); } } @Override public void mouseClicked ( MouseEvent e ) {} @Override public void mousePressed ( MouseEvent e ) { this . from = e . getPoint (); if ( RechteckeAnordnen . this . aktRechteck != null && RechteckeAnordnen . this . aktRechteck . inside ( from )) { this . move = true ; } } @Override public void mouseReleased ( MouseEvent e ) { this . move = false ; } @Override public void mouseEntered ( MouseEvent e ) { } @Override public void mouseExited ( MouseEvent e ) { } @Override public void mouseDragged ( MouseEvent e ) { Point here = e . getPoint (); if ( move ) { int diffX = here . x - this . from . x ; int diffY = here . y - this . from . y ; RechteckeAnordnen . this . aktRechteck . move ( diffX , diffY ); this . from = here ; int diff = 15 ; switch ( RechteckeAnordnen . this . anzRectFixed ) { case 0 : Point goal = new Point ( 0 , 0 ); Point corner = RechteckeAnordnen . this . aktRechteck . getLinksOben (); if ( Math . abs ( goal . x - corner . x ) < 5 && Math . abs ( goal . y - corner . y ) < diff ) { this . move = false ; RechteckeAnordnen . this . rectangles . add ( new MyRectangle ( 0 , 0 , this . getWidth () / 2 , this . getHeight () / 2 , RechteckeAnordnen . this . aktRechteck . getColor ())); RechteckeAnordnen . this . aktRechteck = null ; RechteckeAnordnen . this . anzRectFixed ++ ; RechteckeAnordnen . this . infoLabel . setText ( RechteckeAnordnen . this . anzRectFixed + \" Rechtecke fixiert\" ); } break ; case 1 : goal = new Point ( this . getWidth (), 0 ); corner = RechteckeAnordnen . this . aktRechteck . getRechtsOben (); if ( Math . abs ( goal . x - corner . x ) < 5 && Math . abs ( goal . y - corner . y ) < diff ) { this . move = false ; RechteckeAnordnen . this . rectangles . add ( new MyRectangle ( this . getWidth () / 2 + 1 , 0 , this . getWidth (), this . getHeight () / 2 , RechteckeAnordnen . this . aktRechteck . getColor ())); RechteckeAnordnen . this . aktRechteck = null ; RechteckeAnordnen . this . anzRectFixed ++ ; RechteckeAnordnen . this . infoLabel . setText ( RechteckeAnordnen . this . anzRectFixed + \" Rechtecke fixiert\" ); } break ; case 2 : goal = new Point ( 0 , this . getHeight ()); corner = RechteckeAnordnen . this . aktRechteck . getLinksUnten (); if ( Math . abs ( goal . x - corner . x ) < 5 && Math . abs ( goal . y - corner . y ) < diff ) { this . move = false ; RechteckeAnordnen . this . rectangles . add ( new MyRectangle ( 0 , this . getHeight () / 2 + 1 , this . getWidth () / 2 , this . getHeight (), RechteckeAnordnen . this . aktRechteck . getColor ())); RechteckeAnordnen . this . aktRechteck = null ; RechteckeAnordnen . this . anzRectFixed ++ ; RechteckeAnordnen . this . infoLabel . setText ( RechteckeAnordnen . this . anzRectFixed + \" Rechtecke fixiert\" ); } break ; case 3 : goal = new Point ( this . getWidth (), this . getHeight ()); corner = RechteckeAnordnen . this . aktRechteck . getRechtsUnten (); if ( Math . abs ( goal . x - corner . x ) < 5 && Math . abs ( goal . y - corner . y ) < diff ) { this . move = false ; RechteckeAnordnen . this . rectangles . add ( new MyRectangle ( this . getWidth () / 2 + 1 , this . getHeight () / 2 + 1 , this . getWidth (), this . getHeight (), RechteckeAnordnen . this . aktRechteck . getColor ())); RechteckeAnordnen . this . aktRechteck = null ; RechteckeAnordnen . this . anzRectFixed ++ ; RechteckeAnordnen . this . infoLabel . setFont ( new Font ( \"Verdana\" , Font . ITALIC | Font . BOLD , 18 )); RechteckeAnordnen . this . infoLabel . setText ( RechteckeAnordnen . this . anzRectFixed + \" Rechtecke fixiert -- ENDE\" ); } break ; } this . repaint (); } } @Override public void mouseMoved ( MouseEvent e ) { } } public static void main ( String [] args ) { new RechteckeAnordnen (); } }","title":"Klausurvorbereitung"},{"location":"klausurvorbereitung/#klausurvorbereitung","text":"Alle wesentlichen Konzepte, die wir f\u00fcr die Klausur ben\u00f6tigen, haben wir jetzt in diesem und im vergangenen Semester gelernt. Wir wollen diese Kenntnisse nun durch mehrere Anwendungen vertiefen. Ganz vereinzelt wird dabei auch etwas Neues auftauchen. Dabei handelt es sich aber nicht um ein neues Konzept, sondern bspw. um einen Listener, den wir noch nicht hatten. Solche \"\u00dcberraschungen\" werden Sie aber in der Klausur nicht erleben. Dieses Kapitel wird hier so aufgebaut sein, dass es immer eine Aufgabe (eine Probeklausur) gibt und die dazugeh\u00f6rige L\u00f6sung, die aber \"aufgeklappt\" werden muss. Sie k\u00f6nnen ja immer zuerst probieren, die L\u00f6sung selbst\u00e4ndig zu entwickeln. Wenn Sie am Ende alle Aufgaben selbst\u00e4ndig l\u00f6sen k\u00f6nnen, sind Sie mit Sicherheit sehr gut auf die Klausur vorbereitet. Wir beginnen aber noch kurz mit allgemeinen Betrachtungen zum Grundger\u00fcst. Eines der nachfolgend vorgestellten Grundger\u00fcste werden Sie mit Sicherheit bei der Klausur verwenden k\u00f6nnen.","title":"Klausurvorbereitung"},{"location":"klausurvorbereitung/#mogliche-grundgeruste","text":"Wie Sie wissen, ist das Fenster ( JFrame ) im BorderLayout . Das bedeutet, dass das Fenster in f\u00fcnf Bereiche ( Container ) unterteilt ist. Sie m\u00fcssen sich bei der Konfiguration \u00fcberlegen, ob \"gezeichnet\" werden soll, d.h. ob das JPanel im CENTER des Fensters eine eigene Klasse ist, oder ob es mithilfe einer Methode erzeugt werden kann und welche der f\u00fcndf Bereiche Sie ben\u00f6tigen. Wir erl\u00e4utern das an Beispielen und beginnen mit einem Grundger\u00fcst, welches wir f\u00fcr das Zeichnen verwenden k\u00f6nnen, welches also eine Canvas enth\u00e4lt. Grundger\u00fcst mit Canvas 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 import java.awt.BorderLayout ; import java.awt.Graphics ; import java.awt.Graphics2D ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class GrundgeruestMitCanvas extends JFrame { Canvas canvas ; public GrundgeruestMitCanvas () { super (); this . setTitle ( \"GrundgeruestMitCanvas\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); // von den folgenden vier Zeilen werden eventuell eine oder mehrere oder alle auskommentiert this . getContentPane (). add ( this . initNorth (), BorderLayout . NORTH ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . getContentPane (). add ( this . initEast (), BorderLayout . EAST ); this . getContentPane (). add ( this . initWest (), BorderLayout . WEST ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } private JPanel initNorth () { JPanel north = new JPanel (); // hier das JPanel fuer NORTH befuellen return north ; } private JPanel initSouth () { JPanel south = new JPanel (); // hier das JPanel fuer SOUTH befuellen return south ; } private JPanel initEast () { JPanel east = new JPanel (); // hier das JPanel fuer EAST befuellen return east ; } private JPanel initWest () { JPanel west = new JPanel (); // hier das JPanel fuer WEST befuellen return west ; } public static void main ( String [] args ) { new GrundgeruestMitCanvas (); } } In diesem Grundger\u00fcst werden alle f\u00fcnf Bereiche des Fensters mit JPanel bef\u00fcllt. Das CENTER wird mit einem Objekt der Klasse Canvas bef\u00fcllt, welche von JPanel erbt. Diese Klasse wird ben\u00f6tigt, um in die paintComponent() -Methode zu zeichnen. Sollten Sie z.B. kein Panel im EAST - und im WEST -Bereich des Fensters ben\u00f6tigen, dann l\u00f6schen Sie einfach die Zeilen 23 und 24 sowei die beiden Methoden initEast() und initWest() . Ein Grundger\u00fcst ohne Canvas , also ohne Zeichnen, k\u00f6nnte dann so aussehen: Grundger\u00fcst ohne Canvas 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 import java.awt.BorderLayout ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class GrundgeruestOhneCanvas extends JFrame { JPanel content ; public GrundgeruestOhneCanvas () { super (); this . setTitle ( \"GrundgeruestMitCanvas\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . content = this . initCenter (); this . getContentPane (). add ( this . content , BorderLayout . CENTER ); // von den folgenden vier Zeilen werden eventuell eine oder mehrere oder alle auskommentiert this . getContentPane (). add ( this . initNorth (), BorderLayout . NORTH ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . getContentPane (). add ( this . initEast (), BorderLayout . EAST ); this . getContentPane (). add ( this . initWest (), BorderLayout . WEST ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private JPanel initCenter () { JPanel center = new JPanel (); // hier das JPanel fuer CENTER befuellen return center ; } private JPanel initNorth () { JPanel north = new JPanel (); // hier das JPanel fuer NORTH befuellen return north ; } private JPanel initSouth () { JPanel south = new JPanel (); // hier das JPanel fuer SOUTH befuellen return south ; } private JPanel initEast () { JPanel east = new JPanel (); // hier das JPanel fuer EAST befuellen return east ; } private JPanel initWest () { JPanel west = new JPanel (); // hier das JPanel fuer WEST befuellen return west ; } public static void main ( String [] args ) { new GrundgeruestOhneCanvas (); } } Beachten Sie, dass JPanel ohne Angabe eines LayoutManagers im FlowLayout sind. Das k\u00f6nnen Sie \u00e4ndern und die einzelnen JPanel auch noch weiter verschachteln . Eines dieser beiden Grundger\u00fcste k\u00f6nnen wir nun stets verwenden. Es muss dann jeweils \"nur\" noch angepasst werden. Wir beginnen mal mit einer Aufgabe.","title":"M\u00f6gliche Grundger\u00fcste"},{"location":"klausurvorbereitung/#quadrat","text":"Aufgabe Quadrat Schreiben Sie eine Klasse Quadrat , die folgendes Fenster darstellt: Es gibt also eine Zeichenfl\u00e4che ( Canvas ) und zwei Buttons new und fill . Nach dem Klicken des Buttons new soll ein schwarzes unausgef\u00fclltes Quadrat mit der Strichst\u00e4rke 3.0 so in der Zeichenfl\u00e4che erscheinen, dass es mittig in der Zeichenfl\u00e4che angeordnet ist und der k\u00fcrzere der beiden Abst\u00e4nde (links/rechts oder oben/unten) ca. 10% der Zeichenfl\u00e4che gro\u00df ist. Nach dem Klicken des Buttons new steht darin nicht mehr new , sondern refresh . Nach Klicken des Buttons fill soll das Quadrat mit einer zuf\u00e4llig gew\u00e4hlten Farbe bef\u00fcllt werden. Es soll aber trotzdem noch der schwarze Rand bleiben (am einfachsten: einmal mit der zuf\u00e4llig gew\u00e4hlten Farbe bef\u00fcllt und danach nochmal unbef\u00fcllt schwarz malen). Der Button wechselt den Text auf unfill . Nach dem Klicken auf unfill soll das Quadrat wieder unausgef\u00fcllt sein. Die zuf\u00e4llig erzeugte Farbe soll so lange die Farbe zum Ausf\u00fcllen bleiben, bis der refresh -Button geklickt wird, d.h. durch mehrmaliges Klicken des Button fill und unfill \u00e4ndert sich die Farbe zum Bef\u00fcllen des Quadrats nicht, erst durch Klicken des Button refresh wird eine neue Farbe erzeugt, die dann wieder bis zum n\u00e4chsten Klicken von refresh bleibt. Implementieren Sie den MouseListener und den MouseMotionListener so, dass Sie bei gedr\u00fcckter Maustaste die Gr\u00f6\u00dfe des Quadrates \u00e4ndern. Wenn Sie mit der Maus auf eine Kante des Quadrates ( +/-10px ) klicken und dann die Maus gedr\u00fcckt halten, \u00e4ndert sich die Gr\u00f6\u00dfe des Quadrates entsprechend. Wenn Sie weit weg von (also mehr als 10px von der Kante entfernt) einer Kante klicken (egal, ob im Quadrat oder au\u00dferhalb), passiert gar nichts. Die Gr\u00f6\u00dfen\u00e4nderungen sollen stets sofort sichtbar sein. Nach Loslassen der Maustaste bleibt das Quadrat in der eingestellten Gr\u00f6\u00dfe. Das Quadrat bleibt stets m\u00f6glichst mittig. Tipp : An welche Kante Sie klicken, ist egal. Klicken Sie auf eine vertikale Kante (links oder rechts), brauchen Sie nur die \u00c4nderungen des x-Wertes zu ber\u00fccksichtigen, klicken Sie auf eine horizontale Kante (oben oder unten), brauchen Sie nur die \u00c4nderungen der y-Werte zu ber\u00fccksichtigen, um die neue Gr\u00f6\u00dfe des Quadrates zu ermitteln. L\u00f6sung Quadrat Zuerst \u00fcberlegen wir uns, welches Grundger\u00fcst wir verwenden und wie wir es anpassen. Wir m\u00fcssen zeichnen , also das Grundger\u00fcst mit Canvas . Von den Nord-, S\u00fcd-, Ost-, West-Bereichen ben\u00f6tigen wir nur den S\u00fcden (dort kommen die 'new'- und fill -Buttons rein). Also ist das unser Ausgangspunkt, in das wir schonmal die Buttons eingef\u00fcgt haben: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 import java.awt.BorderLayout ; import java.awt.Graphics ; import java.awt.Graphics2D ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Quadrat extends JFrame { Canvas canvas ; public Quadrat () { super (); this . setTitle ( \"Quadrat\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } private JPanel initSouth () { JPanel south = new JPanel (); JButton newBtn = new JButton ( \"new\" ); JButton fillBtn = new JButton ( \"fill\" ); south . add ( newBtn ); south . add ( fillBtn ); return south ; } public static void main ( String [] args ) { new Quadrat (); } } Von den initXXX() -Methoden ben\u00f6tigen wir auch nur noch initSouth() . Die anderen drei sind deshalb gel\u00f6scht. Die Implementierung des ActionListener f\u00fcr den new -Button erledigen wir mit einer anonymen Klasse. Wir m\u00fcssen uns \u00fcberlegen, ob es notwendig ist, f\u00fcr das Quadrat eine eigene Datenstruktur (z.B. Klasse) anzulegen. Zun\u00e4chst machen wir das einmal ohne, sondern geben nur in einer globalen Variablen zeigeQuadrat an, ob das Quadrat gezeichnet werden soll oder nicht. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 import java.awt.BasicStroke ; import java.awt.BorderLayout ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Quadrat extends JFrame { Canvas canvas ; boolean zeigeQuadrat = false ; public Quadrat () { super (); this . setTitle ( \"Quadrat\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar if ( Quadrat . this . zeigeQuadrat ) { g2 . setStroke ( new BasicStroke ( 3.0f )); int canvasWidth = this . getWidth (); int canvasHeight = this . getHeight (); if ( canvasHeight > canvasWidth ) { int abstand = ( int )( canvasWidth * 0.1 ); int seiteQuadrat = ( int )( canvasWidth * 0.8 ); int oben = ( canvasHeight - seiteQuadrat ) / 2 ; g2 . drawRect ( abstand , oben , seiteQuadrat , seiteQuadrat ); } else { int abstand = ( int )( canvasHeight * 0.1 ); int seiteQuadrat = ( int )( canvasHeight * 0.8 ); int links = ( canvasWidth - seiteQuadrat ) / 2 ; g2 . drawRect ( links , abstand , seiteQuadrat , seiteQuadrat ); } } } } private JPanel initSouth () { JPanel south = new JPanel (); JButton newBtn = new JButton ( \"new\" ); newBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Quadrat . this . zeigeQuadrat = true ; JButton thisBtn = ( JButton ) e . getSource (); // kann nur der newBtn sein! thisBtn . setText ( \"refresh\" ); Quadrat . this . canvas . repaint (); } }); JButton fillBtn = new JButton ( \"fill\" ); south . add ( newBtn ); south . add ( fillBtn ); return south ; } public static void main ( String [] args ) { new Quadrat (); } } Wenn die Variable zeigeQuadrat durch den Buttonklick auf true gesetzt wurde (Zeile 74 ), dann wird in der paintComponent() -Methode das Quadrat dargestellt (Zeile 40 ). Zur korrekten Darstellung des Quadrates ist es von Bedeutung, ob das Fenster (die Canvas ) h\u00f6her als breit ist oder umgedreht (Zeile 45 ). Ist es h\u00f6her als breit, dann wird es in die Breite der Canvas eingepasst, d.h. der Abstand nach links ist 1/10 der Canvas -Breite (Zeile 47 ) und die Seitenl\u00e4nge des Quadrates ist 8/10 der Breite (Zeile 48 ). Der Abstand des Quadrates nach oben muss entsprechend berechnet werden (Zeile 49 ). Ist es breiter als hoch, dann wird es in die H\u00f6he der Canvas eingepasst, d.h. der Abstand nach oben ist 1/10 der Canvas -H\u00f6he (Zeile 54 ) und die Seitenl\u00e4nge des Quadrates ist 8/10 der H\u00f6he (Zeile 55 ). Der Abstand des Quadrates nach links muss entsprechend berechnet werden (Zeile 56 ). In der actionPerformed() -Methode f\u00fcr den Button wird nicht nur zeigeQuadrat auf true gesetzt, sondern die Canvas auch neu gezeichnet (Zeile 77 )! Die Quelle des ActionEvent kann nur der Button selbst sein, da wir eine anonyme Klasse zur Implementierung des ActionListener verwenden. Deshalb k\u00f6nnen wir die Quelle ohne Pr\u00fcfung in einen JButton konvertieren (Zeile 75 ). Mithilfe der setText() -methode f\u00fcr JButton setzen wir den neuen Buttontext auf refresh (Zeile 76 ). Die Implementierung des ActionListener f\u00fcr den fill -Button erledigen wir erneut mit einer anonymen Klasse. Wir gehen \u00e4hnlich vor, wie beim new -Button und erstellen eine globale Variable fuelleQuadrat . Diese gibt an, ob das Quadrat bef\u00fcllt gezeichnet werden soll oder nicht. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 import java.awt.BasicStroke ; import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.util.Random ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Quadrat extends JFrame { Canvas canvas ; boolean zeigeQuadrat = false ; boolean fuelleQuadrat = false ; public Quadrat () { super (); this . setTitle ( \"Quadrat\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar if ( Quadrat . this . zeigeQuadrat ) { g2 . setStroke ( new BasicStroke ( 3.0f )); int canvasWidth = this . getWidth (); int canvasHeight = this . getHeight (); Random r = new Random (); int rot = r . nextInt ( 256 ); int gruen = r . nextInt ( 256 ); int blau = r . nextInt ( 256 ); g2 . setColor ( new Color ( rot , gruen , blau )); if ( canvasHeight > canvasWidth ) { int abstand = ( int )( canvasWidth * 0.1 ); int seiteQuadrat = ( int )( canvasWidth * 0.8 ); int oben = ( canvasHeight - seiteQuadrat ) / 2 ; if ( fuelleQuadrat ) { g2 . fillRect ( abstand , oben , seiteQuadrat , seiteQuadrat ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( abstand , oben , seiteQuadrat , seiteQuadrat ); } else { int abstand = ( int )( canvasHeight * 0.1 ); int seiteQuadrat = ( int )( canvasHeight * 0.8 ); int links = ( canvasWidth - seiteQuadrat ) / 2 ; if ( fuelleQuadrat ) { g2 . fillRect ( links , abstand , seiteQuadrat , seiteQuadrat ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( links , abstand , seiteQuadrat , seiteQuadrat ); } } } } private JPanel initSouth () { JPanel south = new JPanel (); JButton newBtn = new JButton ( \"new\" ); newBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Quadrat . this . zeigeQuadrat = true ; JButton thisBtn = ( JButton ) e . getSource (); // kann nur der newBtn sein! thisBtn . setText ( \"refresh\" ); Quadrat . this . canvas . repaint (); } }); JButton fillBtn = new JButton ( \"fill\" ); fillBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { JButton thisBtn = ( JButton ) e . getSource (); if ( thisBtn . getText (). equals ( \"fill\" )) { Quadrat . this . fuelleQuadrat = true ; thisBtn . setText ( \"unfill\" ); } else { Quadrat . this . fuelleQuadrat = false ; thisBtn . setText ( \"fill\" ); } Quadrat . this . canvas . repaint (); } }); south . add ( newBtn ); south . add ( fillBtn ); return south ; } public static void main ( String [] args ) { new Quadrat (); } } Die Farbe zum Ausf\u00fcllen erzeugen wir zuf\u00e4llig mithilfe von Random (Zeilen 48-52 ). Es wird jeweils zuerst aus das ausgef\u00fcllte Quadrat gezeichnet (Zeile 61 bzw. 73 ) falls fuelleQuadrat den Wert true hat (Zeile 59 bzw. 71 ). Nach dem Zeichnen des bef\u00fcllten Quadrates wird die Zeichenfarbe wieder auf schwarz gestellt (Zeile 63 bzw. 75 ) und dann das nichtausgef\u00fcllte Quadrat gezeichnet. In der actionPerformed() _Methode m\u00fcssen wir unterscheiden, ob im Button fill steht oder unfill (zeile 108 ). Je nachdem wird fuelleQuadrat auf true oder false gesetzt und der Text im Button entsprechend ge\u00e4ndert. Um nicht bei jeden Aufruf von paintComponent() eine neue F\u00fcllfarbe zuf\u00e4llig zu erzeugen, muss das Erzeugen der Farbe ausgelagert werden. Da auf die Farbe sowohl in paintComponent() ( View ) als auch in actionPerfomed() ( Controller ) zugegriffen wird, muss diese als globale Referenz deklariert werden. Wahrscheinlich ist es gut, die Farbe beim ersten Mal zu erzeugen, wenn der new -Button geklickt wird und dann immer durch das Klicken des refresh -Buttons. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 import java.awt.BasicStroke ; import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.util.Random ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Quadrat extends JFrame { Canvas canvas ; boolean zeigeQuadrat = false ; boolean fuelleQuadrat = false ; Color aktuelleFuellfarbe = Color . WHITE ; public Quadrat () { super (); this . setTitle ( \"Quadrat\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar if ( Quadrat . this . zeigeQuadrat ) { g2 . setStroke ( new BasicStroke ( 3.0f )); int canvasWidth = this . getWidth (); int canvasHeight = this . getHeight (); g2 . setColor ( Quadrat . this . aktuelleFuellfarbe ); if ( canvasHeight > canvasWidth ) { int abstand = ( int )( canvasWidth * 0.1 ); int seiteQuadrat = ( int )( canvasWidth * 0.8 ); int oben = ( canvasHeight - seiteQuadrat ) / 2 ; if ( fuelleQuadrat ) { g2 . fillRect ( abstand , oben , seiteQuadrat , seiteQuadrat ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( abstand , oben , seiteQuadrat , seiteQuadrat ); } else { int abstand = ( int )( canvasHeight * 0.1 ); int seiteQuadrat = ( int )( canvasHeight * 0.8 ); int links = ( canvasWidth - seiteQuadrat ) / 2 ; if ( fuelleQuadrat ) { g2 . fillRect ( links , abstand , seiteQuadrat , seiteQuadrat ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( links , abstand , seiteQuadrat , seiteQuadrat ); } } } } private JPanel initSouth () { JPanel south = new JPanel (); JButton newBtn = new JButton ( \"new\" ); newBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { JButton thisBtn = ( JButton ) e . getSource (); if ( thisBtn . getText (). equals ( \"new\" )) { Quadrat . this . zeigeQuadrat = true ; thisBtn . setText ( \"refresh\" ); } Random r = new Random (); int rot = r . nextInt ( 256 ); int gruen = r . nextInt ( 256 ); int blau = r . nextInt ( 256 ); Quadrat . this . aktuelleFuellfarbe = new Color ( rot , gruen , blau ); Quadrat . this . canvas . repaint (); } }); JButton fillBtn = new JButton ( \"fill\" ); fillBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { JButton thisBtn = ( JButton ) e . getSource (); if ( thisBtn . getText (). equals ( \"fill\" )) { Quadrat . this . fuelleQuadrat = true ; thisBtn . setText ( \"unfill\" ); } else { Quadrat . this . fuelleQuadrat = false ; thisBtn . setText ( \"fill\" ); } Quadrat . this . canvas . repaint (); } }); south . add ( newBtn ); south . add ( fillBtn ); return south ; } public static void main ( String [] args ) { new Quadrat (); } } F\u00fcr eine geeignete Implementierung des MouseListener und des MouseMotionListener ben\u00f6tigen wir globalen Zugriff auf die Gr\u00f6\u00dfe und die Position des Quadrates. Wir m\u00fcssen ja mit der Maus erkennen k\u00f6nnen, ob wir eine Kante des Quadrates getroffen haben. Wir lagern deshalb einige Werte des Quadrates global aus (und Umbenennungen): int quadratLinks, quadratRechts, quadratOben, quadratUnten, quadratLaenge; In paintComponent() werden diese globalen Variablen nun mit Werten belegt: if ( canvasHeight > canvasWidth ) { Quadrat . this . quadratLinks = ( int )( canvasWidth * 0.1 ); Quadrat . this . quadratLaenge = ( int )( canvasWidth * 0.8 ); Quadrat . this . quadratRechts = Quadrat . this . quadratLinks + Quadrat . this . quadratLaenge ; Quadrat . this . quadratOben = ( canvasHeight - Quadrat . this . quadratLaenge ) / 2 ; Quadrat . this . quadratUnten = Quadrat . this . quadratOben + Quadrat . this . quadratLaenge ; if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } else { Quadrat . this . quadratOben = ( int )( canvasHeight * 0.1 ); Quadrat . this . quadratLaenge = ( int )( canvasHeight * 0.8 ); Quadrat . this . quadratLinks = ( canvasWidth - Quadrat . this . quadratLaenge ) / 2 ; Quadrat . this . quadratRechts = Quadrat . this . quadratLinks + Quadrat . this . quadratLaenge ; Quadrat . this . quadratUnten = Quadrat . this . quadratOben + Quadrat . this . quadratLaenge ; if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } Nun implementieren wir MouseListener und MouseMotionListener und melden canvas daran animport java.awt.BasicStroke ; import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.Random ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Quadrat extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; boolean zeigeQuadrat = false ; boolean fuelleQuadrat = false ; Color aktuelleFuellfarbe = Color . WHITE ; int quadratLinks , quadratRechts , quadratOben , quadratUnten , quadratLaenge ; public Quadrat () { super (); this . setTitle ( \"Quadrat\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar if ( Quadrat . this . zeigeQuadrat ) { g2 . setStroke ( new BasicStroke ( 3.0f )); int canvasWidth = this . getWidth (); int canvasHeight = this . getHeight (); g2 . setColor ( Quadrat . this . aktuelleFuellfarbe ); if ( canvasHeight > canvasWidth ) { Quadrat . this . quadratLinks = ( int )( canvasWidth * 0.1 ); Quadrat . this . quadratLaenge = ( int )( canvasWidth * 0.8 ); Quadrat . this . quadratRechts = Quadrat . this . quadratLinks + Quadrat . this . quadratLaenge ; Quadrat . this . quadratOben = ( canvasHeight - Quadrat . this . quadratLaenge ) / 2 ; Quadrat . this . quadratUnten = Quadrat . this . quadratOben + Quadrat . this . quadratLaenge ; if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } else { Quadrat . this . quadratOben = ( int )( canvasHeight * 0.1 ); Quadrat . this . quadratLaenge = ( int )( canvasHeight * 0.8 ); Quadrat . this . quadratLinks = ( canvasWidth - Quadrat . this . quadratLaenge ) / 2 ; Quadrat . this . quadratRechts = Quadrat . this . quadratLinks + Quadrat . this . quadratLaenge ; Quadrat . this . quadratUnten = Quadrat . this . quadratOben + Quadrat . this . quadratLaenge ; if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } } } } private JPanel initSouth () { JPanel south = new JPanel (); JButton newBtn = new JButton ( \"new\" ); newBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { JButton thisBtn = ( JButton ) e . getSource (); if ( thisBtn . getText (). equals ( \"new\" )) { Quadrat . this . zeigeQuadrat = true ; thisBtn . setText ( \"refresh\" ); } Random r = new Random (); int rot = r . nextInt ( 256 ); int gruen = r . nextInt ( 256 ); int blau = r . nextInt ( 256 ); Quadrat . this . aktuelleFuellfarbe = new Color ( rot , gruen , blau ); Quadrat . this . canvas . repaint (); } }); JButton fillBtn = new JButton ( \"fill\" ); fillBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { JButton thisBtn = ( JButton ) e . getSource (); if ( thisBtn . getText (). equals ( \"fill\" )) { Quadrat . this . fuelleQuadrat = true ; thisBtn . setText ( \"unfill\" ); } else { Quadrat . this . fuelleQuadrat = false ; thisBtn . setText ( \"fill\" ); } Quadrat . this . canvas . repaint (); } }); south . add ( newBtn ); south . add ( fillBtn ); return south ; } public static void main ( String [] args ) { new Quadrat (); } @Override public void mousePressed ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mousePressed x=\" + x + \", y=\" + y ); } @Override public void mouseDragged ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseDragged x=\" + x + \", y=\" + y ); } @Override public void mouseReleased ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseReleased x=\" + x + \", y=\" + y ); } @Override public void mouseMoved ( MouseEvent e ) {} @Override public void mouseClicked ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } F\u00fcr das eigentliche Verschieben r\u00e4cht sich jetzt, dass wir uns anfangs keine gute Datenstruktur \u00fcberlegt hatten. Es wird jetzt alles ein wenig komplizierter, da wir mehrere Unterscheidungen treffen m\u00fcssen: Wir m\u00fcssen unterscheiden, ob das Quadrat nun gerade bewegt wird oder nicht. Wir m\u00fcssen unterscheiden, ob wir die linke Kante bewegen, oder die rechte oder die untere oder die obere. F\u00fcr alle dieses Unterscheidungen erstellen wir uns globale Variablen. if ( canvasHeight > canvasWidth ) { Quadrat . this . quadratLinks = ( int )( canvasWidth * 0.1 ); Quadrat . this . quadratLaenge = ( int )( canvasWidth * 0.8 ); Quadrat . this . quadratRechts = Quadrat . this . quadratLinks + Quadrat . this . quadratLaenge ; Quadrat . this . quadratOben = ( canvasHeight - Quadrat . this . quadratLaenge ) / 2 ; Quadrat . this . quadratUnten = Quadrat . this . quadratOben + Quadrat . this . quadratLaenge ; if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } else { Quadrat . this . quadratOben = ( int )( canvasHeight * 0.1 ); Quadrat . this . quadratLaenge = ( int )( canvasHeight * 0.8 ); Quadrat . this . quadratLinks = ( canvasWidth - Quadrat . this . quadratLaenge ) / 2 ; Quadrat . this . quadratRechts = Quadrat . this . quadratLinks + Quadrat . this . quadratLaenge ; Quadrat . this . quadratUnten = Quadrat . this . quadratOben + Quadrat . this . quadratLaenge ; if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } Nun implementieren wir MouseListener und MouseMotionListener und melden canvas daran animport java.awt.BasicStroke ; import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.Random ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Quadrat extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; boolean zeigeQuadrat = false ; boolean fuelleQuadrat = false ; Color aktuelleFuellfarbe = Color . WHITE ; int quadratLinks , quadratRechts , quadratOben , quadratUnten , quadratLaenge ; boolean bewegt = false ; boolean linkeKante = false ; boolean rechteKante = false ; boolean obereKante = false ; boolean untereKante = false ; int warX = 0 ; int warY = 0 ; public Quadrat () { super (); this . setTitle ( \"Quadrat\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar if ( Quadrat . this . zeigeQuadrat ) { g2 . setStroke ( new BasicStroke ( 3.0f )); int canvasWidth = this . getWidth (); int canvasHeight = this . getHeight (); g2 . setColor ( Quadrat . this . aktuelleFuellfarbe ); if ( ! Quadrat . this . bewegt ) { if ( canvasHeight > canvasWidth ) { Quadrat . this . quadratLinks = ( int )( canvasWidth * 0.1 ); Quadrat . this . quadratLaenge = ( int )( canvasWidth * 0.8 ); Quadrat . this . quadratRechts = Quadrat . this . quadratLinks + Quadrat . this . quadratLaenge ; Quadrat . this . quadratOben = ( canvasHeight - Quadrat . this . quadratLaenge ) / 2 ; Quadrat . this . quadratUnten = Quadrat . this . quadratOben + Quadrat . this . quadratLaenge ; if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } else { Quadrat . this . quadratOben = ( int )( canvasHeight * 0.1 ); Quadrat . this . quadratLaenge = ( int )( canvasHeight * 0.8 ); Quadrat . this . quadratLinks = ( canvasWidth - Quadrat . this . quadratLaenge ) / 2 ; Quadrat . this . quadratRechts = Quadrat . this . quadratLinks + Quadrat . this . quadratLaenge ; Quadrat . this . quadratUnten = Quadrat . this . quadratOben + Quadrat . this . quadratLaenge ; if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } } else // bewegt { if ( fuelleQuadrat ) { g2 . fillRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } g2 . setColor ( Color . BLACK ); g2 . drawRect ( Quadrat . this . quadratLinks , Quadrat . this . quadratOben , Quadrat . this . quadratLaenge , Quadrat . this . quadratLaenge ); } } } } private JPanel initSouth () { JPanel south = new JPanel (); JButton newBtn = new JButton ( \"new\" ); newBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { JButton thisBtn = ( JButton ) e . getSource (); if ( thisBtn . getText (). equals ( \"new\" )) { Quadrat . this . zeigeQuadrat = true ; thisBtn . setText ( \"refresh\" ); } Random r = new Random (); int rot = r . nextInt ( 256 ); int gruen = r . nextInt ( 256 ); int blau = r . nextInt ( 256 ); Quadrat . this . aktuelleFuellfarbe = new Color ( rot , gruen , blau ); Quadrat . this . canvas . repaint (); } }); JButton fillBtn = new JButton ( \"fill\" ); fillBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { JButton thisBtn = ( JButton ) e . getSource (); if ( thisBtn . getText (). equals ( \"fill\" )) { Quadrat . this . fuelleQuadrat = true ; thisBtn . setText ( \"unfill\" ); } else { Quadrat . this . fuelleQuadrat = false ; thisBtn . setText ( \"fill\" ); } Quadrat . this . canvas . repaint (); } }); south . add ( newBtn ); south . add ( fillBtn ); return south ; } public static void main ( String [] args ) { new Quadrat (); } @Override public void mousePressed ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mousePressed x=\" + x + \", y=\" + y ); int linksX = this . quadratLinks ; int rechtsX = this . quadratRechts ; int obenY = this . quadratOben ; int untenY = this . quadratUnten ; if ( x > linksX - 10 && x < linksX + 10 ) { this . bewegt = true ; this . linkeKante = true ; this . warX = x ; } else if ( x > rechtsX - 10 && x < rechtsX + 10 ) { this . bewegt = true ; this . rechteKante = true ; this . warX = x ; } else if ( y > obenY - 10 && y < obenY + 10 ) { this . bewegt = true ; this . obereKante = true ; this . warY = y ; } else if ( y > untenY - 10 && y < untenY + 10 ) { this . bewegt = true ; this . untereKante = true ; this . warY = y ; } } @Override public void mouseDragged ( MouseEvent e ) { if ( this . bewegt ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseDragged x=\" + x + \", y=\" + y ); if ( this . linkeKante ) { int diffX = x - this . warX ; this . quadratLinks = this . quadratLinks + diffX ; this . quadratOben = this . quadratOben + diffX ; this . quadratLaenge = this . quadratLaenge - 2 * diffX ; this . warX = x ; } else if ( this . rechteKante ) { int diffX = x - this . warX ; this . quadratLinks = this . quadratLinks - diffX ; this . quadratOben = this . quadratOben - diffX ; this . quadratLaenge = this . quadratLaenge + 2 * diffX ; this . warX = x ; } else if ( this . obereKante ) { int diffY = y - this . warY ; this . quadratLinks = this . quadratLinks + diffY ; this . quadratOben = this . quadratOben + diffY ; this . quadratLaenge = this . quadratLaenge - 2 * diffY ; this . warY = y ; } else if ( this . untereKante ) { int diffY = y - this . warY ; this . quadratLinks = this . quadratLinks - diffY ; this . quadratOben = this . quadratOben - diffY ; this . quadratLaenge = this . quadratLaenge + 2 * diffY ; this . warY = y ; } Quadrat . this . canvas . repaint (); } } @Override public void mouseReleased ( MouseEvent e ) { this . bewegt = false ; Quadrat . this . canvas . repaint (); } @Override public void mouseMoved ( MouseEvent e ) {} @Override public void mouseClicked ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } In mousePressed() bestimmen wir zun\u00e4chst, ob wir in der N\u00e4he der linken oder der rechten oder der oberen oder unteren Kante geklickt haben. Wenn ja, dann setzen wir die entsprechenden Variablen und merken uns, wo ( warX oder warY ) wir hingeklickt hatten. In mouseDragged() wird zun\u00e4chst ermittelt, ob wir \u00fcberhaupt im bewegt -Modus sind. Wenn ja, ermitteln wir, wie weit und wohin wir uns seit dem letzten Aufruf von mouseDragged() bewegt haben. Dementsprechend werden die Variablen f\u00fcr das Quadrat neu gesetzt. Wenn wir die Maus wieder loslassen ( mouseReleased() ) wird bewegt wieder auf false gesetzt und das Quadrat wird somit wieder \"normal\" durch die paintComponent() -Methode dargestellt.","title":"Quadrat"},{"location":"klausurvorbereitung/#schachbrett","text":"Aufgabe Schachbrett Schreiben Sie eine Klasse Schachbrett , die folgendes Fenster darstellt: Es werden 8x8 Rechtecke dargestellt \u2013 abwechselnd mit grauem und wei\u00dfem Hintergrund bitte beachten: die dargestellten Rechtecke sind gezeichnet, es handelt sich nicht um einzelne JPanels!!! (ist f\u00fcr sp\u00e4ter wichtig) das 8x8-Feld der Rechtecke f\u00fcllt die Zeichenfl\u00e4che vollst\u00e4ndig , d.h. wenn Sie die Gr\u00f6\u00dfe des Fensters ver\u00e4ndern, passt sich auch das 8x8-Feld entsprechend an Implementieren Sie den MausListener so, dass Sie durch Mausklick auf die Zeichenfl\u00e4che einen ausgef\u00fcllten Kreis in das Rechteck malen, in das Sie geklickt haben. Die Abbildung zeigt das Schachbrett nach einem Mausklick auf das Rechteck in der 2. Zeile und 4. Spalte. Versuchen Sie, die Kreise m\u00f6glichst zentriert in die Rechtecke zu malen. Eine gute Gr\u00f6\u00dfe f\u00fcr den Durchmesser der Kreise ist \u2153 der Breite oder H\u00f6he der Rechtecke. Klicken Sie mehrmals mit der Maus, werden entsprechend mehrere Kreise dargestellt. F\u00fcgen Sie dem S\u00fcden des Fensters ein JPanel hinzu. Dieses JPanel enth\u00e4lt einen JButton 'clear field' . Nach Dr\u00fccken dieses Buttons werden alle roten Kreise wieder gel\u00f6scht. Erweitern Sie Ihre Implementierung nun so, dass durch einen Mausklick nicht nur ein roter Kreis gezeichnet wird, sondern auch noch eine horizontale und eine vertikale Linie in der Zeile und der Spalte, in der der Kreis gezeichnet wird. in der Zeile und Spalte des Kreises erscheint jeweils mittig eine rote Linie Abbildung zeigt Schachbrett nach mehreren Mausklicks Die Linien m\u00fcssen nicht, wie im Bild dargestellt, in der Mitte der Rechtecke anfangen. Sie k\u00f6nnen auch komplett durchgezeichnet werden, d.h. vom Beginn bis zum Ende einer Zeile bzw. Spalte. Erweitern Sie Ihre Implementierung nun so, dass es nicht mehr m\u00f6glich ist, dass 2 Kreise in der gleichen Spalte oder in der gleichen Zeile erscheinen. Wenn Sie ein Rechteck anklicken, in dessen Zeile oder Spalte bereits ein anderer Kreis ist, so soll kein neuer Kreis gezeichnet werden, sondern das Rechteck als gr\u00fcnes Rechteck erscheinen. In das gr\u00fcne Rechteck wurde geklickt - es erscheint kein Kreis, da in der Zeile bereits ein Kreis ist \u2013 stattdessen ein gr\u00fcnes Rechteck. In das gr\u00fcne Rechteck wurde geklickt - es erscheint kein Kreis, da in der Zeile bereits ein Kreis ist - stattdessen ein gr\u00fcnes Rechteck. Das Rechteck bleibt nur bis zum n\u00e4chsten Klick markiert (gr\u00fcn). Zusatzaufgabe: Erweitern Sie die Schritte 5 und 6 auch auf die Diagonalen, d.h. es sollen auch die jeweiligen Diagonalen der Punkte eingezeichnet werden und keine zwei Punkte d\u00fcrfen in der gleichen Diagonalen liegen. L\u00f6sung Schachbrett Zuerst \u00fcberlegen wir uns, welches Grundger\u00fcst wir verwenden und wie wir es anpassen. Wir m\u00fcssen zeichnen , also das Grundger\u00fcst mit Canvas . Von den Nord-, S\u00fcd-, Ost-, West-Bereichen ben\u00f6tigen wir nur den S\u00fcden (dort kommt der 'clear field'-Button rein). Also ist das unser Ausgangspunkt: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 import java.awt.BorderLayout ; import java.awt.Graphics ; import java.awt.Graphics2D ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Schachbrett extends JFrame { Canvas canvas ; public Schachbrett () { super (); this . setTitle ( \"Schachbrett\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); // NORTH, EAST, WEST geloescht this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } private JPanel initSouth () { JPanel south = new JPanel (); // hier das JPanel fuer SOUTH befuellen return south ; } public static void main ( String [] args ) { new Schachbrett (); } } Von den initXXX() -Methoden ben\u00f6tigen wir auch nur noch initSouth() . Die anderen drei sind deshalb gel\u00f6scht. Jetzt k\u00f6nnen wir mit dem Zeichnen des Schachbretts beginnen. Dazu k\u00f6nnten wir \"einfach\" 64 gleich gro\u00dfe Rechtecke in die Canvas zeichnen. Wir sollten hier aber unbedingt daf\u00fcr ein Model , d.h. eine Datenstruktur erstellen und diese dann in der View darstellen. F\u00fcr eine solche Datenstruktur (f\u00fcr ein Model ) gibt es drei Gr\u00fcnde: wir wollen sp\u00e4ter erkennen, in welches Feld geklickt wurde und wir wollen erkennen k\u00f6nnen, in welches Feld bereits geklickt wurde und wir wollen erkennen k\u00f6nnen, welche Felder Nachbarfelder sind. Da die Dimensionen hier fest sind (8x8), kann man das in einem (zweidimensionalen) Array erledigen. Als Typ jedes einzelnen Elementes sollte boolean gen\u00fcgen - markiert oder nicht markiert. Wenn Sie sich nicht sicher sind, ob zwei Zust\u00e4nde gen\u00fcgen, k\u00f6nnen Sie auch eine enum als Typ verwenden. Wir machen das mal, dann bleibt die L\u00f6sung flexibler und wir \u00fcben enum nochmal. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 import java.awt.BorderLayout ; import java.awt.Graphics ; import java.awt.Graphics2D ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Schachbrett extends JFrame { Canvas canvas ; enum State { MARKIERT , UNMARKIERT }; State [][] field ; public Schachbrett () { super (); this . setTitle ( \"Schachbrett\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . initField (); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); // NORTH, EAST, WEST geloescht this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private void initField () { this . field = new State [ 8 ][ 8 ] ; for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { this . field [ row ][ col ] = State . UNMARKIERT ; } } } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } private JPanel initSouth () { JPanel south = new JPanel (); // hier das JPanel fuer SOUTH befuellen return south ; } public static void main ( String [] args ) { new Schachbrett (); } } Wir h\u00e4tten das field auch im Konstruktor erzeugen und bef\u00fcllen k\u00f6nnen, lagern es aber in eine eigene Methode aus und rufen diese im Konstruktor auf. Alles, was wir funktional in eine eigene Methode auslagern k\u00f6nnen, sollten wir auch auslagern - liest sich viel besser! Jetzt \u00fcberlegen wir, wie wir das Schachbrett darstellen (die View ). Die Darstellung erfolgt am besten mit der fillRect() -Methode. Diese erwartet die Koordinaten des linken oberen Punktes und die Breite und die H\u00f6he des Rechtecks. Breite und H\u00f6he ergeben sich aus der Breite und H\u00f6he der Canvas , jeweils geteilt durch 8 . Aus der Position des zu zeichnenden Rechtecks in einer Zeile ergibt sich dann der x -Wert f\u00fcr den linken oberen Punkt und aus der Position des zu zeichnenden Feldes in der Spalte ergibt sich der y -Wert des linken oberen Punktes. Wir \u00e4ndern nun nur die paintComponent() -Methode (die View ), da es nur um die Darstellung geht: 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int canvasHeight = this . getHeight (); int canvasWidth = this . getWidth (); int heightRect = canvasHeight / 8 ; int widthRect = canvasWidth / 8 ; boolean grey = true ; for ( int row = 0 ; row < Schachbrett . this . field . length ; row ++ ) { int y = row * heightRect ; // y-Wert des linken oberen Punktes grey = ! grey ; // mit gleichen Farbe anfangen, wie aufgehoert for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length ; col ++ ) { int x = col * widthRect ; // x-Wert des linken oberen Punktes if ( grey ) { g2 . setColor ( Color . LIGHT_GRAY ); grey = false ; } else { g2 . setColor ( Color . WHITE ); grey = true ; } g2 . fillRect ( x , y , widthRect , heightRect ); } } } } Wir laufen also durch das field -Array und ermitteln f\u00fcr die aktuelle Zeile den y -Wert und f\u00fcr die jeweils aktuelle Spalte den x -Wert. Damit wir immer zwischen Grau und Wei\u00df umschalten, erstellen wir uns eine boole'sche Variable grey , die abwechselnd true und false wird, je nachdem, ob wir als n\u00e4chstes ein graues oder ein wei\u00dfes Feld zeichnen wollen. Nach jeder Zeile \u00e4ndert sich die Farbe jedoch nicht (wir fangen in der neuen Zeile mit der gleichen Farbe an, wie wir in der alten Zeile aufgeh\u00f6rt haben). Deshalb mussten wir noch die Anweisung in Zeile 61 hinzuf\u00fcgen. Das Schachbrett wird nun so gezeichnet, wie wir das wollten. Wenn das Fenster vergr\u00f6\u00dfert oder verkleinert wird, dann passen sich die Felder entsprechend an, da wir alles abh\u00e4ngig von der Breite und H\u00f6he der Canvas berechnen. Wir k\u00f6nnen aber die Fenstergr\u00f6\u00dfe aber gleich etwas quadratischer gestalten (z.B. this.setSize(400, 400); ). Jetzt k\u00fcmmern wir uns um die roten Punkte inmitten des Rechtecks, falls wir mit der Maus darauf geklickt haben. Dazu ben\u00f6tigen wir den MouseListener , denn es geht um einen Mausklick (also entweder mouseClicked() oder mousePressed() ) und nicht um eine Bewegung der Maus. Wir entscheiden uns f\u00fcr mouseClicked() - das ist nun also unser Controller . Wir implementieren zun\u00e4chst den MouseListener und pr\u00fcfen, ob damit alles funktioniert (ob wir z.B. nicht vergessen haben, an den MouseListener anzumelden.) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Schachbrett extends JFrame implements MouseListener { Canvas canvas ; enum State { MARKIERT , UNMARKIERT }; State [][] field ; public Schachbrett () { super (); this . setTitle ( \"Schachbrett\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . initField (); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); // NORTH, EAST, WEST geloescht this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private void initField () { this . field = new State [ 8 ][ 8 ] ; for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { this . field [ row ][ col ] = State . UNMARKIERT ; } } } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int canvasHeight = this . getHeight (); int canvasWidth = this . getWidth (); int heightRect = canvasHeight / 8 ; int widthRect = canvasWidth / 8 ; boolean grey = true ; for ( int row = 0 ; row < Schachbrett . this . field . length ; row ++ ) { int y = row * heightRect ; // y-Wert des linken oberen Punktes grey = ! grey ; // mit einer anderen Farbe anfangen, als aufgehoert for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length ; col ++ ) { int x = col * widthRect ; // x-Wert des linken oberen Punktes if ( grey ) { g2 . setColor ( Color . LIGHT_GRAY ); grey = false ; } else { g2 . setColor ( Color . WHITE ); grey = true ; } g2 . fillRect ( x , y , widthRect , heightRect ); } } } } private JPanel initSouth () { JPanel south = new JPanel (); // hier das JPanel fuer SOUTH befuellen return south ; } public static void main ( String [] args ) { new Schachbrett (); } @Override public void mouseClicked ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked: [x=\" + x + \", \" + y + \"]\" ); } @Override public void mousePressed ( MouseEvent e ) {} @Override public void mouseReleased ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } Wir f\u00fcgen das implements MouseListener im Klassenkopf ein und importieren den MouseListener aus dem java.awt.event -Paket (lassen wir nat\u00fcrlich Eclipse erledigen). Wir lassen Eclipse durch Add unimplemented methods die Methoden aus dem MouseListener hinzuf\u00fcgen. Dabei wird auch MouseEvent importiert. Da wir uns f\u00fcr die Implementierung von mouseClicked() entschieden haben, k\u00f6nnen wir die anderen Methoden ein wenig verkleinern, um \u00dcbersicht zu bewahren. In mouseClicked() k\u00f6nnen wir schonmal die Koordinaten des MouseEvent abfragen und eine Ausgabe auf die Konsole durchf\u00fchren, um zu kontrollieren, ob alles funktioniert. Unbedingt m\u00fcssen wir nat\u00fcrlich canvas an den MouseListener anmelden (Zeile 25 ). mouseClicked() wird aufgerufen, wenn wir in das Feld klicken - die Koordinaten des Klicks in die Canvas werden auf der Konsole ausgegeben. Nun m\u00fcssten wir uns \u00fcberlegen, auf welches Rechteck aus dem field -Array wir geklickt haben. Dieses Rechteck wollen wir als MARKIERT speichern. Angenommen, wir kennen die Koordinaten x und y des Mausklicks in die Canvas . Um nun zu wissen, in welche \"Spalte\" oder \"Zeile\" wir geklickt haben, m\u00fcssen wir die Breite und H\u00f6he der Rechtecke kennen. Diese kennen wir aber in mouseClicked() nicht, da die Breite und H\u00f6he der Rechtecke jeweils von der Breite und H\u00f6he der Canvas abh\u00e4ngig ist (welche sich \u00e4ndern k\u00f6nnen). Die H\u00f6he und Breite der Rechtecke ist somit eine Eigenschaft der Canvas und um auf diese Eigenschaft zuzugreifen, m\u00fcssen wir sie global verf\u00fcgbar machen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Schachbrett extends JFrame implements MouseListener { Canvas canvas ; enum State { MARKIERT , UNMARKIERT }; State [][] field ; public Schachbrett () { super (); this . setTitle ( \"Schachbrett\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . initField (); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); // NORTH, EAST, WEST geloescht this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private void initField () { this . field = new State [ 8 ][ 8 ] ; for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { this . field [ row ][ col ] = State . UNMARKIERT ; } } } private class Canvas extends JPanel { int heightRect = 0 ; int widthRect = 0 ; @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int canvasHeight = this . getHeight (); int canvasWidth = this . getWidth (); this . heightRect = canvasHeight / 8 ; this . widthRect = canvasWidth / 8 ; boolean grey = true ; for ( int row = 0 ; row < Schachbrett . this . field . length ; row ++ ) { int y = row * this . heightRect ; // y-Wert des linken oberen Punktes grey = ! grey ; // mit einer anderen Farbe anfangen, als aufgehoert for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length ; col ++ ) { int x = col * this . widthRect ; // x-Wert des linken oberen Punktes if ( grey ) { g2 . setColor ( Color . LIGHT_GRAY ); grey = false ; } else { g2 . setColor ( Color . WHITE ); grey = true ; } g2 . fillRect ( x , y , this . widthRect , this . heightRect ); } } } } private JPanel initSouth () { JPanel south = new JPanel (); // hier das JPanel fuer SOUTH befuellen return south ; } public static void main ( String [] args ) { new Schachbrett (); } @Override public void mouseClicked ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked: [x=\" + x + \", \" + y + \"]\" ); int spalte = x / this . canvas . widthRect ; int zeile = y / this . canvas . heightRect ; this . field [ zeile ][ spalte ] = State . MARKIERT ; System . out . println ( \"mouseClicked: [zeile = \" + zeile + \", spalte = \" + spalte + \"]\" ); this . canvas . repaint (); } @Override public void mousePressed ( MouseEvent e ) {} @Override public void mouseReleased ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } Die Variablen heightRect und widthRect werden in den Zeilen 50 und 51 als global deklariert. In den Zeilen 61 und 62 bekommen diese Variablen ihren Wert abh\u00e4ngig von der Gr\u00f6\u00dfe der Canvas . Nun k\u00f6nnen wir auf diese Werte in der mouseClicked() -Methode \u00fcber die canvas -Referenz zugreifen (Zeilen 105 und 106 ). F\u00fcr die Berechnung der zeile und spalte verwenden wir die Integer-Division (wie oft passt ein Rechteck in x bzw. in y ?). Das entsprechende Feld setzen wir auf MARKIERT (Zeile 108 ). Zur Kontrolle noch eine Konsolenausgabe (Zeile 109 ). Damit wir es nicht vergessen, sicherheitshalber schonmal das repaint() der canvas (Zeile 110 ). In alle als MARKIERT markierten Felder zeichnen wir nun einen roten Kreis. Gezeichnet wird immer in der paintComponent() : 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int canvasHeight = this . getHeight (); int canvasWidth = this . getWidth (); this . heightRect = canvasHeight / 8 ; this . widthRect = canvasWidth / 8 ; boolean grey = true ; for ( int row = 0 ; row < Schachbrett . this . field . length ; row ++ ) { int y = row * this . heightRect ; // y-Wert des linken oberen Punktes grey = ! grey ; // mit einer anderen Farbe anfangen, als aufgehoert for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length ; col ++ ) { int x = col * this . widthRect ; // x-Wert des linken oberen Punktes if ( grey ) { g2 . setColor ( Color . LIGHT_GRAY ); grey = false ; } else { g2 . setColor ( Color . WHITE ); grey = true ; } g2 . fillRect ( x , y , this . widthRect , this . heightRect ); if ( Schachbrett . this . field [ row ][ col ] == State . MARKIERT ) { int abstandX = this . widthRect / 3 ; int abstandY = this . heightRect / 3 ; int durchmesser = this . widthRect / 3 ; g2 . setColor ( Color . RED ); g2 . fillOval ( x + abstandX , y + abstandY , durchmesser , durchmesser ); } } } } Da die linke obere \"Ecke\" des Kreises weiter rechts und weiter unten als die linke obere Ecke des Rechtecks ist, f\u00fcgen wir noch einen abstandX und einen abstandY hinzu, der sich jeweils aus dem Drittel der Rechtecksbreite und der Recjtecksh\u00f6he ergibt (Zeilen 84 und 85 ). Der Durchmesser des Kreises ist dann ebenfalls ein Drittel (somit bleibt das dritte Dtrittel als Abstand rechts - der Kreis ist recht mittig) - Zeile 86 . Wir setzen die Farbe auf rot und zeichnen den Kreis (Zeilen 87 und 88 ). Die roten vertikalen und horizontalen Linien k\u00f6nnten wir nun auch noch gleich zeichnen: 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int canvasHeight = this . getHeight (); int canvasWidth = this . getWidth (); this . heightRect = canvasHeight / 8 ; this . widthRect = canvasWidth / 8 ; boolean grey = true ; for ( int row = 0 ; row < Schachbrett . this . field . length ; row ++ ) { int y = row * this . heightRect ; // y-Wert des linken oberen Punktes grey = ! grey ; // mit einer anderen Farbe anfangen, als aufgehoert for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length ; col ++ ) { int x = col * this . widthRect ; // x-Wert des linken oberen Punktes if ( grey ) { g2 . setColor ( Color . LIGHT_GRAY ); grey = false ; } else { g2 . setColor ( Color . WHITE ); grey = true ; } g2 . fillRect ( x , y , this . widthRect , this . heightRect ); } } for ( int row = 0 ; row < Schachbrett . this . field . length ; row ++ ) { int y = row * this . heightRect ; for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length ; col ++ ) { int x = col * this . widthRect ; if ( Schachbrett . this . field [ row ][ col ] == State . MARKIERT ) { int abstandX = this . widthRect / 3 ; int abstandY = this . heightRect / 3 ; int durchmesser = this . widthRect / 3 ; g2 . setColor ( Color . RED ); g2 . fillOval ( x + abstandX , y + abstandY , durchmesser , durchmesser ); g2 . setStroke ( new BasicStroke ( 3.0f )); g2 . drawLine (( this . widthRect / 2 ), y + ( this . heightRect / 2 ), canvasWidth - ( this . widthRect / 2 ), y + ( this . heightRect / 2 )); g2 . drawLine ( x + ( this . widthRect / 2 ), ( this . heightRect / 2 ), x + ( this . widthRect / 2 ), canvasHeight - ( this . heightRect / 2 )); } } } } Das Zeichnen passiert jetzt in zwei for -Schleifen. Zun\u00e4chst werden die grauen und wei\u00dfen Rechtecke gezeichnet und erst danach die roten Kreise und Linien. H\u00e4tten wir auch die Linien in der ersten for -Schleife gezeichnet, w\u00e4ren sie teilweise von den nachfolgenden Rechtecken abgedeckt und somit nur teilweise sichtbar gewesen. Das Zeichnen der beiden Linien (vertikal und horizontal) erfolgt in den Zeilen 99-101 . Zun\u00e4chst wird die Strichst\u00e4rke etwas erh\u00f6ht (auf 3.0f px). In Zeile 100 wird die horizontale Linie gezeichnet. Diese Linie k\u00f6nnte auch bei x=0 beginnen und bei canvasWidth aufh\u00f6ren. Um sie in der Mitte des ersten Rechtecks beginnen zu lassen, wird statt x=0 x=(this.rectWidth/2) gew\u00e4hlt. Um sie in der Mitte des letzten Rechtecks enden zu lassen, wird statt x=canvasWidth x=canvasWidth-(this.rectWidth/2) gew\u00e4hlt. In welcher Zeile diese Linie gezeichnet wird, ergibt sich aus dem Wert von y . Dieser Wert bestimmt aber die oberste Kante der Zeile. Um die Linie in die Mitte der Zeile zu zeichnen, wird jeweils this.heightRect/2 zu y addiert. Das Zeichnen der vertikalen Linie in Zeile 101 ist ganz \u00e4hnlich, nur dass der Wert von x bestimmt, in welche Spaqlte die Linie gezeichnet wird und die y -Werte jeweils so angepasst werden, dass die Linie nicht ganz oben beginnt und ganz oben endet, sondern jeweils mittig im Rechteck. Um zu verhindern, dass zwei rote Punkte in derselben Zeile bzw. in derselben Spalte sind, m\u00fcssen wir im Controller eine weitere Bedingung einbauen, die pr\u00fcft, ob das angeklickte Feld \u00fcberhaupt auf MARKIERT gesetzt werden darf. Dazu muss f\u00fcr eine gegebene zeile und eine gegebene spalte gepr\u00fcft werden, ob sich darin bereits ein MARKIERT es field befindet. Es wird also die mouseClicked() -Methode angepasst: 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 @Override public void mouseClicked ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked: [x=\" + x + \", \" + y + \"]\" ); int spalte = x / this . canvas . widthRect ; int zeile = y / this . canvas . heightRect ; boolean bereitsMarkiert = false ; if ( Schachbrett . this . field [ zeile ][ spalte ] == State . MARKIERT ) { bereitsMarkiert = true ; } for ( int row = 0 ; row < Schachbrett . this . field . length && ! bereitsMarkiert ; row ++ ) { if ( Schachbrett . this . field [ row ][ spalte ] == State . MARKIERT ) { bereitsMarkiert = true ; } } for ( int col = 0 ; col < Schachbrett . this . field [ zeile ] . length && ! bereitsMarkiert ; col ++ ) { if ( Schachbrett . this . field [ zeile ][ col ] == State . MARKIERT ) { bereitsMarkiert = true ; } } if ( ! bereitsMarkiert ) { this . field [ zeile ][ spalte ] = State . MARKIERT ; } System . out . println ( \"mouseClicked: [zeile = \" + zeile + \", spalte = \" + spalte + \"]\" ); this . canvas . repaint (); } Wir erstellen uns eine Variable bereitsMarkiert , in der wir uns merken wollen, ob ein bereits MARKIERT es field in der zeile oder in der spalte existiert (Zeile 134 ). In den Zeilen 135-138 wird gepr\u00fcft, ob das Feld selbst in zeile und spalte bereits MARKIERT ist. In den Zeilen 140-146 wird gepr\u00fcft, ob in der spalte ein bereits MARKIERT es field existiert. In den Zeilen 148-154 wird gepr\u00fcft, ob in der zeile ein bereits MARKIERT es field existiert. Nur, wenn keine der drei Bedingungen erf\u00fcllt sind, kann das field[zeile][spalte] auf MARKIERT gesetzt werden. Somit wird die Anforderung , dass keine zwei Felder in einer Zeile bzw. in einer Spalte auf MARKIERT gesetzt sein d\u00fcrfen, erf\u00fcllt. Die Pr\u00fcfung geschieht \"nur\" im Controller ! Wie kann nun daf\u00fcr gesorgt werden, dass das Feld gr\u00fcn erscheint, wenn es zwar angeklickt wird, aber bereits ein markiertes Feld in der Zeile bzw. der Spalte existiert? Eine einfache M\u00f6glichkeit w\u00e4re, einfach einen neuen State hinzuzuf\u00fcgen, z.B. GRUEN . Wir k\u00f6nnen uns aber auch zwei globale Variablen gruenZeile und gruenSpalte erzeugen und wenn diese jeweils einen Wert besitzen, der innerhalb des field -Bereiches liegt, dann solll dieses Feld einen gr\u00fcnen Hintergrund bekommen. Es gibt viele M\u00f6glichkeiten, wir nehmen mal die ersteimport java.awt.BasicStroke ; import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Schachbrett extends JFrame implements MouseListener { Canvas canvas ; enum State { MARKIERT , UNMARKIERT , GREEN }; State [][] field ; public Schachbrett () { super (); this . setTitle ( \"Schachbrett\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . initField (); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); // NORTH, EAST, WEST geloescht this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private void initField () { this . field = new State [ 8 ][ 8 ] ; for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { this . field [ row ][ col ] = State . UNMARKIERT ; } } } private class Canvas extends JPanel { int heightRect = 0 ; int widthRect = 0 ; @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int canvasHeight = this . getHeight (); int canvasWidth = this . getWidth (); this . heightRect = canvasHeight / 8 ; this . widthRect = canvasWidth / 8 ; boolean grey = true ; for ( int row = 0 ; row < Schachbrett . this . field . length ; row ++ ) { int y = row * this . heightRect ; // y-Wert des linken oberen Punktes grey = ! grey ; // mit einer anderen Farbe anfangen, als aufgehoert for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length ; col ++ ) { int x = col * this . widthRect ; // x-Wert des linken oberen Punktes if ( grey ) { g2 . setColor ( Color . LIGHT_GRAY ); grey = false ; } else { g2 . setColor ( Color . WHITE ); grey = true ; } if ( Schachbrett . this . field [ row ][ col ] == State . GREEN ) { g2 . setColor ( Color . GREEN ); Schachbrett . this . field [ row ][ col ] = State . UNMARKIERT ; } g2 . fillRect ( x , y , this . widthRect , this . heightRect ); } } for ( int row = 0 ; row < Schachbrett . this . field . length ; row ++ ) { int y = row * this . heightRect ; for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length ; col ++ ) { int x = col * this . widthRect ; if ( Schachbrett . this . field [ row ][ col ] == State . MARKIERT ) { int abstandX = this . widthRect / 3 ; int abstandY = this . heightRect / 3 ; int durchmesser = this . widthRect / 3 ; g2 . setColor ( Color . RED ); g2 . fillOval ( x + abstandX , y + abstandY , durchmesser , durchmesser ); g2 . setStroke ( new BasicStroke ( 3.0f )); g2 . drawLine (( this . widthRect / 2 ), y + ( this . heightRect / 2 ), canvasWidth - ( this . widthRect / 2 ), y + ( this . heightRect / 2 )); g2 . drawLine ( x + ( this . widthRect / 2 ), ( this . heightRect / 2 ), x + ( this . widthRect / 2 ), canvasHeight - ( this . heightRect / 2 )); } } } } } private JPanel initSouth () { JPanel south = new JPanel (); // hier das JPanel fuer SOUTH befuellen return south ; } public static void main ( String [] args ) { new Schachbrett (); } @Override public void mouseClicked ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked: [x=\" + x + \", \" + y + \"]\" ); int spalte = x / this . canvas . widthRect ; int zeile = y / this . canvas . heightRect ; boolean bereitsMarkiert = false ; if ( Schachbrett . this . field [ zeile ][ spalte ] == State . MARKIERT ) { bereitsMarkiert = true ; } for ( int row = 0 ; row < Schachbrett . this . field . length && ! bereitsMarkiert ; row ++ ) { if ( Schachbrett . this . field [ row ][ spalte ] == State . MARKIERT ) { bereitsMarkiert = true ; } } for ( int col = 0 ; col < Schachbrett . this . field [ zeile ] . length && ! bereitsMarkiert ; col ++ ) { if ( Schachbrett . this . field [ zeile ][ col ] == State . MARKIERT ) { bereitsMarkiert = true ; } } if ( ! bereitsMarkiert ) { this . field [ zeile ][ spalte ] = State . MARKIERT ; } else { this . field [ zeile ][ spalte ] = State . GREEN ; } System . out . println ( \"mouseClicked: [zeile = \" + zeile + \", spalte = \" + spalte + \"]\" ); this . canvas . repaint (); } @Override public void mousePressed ( MouseEvent e ) {} @Override public void mouseReleased ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } Jetzt wird der clear field -Button erzeugt und f\u00fcr diesen Button der ActionListener implementiert. Das kann alles innerhalb der initSouth() -Methode passieren. Das L\u00f6schen des Feldes besteht darin, alle Felder auf UNMARKIERT zu setzen. Das erledigt bereits die initField() -Methode. Diese Methode muss also nur aufgerufen werden und danach die canvas neu gezeichnet: 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 @Override public void mouseClicked ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked: [x=\" + x + \", \" + y + \"]\" ); int spalte = x / this . canvas . widthRect ; int zeile = y / this . canvas . heightRect ; boolean bereitsMarkiert = false ; if ( Schachbrett . this . field [ zeile ][ spalte ] == State . MARKIERT ) { bereitsMarkiert = true ; } for ( int row = 0 ; row < Schachbrett . this . field . length && ! bereitsMarkiert ; row ++ ) { if ( Schachbrett . this . field [ row ][ spalte ] == State . MARKIERT ) { bereitsMarkiert = true ; } } for ( int col = 0 ; col < Schachbrett . this . field [ zeile ] . length && ! bereitsMarkiert ; col ++ ) { if ( Schachbrett . this . field [ zeile ][ col ] == State . MARKIERT ) { bereitsMarkiert = true ; } } if ( ! bereitsMarkiert ) { this . field [ zeile ][ spalte ] = State . MARKIERT ; } System . out . println ( \"mouseClicked: [zeile = \" + zeile + \", spalte = \" + spalte + \"]\" ); this . canvas . repaint (); } Wir erstellen uns eine Variable bereitsMarkiert , in der wir uns merken wollen, ob ein bereits MARKIERT es field in der zeile oder in der spalte existiert (Zeile 134 ). In den Zeilen 135-138 wird gepr\u00fcft, ob das Feld selbst in zeile und spalte bereits MARKIERT ist. In den Zeilen 140-146 wird gepr\u00fcft, ob in der spalte ein bereits MARKIERT es field existiert. In den Zeilen 148-154 wird gepr\u00fcft, ob in der zeile ein bereits MARKIERT es field existiert. Nur, wenn keine der drei Bedingungen erf\u00fcllt sind, kann das field[zeile][spalte] auf MARKIERT gesetzt werden. Somit wird die Anforderung , dass keine zwei Felder in einer Zeile bzw. in einer Spalte auf MARKIERT gesetzt sein d\u00fcrfen, erf\u00fcllt. Die Pr\u00fcfung geschieht \"nur\" im Controller ! Wie kann nun daf\u00fcr gesorgt werden, dass das Feld gr\u00fcn erscheint, wenn es zwar angeklickt wird, aber bereits ein markiertes Feld in der Zeile bzw. der Spalte existiert? Eine einfache M\u00f6glichkeit w\u00e4re, einfach einen neuen State hinzuzuf\u00fcgen, z.B. GRUEN . Wir k\u00f6nnen uns aber auch zwei globale Variablen gruenZeile und gruenSpalte erzeugen und wenn diese jeweils einen Wert besitzen, der innerhalb des field -Bereiches liegt, dann solll dieses Feld einen gr\u00fcnen Hintergrund bekommen. Es gibt viele M\u00f6glichkeiten, wir nehmen mal die erste: 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 private JPanel initSouth () { JPanel south = new JPanel (); JButton clearBtn = new JButton ( \"clear field\" ); clearBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Schachbrett . this . initField (); Schachbrett . this . canvas . repaint (); } }); south . add ( clearBtn ); return south ; } Die \u00dcberpr\u00fcfung eines \"Konfliktfalls\" f\u00fcr die Diagonalen kann ebenfalls in der mouseClicked() -Methode als zus\u00e4tzliche Bedingung eingef\u00fcgt werden. Dazu m\u00fcssen wir nur die Frage beantworten, wie wir ermitteln k\u00f6nnen, ob ein Feld mit den Koordinaten zeile1 und spalte1 auf einer Diagonalen des Feldes zeile und spalte liegt. Nehmen wir an, zeile=3 und spalte=4 . Dann w\u00e4ren z.B. zeile1=0 und spalte1=1 auf einer Diagonalen und auch zeile1=1 und spalte1=2 und auch zeile1=2 und spalte1=3 und auch zeile1=4 und spalte1=5 und auch zeile1=5 und spalte1=6 und auch zeile1=6 und spalte1=7 . F\u00fcr die andere Diagonale gilt zeile1=2 und spalte1=5 und auch zeile1=1 und spalte1=6 und auch zeile1=0 und spalte1=7 , aber auch zeile1=4 und spalte1=3 und auch zeile1=5 und spalte1=2 und auch zeile1=6 und spalte1=1 und auch zeile1=7 und spalte1=0 . Es gilt also, dass | zeile1 - zeile | == | spalte1 - spalte | , damit die Felder in zeile, spalte und zeile1, spalte1 in einer Diagonalen liegen. 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 @Override public void mouseClicked ( MouseEvent e ) { int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked: [x=\" + x + \", \" + y + \"]\" ); int spalte = x / this . canvas . widthRect ; int zeile = y / this . canvas . heightRect ; boolean bereitsMarkiert = false ; if ( Schachbrett . this . field [ zeile ][ spalte ] == State . MARKIERT ) { bereitsMarkiert = true ; } for ( int row = 0 ; row < Schachbrett . this . field . length && ! bereitsMarkiert ; row ++ ) { if ( Schachbrett . this . field [ row ][ spalte ] == State . MARKIERT ) { bereitsMarkiert = true ; } } for ( int col = 0 ; col < Schachbrett . this . field [ zeile ] . length && ! bereitsMarkiert ; col ++ ) { if ( Schachbrett . this . field [ zeile ][ col ] == State . MARKIERT ) { bereitsMarkiert = true ; } } // Diagonalen for ( int row = 0 ; row < Schachbrett . this . field . length && ! bereitsMarkiert ; row ++ ) { for ( int col = 0 ; col < Schachbrett . this . field [ row ] . length && ! bereitsMarkiert ; col ++ ) { if ( ! ( col == spalte && row == zeile )) // nicht das Feld selbst betrachten { if (( Math . abs ( col - spalte ) == Math . abs ( row - zeile )) && Schachbrett . this . field [ row ][ col ] == State . MARKIERT ) { bereitsMarkiert = true ; } } } } if ( ! bereitsMarkiert ) { this . field [ zeile ][ spalte ] = State . MARKIERT ; } else { this . field [ zeile ][ spalte ] = State . GREEN ; } System . out . println ( \"mouseClicked: [zeile = \" + zeile + \", spalte = \" + spalte + \"]\" ); this . canvas . repaint (); }","title":"Schachbrett"},{"location":"klausurvorbereitung/#schiebepuzzle","text":"Aufgabe Schiebepuzzle Implementieren Sie folgendes Puzzle: obige Abbildung zeigt den Anfangszustand des Puzzles ( 2 \u00fcber 1 links) obige Abbildung zeigt den Endzustand des Puzzles ( 1 \u00fcber 2 links) Das Puzzle besteht aus 5 \u201eKacheln\u201c, 3 gelben und 2 roten. Die roten Kacheln sind mit einer 1 und einer 2 nummeriert. Am Anfang steht die rote Kachel mit der 2 \u00fcber der roten Kachel mit der 1 . (siehe erste Abb.) Ziel des Puzzles ist es, die beiden roten Kacheln zu vertauschen. Wenn links die 1 \u00fcber der 2 steht, ist das Puzzle beendet. Wo die gelben Kacheln im Endzustand sind, ist egal (siehe zweite Abb.). Ein Feld ist stets frei (grau dargestellt). In dieses Feld kann eine benachbarte Kachel geschoben werden. Zeigen Sie oben die Anzahl der Z\u00fcge an. Wenn der Endzustand erreicht ist, kann nicht mehr gezogen werden! Der Button Neustart setzt alles wieder auf Anfang. Die Programmierung bleibt ganz Ihnen \u00fcberlassen. Zum Schieben einer Kachel auf das leere Feld, klickt man auf die Kachel selbst. Diese \u201ebewegt\u201c sich dann auf das leere (graue) Feld und hinterl\u00e4sst ein leeres (graues) Feld (siehe folgende Abb.) Tipps: Sie ben\u00f6tigen keine Canvas und kein \u00dcberschreiben der paintComponent() -Methode! Am einfachsten bekommt man ein Label in die Mitte eines Panels gesetzt, wenn das Panel im GridLayout(1,1) (oder sogar parameterlos) ist und Sie f\u00fcr das Label label.setHorizontalAlignment(JLabel.CENTER); definieren die (Schrift-)Farbe eines Labels setzt man mit label.setForeground(Color); die (Hintergrund-Farbe eines Panels setzt man mit panel.setBackground(Color); f\u00fcr das Identifizieren des entsprechenden Panels, auf das man geklickt hat, k\u00f6nnte es hilfreich sein, sich daf\u00fcr eine eigene Klasse zu schreiben (die von JPanel erbt). Muss aber nicht. wahrscheinlich ist es am einfachsten, ein zweidimensionales Array 2x3 als Datenstruktur f\u00fcr Ihr Puzzle zu verwenden L\u00f6sung Schiebepuzzleimport java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Font ; import java.awt.GridLayout ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import javax.swing.* ; public class Puzzle extends JFrame { JLabel infoLabel ; int anzMoves ; enum State { EINS , ZWEI , LEER , GELB } State [][] field ; MyPanel [][] panels ; JPanel mainPanel ; Puzzle () { super ( \"Puzzle\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). add ( this . infoLabelPanel (), BorderLayout . NORTH ); this . getContentPane (). add ( this . mainPanelStart (), BorderLayout . CENTER ); this . getContentPane (). add ( this . buttonPanel (), BorderLayout . SOUTH ); this . setSize ( 500 , 400 ); this . setVisible ( true ); } /**************************************** * erstmal alles fuer das Model * initiale Belegung von field */ void initialisiereField () { this . field = new State [ 2 ][ 3 ] ; this . field [ 0 ][ 0 ] = State . ZWEI ; this . field [ 0 ][ 1 ] = State . LEER ; this . field [ 0 ][ 2 ] = State . GELB ; this . field [ 1 ][ 0 ] = State . EINS ; this . field [ 1 ][ 1 ] = State . GELB ; this . field [ 1 ][ 2 ] = State . GELB ; } /** * Hilfsmethode, um zu wissen, in welcher Zeile sich das leere Feld befindet * damit ist makeMove() etwas kuerzer * @return zeile von LEER */ int getLeerZeile () { for ( int zeile = 0 ; zeile < 2 ; zeile ++ ) for ( int spalte = 0 ; spalte < 3 ; spalte ++ ) if ( this . field [ zeile ][ spalte ]== State . LEER ) return zeile ; return - 1 ; // fehlerfall - kommt aber nicht vor } /** * Hilfsmethode, um zu wissen, in welcher Zeile sich das leere Feld befindet * damit ist makeMove() etwas kuerzer * @return spalte von LEER */ int getLeerSpalte () { for ( int zeile = 0 ; zeile < 2 ; zeile ++ ) for ( int spalte = 0 ; spalte < 3 ; spalte ++ ) if ( this . field [ zeile ][ spalte ]== State . LEER ) return spalte ; return - 1 ; // fehlerfall - kommt aber nicht vor } /** * von field[fromZeile][fromSpalte] aus wird gezogen * es wird geprueft, ob die leere Kachel entweder in der gleichen zeile * ist --> dann muss die spalte von LEER entweder links oder rechts sein (+/+ 1) * oder in der gleichen spalte --> dann muss die zeile von LEER entweder * darueber oder darunter sein (+/+ 1) * @param fromZeile * @param fromSpalte * @return ob zug ausgefuehrt wurde oder nicht */ boolean makeMove ( int fromZeile , int fromSpalte ) { if ( this . field [ fromZeile ][ fromSpalte ]!= State . LEER ) { int zeileLeer = this . getLeerZeile (); int spalteLeer = this . getLeerSpalte (); if (( Math . abs ( zeileLeer - fromZeile ) == 1 && spalteLeer - fromSpalte == 0 ) || ( zeileLeer - fromZeile == 0 && Math . abs ( spalteLeer - fromSpalte ) == 1 )) { this . field [ zeileLeer ][ spalteLeer ]= this . field [ fromZeile ][ fromSpalte ] ; this . field [ fromZeile ][ fromSpalte ]= State . LEER ; this . printField (); // nur zum debuggen this . anzMoves ++ ; return true ; } } return false ; } /** * definition des endzustands (links oben EINS, links unten ZWEI) * @return ob endzustand erreicht oder nicht */ boolean ende () { return ( this . field [ 0 ][ 0 ]== State . EINS && this . field [ 1 ][ 0 ]== State . ZWEI ); } /********************************************* * jetzt alles fuer die View - ganz zu Anfang */ JPanel initialiserePanels () { this . panels = new MyPanel [ 2 ][ 3 ] ; for ( int zeile = 0 ; zeile < 2 ; zeile ++ ) { for ( int spalte = 0 ; spalte < 3 ; spalte ++ ) { this . panels [ zeile ][ spalte ] = new MyPanel ( zeile , spalte ); this . panels [ zeile ][ spalte ] . view ( this . field [ zeile ][ spalte ] ); this . mainPanel . add ( this . panels [ zeile ][ spalte ] ); } } return this . mainPanel ; } JPanel mainPanelStart () { this . mainPanel = new JPanel (); this . mainPanel . setLayout ( new GridLayout ( 2 , 3 , 3 , 3 )); this . initialisiereField (); // model this . initialiserePanels (); // view return mainPanel ; } JPanel infoLabelPanel () { JPanel infoPanel = new JPanel (); this . infoLabel = new JLabel ( \"Anzahl Zuege : \" + this . anzMoves ); this . infoLabel . setFont ( new Font ( \"Verdana\" , Font . ITALIC , 18 )); infoPanel . add ( this . infoLabel ); return infoPanel ; } JPanel buttonPanel () { JPanel buttonPanel = new JPanel (); JButton neuStart = new JButton ( \"Neustart\" ); neuStart . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Puzzle . this . restart (); } }); buttonPanel . add ( neuStart ); return buttonPanel ; } /** * jetzt f\u00fcr Restart und Update * Restart: nach Druecken des Buttons \"Neustart\" * Update: nach jedem Zug */ void restart () { this . anzMoves = 0 ; this . infoLabel . setFont ( new Font ( \"Verdana\" , Font . ITALIC , 18 )); this . initialisiereField (); this . updatePanels (); } void updateLabel ( boolean ende ) { if ( ende ) { this . infoLabel . setFont ( new Font ( \"Verdana\" , Font . ITALIC | Font . BOLD , 18 )); this . infoLabel . setText ( \"Ende! Anzahl Zuege : \" + this . anzMoves ); } else { this . infoLabel . setText ( \"Anzahl Zuege : \" + this . anzMoves ); } } void updatePanels () { for ( int zeile = 0 ; zeile < 2 ; zeile ++ ) { for ( int spalte = 0 ; spalte < 3 ; spalte ++ ) { this . panels [ zeile ][ spalte ] . view ( this . field [ zeile ][ spalte ] ); } } this . updateLabel ( this . ende ()); } /** * das ist nur zum \"Debuggen\" - aber ganz nuetzlich */ void printField () { for ( int zeile = 0 ; zeile < 2 ; zeile ++ ) { for ( int spalte = 0 ; spalte < 3 ; spalte ++ ) { if ( this . field [ zeile ][ spalte ]== State . LEER ) System . out . print ( \" -\" ); else if ( this . field [ zeile ][ spalte ]== State . EINS ) System . out . print ( \" 1\" ); else if ( this . field [ zeile ][ spalte ]== State . ZWEI ) System . out . print ( \" 2\" ); else if ( this . field [ zeile ][ spalte ]== State . GELB ) System . out . print ( \" o\" ); } System . out . println (); } System . out . println (); } /** * die Klasse f\u00fcr die \"Kacheln\" * die \"Kacheln\" sind JPanels (mit allen JPanel-Methoden) * ausserdem noch nuetzliche Objekteigenschaften: zeile, spalte und das Label, * das auf der Kachel ist (f\u00fcr GELB und LEER ist das Label leer) */ class MyPanel extends JPanel implements MouseListener { int zeile ; int spalte ; JLabel label ; MyPanel ( int zeile , int spalte ) { super (); this . zeile = zeile ; this . spalte = spalte ; this . setLayout ( new GridLayout ()); this . label = new JLabel (); this . label . setHorizontalAlignment ( JLabel . CENTER ); this . label . setForeground ( Color . WHITE ); this . label . setFont ( new Font ( \"Verdana\" , Font . BOLD , 48 )); this . add ( label ); this . addMouseListener ( this ); } void view ( State state ) { switch ( state ) // geht natuerlich auch mit if(state==State.EINS) usw. { case EINS : this . setBackground ( Color . RED ); this . label . setText ( \"1\" ); break ; case ZWEI : this . setBackground ( Color . RED ); this . label . setText ( \"2\" ); break ; case LEER : this . setBackground ( Color . LIGHT_GRAY ); this . label . setText ( \"\" ); break ; case GELB : this . setBackground ( Color . YELLOW ); this . label . setText ( \"\" ); break ; } } @Override public void mouseClicked ( MouseEvent e ) { if ( ! Puzzle . this . ende () && Puzzle . this . makeMove ( this . zeile , this . spalte )) Puzzle . this . updatePanels (); } @Override public void mousePressed ( MouseEvent e ) {} @Override public void mouseReleased ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } public static void main ( String [] args ) { new Puzzle (); } }","title":"Schiebepuzzle"},{"location":"klausurvorbereitung/#rechtecke-anordnen","text":"Aufgabe Rechtecke anordnen Implementieren Sie folgende GUI: die Abbildung zeigt die Ausgangssituation Die Zeichenfl\u00e4che ist in 4 gleichgro\u00dfe Teile unterteilt. Diese Unterteilung wird durch Linien dargestellt. Durch Dr\u00fccken des Buttons rectangle erscheint (beim ersten Mal ein gr\u00fcnes) Rechteck. Dieses Rechteck kann dann mit gedr\u00fcckter Maustaste verschoben werden. Sobald es im linken oberen Feld ist, wird es dort fixiert und kann nicht mehr bewegt werden. die obige Abbildung zeigt die Situation, in der das gr\u00fcne Rechteck fixiert ist und nicht mehr bewegt werden kann Nachdem das gr\u00fcne (erste) Rechteck fixiert ist, kann der Button rectangle ein weiteres Mal gedr\u00fcckt werden. Es erscheint ein rotes Rechteck. Das rote Rechteck soll in das rechte obere Feld. Nachdem auch das rote Rechteck fixiert ist, kann der Button rectangle ein weiteres Mal gedr\u00fcckt werden. Es erscheint ein gelbes Rechteck. Das gelbe Rechteck soll in das linke untere Feld. Nun kann der Button rectangle ein weiteres Mal gedr\u00fcckt werden. Es erscheint ein dunkelgraues Rechteck. Das dunkelgraue Rechteck soll in das rechte untere Feld. Wenn auch das graue Rechteck fixiert ist, ist die Endesituation erreicht (siehe Label oben in der folgenden Abbildung): Nach Klick auf den Button clear wird wieder die Ausgangssituation hergestellt: L\u00f6sung Rechtecke anordnen MyRectangle.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 import java.awt.Color ; import java.awt.Point ; public class MyRectangle { int x1 , y1 , x2 , y2 ; Color color ; boolean fixed ; MyRectangle ( int x1 , int y1 , int x2 , int y2 , Color color ) { this . x1 = x1 ; this . y1 = y1 ; this . x2 = x2 ; this . y2 = y2 ; this . color = color ; this . fixed = false ; } boolean inside ( int x , int y ) { return ( this . x1 <= x && this . x2 >= x && this . y1 <= y && this . y2 >= y ); } boolean inside ( Point p ) { return inside ( p . x , p . y ); } void move ( int diffX , int diffY ) { if ( ! this . fixed ) { this . x1 = this . x1 + diffX ; this . y1 = this . y1 + diffY ; this . x2 = this . x2 + diffX ; this . y2 = this . y2 + diffY ; } } Color getColor () { return this . color ; } Point getLinksOben () { return new Point ( this . x1 , this . y1 ); } Point getRechtsOben () { return new Point ( this . x2 , this . y1 ); } Point getLinksUnten () { return new Point ( this . x1 , this . y2 ); } Point getRechtsUnten () { return new Point ( this . x2 , this . y2 ); } } RechteckeAnordnen.javaimport java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Font ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.ArrayList ; import java.util.List ; import javax.swing.* ; public class RechteckeAnordnen extends JFrame { JButton resetButton , newRectButton ; MyRectangle aktRechteck = null ; List < MyRectangle > rectangles = new ArrayList <> (); Canvas canvas ; JLabel infoLabel ; int anzRectFixed = 0 ; RechteckeAnordnen () { super ( \"Rechtecke fixieren\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . createInfoPanel (), BorderLayout . NORTH ); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . getContentPane (). add ( this . createButtons (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setVisible ( true ); } JPanel createInfoPanel () { JPanel infoPanel = new JPanel (); this . infoLabel = new JLabel ( this . anzRectFixed + \" Rechtecke fixiert\" ); this . infoLabel . setFont ( new Font ( \"Verdana\" , Font . ITALIC , 18 )); infoPanel . add ( this . infoLabel ); return infoPanel ; } JPanel createButtons () { JPanel buttonPanel = new JPanel (); this . resetButton = new JButton ( \"clear\" ); this . resetButton . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { RechteckeAnordnen . this . aktRechteck = null ; RechteckeAnordnen . this . anzRectFixed = 0 ; RechteckeAnordnen . this . rectangles . clear (); RechteckeAnordnen . this . infoLabel . setFont ( new Font ( \"Verdana\" , Font . ITALIC , 18 )); RechteckeAnordnen . this . infoLabel . setText ( RechteckeAnordnen . this . anzRectFixed + \" Rechtecke fixiert\" ); RechteckeAnordnen . this . canvas . repaint (); } }); buttonPanel . add ( resetButton ); this . newRectButton = new JButton ( \"rectangle\" ); this . newRectButton . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { if ( RechteckeAnordnen . this . aktRechteck == null && RechteckeAnordnen . this . anzRectFixed < 4 ) { int x = RechteckeAnordnen . this . canvas . getWidth () / 4 ; int y = RechteckeAnordnen . this . canvas . getHeight () / 4 ; Color color = null ; switch ( RechteckeAnordnen . this . rectangles . size ()) { case 0 : color = Color . GREEN ; break ; case 1 : color = Color . RED ; break ; case 2 : color = Color . YELLOW ; break ; case 3 : color = Color . DARK_GRAY ; break ; default : color = Color . WHITE ; break ; } RechteckeAnordnen . this . aktRechteck = new MyRectangle ( x , y , x + 2 * x , y + 2 * y , color ); RechteckeAnordnen . this . canvas . repaint (); } } }); buttonPanel . add ( newRectButton ); return buttonPanel ; } class Canvas extends JPanel implements MouseListener , MouseMotionListener { boolean move = false ; Point from ; Canvas () { this . setBorder ( BorderFactory . createLineBorder ( Color . black )); this . addMouseListener ( this ); this . addMouseMotionListener ( this ); } @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; int widthPanel = this . getWidth (); // Breite der Canvas int heightPanel = this . getHeight (); // Hoehe der Canvas g2 . drawLine ( widthPanel / 2 , 0 , widthPanel / 2 , heightPanel ); g2 . drawLine ( 0 , heightPanel / 2 , widthPanel , heightPanel / 2 ); for ( MyRectangle rect : RechteckeAnordnen . this . rectangles ) { g2 . setColor ( rect . color ); int x = rect . x1 ; int y = rect . y1 ; int width = rect . x2 - rect . x1 ; int height = rect . y2 - rect . y1 ; g2 . fill3DRect ( x , y , width , height , true ); } if ( RechteckeAnordnen . this . aktRechteck != null ) { g2 . setColor ( RechteckeAnordnen . this . aktRechteck . color ); int x = RechteckeAnordnen . this . aktRechteck . x1 ; int y = RechteckeAnordnen . this . aktRechteck . y1 ; int width = RechteckeAnordnen . this . aktRechteck . x2 - RechteckeAnordnen . this . aktRechteck . x1 ; int height = RechteckeAnordnen . this . aktRechteck . y2 - RechteckeAnordnen . this . aktRechteck . y1 ; g2 . fill3DRect ( x , y , width , height , true ); } } @Override public void mouseClicked ( MouseEvent e ) {} @Override public void mousePressed ( MouseEvent e ) { this . from = e . getPoint (); if ( RechteckeAnordnen . this . aktRechteck != null && RechteckeAnordnen . this . aktRechteck . inside ( from )) { this . move = true ; } } @Override public void mouseReleased ( MouseEvent e ) { this . move = false ; } @Override public void mouseEntered ( MouseEvent e ) { } @Override public void mouseExited ( MouseEvent e ) { } @Override public void mouseDragged ( MouseEvent e ) { Point here = e . getPoint (); if ( move ) { int diffX = here . x - this . from . x ; int diffY = here . y - this . from . y ; RechteckeAnordnen . this . aktRechteck . move ( diffX , diffY ); this . from = here ; int diff = 15 ; switch ( RechteckeAnordnen . this . anzRectFixed ) { case 0 : Point goal = new Point ( 0 , 0 ); Point corner = RechteckeAnordnen . this . aktRechteck . getLinksOben (); if ( Math . abs ( goal . x - corner . x ) < 5 && Math . abs ( goal . y - corner . y ) < diff ) { this . move = false ; RechteckeAnordnen . this . rectangles . add ( new MyRectangle ( 0 , 0 , this . getWidth () / 2 , this . getHeight () / 2 , RechteckeAnordnen . this . aktRechteck . getColor ())); RechteckeAnordnen . this . aktRechteck = null ; RechteckeAnordnen . this . anzRectFixed ++ ; RechteckeAnordnen . this . infoLabel . setText ( RechteckeAnordnen . this . anzRectFixed + \" Rechtecke fixiert\" ); } break ; case 1 : goal = new Point ( this . getWidth (), 0 ); corner = RechteckeAnordnen . this . aktRechteck . getRechtsOben (); if ( Math . abs ( goal . x - corner . x ) < 5 && Math . abs ( goal . y - corner . y ) < diff ) { this . move = false ; RechteckeAnordnen . this . rectangles . add ( new MyRectangle ( this . getWidth () / 2 + 1 , 0 , this . getWidth (), this . getHeight () / 2 , RechteckeAnordnen . this . aktRechteck . getColor ())); RechteckeAnordnen . this . aktRechteck = null ; RechteckeAnordnen . this . anzRectFixed ++ ; RechteckeAnordnen . this . infoLabel . setText ( RechteckeAnordnen . this . anzRectFixed + \" Rechtecke fixiert\" ); } break ; case 2 : goal = new Point ( 0 , this . getHeight ()); corner = RechteckeAnordnen . this . aktRechteck . getLinksUnten (); if ( Math . abs ( goal . x - corner . x ) < 5 && Math . abs ( goal . y - corner . y ) < diff ) { this . move = false ; RechteckeAnordnen . this . rectangles . add ( new MyRectangle ( 0 , this . getHeight () / 2 + 1 , this . getWidth () / 2 , this . getHeight (), RechteckeAnordnen . this . aktRechteck . getColor ())); RechteckeAnordnen . this . aktRechteck = null ; RechteckeAnordnen . this . anzRectFixed ++ ; RechteckeAnordnen . this . infoLabel . setText ( RechteckeAnordnen . this . anzRectFixed + \" Rechtecke fixiert\" ); } break ; case 3 : goal = new Point ( this . getWidth (), this . getHeight ()); corner = RechteckeAnordnen . this . aktRechteck . getRechtsUnten (); if ( Math . abs ( goal . x - corner . x ) < 5 && Math . abs ( goal . y - corner . y ) < diff ) { this . move = false ; RechteckeAnordnen . this . rectangles . add ( new MyRectangle ( this . getWidth () / 2 + 1 , this . getHeight () / 2 + 1 , this . getWidth (), this . getHeight (), RechteckeAnordnen . this . aktRechteck . getColor ())); RechteckeAnordnen . this . aktRechteck = null ; RechteckeAnordnen . this . anzRectFixed ++ ; RechteckeAnordnen . this . infoLabel . setFont ( new Font ( \"Verdana\" , Font . ITALIC | Font . BOLD , 18 )); RechteckeAnordnen . this . infoLabel . setText ( RechteckeAnordnen . this . anzRectFixed + \" Rechtecke fixiert -- ENDE\" ); } break ; } this . repaint (); } } @Override public void mouseMoved ( MouseEvent e ) { } } public static void main ( String [] args ) { new RechteckeAnordnen (); } }","title":"Rechtecke anordnen"},{"location":"maps/","text":"Maps \u00b6 Maps sind auch Collections. Maps sind Mengen von Schl\u00fcssel-Werte-Paaren. Wir k\u00f6nnen uns Maps als zweispaltige Tabellen vorstellen, in denen die linke Spalte die Schl\u00fcssel ( keys ) enth\u00e4lt und die rechte Spalte die Werte ( values ). Die Schl\u00fcssel in einer Map sind immer eindeutig, d.h. keine zwei Schl\u00fcssel in einer Map sind gleich. Tats\u00e4chlich handelt es sich bei der Menge der Schl\u00fcssel um eine Set . Obwohl Maps Collections sind, wurde f\u00fcr sie nicht das Interface Collection implementiert, so wie f\u00fcr Listen und Mengen, sondern ein eigenes Interface Map . F\u00fcr Interessierte lohnt sich vielleicht auch ein Blick in die Collections Framework Documentation und das Collections Framework Tutorial . Statt add() und addAll() hier put() und putAll() \u00b6 Da nicht das Collections -Interface f\u00fcr Maps implementiert wurde, erfolgt das Hinzuf\u00fcgen eines Schl\u00fcssel-Werte-Paares zu einer Map leider auch nicht \u00fcber add() bzw. das Hinzuf\u00fcgen einer Collection nicht \u00fcber addAll() , sondern \u00fcber put(K key, V value) und putAll(Map m) . K ist dabei ein Platzhalter f\u00fcr den Typ der Schl\u00fcssel und V ein Platzhalter f\u00fcr den Typ der Werte. Typ einer Map und Typ eines Schl\u00fcssel-Werte-Paares \u00b6 Eine Map wird also mit zwei Typen typisiert: Map<K, V> wobei K den Typ der Schl\u00fcssel und V den Typ der Werte definiert. Der Typ eines einzelnen Schl\u00fcssel-Werte-Paares ist Map.Entry<K,V> Das sieht f\u00fcr uns nat\u00fcrlich auch erstmal ungew\u00f6hnlich aus. Entry ist eine innere Klasse in der Klasse Map (tats\u00e4chlich sind beides Interfaces). Wir nehmen das erstmal einfach so hin und merken uns: der (typisierte) Typ einer Map ist Map<K,V> und der (typisierte) Typ jedes einzelnen Schl\u00fcssel-Werte-Paares in dieser Map ist Map.Entry<K,V> . Statt iterator() hier entrySet() \u00b6 Die Objektmethode iterator() gibt es f\u00fcr Map leider auch nicht. Stattdessen wird hier die Methode entrySet() verwendet. Da es sich bei einer Map um eine Set von lauter Schl\u00fcssel-Werte-Paaren (jeweils Typ Map.Entry<K,V> ) handelt, liefert entrySet() eine Set<Map.Entry<K,V>> zur\u00fcck. Lassen Sie sich von dieser kryptischen Schreibweise nicht abschrecken! Zur\u00fcckgegeben wird eine Set . Diese ist typisiert und zwar mit dem Typ Map.Entry , welches der Typ eines einzelnen Schl\u00fcssel-Werte-Paares ist. Map.Entry ist selbst typisiert, n\u00e4mlich mit dem Typ der Schl\u00fcssel K und dem Typ der Werte V . F\u00fcr K und V werden bei Verwendung konkrete Typen eingesetzt. Hier sind es zun\u00e4chst nur Platzhalter. Klassenbaum f\u00fcr Map \u00b6 Der Klassenbaum f\u00fcr Map hat \u00c4hnlichkeiten zum Klassenbaum f\u00fcr Collection . Wir finden hier wieder gr\u00fcne (Interfaces), rote (abstrakte Klassen) und blaue (konkrete Klassen) Felder. Auch hier ist es wieder so, dass wir Map als Typ f\u00fcr eine Map verwenden, aber f\u00fcr die Erzeugung konkreter Objekte die Klassen EnumMap , HashMap und TreeMap verwenden. Die am h\u00e4ufigsten verwendete Klasse ist HashMap , da sie am performantesten arbeitet. Sobald Reihenfolge/Sortierung eine Rolle spielt, wird TreeMap verwendet. Erstes Beispiel \u00b6 Wir betrachten ein erstes Beispiel. Wir erstellen eine HashMap und f\u00fcgen vier Eintr\u00e4ge hinzu: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import java.util.HashMap ; import java.util.Map ; public class Maps { public static void main ( String [] args ) { Map < String , Double > m = new HashMap <> (); m . put ( \"s0512345\" , 1.7 ); // neues Schluessel-Werte-Paar hinzugefuegt m . put ( \"s0587654\" , 2.3 ); // neues Schluessel-Werte-Paar hinzugefuegt m . put ( \"s0512345\" , 2.7 ); // Schluessel existiert bereits --> Wert geaendert m . put ( \"s0555555\" , 3.0 ); // neues Schluessel-Werte-Paar hinzugefuegt } } In Zeile 8 wird unsere Map erzeugt. Die Referenzvariable auf die Map hei\u00dft m . Die Schl\u00fcssel sind vom Typ String und die Werte sind vom Typ Double . Das konkrete Objekt wird durch den Aufruf des Konstruktors der Klasse HashMap erzeugt. In Zeile 9 f\u00fcgen wir mithilfe der put() -Methode ein neues Schl\u00fcssel-Werte-Paar hinzu. Der Schl\u00fcssel ( key ) ist \"s0512345\" , der Wert ( value ) ist 1.7 . Beachten Sie, dass hier ein Auto-Boxing des double -Wertes 1.7 in ein Double stattfindet. In Zeile 10 f\u00fcgen wir mithilfe der put() -Methode ein weiters Schl\u00fcssel-Werte-Paar hinzu. Der Schl\u00fcssel ( key ) ist \"s0587654\" , der Wert ( value ) ist 2.3 (erneut Auto-Boxing ). In Zeile 11 wird erneut die put() -Methode aufgerufen. Der Schl\u00fcssel \"s0512345\" existiert jedoch bereits. Deshalb wird nur der Wert ge\u00e4ndert. Aus dem alten Wert 1.7 wird nun 2.7 . Die Map enth\u00e4lt nach dieser Anweisung (noch nur) zwei Eintr\u00e4ge. In Zeile 12 f\u00fcgen wir mithilfe der put() -Methode ein weiters Schl\u00fcssel-Werte-Paar hinzu. Der Schl\u00fcssel ( key ) ist \"s0555555\" , der Wert ( value ) ist 3.0 (erneut Auto-Boxing ). Nach diesen Anweisungen sieht unsere Map also wie folgt aus (die \u00dcberschriften der Tabelle dienen nur der Orientierung): Die folgende Abbildung zeigt die Methoden, um Zugriff auf die Werte, Schl\u00fcssel und alle Eintr\u00e4ge zu erhalten: Die Anwendung dieser Methoden auf unsere Map m zeigen die folgenden Anweisungen: 1 2 3 Set < String > keys = m . keySet (); // Menge aller Schluessel Collection < Double > values = m . values (); // Collection aller Werte Set < Map . Entry < String , Double >> entries = m . entrySet (); // Menge aller Schluessel-Werte-Paare die Objektmethode keySet() liefert die Menge aller Schl\u00fcssel zur\u00fcck; R\u00fcckgabetyp ist Set<K> , die Objektmethode values() liefert eine Collection aller Werte zur\u00fcck; R\u00fcckgabetyp ist Collection<V> , die Objektmethode entrySet() liefert die Menge aller Schl\u00fcssel-Werte-Paare zur\u00fcck; R\u00fcckgabetyp ist Set<Map.Entry<K,V>> Durch eine Map laufen \u00b6 Um alle Schl\u00fcssel-Werte-Paare einer Map zu extrahieren, k\u00f6nnen wir, wie bereits erw\u00e4hnt, die Methode entrySet() verwenden. F\u00fcr den R\u00fcckgabetyp Map.Entry<K,V> stehen uns zwei weitere Objektmethoden zur Verf\u00fcgung: getKey() liefert den Schl\u00fcssel des Schl\u00fcssel-Werte-Paares zur\u00fcck; R\u00fcckgabetyp ist K , getValue() liefert den Wert des Schl\u00fcssel-Werte-Paares zur\u00fcck; R\u00fcckgabetyp ist V . Wir betrachten f\u00fcr unsere Map m ein Beispiel: 1 2 3 4 for ( Map . Entry < String , Double > eintrag : m . entrySet ()) { System . out . println ( eintrag . getKey () + \" : \" + eintrag . getValue ()); } - In Zeile 1 wird die Methode m.entrySet() aufgerufen, diese gibt eine Set<Map.Entry<String, Double>> zur\u00fcck. Jeder einzelne Eintrag in dieser Set ist also vom Typ Map.Entry<String,Double> . Deshalb verwenden wir diesen Typ f\u00fcr unsere Variable eintrag . Wir nutzen hier also erneut die for-each -Schleife, um durch eine Set zu laufen. - In Zeile 3 verwenden wir die Objektmethoden getKey() und getValue() , die uns von Map.Entry zur Verf\u00fcgung gestellt werden. getKey() gibt uns hier einen String zur\u00fcck (den Schl\u00fcssel) und getValue() gibt hier ein Double zur\u00fcck (den Wert). Hier erfolgt eine automatische Konvertierung von Double nach String (impliziter Aufruf von toString() f\u00fcr Double ). Es erfolgt folgende Ausgabe: s0512345 : 2 .7 s0555555 : 3 .0 s0587654 : 2 .3 Wir sehen also, dass die Reihenfolge des Einf\u00fcgens der Elemente nicht gewahrt bleibt. Die Schl\u00fcssel werden auch nicht sortiert, das sieht hier nur so aus. Wir probieren auch noch die Objektmethoden keySet() und value() aus, die f\u00fcr eine Map zur Verf\u00fcgung stehen: for ( String schluessel : m . keySet ()) { System . out . println ( \"key : \" + schluessel ); } erzeugt: key : s0512345 key : s0555555 key : s0587654 und for ( Double wert : m . values ()) { System . out . println ( \"value : \" + wert . toString ()); // toString() wuerde auch implizit aufgerufen } erzeugt: value : 2 .7 value : 3 .0 value : 2 .3 \u00dcbung Was wird ausgegeben? Map < String , String > accounts = new HashMap <> (); accounts . put ( \"anton\" , \"anton@email.de\" ); accounts . put ( \"berta\" , \"berta@email.de\" ); accounts . put ( \"caesar\" , \"caesar@email.de\" ); accounts . put ( \"anton\" , \"antonius@email.de\" ); // Iteration ueber alle Eintraege (Map.Entry) der Map for ( Map . Entry < String , String > entry : accounts . entrySet ()) { System . out . println ( \"Account : \" + entry . getKey () + \" E-Mail : \" + entry . getValue ()); } Zusammenfassung Maps \u00b6 Maps speichern Referenztypen als Schl\u00fcssel und Werte Maps werden typisiert mit K (Platzhalter f\u00fcr den Referenztyp des Schl\u00fcssels) und V (Platzhalter f\u00fcr den Referenztyp des Wertes) Maps enthalten eindeutige Zuordnungen von einem Wert zu einem Schl\u00fcssel (aber nicht umgekehrt) der Zugriff auf alle Eintr\u00e4ge/Schl\u00fcssel/Werte erfolgt \u00fcber Sets/Collection der Typ eines einzelnen Schl\u00fcssel-Werte-Paares ist Map.Entry<K,V> Hier noch ein \u00dcberblick \u00fcber die wichtigsten Objektmethoden f\u00fcr eine Map . Weitere Methoden finden Sie hier . Objektmethode Beschreibung V get(K key) Gibt den Wert zum Schl\u00fcssel key zur\u00fcck. Ist der Schl\u00fcssel key nicht in der Map enthalten, wird null zur\u00fcckgegeben. V put(K key, V value) F\u00fcgt einen neuen Eintrag mit dem Schl\u00fcssel key und dem Wert value in die Map ein. Wenn ein Eintrag f\u00fcr Schl\u00fcssel key bereits existiert, wird der value \u00fcberschrieben . void putAll(Map m) F\u00fcgt alle Element der Map m in die Map ein. Wenn ein Eintrag f\u00fcr einen Schl\u00fcssel bereits existiert, wird er \u00fcberschrieben . void clear() Entfernt alle Elemente aus der Map. boolean containsKey(Object k) Gibt true zur\u00fcck, wenn es einen Eintrag mit dem Schl\u00fcssel k in der Map gibt. Der Vergleich der Schl\u00fcssel mit dem Objekt k erfolgt mit der equals() -Methode. boolean containsValue(Object v) Gibt true zur\u00fcck, wenn es einen Eintrag mit dem Wert v in der Map gibt. Der Vergleich der Werte mit dem Objekt v erfolgt mit der equals() -Methode. boolean isEmpty() Gibt true zur\u00fcck, wenn sich keine Elemente in der Map befinden. V remove(Object key) Entfernt den Eintrag mit dem Schl\u00fcssel key aus der Map und gibt den dazugeh\u00f6rigen Wert zur\u00fcck (wenn key in der Map enthalten ist, sonst null ). int size() Gibt die Anzahl der Elemente in der Map zur\u00fcck. Set keySet() Gibt eine Set mit allen Schl\u00fcsseln der Map zur\u00fcck. Collection values() Gibt eine Collection mit allen Werten der Map zur\u00fcck. Set > entrySet() Gibt eine Set mit allen Eintr\u00e4gen (Schl\u00fcssel-Werte-Paare) als Map.Entry der Map zur\u00fcck.","title":"Maps"},{"location":"maps/#maps","text":"Maps sind auch Collections. Maps sind Mengen von Schl\u00fcssel-Werte-Paaren. Wir k\u00f6nnen uns Maps als zweispaltige Tabellen vorstellen, in denen die linke Spalte die Schl\u00fcssel ( keys ) enth\u00e4lt und die rechte Spalte die Werte ( values ). Die Schl\u00fcssel in einer Map sind immer eindeutig, d.h. keine zwei Schl\u00fcssel in einer Map sind gleich. Tats\u00e4chlich handelt es sich bei der Menge der Schl\u00fcssel um eine Set . Obwohl Maps Collections sind, wurde f\u00fcr sie nicht das Interface Collection implementiert, so wie f\u00fcr Listen und Mengen, sondern ein eigenes Interface Map . F\u00fcr Interessierte lohnt sich vielleicht auch ein Blick in die Collections Framework Documentation und das Collections Framework Tutorial .","title":"Maps"},{"location":"maps/#statt-add-und-addall-hier-put-und-putall","text":"Da nicht das Collections -Interface f\u00fcr Maps implementiert wurde, erfolgt das Hinzuf\u00fcgen eines Schl\u00fcssel-Werte-Paares zu einer Map leider auch nicht \u00fcber add() bzw. das Hinzuf\u00fcgen einer Collection nicht \u00fcber addAll() , sondern \u00fcber put(K key, V value) und putAll(Map m) . K ist dabei ein Platzhalter f\u00fcr den Typ der Schl\u00fcssel und V ein Platzhalter f\u00fcr den Typ der Werte.","title":"Statt add() und addAll() hier put() und putAll()"},{"location":"maps/#typ-einer-map-und-typ-eines-schlussel-werte-paares","text":"Eine Map wird also mit zwei Typen typisiert: Map<K, V> wobei K den Typ der Schl\u00fcssel und V den Typ der Werte definiert. Der Typ eines einzelnen Schl\u00fcssel-Werte-Paares ist Map.Entry<K,V> Das sieht f\u00fcr uns nat\u00fcrlich auch erstmal ungew\u00f6hnlich aus. Entry ist eine innere Klasse in der Klasse Map (tats\u00e4chlich sind beides Interfaces). Wir nehmen das erstmal einfach so hin und merken uns: der (typisierte) Typ einer Map ist Map<K,V> und der (typisierte) Typ jedes einzelnen Schl\u00fcssel-Werte-Paares in dieser Map ist Map.Entry<K,V> .","title":"Typ einer Map und Typ eines Schl\u00fcssel-Werte-Paares"},{"location":"maps/#statt-iterator-hier-entryset","text":"Die Objektmethode iterator() gibt es f\u00fcr Map leider auch nicht. Stattdessen wird hier die Methode entrySet() verwendet. Da es sich bei einer Map um eine Set von lauter Schl\u00fcssel-Werte-Paaren (jeweils Typ Map.Entry<K,V> ) handelt, liefert entrySet() eine Set<Map.Entry<K,V>> zur\u00fcck. Lassen Sie sich von dieser kryptischen Schreibweise nicht abschrecken! Zur\u00fcckgegeben wird eine Set . Diese ist typisiert und zwar mit dem Typ Map.Entry , welches der Typ eines einzelnen Schl\u00fcssel-Werte-Paares ist. Map.Entry ist selbst typisiert, n\u00e4mlich mit dem Typ der Schl\u00fcssel K und dem Typ der Werte V . F\u00fcr K und V werden bei Verwendung konkrete Typen eingesetzt. Hier sind es zun\u00e4chst nur Platzhalter.","title":"Statt iterator() hier entrySet()"},{"location":"maps/#klassenbaum-fur-map","text":"Der Klassenbaum f\u00fcr Map hat \u00c4hnlichkeiten zum Klassenbaum f\u00fcr Collection . Wir finden hier wieder gr\u00fcne (Interfaces), rote (abstrakte Klassen) und blaue (konkrete Klassen) Felder. Auch hier ist es wieder so, dass wir Map als Typ f\u00fcr eine Map verwenden, aber f\u00fcr die Erzeugung konkreter Objekte die Klassen EnumMap , HashMap und TreeMap verwenden. Die am h\u00e4ufigsten verwendete Klasse ist HashMap , da sie am performantesten arbeitet. Sobald Reihenfolge/Sortierung eine Rolle spielt, wird TreeMap verwendet.","title":"Klassenbaum f\u00fcr Map"},{"location":"maps/#erstes-beispiel","text":"Wir betrachten ein erstes Beispiel. Wir erstellen eine HashMap und f\u00fcgen vier Eintr\u00e4ge hinzu: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 import java.util.HashMap ; import java.util.Map ; public class Maps { public static void main ( String [] args ) { Map < String , Double > m = new HashMap <> (); m . put ( \"s0512345\" , 1.7 ); // neues Schluessel-Werte-Paar hinzugefuegt m . put ( \"s0587654\" , 2.3 ); // neues Schluessel-Werte-Paar hinzugefuegt m . put ( \"s0512345\" , 2.7 ); // Schluessel existiert bereits --> Wert geaendert m . put ( \"s0555555\" , 3.0 ); // neues Schluessel-Werte-Paar hinzugefuegt } } In Zeile 8 wird unsere Map erzeugt. Die Referenzvariable auf die Map hei\u00dft m . Die Schl\u00fcssel sind vom Typ String und die Werte sind vom Typ Double . Das konkrete Objekt wird durch den Aufruf des Konstruktors der Klasse HashMap erzeugt. In Zeile 9 f\u00fcgen wir mithilfe der put() -Methode ein neues Schl\u00fcssel-Werte-Paar hinzu. Der Schl\u00fcssel ( key ) ist \"s0512345\" , der Wert ( value ) ist 1.7 . Beachten Sie, dass hier ein Auto-Boxing des double -Wertes 1.7 in ein Double stattfindet. In Zeile 10 f\u00fcgen wir mithilfe der put() -Methode ein weiters Schl\u00fcssel-Werte-Paar hinzu. Der Schl\u00fcssel ( key ) ist \"s0587654\" , der Wert ( value ) ist 2.3 (erneut Auto-Boxing ). In Zeile 11 wird erneut die put() -Methode aufgerufen. Der Schl\u00fcssel \"s0512345\" existiert jedoch bereits. Deshalb wird nur der Wert ge\u00e4ndert. Aus dem alten Wert 1.7 wird nun 2.7 . Die Map enth\u00e4lt nach dieser Anweisung (noch nur) zwei Eintr\u00e4ge. In Zeile 12 f\u00fcgen wir mithilfe der put() -Methode ein weiters Schl\u00fcssel-Werte-Paar hinzu. Der Schl\u00fcssel ( key ) ist \"s0555555\" , der Wert ( value ) ist 3.0 (erneut Auto-Boxing ). Nach diesen Anweisungen sieht unsere Map also wie folgt aus (die \u00dcberschriften der Tabelle dienen nur der Orientierung): Die folgende Abbildung zeigt die Methoden, um Zugriff auf die Werte, Schl\u00fcssel und alle Eintr\u00e4ge zu erhalten: Die Anwendung dieser Methoden auf unsere Map m zeigen die folgenden Anweisungen: 1 2 3 Set < String > keys = m . keySet (); // Menge aller Schluessel Collection < Double > values = m . values (); // Collection aller Werte Set < Map . Entry < String , Double >> entries = m . entrySet (); // Menge aller Schluessel-Werte-Paare die Objektmethode keySet() liefert die Menge aller Schl\u00fcssel zur\u00fcck; R\u00fcckgabetyp ist Set<K> , die Objektmethode values() liefert eine Collection aller Werte zur\u00fcck; R\u00fcckgabetyp ist Collection<V> , die Objektmethode entrySet() liefert die Menge aller Schl\u00fcssel-Werte-Paare zur\u00fcck; R\u00fcckgabetyp ist Set<Map.Entry<K,V>>","title":"Erstes Beispiel"},{"location":"maps/#durch-eine-map-laufen","text":"Um alle Schl\u00fcssel-Werte-Paare einer Map zu extrahieren, k\u00f6nnen wir, wie bereits erw\u00e4hnt, die Methode entrySet() verwenden. F\u00fcr den R\u00fcckgabetyp Map.Entry<K,V> stehen uns zwei weitere Objektmethoden zur Verf\u00fcgung: getKey() liefert den Schl\u00fcssel des Schl\u00fcssel-Werte-Paares zur\u00fcck; R\u00fcckgabetyp ist K , getValue() liefert den Wert des Schl\u00fcssel-Werte-Paares zur\u00fcck; R\u00fcckgabetyp ist V . Wir betrachten f\u00fcr unsere Map m ein Beispiel: 1 2 3 4 for ( Map . Entry < String , Double > eintrag : m . entrySet ()) { System . out . println ( eintrag . getKey () + \" : \" + eintrag . getValue ()); } - In Zeile 1 wird die Methode m.entrySet() aufgerufen, diese gibt eine Set<Map.Entry<String, Double>> zur\u00fcck. Jeder einzelne Eintrag in dieser Set ist also vom Typ Map.Entry<String,Double> . Deshalb verwenden wir diesen Typ f\u00fcr unsere Variable eintrag . Wir nutzen hier also erneut die for-each -Schleife, um durch eine Set zu laufen. - In Zeile 3 verwenden wir die Objektmethoden getKey() und getValue() , die uns von Map.Entry zur Verf\u00fcgung gestellt werden. getKey() gibt uns hier einen String zur\u00fcck (den Schl\u00fcssel) und getValue() gibt hier ein Double zur\u00fcck (den Wert). Hier erfolgt eine automatische Konvertierung von Double nach String (impliziter Aufruf von toString() f\u00fcr Double ). Es erfolgt folgende Ausgabe: s0512345 : 2 .7 s0555555 : 3 .0 s0587654 : 2 .3 Wir sehen also, dass die Reihenfolge des Einf\u00fcgens der Elemente nicht gewahrt bleibt. Die Schl\u00fcssel werden auch nicht sortiert, das sieht hier nur so aus. Wir probieren auch noch die Objektmethoden keySet() und value() aus, die f\u00fcr eine Map zur Verf\u00fcgung stehen: for ( String schluessel : m . keySet ()) { System . out . println ( \"key : \" + schluessel ); } erzeugt: key : s0512345 key : s0555555 key : s0587654 und for ( Double wert : m . values ()) { System . out . println ( \"value : \" + wert . toString ()); // toString() wuerde auch implizit aufgerufen } erzeugt: value : 2 .7 value : 3 .0 value : 2 .3 \u00dcbung Was wird ausgegeben? Map < String , String > accounts = new HashMap <> (); accounts . put ( \"anton\" , \"anton@email.de\" ); accounts . put ( \"berta\" , \"berta@email.de\" ); accounts . put ( \"caesar\" , \"caesar@email.de\" ); accounts . put ( \"anton\" , \"antonius@email.de\" ); // Iteration ueber alle Eintraege (Map.Entry) der Map for ( Map . Entry < String , String > entry : accounts . entrySet ()) { System . out . println ( \"Account : \" + entry . getKey () + \" E-Mail : \" + entry . getValue ()); }","title":"Durch eine Map laufen"},{"location":"maps/#zusammenfassung-maps","text":"Maps speichern Referenztypen als Schl\u00fcssel und Werte Maps werden typisiert mit K (Platzhalter f\u00fcr den Referenztyp des Schl\u00fcssels) und V (Platzhalter f\u00fcr den Referenztyp des Wertes) Maps enthalten eindeutige Zuordnungen von einem Wert zu einem Schl\u00fcssel (aber nicht umgekehrt) der Zugriff auf alle Eintr\u00e4ge/Schl\u00fcssel/Werte erfolgt \u00fcber Sets/Collection der Typ eines einzelnen Schl\u00fcssel-Werte-Paares ist Map.Entry<K,V> Hier noch ein \u00dcberblick \u00fcber die wichtigsten Objektmethoden f\u00fcr eine Map . Weitere Methoden finden Sie hier . Objektmethode Beschreibung V get(K key) Gibt den Wert zum Schl\u00fcssel key zur\u00fcck. Ist der Schl\u00fcssel key nicht in der Map enthalten, wird null zur\u00fcckgegeben. V put(K key, V value) F\u00fcgt einen neuen Eintrag mit dem Schl\u00fcssel key und dem Wert value in die Map ein. Wenn ein Eintrag f\u00fcr Schl\u00fcssel key bereits existiert, wird der value \u00fcberschrieben . void putAll(Map m) F\u00fcgt alle Element der Map m in die Map ein. Wenn ein Eintrag f\u00fcr einen Schl\u00fcssel bereits existiert, wird er \u00fcberschrieben . void clear() Entfernt alle Elemente aus der Map. boolean containsKey(Object k) Gibt true zur\u00fcck, wenn es einen Eintrag mit dem Schl\u00fcssel k in der Map gibt. Der Vergleich der Schl\u00fcssel mit dem Objekt k erfolgt mit der equals() -Methode. boolean containsValue(Object v) Gibt true zur\u00fcck, wenn es einen Eintrag mit dem Wert v in der Map gibt. Der Vergleich der Werte mit dem Objekt v erfolgt mit der equals() -Methode. boolean isEmpty() Gibt true zur\u00fcck, wenn sich keine Elemente in der Map befinden. V remove(Object key) Entfernt den Eintrag mit dem Schl\u00fcssel key aus der Map und gibt den dazugeh\u00f6rigen Wert zur\u00fcck (wenn key in der Map enthalten ist, sonst null ). int size() Gibt die Anzahl der Elemente in der Map zur\u00fcck. Set keySet() Gibt eine Set mit allen Schl\u00fcsseln der Map zur\u00fcck. Collection values() Gibt eine Collection mit allen Werten der Map zur\u00fcck. Set > entrySet() Gibt eine Set mit allen Eintr\u00e4gen (Schl\u00fcssel-Werte-Paare) als Map.Entry der Map zur\u00fcck.","title":"Zusammenfassung Maps"},{"location":"mausereignisse/","text":"Mausereignisse \u00b6 In der letzten Lektion haben wir uns angeschaut, wie wir eigene geometrische Objekte in einer GUI erzeugen k\u00f6nnen, d.h. wie haben \"Zeichnen\" in einer GUI gelernt. Um Zeichnen zu k\u00f6nnen, haben wir eine innere Klasse erstellt, die von JPanel geerbt hat, darin die Methode paintComponent() \u00fcberschrieben und in dieser Methode Objektmethoden der Klasse Graphics2D aufgerufen, welche das Zeichnen von geometrischen Objekten erm\u00f6glichen. Nun wollen wir uns anschauen, wie wir Ereignisse der Maus behandeln. Bei den Mausereignissen unterscheiden wir zwei Arten von Ereignissen: Ereignisse der Maus, die einmalig von der Maus ausgel\u00f6st werden. Dazu geh\u00f6ren die Ereignisse, wenn die linke Maustaste gedr\u00fcckt wird, wenn die gedr\u00fcckte Taste losgelassen wird, wenn sich die Maus auf eine Komponente bewegt, die sich an den Mauslistener angemeldet hat oder wenn der Mauszeiger diese Komponente wieder verl\u00e4sst. Ereignisse der Maus, die durch Bewegung der Maus permanent ausgel\u00f6st werden. Dazu geh\u00f6rt die Mausbewegung selbst oder auch die Bewegung der Maus bei gedr\u00fcckter Taste. Die erste Art von Mausereignissen k\u00f6nnen wir behandeln, indem wir den MouseListener implementieren und eine Komponente (z.B. unsere Canvas ) an den MouseListener anmelden. Die zweite Art von Maus(-Bewegungs-)ereignissen k\u00f6nnen wir behandeln, indem wir den MouseMotionListener implementieren und eine Komponente (z.B. unsere Canvas ) an den MouseMotionListener anmelden. Wir starten wieder mit einem einfachen Beispiel, welches auf unserem Gr\u00fcndger\u00fcst f\u00fcr das Zeichnen basiert: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import java.awt.Graphics ; import java.awt.Graphics2D ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Mausereignisse extends JFrame { public Mausereignisse () { super (); this . setTitle ( \"Mausereignisse\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). add ( new Canvas ()); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } public static void main ( String [] args ) { new Mausereignisse (); } } Der MouseListener \u00b6 In dieser Klasse implementieren wir zun\u00e4chst den MouseListener , d.h. wir f\u00fcgen in den Klassenkopf implements MouseListener ein und lassen durch Eclipse die zu implementierenden Methoden einf\u00fcgen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Mausereignisse extends JFrame implements MouseListener { public Mausereignisse () { super (); this . setTitle ( \"Mausereignisse\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). add ( new Canvas ()); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } public static void main ( String [] args ) { new Mausereignisse (); } @Override public void mouseClicked ( MouseEvent e ) { System . out . println ( \"mouseClicked\" ); } @Override public void mousePressed ( MouseEvent e ) { System . out . println ( \"mousePressed\" ); } @Override public void mouseReleased ( MouseEvent e ) { System . out . println ( \"mouseReleased\" ); } @Override public void mouseEntered ( MouseEvent e ) { System . out . println ( \"mouseEntered\" ); } @Override public void mouseExited ( MouseEvent e ) { System . out . println ( \"mouseExited\" ); } } Wie wir sehen, sind es nun nicht mehr nur eine Methode, wie beim ActionListener , sondern gleich f\u00fcnf Methoden, die wir implementieren k\u00f6nnen. Unsere zun\u00e4chst einfachste Implementierung (aber zumindest am Anfang stets empfohlen!) ist die einfache Ausgabe auf die Konsole. Noch passiert aber nichts, denn wir d\u00fcrfen nicht vergessen, uns an den MouseListener anzumelden ! Canvas meldet sich an den MouseListener an \u00b6 Wir k\u00f6nnten nun das gesamte Fenster an den MouseListener anmelden. Dazu w\u00fcrden wir in den Konstruktor von Mausereignisse ein this.addMouseListener(this); einf\u00fcgen. Damit w\u00fcrde this (also das Objekt von Mausereignisse , welches ja selbst ein JFrame ist) an den MouseListener angemeldet. Die Methode addMouseListener() erwartet ein Objekt der Implementierung von MouseListener . Das w\u00e4re ebenfalls this , da der MouseListener in der Klasse Mausereignisse implementiert ist. Weil jedoch sp\u00e4ter der Umgang mit den Mausereignissen etwas leichter ist, wollen wir das Canvas -Objekt an den MouseListener anmelden. Es soll also nur die Zeichenfl\u00e4che (geerbt von JPanel ) an den MouseListener angemeldet werden und nicht das gesamte Fenster. Dazu speichern wir das Canvas -Objekt in eine Variable - und wir vereinfachen die Sache auch gleich ein bisschen, indem es keine lokale Variable im Konstruktor von Mausereignisse wird, sondern eine Objektvariable der Klasse. Diese \u00c4nderungen und das Anmelden von canvas an den MouseListener sehen so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Mausereignisse extends JFrame implements MouseListener { Canvas canvas ; public Mausereignisse () { super (); this . setTitle ( \"Mausereignisse\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . getContentPane (). add ( this . canvas ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } public static void main ( String [] args ) { new Mausereignisse (); } @Override public void mouseClicked ( MouseEvent e ) { System . out . println ( \"mouseClicked\" ); } @Override public void mousePressed ( MouseEvent e ) { System . out . println ( \"mousePressed\" ); } @Override public void mouseReleased ( MouseEvent e ) { System . out . println ( \"mouseReleased\" ); } @Override public void mouseEntered ( MouseEvent e ) { System . out . println ( \"mouseEntered\" ); } @Override public void mouseExited ( MouseEvent e ) { System . out . println ( \"mouseExited\" ); } } Wir erstellen uns also eine Objektvariable canvas (Zeile 10 ), welche eine Referenz auf das Canvas -Objekt ist, das wir im Konstruktor erzeugen (Zeile 18 ). Diese Referenz \u00fcbergeben wir dann auch der ContentPane (Zeile 20 ). Mithilfe der Methode addMouseListener() melden wir das Canvas -Objekt an den MouseListener an (Zeile 19 ). Da der MouseListener in der Klasse Mausereignisse implementiert ist, wird als Implementierung des MouseListeners this \u00fcbergeben (Zeile 19 ). Die Methoden des MouseListener \u00b6 Nun ist der MouseListener implementiert und das Canvas -Objekt ist an den MouseListener angemeldet. Wir k\u00f6nnen nun die einzelnen Methoden des MouseListener ausprobieren: mousePressed() wird aufgerufen, wenn die (linke) Maustaste heruntergedr\u00fcckt wird. Dr\u00fccken Sie die Maustaste und halten Sie sie gedr\u00fcckt. In der Konsole erscheint mousePressed . mouseReleased() wird aufgerufen, wenn die (linke) Maustaste nach dem Dr\u00fccken wieder losgelassen wird. Lassen Sie die Maustaste, nachdem auf der Konsole mousePressed erschienen ist, wieder los. In der Konsole erscheint mouseReleased . mouseClicked() wird aufgerufen, wenn erst mousePressed() und dann mouseReleased() aufgerufen wurde. mouseClicked() beschreibt also die Kombination aus Maustaste gedr\u00fcckt und Maustaste losgelassen - einen Maus-Klick also. mouseEntered() wird aufgerufen, wenn Sie den Mauszeiger auf die Komponente bewegen, die an den MouseListener angemeldet ist. Wenn Sie in unserem Fall also die Maus in die Zeichenfl\u00e4che canvas bewegen, dann wird die Methode mouseEntered() einmalig ausgef\u00fchrt. mouseExited() wird aufgerufen, wenn Sie den Mauszeiger von der Komponente wieder wegbewegen, die an den MouseListener angemeldet ist. Wenn Sie in unserem Fall also die Maus von der Zeichenfl\u00e4che in die Titelleiste des Fensters oder ganz aus dem Fenster (der ContentPane ) bewegen, dann wird die Methode mouseExited() einmalig ausgef\u00fchrt. \u00dcbung Probieren Sie intensiv aus, wann welche Methoden aufgerufen werden! 1. Schaffen Sie es, dass zwar mousePressed und danach mouseReleased auf der Konsole erscheint, nicht aber mouseClicked ? Wann ist das der Fall? 2. Erzeugen Sie folgende Ausgabereihenfolge auf der Konsole: mousePressed , mouseExited , mouseReleased , mouseEntered ! Die Methoden des MouseMotionListener \u00b6 Wir implementieren jetzt auch noch den MouseMotionListener . Wir d\u00fcrfen erneut nicht die beiden Schritte vergessen: Implementieren des MouseMotionListener (also implements MouseMotionListener ) und Anmelden an den MouseMotionListener (also canvas.addMouseMotionListener(this); ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Mausereignisse extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; public Mausereignisse () { super (); this . setTitle ( \"Mausereignisse\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } public static void main ( String [] args ) { new Mausereignisse (); } /* * die naechtsten fuenf Methoden sind Methoden * von MouseListener */ @Override public void mouseClicked ( MouseEvent e ) { System . out . println ( \"mouseClicked\" ); } @Override public void mousePressed ( MouseEvent e ) { System . out . println ( \"mousePressed\" ); } @Override public void mouseReleased ( MouseEvent e ) { System . out . println ( \"mouseReleased\" ); } @Override public void mouseEntered ( MouseEvent e ) { System . out . println ( \"mouseEntered\" ); } @Override public void mouseExited ( MouseEvent e ) { System . out . println ( \"mouseExited\" ); } /* * die naechtsten beiden Methoden sind Methoden * von MouseMotionListener */ @Override public void mouseDragged ( MouseEvent e ) { System . out . println ( \"mouseDragged\" ); } @Override public void mouseMoved ( MouseEvent e ) { System . out . println ( \"mouseMoved\" ); } } Beachten Sie, dass die Methoden mouseDragged() bzw. mouseMoved() permanent, d.h. bei jeder (kleinsten) Bewegung der Maus aufgerufen werden. mouseMoved() wird bei jeder (kleinsten) Mausbewegung aufgerufen, wobei die Maustaste nicht gedr\u00fcckt ist. mouseDragged() wird bei jeder (kleinsten) Mausbewegung aufgerufen, wobei die Maustaste gedr\u00fcckt gehalten wird. Wenn Sie anhand der Konsolenausgaben gepr\u00fcft haben, dass die Methoden \"funktionieren\", dann k\u00f6nnen Sie dort die Konsolenausgaben auch wieder auskommentieren, da Ihre Konsole ansonsten zu \"vollgeschreiben\" wird. Objektmethoden der Klasse MouseEvent \u00b6 All diesen Methoden, sowohl vom MouseListener als auch vom MouseMotionListener wird ein MouseEvent als Parameter \u00fcbergeben. Dieses Objekt besitzt einige n\u00fctzliche Objektmethoden. Die wichtigsten dabei sind sicherlich die Ausk\u00fcnfte dar\u00fcber, wo das Mausereignis ausgel\u00f6st wurde. Wir betrachten einige Objektmethoden des MouseEvent -Objekts am Beispiel der mouseClicked(MouseEvent e) -Methode (kommentieren Sie die Konsolenausgabe der beiden Methoden vom MouseMotionListener aus, damit Sie sich auf die Ausgabe von mouseClicked() konzentrieren k\u00f6nnen). die Methode getX() gibt den x -Wert der Koordinate zur\u00fcck, bei dem das MouseEvent stattgefunden hat. Die Koordinate bezieht sich auf die Komponente, die an den MouseListener (bzw. MouseMotionListener ) angemeldet ist. Das ist auch der Grund, warum wir nicht das gesamte Fenster an den MouseListener (und MouseMotionListener ) angemeldet haben. Der Punkt [x=0, y=0] befindet sich bei dem Canvas -Objekt in der linken oberen Ecke der ContentPane . Der Punkt mit den Koordinaten [x=0, y=0] beim Fenster ist der linke obere Punkt des Fensters, d.h. der linke obere Punkt der Titelleiste. die Methode getY() gibt den y -Wert der Koordinate zur\u00fcck, bei dem das MouseEvent stattgefunden hat (Koordinate der Komponente). die Methode getPoint() gibt ein Point -Objekt (von java.awt ) zur\u00fcck. Ein Point -Objekt besitzt die sichtbaren Objektvariablen x und y f\u00fcr die Koordinaten. Wir probieren beide M\u00f6glichkeiten aus, die Koordinaten zu erfragen: 49 50 51 52 53 54 55 56 @Override public void mouseClicked ( MouseEvent e ) { Point p = e . getPoint (); int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked bei [x=\" + p . x + \" ,y=\" + p . y + \"]\" ); System . out . println ( \"mouseClicked bei [x=\" + x + \" ,y=\" + y + \"]\" ); } Beide Ausgaben zeigen (nat\u00fcrlich) die gleichen Koordinaten an, z.B. mouseClicked bei [ x = 388 ,y = 215 ] mouseClicked bei [ x = 388 ,y = 215 ] Beachten Sie, dass Sie in allen Methoden, in denen das MouseEvent \u00fcbergeben wird, die Koordinaten des Ereignisses auslesen k\u00f6nnen. F\u00fcr mouseMoved() sieht die Implementierung gleich aus. Die Ausgabe ist nur deutlich h\u00e4ufiger, da jede Mausbewegung (ohne gedr\u00fcckte Maustaste) zum Aufruf der Methode f\u00fchrt. 90 91 92 93 94 @Override public void mouseMoved ( MouseEvent e ) { Point p = e . getPoint (); System . out . println ( \"mouseMoved bei [x=\" + p . x + \" ,y=\" + p . y + \"]\" ); } Beide Ausgaben zeigen (nat\u00fcrlich) die gleichen Koordinaten an, z.B. mouseMoved bei [ x = 267 ,y = 242 ] mouseMoved bei [ x = 282 ,y = 261 ] mouseMoved bei [ x = 282 ,y = 261 ] mouseMoved bei [ x = 298 ,y = 280 ] mouseMoved bei [ x = 298 ,y = 280 ] mouseMoved bei [ x = 309 ,y = 292 ] mouseMoved bei [ x = 309 ,y = 292 ] Manchmal sind die Mausbewegungen, die ein Ausl\u00f6sen des Ereignisses zur Folge haben, sogar so klein, dass sich die Koordinaten gar nicht \u00e4ndern. Weiterhin kann mithilfe des MouseEvent -Objektes \u00fcberpr\u00fcft werden, ob w\u00e4hrend des ausl\u00f6senden Mausereignisses eine besondere Taste auf der Tastatur gedr\u00fcckt wurde, z.B. die Alt -Taste (linke option -Taste beim Mac), die AltGraph -Taste (rechte option -Taste beim Mac), die Ctrl -Taste, oder die Meta -Taste ( Windows -Taste bzw. Apple -Taste): 49 50 51 52 53 54 55 56 57 58 59 60 61 62 @Override public void mouseClicked ( MouseEvent e ) { Point p = e . getPoint (); int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked bei [x=\" + p . x + \" ,y=\" + p . y + \"]\" ); System . out . println ( \"mouseClicked bei [x=\" + x + \" ,y=\" + y + \"]\" ); if ( e . isAltDown ()) System . out . println ( \"Alt-Taste gedrueckt\" ); if ( e . isAltGraphDown ()) System . out . println ( \"AltGraph-Taste gedrueckt\" ); if ( e . isControlDown ()) System . out . println ( \"Ctrl-Taste gedrueckt\" ); if ( e . isMetaDown ()) System . out . println ( \"Meta-Taste gedrueckt\" ); if ( e . isShiftDown ()) System . out . println ( \"Shift-Taste gedrueckt\" ); } Probieren Sie die Maus-Klicks bei unterschiedlich gedr\u00fcckter Taste auf der Tastatur aus! Mithilfe der Objektmethode getClickCount() l\u00e4sst sich die Anzahl die Klicks abfragen: 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 @Override public void mouseClicked ( MouseEvent e ) { Point p = e . getPoint (); int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked bei [x=\" + p . x + \" ,y=\" + p . y + \"]\" ); System . out . println ( \"mouseClicked bei [x=\" + x + \" ,y=\" + y + \"]\" ); if ( e . isAltDown ()) System . out . println ( \"Alt-Taste gedrueckt\" ); if ( e . isAltGraphDown ()) System . out . println ( \"AltGraph-Taste gedrueckt\" ); if ( e . isControlDown ()) System . out . println ( \"Ctrl-Taste gedrueckt\" ); if ( e . isMetaDown ()) System . out . println ( \"Meta-Taste gedrueckt\" ); if ( e . isShiftDown ()) System . out . println ( \"Shift-Taste gedrueckt\" ); if ( e . getClickCount () == 2 ) System . out . println ( \"Doppelklick\" ); } Nochmal, weil es wichtig ist: alle diese Objektmethoden stehen allen Methoden zur Verf\u00fcgung, denen ein MouseEvent \u00fcbergeben wird. Wir k\u00f6nnen sie also in allen Methoden aus MouseListener und MouseMotionListener anwenden. Zeichnen mit der Maus \u00b6 Wir k\u00f6nnen nun zwei Sachen: Zeichnen und Mausereignisse behandeln. Diese beiden F\u00e4higkeiten wollen wir nun miteinander verbinden. Dazu zun\u00e4chst einige theoretische Vor\u00fcberlegungen. Model-View-Controller \u00b6 Unter Model-View-Controller versteht man ein Entwurfsmuster (ein Design Pattern ), welches ein wesentliches Konzept bei Anwendungen darstellt, die eine GUI besitzen. Wir werden es in diesem Semester nicht mehr schaffen, ausf\u00fchrlich auf dieses Konzept einzugehen, aber wir betrachten ein paar wesentliche Grunds\u00e4tze daraus, die auch f\u00fcr unsere Anwendungen wichtig sind. Die Grundidee bei Model-View-Controlle (MVC) ist die Unterscheidung von drei Aufgaben: Das Model k\u00fcmmert sich um die Datenverwaltung. Es gibt eine oder mehrere Datenstrukturen, in denen Daten gespeichert werden. Das Model k\u00fcmmert sich darum, diese Datenstrukturen zu erstellen und Daten in diese Datenstrukturen einzuf\u00fcgen, zu \u00e4ndern oder zu l\u00f6schen. Der Controller verwaltet die Nutzerinteraktionen. Auf der Basis bestimmter Aktionen, die durch die Nutzerin verursacht werden (Mausklicks, Tatstureingaben, ...) st\u00f6\u00dft der Controller beim Model eine \u00c4nderung der der Datenverwaltung an (Daten hinzuf\u00fcgen, \u00e4ndern oder l\u00f6schen) und er st\u00f6\u00dft bei der View die Darstellung der Daten an. Der Controller hat also Zugriff auf das Model und auf die View . Die View k\u00fcmmert sich um die Darstellung der Daten in der GUI. Die View hat also Zugriff auf das Model , denn die View verwendet die vom Model verwalteten Daten, um diese darzustellen. Diese drei Aufgaben sollten m\u00f6glichst losgel\u00f6st voneinander gel\u00f6st werden, d.h. es sollte m\u00f6glichst keine \u00dcberschneidungen zwischen diesen Komponenten geben. F\u00fcr uns ist es in diesem Zusammenhang wichtig, dass die paintComponent() -Methode unsere View ist. In der paintComponent() -Methode k\u00f6nnen wir zeichnen, d.h. Daten visualisieren. Wir sollten keine weitere Methode (au\u00dfer die paintComponent() -Methode) haben, die etwas zeichnet und wir sollten in der paintComponent() -Methode keine Verwaltung von Daten durchf\u00fchren. Unser Controller ist die Implementierung der Listener , je nachdem, welche Nutzerinteraktionen wir unterst\u00fctzen und behandeln wollen, also z.B. ActionListener , MouseListener und/oder MouseMotionListener . Unsere Herausforderung ist nun, ein Model zu erstellen. Dazu m\u00fcssen wir stets \u00fcberlegen, welche Daten wir ben\u00f6tigen, damit die View (die paintComponent() -Methode) die Objekte zeichnen kann, die gew\u00fcnscht sind. Wir wollen diese theoretischen \u00dcberlegungen an einigen Beispielen erl\u00e4utern. Beispiel 1: Kreise zeichnen \u00b6 Unser erstes Beispiel ist einfach. Wir wollen mit der Maus in unsere Canvas klicken und dort, wo wir hingeklickt haben, soll ein schwarzer, ausgef\u00fcllter Kreis erscheinen. Alle Kreise haben den gleichen (einen festen) Durchmesser. Dazu folgende \u00dcberlegungen: View : in der paintComponent() -Methode k\u00f6nnen wir z.B. mithilfe der fillOval() -Methode Kreise zeichnen. Wir m\u00fcssen nur die Koordinaten x und y kennen, an denen der jeweilige Kreis gezeichnet werden soll. Controller : um zu wissen, wo wir mit der Maus in die Canvas geklickt haben, m\u00fcssen wir den MouseListener implementieren. Model : wir m\u00fcssen Koordinaten speichern, also entweder int -Werte x und y oder gleich Objekte vom Typ Point . Wir entscheiden uns f\u00fcr Letzteres. Da wir nicht wissen, wie viele Point -Objekte gespeichert werden sollen, kommt ein Array nicht in Frage. Wir ben\u00f6tigen Eine Collection . Hier ist es egal, ob List oder Set . Wir entscheiden uns f\u00fcr List . Wir starten erneut mit unserem Grundger\u00fcst f\u00fcr das Zeichnen, haben dort aber bereits den MouseListener implementiert: KreiseZeichnen.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class KreiseZeichnen extends JFrame implements MouseListener { Canvas canvas ; public KreiseZeichnen () { super (); this . setTitle ( \"Kreise zeichnen\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . getContentPane (). add ( this . canvas ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { // die View @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; // hier koennen wir zeichnen } } public static void main ( String [] args ) { new KreiseZeichnen (); } // der Controller @Override public void mouseClicked ( MouseEvent e ) { Point p = e . getPoint (); System . out . println ( \"mouseClicked bei [x=\" + p . x + \" ,y=\" + p . y + \"]\" ); } @Override public void mousePressed ( MouseEvent e ) {} @Override public void mouseReleased ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } Im Sinne des Controllers sind wir nur daran interessiert, die mouseClicked() -Methode des MouseListener zu implementieren, aber nat\u00fcrlich m\u00fcssen die anderen Methoden des MouseListener auch \"implementiert\" werden, ansonsten bliben sie abstrakt und somit die ganze Klasse. Wir lassen sie aber leer. Wir f\u00fcgen nun das Model ein, n\u00e4mlich eine Liste aus lauter Punkten, d.h. ein List<Point , die wir points nennen. Wir erzeugen die Liste im Konstruktor der Klasse, da wir sowohl in mouseClicked() , als auch in paintComponent() auf diese Liste zugreifen wollen, deklarieren wir sie als globale Variable. Einf\u00fcgen des Models 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.util.ArrayList ; import java.util.List ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class KreiseZeichnen extends JFrame implements MouseListener { Canvas canvas ; List < Point > points ; public KreiseZeichnen () { super (); this . setTitle ( \"Kreise zeichnen\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . points = new ArrayList <> (); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . getContentPane (). add ( this . canvas ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { final static int DURCHMESSER = 20 ; // die View @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; for ( Point p : KreiseZeichnen . this . points ) { g2 . fillOval ( p . x , p . y , DURCHMESSER , DURCHMESSER ); } } } public static void main ( String [] args ) { new KreiseZeichnen (); } // der Controller @Override public void mouseClicked ( MouseEvent e ) { Point p = e . getPoint (); System . out . println ( \"mouseClicked bei [x=\" + p . x + \" ,y=\" + p . y + \"]\" ); this . points . add ( p ); this . canvas . repaint (); } @Override public void mousePressed ( MouseEvent e ) {} @Override public void mouseReleased ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } Wir betrachten die \u00c4nderungen im Detail: Die Klasse Point existiert in java.awt -Paket und muss von dort importiert werden (Zeile 3 ). Die Klasse List gibt es zwei Mal! Wir wollen hier die Collection verwenden und nutzen deshalb die Klasse List aus dem java.util -Paket. Hier m\u00fcssen Sie aufpassen, dass Sie die richtige List -Klasse importieren (Zeile 7 ). Die Klasse ArrayList ist aber eindeutig und wird aus dem java.util -Paket importiert (Zeile 6 ). In Zeile 14 wird die globale Variable points vom Typ List<Point> deklariert. Sie muss global sein, damit wir sowohl in der mouseClicked() -, als auch in der paintComponent() -Methode darauf Zugriff haben. In Zeile 22 erzeugen wir ein Objekt der Klasse ArrayList f\u00fcr die points -Referenz. In Zeile 34 erstellen wir eine Konstante DURCHMESSER , mit der wir den Durchmesser der Kreise festlegen, die wir durch die Maus-Klicks erzeugen wollen. Hier ist es Geschmackssache, ob sie diese Konstante als static deklarieren oder nicht. Die Unterscheidung liegt darin, ob Sie allen Objekten aus Canvas diesen Wert mitgeben sollen oder ob jedes Canvas -Objekt \"seinen eigenen\" DURCHMESSER haben soll. Da wir eh nur ein Objekt von Canvas erzeugen, macht es hier keinen Unterschied. In den Zeilen 43-46 wird die Datenstruktur List ausgelesen und jeder einzelne Point darin verwendet, um einen Kreis an diese Stelle zu zeichnen. Hier greift die View auf das Model zu (aber nur lesend!). Hier ist also unsere einzige Verbindung zwischen Model und View . Es sei an dieser Stelle angemerkt, dass die View das Model auch dazu verwenden k\u00f6nnte, um z.B. Quadrate mit der Gr\u00f6\u00dfe 100x100 zu zeichnen oder rote Kreise oder ... Insofern ist das Model unabh\u00e4ngig von der View und genau das wollen wir auch erreichen. Wir sehen hier auch den Zugriff auf eine Objekteigenschaft von der inneren in die \u00e4u\u00dfere Klasse. Um auf die Objekteigenschaft points der \u00e4u\u00dferen Klasse zuzugreifen, schreiben wir KreiseZeichnen.this.points (siehe auch ) In Zeile 60 wird die Liste (also das Model ) durch die Interaktionen der Nutzerin (also durch den Controller ) bef\u00fcllt. Immer dort, wohin mit der Maus geklickt wird, wird dieser Point in der Datenstruktur Liste (also im Model ) gespeichert. Hier sehen wir die einzige Verbindung zwischen Controller und Model . Der Controller greift auf das Model zu und st\u00f6\u00dft das Speichern eines Datums an. Zeile 62 ist sehr wichtig und wird h\u00e4ufig vergessen. Hier \"triggert\" der Controller die View . Wenn wir uns an die Einf\u00fchrung des Zeichnens erinnern, dann wird ein Fenster mit allen seinen Komponenten \"gezeichnet\". Wenn wir die Canvas mit neuen Kreisen \"bef\u00fcllen\", dann bewirkt das nicht automatisch ein Neuzeichnen der Canvas . Ein Neuzeichnen w\u00fcrde nur erfolgen, wenn wir bspw. die Fenstergr\u00f6\u00dfe \u00e4ndern oder das Fenster in die Taskleiste bewegen und wieder \u00f6ffnen. Um ein Neuzeichnen aus dem Programm heraus anzusto\u00dfen, ben\u00f6tigen wir die Methode repaint() . Wir h\u00e4tten auch this.repaint(); angeben k\u00f6nnen, dann w\u00e4re das gesamte Fenster neu gezeichnet worden (inkl. der Canvas ). Mit this.canvas.repaint(); wird \"nur\" die Canvas neu gezeichnet. \u00dcbung \u00c4ndern Sie das Programm so, dass die Punkte als Mittelpunkte der Kreise verwendet werden! \u00c4ndern Sie das Programm so, dass rote Quadrate der Gr\u00f6\u00dfe 30x30 anstelle der schwarzen Kreise gezeichnet werden! \u00c4ndern Sie das Programm so, dass die Punkte nur durch einen Doppelklick der Maus erfasst werden (einfacher Mausklick gen\u00fcgt nicht)! Beispiel 2: Linien zeichnen \u00b6 In unserem zweiten Beispiel wollen wir Linien zeichnen. Dabei soll das Vorgehen so sein: Wir klicken mit der Maus und legen dabei den Anfangspunkt der Linie fest. Wir halten die Maustaste gedr\u00fcckt und bewegen bei gedr\u00fcckter Maustaste die Maus. Dabei wird die Linie bereits gezeichnet. Wir lassen die Maustaste los. dadurch steht der Endpunkt der Linie fest. F\u00fcr Punkt 1. implementieren wir die Methode mousePressed() und wir ben\u00f6tigen somit den MouseListener . F\u00fcr Punkt 2. implementieren wir die Methode mouseDragged() und wir ben\u00f6tigen somit den MouseMotionListener . F\u00fcr Punkt 3. implementieren wir die Methode mouseReleased() aus dem MouseListener . Wir starten erneut mit unserem Grundger\u00fcst f\u00fcr das Zeichnen, haben dort aber bereits den MouseListener und den MouseMotionListener implementiert und die Methoden, die uns nicht interessieren, zusammengek\u00fcrzt: LinienZeichnen.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class LinienZeichnen extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; public LinienZeichnen () { super (); this . setTitle ( \"Linien zeichnen\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { // die View @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; } } public static void main ( String [] args ) { new LinienZeichnen (); } // der Controller @Override public void mousePressed ( MouseEvent e ) { Point p = e . getPoint (); } @Override public void mouseDragged ( MouseEvent e ) { Point p = e . getPoint (); } @Override public void mouseReleased ( MouseEvent e ) { Point p = e . getPoint (); } @Override public void mouseClicked ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} @Override public void mouseMoved ( MouseEvent e ) {} } Wir \u00fcberlegen uns nun das Model . Dies ist etwas komplexer, als das Model f\u00fcr das Zeichnen der Kreise. Es gibt gespeicherte Linien. Diese Linien sind bereits fertig erstellt. Diese Linien sollten in einer Collection gespeichert werden. Es bietet sich wieder eine Liste an (Menge ginge auch). Das Typisieren dieser Liste liegt jedoch nicht auf der Hand, da es im Gegensatz zu Point keine Klasse f\u00fcr eine Linie gibt, die wir benutzen k\u00f6nnten. M\u00fcssen wir uns also selber schreiben. eine aktuelle Linie. Das ist die Linie, die gerade gezeichnet wird. Diese Linie ist noch nicht gespeichert, d.h. die Maustaste wurde noch nicht losgelassen. Es kann auch sein, dass aktuell keine Linie gezeichnet wird, dann ist der Wert daf\u00fcr null . Auch diese aktuelle Linie sollte vom Typ Linie sein, den wir uns zun\u00e4chst erstellen. Linie.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import java.awt.Point ; public class Linie { private Point start ; private Point ende ; public Linie ( Point start , Point ende ) { this . start = start ; this . ende = ende ; } public void setEnde ( Point newEnde ) { this . ende = newEnde ; } public int getXstart () { return this . start . x ; } public int getYstart () { return this . start . y ; } public int getXende () { return this . ende . x ; } public int getYende () { return this . ende . y ; } } Mit dem Konstruktor k\u00f6nnen wir uns ein Objekt von Linie erstellen (im Controller bei mousePressed() ) und haben dann mithilfe von setEnde() die M\u00f6glichkeit, den Endpunkt der Linie noch zu \u00e4ndern (im Controller bei mouseDragged() . Die Getter ben\u00f6tigen wir in der View , um die Werte der Start- und Endpunkte der Linie auszulesen. Wir beginnen zun\u00e4chst damit, eine Linie zu erzeugen: LinienZeichnen.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class LinienZeichnen extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; Linie aktLinie ; public LinienZeichnen () { super (); this . setTitle ( \"Linien zeichnen\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { // die View @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; if ( LinienZeichnen . this . aktLinie != null ) { int x1 = LinienZeichnen . this . aktLinie . getXstart (); int y1 = LinienZeichnen . this . aktLinie . getYstart (); int x2 = LinienZeichnen . this . aktLinie . getXende (); int y2 = LinienZeichnen . this . aktLinie . getYende (); g2 . drawLine ( x1 , y1 , x2 , y2 ); } } } public static void main ( String [] args ) { new LinienZeichnen (); } // der Controller @Override public void mousePressed ( MouseEvent e ) { Point p = e . getPoint (); this . aktLinie = new Linie ( p , p ); } @Override public void mouseDragged ( MouseEvent e ) { Point p = e . getPoint (); this . aktLinie . setEnde ( p ); this . canvas . repaint (); } @Override public void mouseReleased ( MouseEvent e ) { Point p = e . getPoint (); } @Override public void mouseClicked ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} @Override public void mouseMoved ( MouseEvent e ) {} } Die Variable aktLinie ist global , weil wir sowohl in den Methoden mousepressed() und mouseDragged als auch in paintComponent() darauf zugreifen wollen (Zeile 13 ). In der paintComponent() -Methode (unserer View ) lesen wir diese Linie aus, um sie grafisch als Linie darzustellen. Der Zugriff auf die Eigenschaften des Objektes aktLinie erfolgt aber nur, wenn aktLinie auch tats\u00e4chlich auf ein Objekt zeigt. Wir pr\u00fcfen deshalb zun\u00e4chst, ob aktLinie nicht null ist (Zeile 40 ). Nachdem wir die x - und y -Werte des start - und des ende -Punktes der aktLinie ausgelesen haben (Zeilen 42-45 ), stellen wir eine Linie grafisch mithilfe der drawLine() -Methode dar. Das Objekt einer Linie wird in der mousePressed() -Methode erstellt. Der start - und der ende -Punkt dieser Linie sind zun\u00e4chst gleich (die Linie ist also am Anfang nur ein Punkt) - Zeile 61 . Wenn wir bei gedr\u00fcckter Maustaste die Maus bewegen, wird permanent die mouseDragged() -Methode aufgerufen. Dort setzen wir die aktuelle Position der Maus als neuen ende -Punkt von aktLinie (Zeile 67 ). Zeile 69 ist wieder sehr wichtig (und wird h\u00e4ufig vergessen). Hier \"triggert\" der Controller die View . Wenn wir die Canvas mit einer neuen Linie \"bef\u00fcllen\", dann bewirkt das nicht automatisch ein Neuzeichnen der Canvas . Das Neuzeichnen erfolgt erst durch den Aufruf this.canvas.repaint(); . Wir k\u00f6nnen nun viele Linien zeichnen, aber diese werden noch nicht gespeichert. Zum Speichern der Linien ben\u00f6tigen wir wieder eine Collection. Das Speichern der aktuellen Linie in diese Collection erfolgt in dem Moment, indem wir die Maustaste wieder loslassen, also in mouseReleased() . Die Collection muss wieder global verf\u00fcgbar sein. LinienZeichnen.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.ArrayList ; import java.util.List ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class LinienZeichnen extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; Linie aktLinie ; List < Linie > linien ; public LinienZeichnen () { super (); this . setTitle ( \"Linien zeichnen\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . linien = new ArrayList <> (); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { // die View @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; if ( LinienZeichnen . this . aktLinie != null ) { int x1 = LinienZeichnen . this . aktLinie . getXstart (); int y1 = LinienZeichnen . this . aktLinie . getYstart (); int x2 = LinienZeichnen . this . aktLinie . getXende (); int y2 = LinienZeichnen . this . aktLinie . getYende (); g2 . drawLine ( x1 , y1 , x2 , y2 ); } for ( Linie l : LinienZeichnen . this . linien ) { int x1 = l . getXstart (); int y1 = l . getYstart (); int x2 = l . getXende (); int y2 = l . getYende (); g2 . drawLine ( x1 , y1 , x2 , y2 ); } } } public static void main ( String [] args ) { new LinienZeichnen (); } // der Controller @Override public void mousePressed ( MouseEvent e ) { Point p = e . getPoint (); this . aktLinie = new Linie ( p , p ); } @Override public void mouseDragged ( MouseEvent e ) { Point p = e . getPoint (); this . aktLinie . setEnde ( p ); this . canvas . repaint (); } @Override public void mouseReleased ( MouseEvent e ) { Point p = e . getPoint (); this . linien . add ( aktLinie ); } @Override public void mouseClicked ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} @Override public void mouseMoved ( MouseEvent e ) {} } \u00dcbung \u00c4ndern Sie das Programm so, dass nicht Linien gezeichnet werden, sondern Kreise! \u00c4ndern Sie aber nur die View , d.h. die paintComponent() . Die gespeicherten Linien geben den Durchmesser der Kreise an.","title":"Mausereignisse"},{"location":"mausereignisse/#mausereignisse","text":"In der letzten Lektion haben wir uns angeschaut, wie wir eigene geometrische Objekte in einer GUI erzeugen k\u00f6nnen, d.h. wie haben \"Zeichnen\" in einer GUI gelernt. Um Zeichnen zu k\u00f6nnen, haben wir eine innere Klasse erstellt, die von JPanel geerbt hat, darin die Methode paintComponent() \u00fcberschrieben und in dieser Methode Objektmethoden der Klasse Graphics2D aufgerufen, welche das Zeichnen von geometrischen Objekten erm\u00f6glichen. Nun wollen wir uns anschauen, wie wir Ereignisse der Maus behandeln. Bei den Mausereignissen unterscheiden wir zwei Arten von Ereignissen: Ereignisse der Maus, die einmalig von der Maus ausgel\u00f6st werden. Dazu geh\u00f6ren die Ereignisse, wenn die linke Maustaste gedr\u00fcckt wird, wenn die gedr\u00fcckte Taste losgelassen wird, wenn sich die Maus auf eine Komponente bewegt, die sich an den Mauslistener angemeldet hat oder wenn der Mauszeiger diese Komponente wieder verl\u00e4sst. Ereignisse der Maus, die durch Bewegung der Maus permanent ausgel\u00f6st werden. Dazu geh\u00f6rt die Mausbewegung selbst oder auch die Bewegung der Maus bei gedr\u00fcckter Taste. Die erste Art von Mausereignissen k\u00f6nnen wir behandeln, indem wir den MouseListener implementieren und eine Komponente (z.B. unsere Canvas ) an den MouseListener anmelden. Die zweite Art von Maus(-Bewegungs-)ereignissen k\u00f6nnen wir behandeln, indem wir den MouseMotionListener implementieren und eine Komponente (z.B. unsere Canvas ) an den MouseMotionListener anmelden. Wir starten wieder mit einem einfachen Beispiel, welches auf unserem Gr\u00fcndger\u00fcst f\u00fcr das Zeichnen basiert: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 import java.awt.Graphics ; import java.awt.Graphics2D ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Mausereignisse extends JFrame { public Mausereignisse () { super (); this . setTitle ( \"Mausereignisse\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). add ( new Canvas ()); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } public static void main ( String [] args ) { new Mausereignisse (); } }","title":"Mausereignisse"},{"location":"mausereignisse/#der-mouselistener","text":"In dieser Klasse implementieren wir zun\u00e4chst den MouseListener , d.h. wir f\u00fcgen in den Klassenkopf implements MouseListener ein und lassen durch Eclipse die zu implementierenden Methoden einf\u00fcgen: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Mausereignisse extends JFrame implements MouseListener { public Mausereignisse () { super (); this . setTitle ( \"Mausereignisse\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). add ( new Canvas ()); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } public static void main ( String [] args ) { new Mausereignisse (); } @Override public void mouseClicked ( MouseEvent e ) { System . out . println ( \"mouseClicked\" ); } @Override public void mousePressed ( MouseEvent e ) { System . out . println ( \"mousePressed\" ); } @Override public void mouseReleased ( MouseEvent e ) { System . out . println ( \"mouseReleased\" ); } @Override public void mouseEntered ( MouseEvent e ) { System . out . println ( \"mouseEntered\" ); } @Override public void mouseExited ( MouseEvent e ) { System . out . println ( \"mouseExited\" ); } } Wie wir sehen, sind es nun nicht mehr nur eine Methode, wie beim ActionListener , sondern gleich f\u00fcnf Methoden, die wir implementieren k\u00f6nnen. Unsere zun\u00e4chst einfachste Implementierung (aber zumindest am Anfang stets empfohlen!) ist die einfache Ausgabe auf die Konsole. Noch passiert aber nichts, denn wir d\u00fcrfen nicht vergessen, uns an den MouseListener anzumelden !","title":"Der MouseListener"},{"location":"mausereignisse/#canvas-meldet-sich-an-den-mouselistener-an","text":"Wir k\u00f6nnten nun das gesamte Fenster an den MouseListener anmelden. Dazu w\u00fcrden wir in den Konstruktor von Mausereignisse ein this.addMouseListener(this); einf\u00fcgen. Damit w\u00fcrde this (also das Objekt von Mausereignisse , welches ja selbst ein JFrame ist) an den MouseListener angemeldet. Die Methode addMouseListener() erwartet ein Objekt der Implementierung von MouseListener . Das w\u00e4re ebenfalls this , da der MouseListener in der Klasse Mausereignisse implementiert ist. Weil jedoch sp\u00e4ter der Umgang mit den Mausereignissen etwas leichter ist, wollen wir das Canvas -Objekt an den MouseListener anmelden. Es soll also nur die Zeichenfl\u00e4che (geerbt von JPanel ) an den MouseListener angemeldet werden und nicht das gesamte Fenster. Dazu speichern wir das Canvas -Objekt in eine Variable - und wir vereinfachen die Sache auch gleich ein bisschen, indem es keine lokale Variable im Konstruktor von Mausereignisse wird, sondern eine Objektvariable der Klasse. Diese \u00c4nderungen und das Anmelden von canvas an den MouseListener sehen so aus: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Mausereignisse extends JFrame implements MouseListener { Canvas canvas ; public Mausereignisse () { super (); this . setTitle ( \"Mausereignisse\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . getContentPane (). add ( this . canvas ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } public static void main ( String [] args ) { new Mausereignisse (); } @Override public void mouseClicked ( MouseEvent e ) { System . out . println ( \"mouseClicked\" ); } @Override public void mousePressed ( MouseEvent e ) { System . out . println ( \"mousePressed\" ); } @Override public void mouseReleased ( MouseEvent e ) { System . out . println ( \"mouseReleased\" ); } @Override public void mouseEntered ( MouseEvent e ) { System . out . println ( \"mouseEntered\" ); } @Override public void mouseExited ( MouseEvent e ) { System . out . println ( \"mouseExited\" ); } } Wir erstellen uns also eine Objektvariable canvas (Zeile 10 ), welche eine Referenz auf das Canvas -Objekt ist, das wir im Konstruktor erzeugen (Zeile 18 ). Diese Referenz \u00fcbergeben wir dann auch der ContentPane (Zeile 20 ). Mithilfe der Methode addMouseListener() melden wir das Canvas -Objekt an den MouseListener an (Zeile 19 ). Da der MouseListener in der Klasse Mausereignisse implementiert ist, wird als Implementierung des MouseListeners this \u00fcbergeben (Zeile 19 ).","title":"Canvas meldet sich an den MouseListener an"},{"location":"mausereignisse/#die-methoden-des-mouselistener","text":"Nun ist der MouseListener implementiert und das Canvas -Objekt ist an den MouseListener angemeldet. Wir k\u00f6nnen nun die einzelnen Methoden des MouseListener ausprobieren: mousePressed() wird aufgerufen, wenn die (linke) Maustaste heruntergedr\u00fcckt wird. Dr\u00fccken Sie die Maustaste und halten Sie sie gedr\u00fcckt. In der Konsole erscheint mousePressed . mouseReleased() wird aufgerufen, wenn die (linke) Maustaste nach dem Dr\u00fccken wieder losgelassen wird. Lassen Sie die Maustaste, nachdem auf der Konsole mousePressed erschienen ist, wieder los. In der Konsole erscheint mouseReleased . mouseClicked() wird aufgerufen, wenn erst mousePressed() und dann mouseReleased() aufgerufen wurde. mouseClicked() beschreibt also die Kombination aus Maustaste gedr\u00fcckt und Maustaste losgelassen - einen Maus-Klick also. mouseEntered() wird aufgerufen, wenn Sie den Mauszeiger auf die Komponente bewegen, die an den MouseListener angemeldet ist. Wenn Sie in unserem Fall also die Maus in die Zeichenfl\u00e4che canvas bewegen, dann wird die Methode mouseEntered() einmalig ausgef\u00fchrt. mouseExited() wird aufgerufen, wenn Sie den Mauszeiger von der Komponente wieder wegbewegen, die an den MouseListener angemeldet ist. Wenn Sie in unserem Fall also die Maus von der Zeichenfl\u00e4che in die Titelleiste des Fensters oder ganz aus dem Fenster (der ContentPane ) bewegen, dann wird die Methode mouseExited() einmalig ausgef\u00fchrt. \u00dcbung Probieren Sie intensiv aus, wann welche Methoden aufgerufen werden! 1. Schaffen Sie es, dass zwar mousePressed und danach mouseReleased auf der Konsole erscheint, nicht aber mouseClicked ? Wann ist das der Fall? 2. Erzeugen Sie folgende Ausgabereihenfolge auf der Konsole: mousePressed , mouseExited , mouseReleased , mouseEntered !","title":"Die Methoden des MouseListener"},{"location":"mausereignisse/#die-methoden-des-mousemotionlistener","text":"Wir implementieren jetzt auch noch den MouseMotionListener . Wir d\u00fcrfen erneut nicht die beiden Schritte vergessen: Implementieren des MouseMotionListener (also implements MouseMotionListener ) und Anmelden an den MouseMotionListener (also canvas.addMouseMotionListener(this); ) 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Mausereignisse extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; public Mausereignisse () { super (); this . setTitle ( \"Mausereignisse\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier koennen wir zeichnen } } public static void main ( String [] args ) { new Mausereignisse (); } /* * die naechtsten fuenf Methoden sind Methoden * von MouseListener */ @Override public void mouseClicked ( MouseEvent e ) { System . out . println ( \"mouseClicked\" ); } @Override public void mousePressed ( MouseEvent e ) { System . out . println ( \"mousePressed\" ); } @Override public void mouseReleased ( MouseEvent e ) { System . out . println ( \"mouseReleased\" ); } @Override public void mouseEntered ( MouseEvent e ) { System . out . println ( \"mouseEntered\" ); } @Override public void mouseExited ( MouseEvent e ) { System . out . println ( \"mouseExited\" ); } /* * die naechtsten beiden Methoden sind Methoden * von MouseMotionListener */ @Override public void mouseDragged ( MouseEvent e ) { System . out . println ( \"mouseDragged\" ); } @Override public void mouseMoved ( MouseEvent e ) { System . out . println ( \"mouseMoved\" ); } } Beachten Sie, dass die Methoden mouseDragged() bzw. mouseMoved() permanent, d.h. bei jeder (kleinsten) Bewegung der Maus aufgerufen werden. mouseMoved() wird bei jeder (kleinsten) Mausbewegung aufgerufen, wobei die Maustaste nicht gedr\u00fcckt ist. mouseDragged() wird bei jeder (kleinsten) Mausbewegung aufgerufen, wobei die Maustaste gedr\u00fcckt gehalten wird. Wenn Sie anhand der Konsolenausgaben gepr\u00fcft haben, dass die Methoden \"funktionieren\", dann k\u00f6nnen Sie dort die Konsolenausgaben auch wieder auskommentieren, da Ihre Konsole ansonsten zu \"vollgeschreiben\" wird.","title":"Die Methoden des MouseMotionListener"},{"location":"mausereignisse/#objektmethoden-der-klasse-mouseevent","text":"All diesen Methoden, sowohl vom MouseListener als auch vom MouseMotionListener wird ein MouseEvent als Parameter \u00fcbergeben. Dieses Objekt besitzt einige n\u00fctzliche Objektmethoden. Die wichtigsten dabei sind sicherlich die Ausk\u00fcnfte dar\u00fcber, wo das Mausereignis ausgel\u00f6st wurde. Wir betrachten einige Objektmethoden des MouseEvent -Objekts am Beispiel der mouseClicked(MouseEvent e) -Methode (kommentieren Sie die Konsolenausgabe der beiden Methoden vom MouseMotionListener aus, damit Sie sich auf die Ausgabe von mouseClicked() konzentrieren k\u00f6nnen). die Methode getX() gibt den x -Wert der Koordinate zur\u00fcck, bei dem das MouseEvent stattgefunden hat. Die Koordinate bezieht sich auf die Komponente, die an den MouseListener (bzw. MouseMotionListener ) angemeldet ist. Das ist auch der Grund, warum wir nicht das gesamte Fenster an den MouseListener (und MouseMotionListener ) angemeldet haben. Der Punkt [x=0, y=0] befindet sich bei dem Canvas -Objekt in der linken oberen Ecke der ContentPane . Der Punkt mit den Koordinaten [x=0, y=0] beim Fenster ist der linke obere Punkt des Fensters, d.h. der linke obere Punkt der Titelleiste. die Methode getY() gibt den y -Wert der Koordinate zur\u00fcck, bei dem das MouseEvent stattgefunden hat (Koordinate der Komponente). die Methode getPoint() gibt ein Point -Objekt (von java.awt ) zur\u00fcck. Ein Point -Objekt besitzt die sichtbaren Objektvariablen x und y f\u00fcr die Koordinaten. Wir probieren beide M\u00f6glichkeiten aus, die Koordinaten zu erfragen: 49 50 51 52 53 54 55 56 @Override public void mouseClicked ( MouseEvent e ) { Point p = e . getPoint (); int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked bei [x=\" + p . x + \" ,y=\" + p . y + \"]\" ); System . out . println ( \"mouseClicked bei [x=\" + x + \" ,y=\" + y + \"]\" ); } Beide Ausgaben zeigen (nat\u00fcrlich) die gleichen Koordinaten an, z.B. mouseClicked bei [ x = 388 ,y = 215 ] mouseClicked bei [ x = 388 ,y = 215 ] Beachten Sie, dass Sie in allen Methoden, in denen das MouseEvent \u00fcbergeben wird, die Koordinaten des Ereignisses auslesen k\u00f6nnen. F\u00fcr mouseMoved() sieht die Implementierung gleich aus. Die Ausgabe ist nur deutlich h\u00e4ufiger, da jede Mausbewegung (ohne gedr\u00fcckte Maustaste) zum Aufruf der Methode f\u00fchrt. 90 91 92 93 94 @Override public void mouseMoved ( MouseEvent e ) { Point p = e . getPoint (); System . out . println ( \"mouseMoved bei [x=\" + p . x + \" ,y=\" + p . y + \"]\" ); } Beide Ausgaben zeigen (nat\u00fcrlich) die gleichen Koordinaten an, z.B. mouseMoved bei [ x = 267 ,y = 242 ] mouseMoved bei [ x = 282 ,y = 261 ] mouseMoved bei [ x = 282 ,y = 261 ] mouseMoved bei [ x = 298 ,y = 280 ] mouseMoved bei [ x = 298 ,y = 280 ] mouseMoved bei [ x = 309 ,y = 292 ] mouseMoved bei [ x = 309 ,y = 292 ] Manchmal sind die Mausbewegungen, die ein Ausl\u00f6sen des Ereignisses zur Folge haben, sogar so klein, dass sich die Koordinaten gar nicht \u00e4ndern. Weiterhin kann mithilfe des MouseEvent -Objektes \u00fcberpr\u00fcft werden, ob w\u00e4hrend des ausl\u00f6senden Mausereignisses eine besondere Taste auf der Tastatur gedr\u00fcckt wurde, z.B. die Alt -Taste (linke option -Taste beim Mac), die AltGraph -Taste (rechte option -Taste beim Mac), die Ctrl -Taste, oder die Meta -Taste ( Windows -Taste bzw. Apple -Taste): 49 50 51 52 53 54 55 56 57 58 59 60 61 62 @Override public void mouseClicked ( MouseEvent e ) { Point p = e . getPoint (); int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked bei [x=\" + p . x + \" ,y=\" + p . y + \"]\" ); System . out . println ( \"mouseClicked bei [x=\" + x + \" ,y=\" + y + \"]\" ); if ( e . isAltDown ()) System . out . println ( \"Alt-Taste gedrueckt\" ); if ( e . isAltGraphDown ()) System . out . println ( \"AltGraph-Taste gedrueckt\" ); if ( e . isControlDown ()) System . out . println ( \"Ctrl-Taste gedrueckt\" ); if ( e . isMetaDown ()) System . out . println ( \"Meta-Taste gedrueckt\" ); if ( e . isShiftDown ()) System . out . println ( \"Shift-Taste gedrueckt\" ); } Probieren Sie die Maus-Klicks bei unterschiedlich gedr\u00fcckter Taste auf der Tastatur aus! Mithilfe der Objektmethode getClickCount() l\u00e4sst sich die Anzahl die Klicks abfragen: 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 @Override public void mouseClicked ( MouseEvent e ) { Point p = e . getPoint (); int x = e . getX (); int y = e . getY (); System . out . println ( \"mouseClicked bei [x=\" + p . x + \" ,y=\" + p . y + \"]\" ); System . out . println ( \"mouseClicked bei [x=\" + x + \" ,y=\" + y + \"]\" ); if ( e . isAltDown ()) System . out . println ( \"Alt-Taste gedrueckt\" ); if ( e . isAltGraphDown ()) System . out . println ( \"AltGraph-Taste gedrueckt\" ); if ( e . isControlDown ()) System . out . println ( \"Ctrl-Taste gedrueckt\" ); if ( e . isMetaDown ()) System . out . println ( \"Meta-Taste gedrueckt\" ); if ( e . isShiftDown ()) System . out . println ( \"Shift-Taste gedrueckt\" ); if ( e . getClickCount () == 2 ) System . out . println ( \"Doppelklick\" ); } Nochmal, weil es wichtig ist: alle diese Objektmethoden stehen allen Methoden zur Verf\u00fcgung, denen ein MouseEvent \u00fcbergeben wird. Wir k\u00f6nnen sie also in allen Methoden aus MouseListener und MouseMotionListener anwenden.","title":"Objektmethoden der Klasse MouseEvent"},{"location":"mausereignisse/#zeichnen-mit-der-maus","text":"Wir k\u00f6nnen nun zwei Sachen: Zeichnen und Mausereignisse behandeln. Diese beiden F\u00e4higkeiten wollen wir nun miteinander verbinden. Dazu zun\u00e4chst einige theoretische Vor\u00fcberlegungen.","title":"Zeichnen mit der Maus"},{"location":"mausereignisse/#model-view-controller","text":"Unter Model-View-Controller versteht man ein Entwurfsmuster (ein Design Pattern ), welches ein wesentliches Konzept bei Anwendungen darstellt, die eine GUI besitzen. Wir werden es in diesem Semester nicht mehr schaffen, ausf\u00fchrlich auf dieses Konzept einzugehen, aber wir betrachten ein paar wesentliche Grunds\u00e4tze daraus, die auch f\u00fcr unsere Anwendungen wichtig sind. Die Grundidee bei Model-View-Controlle (MVC) ist die Unterscheidung von drei Aufgaben: Das Model k\u00fcmmert sich um die Datenverwaltung. Es gibt eine oder mehrere Datenstrukturen, in denen Daten gespeichert werden. Das Model k\u00fcmmert sich darum, diese Datenstrukturen zu erstellen und Daten in diese Datenstrukturen einzuf\u00fcgen, zu \u00e4ndern oder zu l\u00f6schen. Der Controller verwaltet die Nutzerinteraktionen. Auf der Basis bestimmter Aktionen, die durch die Nutzerin verursacht werden (Mausklicks, Tatstureingaben, ...) st\u00f6\u00dft der Controller beim Model eine \u00c4nderung der der Datenverwaltung an (Daten hinzuf\u00fcgen, \u00e4ndern oder l\u00f6schen) und er st\u00f6\u00dft bei der View die Darstellung der Daten an. Der Controller hat also Zugriff auf das Model und auf die View . Die View k\u00fcmmert sich um die Darstellung der Daten in der GUI. Die View hat also Zugriff auf das Model , denn die View verwendet die vom Model verwalteten Daten, um diese darzustellen. Diese drei Aufgaben sollten m\u00f6glichst losgel\u00f6st voneinander gel\u00f6st werden, d.h. es sollte m\u00f6glichst keine \u00dcberschneidungen zwischen diesen Komponenten geben. F\u00fcr uns ist es in diesem Zusammenhang wichtig, dass die paintComponent() -Methode unsere View ist. In der paintComponent() -Methode k\u00f6nnen wir zeichnen, d.h. Daten visualisieren. Wir sollten keine weitere Methode (au\u00dfer die paintComponent() -Methode) haben, die etwas zeichnet und wir sollten in der paintComponent() -Methode keine Verwaltung von Daten durchf\u00fchren. Unser Controller ist die Implementierung der Listener , je nachdem, welche Nutzerinteraktionen wir unterst\u00fctzen und behandeln wollen, also z.B. ActionListener , MouseListener und/oder MouseMotionListener . Unsere Herausforderung ist nun, ein Model zu erstellen. Dazu m\u00fcssen wir stets \u00fcberlegen, welche Daten wir ben\u00f6tigen, damit die View (die paintComponent() -Methode) die Objekte zeichnen kann, die gew\u00fcnscht sind. Wir wollen diese theoretischen \u00dcberlegungen an einigen Beispielen erl\u00e4utern.","title":"Model-View-Controller"},{"location":"mausereignisse/#beispiel-1-kreise-zeichnen","text":"Unser erstes Beispiel ist einfach. Wir wollen mit der Maus in unsere Canvas klicken und dort, wo wir hingeklickt haben, soll ein schwarzer, ausgef\u00fcllter Kreis erscheinen. Alle Kreise haben den gleichen (einen festen) Durchmesser. Dazu folgende \u00dcberlegungen: View : in der paintComponent() -Methode k\u00f6nnen wir z.B. mithilfe der fillOval() -Methode Kreise zeichnen. Wir m\u00fcssen nur die Koordinaten x und y kennen, an denen der jeweilige Kreis gezeichnet werden soll. Controller : um zu wissen, wo wir mit der Maus in die Canvas geklickt haben, m\u00fcssen wir den MouseListener implementieren. Model : wir m\u00fcssen Koordinaten speichern, also entweder int -Werte x und y oder gleich Objekte vom Typ Point . Wir entscheiden uns f\u00fcr Letzteres. Da wir nicht wissen, wie viele Point -Objekte gespeichert werden sollen, kommt ein Array nicht in Frage. Wir ben\u00f6tigen Eine Collection . Hier ist es egal, ob List oder Set . Wir entscheiden uns f\u00fcr List . Wir starten erneut mit unserem Grundger\u00fcst f\u00fcr das Zeichnen, haben dort aber bereits den MouseListener implementiert: KreiseZeichnen.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class KreiseZeichnen extends JFrame implements MouseListener { Canvas canvas ; public KreiseZeichnen () { super (); this . setTitle ( \"Kreise zeichnen\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . getContentPane (). add ( this . canvas ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { // die View @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; // hier koennen wir zeichnen } } public static void main ( String [] args ) { new KreiseZeichnen (); } // der Controller @Override public void mouseClicked ( MouseEvent e ) { Point p = e . getPoint (); System . out . println ( \"mouseClicked bei [x=\" + p . x + \" ,y=\" + p . y + \"]\" ); } @Override public void mousePressed ( MouseEvent e ) {} @Override public void mouseReleased ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } Im Sinne des Controllers sind wir nur daran interessiert, die mouseClicked() -Methode des MouseListener zu implementieren, aber nat\u00fcrlich m\u00fcssen die anderen Methoden des MouseListener auch \"implementiert\" werden, ansonsten bliben sie abstrakt und somit die ganze Klasse. Wir lassen sie aber leer. Wir f\u00fcgen nun das Model ein, n\u00e4mlich eine Liste aus lauter Punkten, d.h. ein List<Point , die wir points nennen. Wir erzeugen die Liste im Konstruktor der Klasse, da wir sowohl in mouseClicked() , als auch in paintComponent() auf diese Liste zugreifen wollen, deklarieren wir sie als globale Variable. Einf\u00fcgen des Models 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.util.ArrayList ; import java.util.List ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class KreiseZeichnen extends JFrame implements MouseListener { Canvas canvas ; List < Point > points ; public KreiseZeichnen () { super (); this . setTitle ( \"Kreise zeichnen\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . points = new ArrayList <> (); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . getContentPane (). add ( this . canvas ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { final static int DURCHMESSER = 20 ; // die View @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; for ( Point p : KreiseZeichnen . this . points ) { g2 . fillOval ( p . x , p . y , DURCHMESSER , DURCHMESSER ); } } } public static void main ( String [] args ) { new KreiseZeichnen (); } // der Controller @Override public void mouseClicked ( MouseEvent e ) { Point p = e . getPoint (); System . out . println ( \"mouseClicked bei [x=\" + p . x + \" ,y=\" + p . y + \"]\" ); this . points . add ( p ); this . canvas . repaint (); } @Override public void mousePressed ( MouseEvent e ) {} @Override public void mouseReleased ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } Wir betrachten die \u00c4nderungen im Detail: Die Klasse Point existiert in java.awt -Paket und muss von dort importiert werden (Zeile 3 ). Die Klasse List gibt es zwei Mal! Wir wollen hier die Collection verwenden und nutzen deshalb die Klasse List aus dem java.util -Paket. Hier m\u00fcssen Sie aufpassen, dass Sie die richtige List -Klasse importieren (Zeile 7 ). Die Klasse ArrayList ist aber eindeutig und wird aus dem java.util -Paket importiert (Zeile 6 ). In Zeile 14 wird die globale Variable points vom Typ List<Point> deklariert. Sie muss global sein, damit wir sowohl in der mouseClicked() -, als auch in der paintComponent() -Methode darauf Zugriff haben. In Zeile 22 erzeugen wir ein Objekt der Klasse ArrayList f\u00fcr die points -Referenz. In Zeile 34 erstellen wir eine Konstante DURCHMESSER , mit der wir den Durchmesser der Kreise festlegen, die wir durch die Maus-Klicks erzeugen wollen. Hier ist es Geschmackssache, ob sie diese Konstante als static deklarieren oder nicht. Die Unterscheidung liegt darin, ob Sie allen Objekten aus Canvas diesen Wert mitgeben sollen oder ob jedes Canvas -Objekt \"seinen eigenen\" DURCHMESSER haben soll. Da wir eh nur ein Objekt von Canvas erzeugen, macht es hier keinen Unterschied. In den Zeilen 43-46 wird die Datenstruktur List ausgelesen und jeder einzelne Point darin verwendet, um einen Kreis an diese Stelle zu zeichnen. Hier greift die View auf das Model zu (aber nur lesend!). Hier ist also unsere einzige Verbindung zwischen Model und View . Es sei an dieser Stelle angemerkt, dass die View das Model auch dazu verwenden k\u00f6nnte, um z.B. Quadrate mit der Gr\u00f6\u00dfe 100x100 zu zeichnen oder rote Kreise oder ... Insofern ist das Model unabh\u00e4ngig von der View und genau das wollen wir auch erreichen. Wir sehen hier auch den Zugriff auf eine Objekteigenschaft von der inneren in die \u00e4u\u00dfere Klasse. Um auf die Objekteigenschaft points der \u00e4u\u00dferen Klasse zuzugreifen, schreiben wir KreiseZeichnen.this.points (siehe auch ) In Zeile 60 wird die Liste (also das Model ) durch die Interaktionen der Nutzerin (also durch den Controller ) bef\u00fcllt. Immer dort, wohin mit der Maus geklickt wird, wird dieser Point in der Datenstruktur Liste (also im Model ) gespeichert. Hier sehen wir die einzige Verbindung zwischen Controller und Model . Der Controller greift auf das Model zu und st\u00f6\u00dft das Speichern eines Datums an. Zeile 62 ist sehr wichtig und wird h\u00e4ufig vergessen. Hier \"triggert\" der Controller die View . Wenn wir uns an die Einf\u00fchrung des Zeichnens erinnern, dann wird ein Fenster mit allen seinen Komponenten \"gezeichnet\". Wenn wir die Canvas mit neuen Kreisen \"bef\u00fcllen\", dann bewirkt das nicht automatisch ein Neuzeichnen der Canvas . Ein Neuzeichnen w\u00fcrde nur erfolgen, wenn wir bspw. die Fenstergr\u00f6\u00dfe \u00e4ndern oder das Fenster in die Taskleiste bewegen und wieder \u00f6ffnen. Um ein Neuzeichnen aus dem Programm heraus anzusto\u00dfen, ben\u00f6tigen wir die Methode repaint() . Wir h\u00e4tten auch this.repaint(); angeben k\u00f6nnen, dann w\u00e4re das gesamte Fenster neu gezeichnet worden (inkl. der Canvas ). Mit this.canvas.repaint(); wird \"nur\" die Canvas neu gezeichnet. \u00dcbung \u00c4ndern Sie das Programm so, dass die Punkte als Mittelpunkte der Kreise verwendet werden! \u00c4ndern Sie das Programm so, dass rote Quadrate der Gr\u00f6\u00dfe 30x30 anstelle der schwarzen Kreise gezeichnet werden! \u00c4ndern Sie das Programm so, dass die Punkte nur durch einen Doppelklick der Maus erfasst werden (einfacher Mausklick gen\u00fcgt nicht)!","title":"Beispiel 1: Kreise zeichnen"},{"location":"mausereignisse/#beispiel-2-linien-zeichnen","text":"In unserem zweiten Beispiel wollen wir Linien zeichnen. Dabei soll das Vorgehen so sein: Wir klicken mit der Maus und legen dabei den Anfangspunkt der Linie fest. Wir halten die Maustaste gedr\u00fcckt und bewegen bei gedr\u00fcckter Maustaste die Maus. Dabei wird die Linie bereits gezeichnet. Wir lassen die Maustaste los. dadurch steht der Endpunkt der Linie fest. F\u00fcr Punkt 1. implementieren wir die Methode mousePressed() und wir ben\u00f6tigen somit den MouseListener . F\u00fcr Punkt 2. implementieren wir die Methode mouseDragged() und wir ben\u00f6tigen somit den MouseMotionListener . F\u00fcr Punkt 3. implementieren wir die Methode mouseReleased() aus dem MouseListener . Wir starten erneut mit unserem Grundger\u00fcst f\u00fcr das Zeichnen, haben dort aber bereits den MouseListener und den MouseMotionListener implementiert und die Methoden, die uns nicht interessieren, zusammengek\u00fcrzt: LinienZeichnen.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class LinienZeichnen extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; public LinienZeichnen () { super (); this . setTitle ( \"Linien zeichnen\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { // die View @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; } } public static void main ( String [] args ) { new LinienZeichnen (); } // der Controller @Override public void mousePressed ( MouseEvent e ) { Point p = e . getPoint (); } @Override public void mouseDragged ( MouseEvent e ) { Point p = e . getPoint (); } @Override public void mouseReleased ( MouseEvent e ) { Point p = e . getPoint (); } @Override public void mouseClicked ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} @Override public void mouseMoved ( MouseEvent e ) {} } Wir \u00fcberlegen uns nun das Model . Dies ist etwas komplexer, als das Model f\u00fcr das Zeichnen der Kreise. Es gibt gespeicherte Linien. Diese Linien sind bereits fertig erstellt. Diese Linien sollten in einer Collection gespeichert werden. Es bietet sich wieder eine Liste an (Menge ginge auch). Das Typisieren dieser Liste liegt jedoch nicht auf der Hand, da es im Gegensatz zu Point keine Klasse f\u00fcr eine Linie gibt, die wir benutzen k\u00f6nnten. M\u00fcssen wir uns also selber schreiben. eine aktuelle Linie. Das ist die Linie, die gerade gezeichnet wird. Diese Linie ist noch nicht gespeichert, d.h. die Maustaste wurde noch nicht losgelassen. Es kann auch sein, dass aktuell keine Linie gezeichnet wird, dann ist der Wert daf\u00fcr null . Auch diese aktuelle Linie sollte vom Typ Linie sein, den wir uns zun\u00e4chst erstellen. Linie.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 import java.awt.Point ; public class Linie { private Point start ; private Point ende ; public Linie ( Point start , Point ende ) { this . start = start ; this . ende = ende ; } public void setEnde ( Point newEnde ) { this . ende = newEnde ; } public int getXstart () { return this . start . x ; } public int getYstart () { return this . start . y ; } public int getXende () { return this . ende . x ; } public int getYende () { return this . ende . y ; } } Mit dem Konstruktor k\u00f6nnen wir uns ein Objekt von Linie erstellen (im Controller bei mousePressed() ) und haben dann mithilfe von setEnde() die M\u00f6glichkeit, den Endpunkt der Linie noch zu \u00e4ndern (im Controller bei mouseDragged() . Die Getter ben\u00f6tigen wir in der View , um die Werte der Start- und Endpunkte der Linie auszulesen. Wir beginnen zun\u00e4chst damit, eine Linie zu erzeugen: LinienZeichnen.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class LinienZeichnen extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; Linie aktLinie ; public LinienZeichnen () { super (); this . setTitle ( \"Linien zeichnen\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { // die View @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; if ( LinienZeichnen . this . aktLinie != null ) { int x1 = LinienZeichnen . this . aktLinie . getXstart (); int y1 = LinienZeichnen . this . aktLinie . getYstart (); int x2 = LinienZeichnen . this . aktLinie . getXende (); int y2 = LinienZeichnen . this . aktLinie . getYende (); g2 . drawLine ( x1 , y1 , x2 , y2 ); } } } public static void main ( String [] args ) { new LinienZeichnen (); } // der Controller @Override public void mousePressed ( MouseEvent e ) { Point p = e . getPoint (); this . aktLinie = new Linie ( p , p ); } @Override public void mouseDragged ( MouseEvent e ) { Point p = e . getPoint (); this . aktLinie . setEnde ( p ); this . canvas . repaint (); } @Override public void mouseReleased ( MouseEvent e ) { Point p = e . getPoint (); } @Override public void mouseClicked ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} @Override public void mouseMoved ( MouseEvent e ) {} } Die Variable aktLinie ist global , weil wir sowohl in den Methoden mousepressed() und mouseDragged als auch in paintComponent() darauf zugreifen wollen (Zeile 13 ). In der paintComponent() -Methode (unserer View ) lesen wir diese Linie aus, um sie grafisch als Linie darzustellen. Der Zugriff auf die Eigenschaften des Objektes aktLinie erfolgt aber nur, wenn aktLinie auch tats\u00e4chlich auf ein Objekt zeigt. Wir pr\u00fcfen deshalb zun\u00e4chst, ob aktLinie nicht null ist (Zeile 40 ). Nachdem wir die x - und y -Werte des start - und des ende -Punktes der aktLinie ausgelesen haben (Zeilen 42-45 ), stellen wir eine Linie grafisch mithilfe der drawLine() -Methode dar. Das Objekt einer Linie wird in der mousePressed() -Methode erstellt. Der start - und der ende -Punkt dieser Linie sind zun\u00e4chst gleich (die Linie ist also am Anfang nur ein Punkt) - Zeile 61 . Wenn wir bei gedr\u00fcckter Maustaste die Maus bewegen, wird permanent die mouseDragged() -Methode aufgerufen. Dort setzen wir die aktuelle Position der Maus als neuen ende -Punkt von aktLinie (Zeile 67 ). Zeile 69 ist wieder sehr wichtig (und wird h\u00e4ufig vergessen). Hier \"triggert\" der Controller die View . Wenn wir die Canvas mit einer neuen Linie \"bef\u00fcllen\", dann bewirkt das nicht automatisch ein Neuzeichnen der Canvas . Das Neuzeichnen erfolgt erst durch den Aufruf this.canvas.repaint(); . Wir k\u00f6nnen nun viele Linien zeichnen, aber diese werden noch nicht gespeichert. Zum Speichern der Linien ben\u00f6tigen wir wieder eine Collection. Das Speichern der aktuellen Linie in diese Collection erfolgt in dem Moment, indem wir die Maustaste wieder loslassen, also in mouseReleased() . Die Collection muss wieder global verf\u00fcgbar sein. LinienZeichnen.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.ArrayList ; import java.util.List ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class LinienZeichnen extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; Linie aktLinie ; List < Linie > linien ; public LinienZeichnen () { super (); this . setTitle ( \"Linien zeichnen\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . linien = new ArrayList <> (); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { // die View @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; if ( LinienZeichnen . this . aktLinie != null ) { int x1 = LinienZeichnen . this . aktLinie . getXstart (); int y1 = LinienZeichnen . this . aktLinie . getYstart (); int x2 = LinienZeichnen . this . aktLinie . getXende (); int y2 = LinienZeichnen . this . aktLinie . getYende (); g2 . drawLine ( x1 , y1 , x2 , y2 ); } for ( Linie l : LinienZeichnen . this . linien ) { int x1 = l . getXstart (); int y1 = l . getYstart (); int x2 = l . getXende (); int y2 = l . getYende (); g2 . drawLine ( x1 , y1 , x2 , y2 ); } } } public static void main ( String [] args ) { new LinienZeichnen (); } // der Controller @Override public void mousePressed ( MouseEvent e ) { Point p = e . getPoint (); this . aktLinie = new Linie ( p , p ); } @Override public void mouseDragged ( MouseEvent e ) { Point p = e . getPoint (); this . aktLinie . setEnde ( p ); this . canvas . repaint (); } @Override public void mouseReleased ( MouseEvent e ) { Point p = e . getPoint (); this . linien . add ( aktLinie ); } @Override public void mouseClicked ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} @Override public void mouseMoved ( MouseEvent e ) {} } \u00dcbung \u00c4ndern Sie das Programm so, dass nicht Linien gezeichnet werden, sondern Kreise! \u00c4ndern Sie aber nur die View , d.h. die paintComponent() . Die gespeicherten Linien geben den Durchmesser der Kreise an.","title":"Beispiel 2: Linien zeichnen"},{"location":"mdarrays/","text":"Mehrdimensionale Arrays \u00b6 Arrays sind Objekte. Der Typ eines Arrays ergibt sich aus TypDerElemente[] Wir geben also den Typ der Elemente an (alle Elemente in einem Array sind vom selben Typ) und schreiben eckige Klammern [] dahinter. Dabei kann der Typ der Elemente sowohl ein Wertetyp sein als auch ein Referenztyp. Es k\u00f6nnte also sein, dass der Typ der Elemente selbst wieder ein Array ist. Wir w\u00fcrden dann f\u00fcr TypDerElemente[] f\u00fcr den Typ selbst wieder ein TypDerElemente[] einsetzen und bek\u00e4men TypDerElemente[][] . Und genau das geht auch - wir sprechen von mehrdimensionalen Arrays: Wir werden zweidimensionale Arrays betrachten. Vorstellen k\u00f6nnen wir uns gerade noch dreidimensionale, aber h\u00f6here Dimensionen sollten wir gar nicht verwenden, da dies eigentlich nur mit Fehlern behaftet sein kann. In zweidiemensionalen Arrays haben wir nun anstelle eines Indexes zwei. Man kann sich diese Indizes so verstellen, als w\u00fcrde der eine Index die Spalten nummerieren und der andere die Zeilen. Welcher Index wof\u00fcr steht, bleibt Ihnen \u00fcberlassen. Wir betrachten ein einf\u00fchrendes Beispiel: zweidimensionales Array f\u00fcr das kleine Einmaleins 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public static void main ( String [] args ) { int anzZeilen = 10 ; int anzSpalten = 10 ; int [][] einmaleins = new int [ anzZeilen ][ anzSpalten ] ; for ( int i = 0 ; i < einmaleins . length ; i ++ ) { for ( int j = 0 ; j < einmaleins [ i ] . length ; j ++ ) { einmaleins [ i ][ j ]= ( i + 1 ) * ( j + 1 ); } } } In Zeile 6 wird das zweidiensionale int -Array deklariert ( int[][] einmaleins ) und auch gleichzeitig erzeugt ( new int[anzZeilen][anzSpalten] ). Das passiert genau so, wie wir es bereits von den eindimensionalen Arrays kennen, nur dass wir nun zwei Klammerpaare ( [][] ) und zwei Indizes haben. Da wir zwei Indizes haben, haben wir auch eine verschachtelte for -Schleife, um alle Elemente des Arrays betrachten zu k\u00f6nnen. Die Wertzuweisung erfolgt in Zeile 12 . Beachten Sie, dass die Abbruchbedingung der \u00e4u\u00dferen for -Schleife die Anzahl der Zeilen ermittelt ( einmaleins.length ) und in der inneren for -Schleife die Anzahl der Spalten in jeder Zeile ( einmaleins[i].length ) abgefragt wird. Den Zugriff auf ein solches zweidimensionales Array kann man sich so vorstellen: Der erste Index gibt danach die jeweilige Zeile an und der zweite die Spalte. Das bleibt aber Ihrer Interpretation \u00fcberlassen - k\u00f6nnte auch genau andersherum sein. Manche stellen sich ja ein eindimensionales Array auch vertikal vor und andere horizontal. Wichtig ist nur, dass Sie sich f\u00fcr eine Interpretation entscheiden und diese dann auch konsistent umsetzen. Zur Festigung f\u00fcgen wir in den obigen Code noch eine Ausgabe des zweidimensionalen Arrays ein: Einmaleins mit Ausgabe 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public static void main ( String [] args ) { int anzZeilen = 10 ; int anzSpalten = 10 ; int [][] einmaleins = new int [ anzZeilen ][ anzSpalten ] ; // Wertezuweisungen for ( int i = 0 ; i < einmaleins . length ; i ++ ) { for ( int j = 0 ; j < einmaleins [ i ] . length ; j ++ ) { einmaleins [ i ][ j ]= ( i + 1 ) * ( j + 1 ); } } // Ausgabe auf Konsole for ( int i = 0 ; i < einmaleins . length ; i ++ ) { for ( int j = 0 ; j < einmaleins [ i ] . length ; j ++ ) { System . out . printf ( \"%4d\" , einmaleins [ i ][ j ] ); } System . out . println (); } } ergibt folgnde Ausgabe: 1 2 3 4 5 6 7 8 9 10 2 4 6 8 10 12 14 16 18 20 3 6 9 12 15 18 21 24 27 30 4 8 12 16 20 24 28 32 36 40 5 10 15 20 25 30 35 40 45 50 6 12 18 24 30 36 42 48 54 60 7 14 21 28 35 42 49 56 63 70 8 16 24 32 40 48 56 64 72 80 9 18 27 36 45 54 63 72 81 90 10 20 30 40 50 60 70 80 90 100 Wir werden zweidimensionale Arrays in \u00dcbung 1 noch weiter \u00fcben.","title":"Mehrdimensionale Arrays"},{"location":"mdarrays/#mehrdimensionale-arrays","text":"Arrays sind Objekte. Der Typ eines Arrays ergibt sich aus TypDerElemente[] Wir geben also den Typ der Elemente an (alle Elemente in einem Array sind vom selben Typ) und schreiben eckige Klammern [] dahinter. Dabei kann der Typ der Elemente sowohl ein Wertetyp sein als auch ein Referenztyp. Es k\u00f6nnte also sein, dass der Typ der Elemente selbst wieder ein Array ist. Wir w\u00fcrden dann f\u00fcr TypDerElemente[] f\u00fcr den Typ selbst wieder ein TypDerElemente[] einsetzen und bek\u00e4men TypDerElemente[][] . Und genau das geht auch - wir sprechen von mehrdimensionalen Arrays: Wir werden zweidimensionale Arrays betrachten. Vorstellen k\u00f6nnen wir uns gerade noch dreidimensionale, aber h\u00f6here Dimensionen sollten wir gar nicht verwenden, da dies eigentlich nur mit Fehlern behaftet sein kann. In zweidiemensionalen Arrays haben wir nun anstelle eines Indexes zwei. Man kann sich diese Indizes so verstellen, als w\u00fcrde der eine Index die Spalten nummerieren und der andere die Zeilen. Welcher Index wof\u00fcr steht, bleibt Ihnen \u00fcberlassen. Wir betrachten ein einf\u00fchrendes Beispiel: zweidimensionales Array f\u00fcr das kleine Einmaleins 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 public static void main ( String [] args ) { int anzZeilen = 10 ; int anzSpalten = 10 ; int [][] einmaleins = new int [ anzZeilen ][ anzSpalten ] ; for ( int i = 0 ; i < einmaleins . length ; i ++ ) { for ( int j = 0 ; j < einmaleins [ i ] . length ; j ++ ) { einmaleins [ i ][ j ]= ( i + 1 ) * ( j + 1 ); } } } In Zeile 6 wird das zweidiensionale int -Array deklariert ( int[][] einmaleins ) und auch gleichzeitig erzeugt ( new int[anzZeilen][anzSpalten] ). Das passiert genau so, wie wir es bereits von den eindimensionalen Arrays kennen, nur dass wir nun zwei Klammerpaare ( [][] ) und zwei Indizes haben. Da wir zwei Indizes haben, haben wir auch eine verschachtelte for -Schleife, um alle Elemente des Arrays betrachten zu k\u00f6nnen. Die Wertzuweisung erfolgt in Zeile 12 . Beachten Sie, dass die Abbruchbedingung der \u00e4u\u00dferen for -Schleife die Anzahl der Zeilen ermittelt ( einmaleins.length ) und in der inneren for -Schleife die Anzahl der Spalten in jeder Zeile ( einmaleins[i].length ) abgefragt wird. Den Zugriff auf ein solches zweidimensionales Array kann man sich so vorstellen: Der erste Index gibt danach die jeweilige Zeile an und der zweite die Spalte. Das bleibt aber Ihrer Interpretation \u00fcberlassen - k\u00f6nnte auch genau andersherum sein. Manche stellen sich ja ein eindimensionales Array auch vertikal vor und andere horizontal. Wichtig ist nur, dass Sie sich f\u00fcr eine Interpretation entscheiden und diese dann auch konsistent umsetzen. Zur Festigung f\u00fcgen wir in den obigen Code noch eine Ausgabe des zweidimensionalen Arrays ein: Einmaleins mit Ausgabe 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 public static void main ( String [] args ) { int anzZeilen = 10 ; int anzSpalten = 10 ; int [][] einmaleins = new int [ anzZeilen ][ anzSpalten ] ; // Wertezuweisungen for ( int i = 0 ; i < einmaleins . length ; i ++ ) { for ( int j = 0 ; j < einmaleins [ i ] . length ; j ++ ) { einmaleins [ i ][ j ]= ( i + 1 ) * ( j + 1 ); } } // Ausgabe auf Konsole for ( int i = 0 ; i < einmaleins . length ; i ++ ) { for ( int j = 0 ; j < einmaleins [ i ] . length ; j ++ ) { System . out . printf ( \"%4d\" , einmaleins [ i ][ j ] ); } System . out . println (); } } ergibt folgnde Ausgabe: 1 2 3 4 5 6 7 8 9 10 2 4 6 8 10 12 14 16 18 20 3 6 9 12 15 18 21 24 27 30 4 8 12 16 20 24 28 32 36 40 5 10 15 20 25 30 35 40 45 50 6 12 18 24 30 36 42 48 54 60 7 14 21 28 35 42 49 56 63 70 8 16 24 32 40 48 56 64 72 80 9 18 27 36 45 54 63 72 81 90 10 20 30 40 50 60 70 80 90 100 Wir werden zweidimensionale Arrays in \u00dcbung 1 noch weiter \u00fcben.","title":"Mehrdimensionale Arrays"},{"location":"uebungen/","text":"\u00dcbungen \u00b6 \u00dcbung 1 (Git) \u00b6 \u00dcbung 1 Erstellen Sie sich einen GitHub-Account (oder w\u00e4hlen Sie einen anderen Git-Diensteanbieter) Erstellen Sie sich dort ein zentrales Repository Richten Sie Ihren workspace , in dem Sie alle Ihre Entwicklungen in diesem Semester durchf\u00fchren wollen (\u00dcbungen, Aufgaben, ...) als lokales Git-Repository ein Synchroniseren Sie Ihr lokales und Ihr zentrales Git-Repository Video zu \u00dcbung 1 ( Git ) - alles zu EGit herausgenommen \u00dcbung 2 (enum und zweidimensionale Arrays) \u00b6 \u00dcbung 2 Gegeben ist die folgende Klasse TicTacToe : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package uebungen.uebung2 ; public class TicTacToe { enum State { EMPTY , RED , BLACK }; State [][] field ; public TicTacToe () { field = new State [ 3 ][ 3 ] ; for ( int i = 0 ; i < field . length ; i ++ ) for ( int j = 0 ; j < field [ i ] . length ; j ++ ) field [ i ][ j ]= State . EMPTY ; } public void makeMove ( int i , int j , State player ) { if ( field [ i ][ j ]== State . EMPTY && player != State . EMPTY ) field [ i ][ j ]= player ; } } F\u00fcgen Sie alle notwendigen Klammern { } ein, so dass die Anweisungsbl\u00f6cke korrekt geklammert sind. Erweitern Sie die Klasse TicTacToe um eine print() -Methode, die das Spielfeld auf die Konsole ausgibt (Setzen Sie z.B. f\u00fcr den Player RED ein x und f\u00fcr den Player Black ein o und f\u00fcr EMPTY ein Leerzeichen oder ein - ). Die Ausgabe nach jeweils 2 Z\u00fcgen von RED und BLACK k\u00f6nnte dann z.B. so aussehen: - o o - x - - - x Erweitern Sie die Klasse TicTacToe um eine gewonnen() -Methode ( true , wenn ein Spieler drei Felder horizontal, diagonal oder vertikal belegt hat; ansonsten false ). Erweitern Sie die Klasse TicTacToe um eine unentschieden() -Methode ( true , wenn alle Felder besetzt sind, aber kein Spieler gewonnen hat; ansonsten false ). Erstellen Sie eine Test-Klasse mit main() -Methode. Erstellen sie darin ein Objekt der Klasse TicTacToe . F\u00fchren Sie Z\u00fcge aus ( makeMove() ) und pr\u00fcfen Sie, ob gewonnen wurde oder unentschieden ist (mit entsprechenden Ausgaben). F\u00fcr 6. m\u00fcssen Sie in der Testklasse Ihr enum State importieren. Warum ist das so? Was k\u00f6nnten Sie machen, damit das nicht notwendig ist? Zusatz: Sie k\u00f6nnen die Klasse TicTacToe beliebig erweitern, z.B.: um Ausgaben, wenn gewonnen bzw. es unentschieden ist, um Fehler in den Indizes i und j bei der makeMove() -Methode abzufangen, eine Methode spielen() implementieren, die zuf\u00e4llig f\u00fcr die Spieler die Steine setzt usw. Viel Spa\u00df! Video zu \u00dcbung 2 (TicTacToe) m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 2 TicTacToe.javapackage uebungen.uebung2 ; import java.util.Random ; public class TicTacToe { State [][] field ; public TicTacToe () { this . field = new State [ 3 ][ 3 ] ; for ( int i = 0 ; i < this . field . length ; i ++ ) { for ( int j = 0 ; j < this . field [ i ] . length ; j ++ ) { field [ i ][ j ]= State . EMPTY ; } } } public void makeMove ( int row , int col , State player ) { if ( row >= 0 && row < this . field . length && col >= 0 && col < this . field [ row ] . length && this . field [ row ][ col ] == State . EMPTY ) { if ( player != State . EMPTY ) { this . field [ row ][ col ]= player ; } } } public void print () { for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { if ( field [ row ][ col ]== State . EMPTY ) { System . out . print ( \"- \" ); } else if ( field [ row ][ col ]== State . RED ) { System . out . print ( \"x \" ); } else // BLACK { System . out . print ( \"o \" ); } } System . out . println (); } System . out . println (); } public boolean gewonnen ( State player ) { if ( player == State . EMPTY ) return false ; // alle drei Zeilen pruefen for ( int row = 0 ; row < this . field . length ; row ++ ) { if ( this . field [ row ][ 0 ] == player && this . field [ row ][ 1 ] == player && this . field [ row ][ 2 ] == player ) { return true ; } } // alle drei Spalten pruefen for ( int col = 0 ; col < this . field . length ; col ++ ) { if ( this . field [ 0 ][ col ] == player && this . field [ 1 ][ col ] == player && this . field [ 2 ][ col ] == player ) { return true ; } } // Diagonale von links oben nach rechts unten if ( this . field [ 0 ][ 0 ] == player && this . field [ 1 ][ 1 ] == player && this . field [ 2 ][ 2 ] == player ) { return true ; } // Diagonale von rechts oben nach links unten if ( this . field [ 0 ][ 2 ] == player && this . field [ 1 ][ 1 ] == player && this . field [ 2 ][ 0 ] == player ) { return true ; } return false ; } public void printResultat () { if ( this . gewonnen ( State . RED )) { System . out . println ( \"Rot hat gewonnen!!!\" ); } else if ( this . gewonnen ( State . BLACK )) { System . out . println ( \"Schwarz hat gewonnen!!!\" ); } else if ( this . unentschieden ()) { System . out . println ( \"Unentschieden!!!\" ); } } public void makeRandomMove ( State player ) { if ( player != State . EMPTY ) { Random r = new Random (); int row = r . nextInt ( 3 ); int col = r . nextInt ( 3 ); while ( this . field [ row ][ col ]!= State . EMPTY ) { row = r . nextInt ( 3 ); col = r . nextInt ( 3 ); } this . field [ row ][ col ]= player ; } } public void spielen () { State player = State . RED ; while ( ! ( this . unentschieden () || this . gewonnen ( State . RED ) || this . gewonnen ( State . BLACK ))) { this . makeRandomMove ( player ); this . print (); this . printResultat (); if ( player == State . RED ) { player = State . BLACK ; } else { player = State . RED ; } // player = (player == State.RED) ? State.BLACK : State.RED; } } public boolean voll () { for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { if ( field [ row ][ col ]== State . EMPTY ) { return false ; } } } return true ; } public boolean unentschieden () { return ( this . voll () && ! this . gewonnen ( State . RED ) && ! this . gewonnen ( State . BLACK )); } } State.java 1 2 3 4 5 package uebungen.uebung2 ; public enum State { EMPTY , RED , BLACK } TestTicTacToe.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package uebungen.uebung2 ; public class TestTicTacToe { public static void main ( String [] args ) { TicTacToe ttt = new TicTacToe (); ttt . print (); /* ttt.makeMove(1, 1, State.RED); ttt.printResultat(); ttt.print(); ttt.makeMove(1, 2, State.BLACK); ttt.printResultat(); ttt.print(); ttt.makeMove(1, -1, State.BLACK); ttt.printResultat(); ttt.print(); ttt.makeMove(0, 1, State.RED); ttt.printResultat(); ttt.print(); ttt.makeMove(2, 1, State.BLACK); ttt.printResultat(); ttt.print(); ttt.makeMove(1, 0, State.RED); ttt.printResultat(); ttt.print(); ttt.makeMove(0, 0, State.BLACK); ttt.printResultat(); ttt.print(); ttt.makeMove(0, 2, State.RED); ttt.printResultat(); ttt.print(); ttt.makeMove(2, 0, State.BLACK); ttt.printResultat(); ttt.print(); ttt.makeMove(2, 2, State.RED); ttt.printResultat(); ttt.print(); */ ttt . spielen (); // ttt.makeRandomMove(State.RED); // ttt.print(); } } \u00dcbung 3 (Exceptions) \u00b6 \u00dcbung 3 Schreiben Sie ein Programm zur Eingabe von zwei Zahlen mithilfe der Klasse JOptionPane aus dem und deren Division! Fangen Sie folgende Ausnahmen ab: Falls die Eingabe keiner Zahl entspricht. Falls die zweite Zahl eine 0 ist. Scenario : Fenster zur Eingabe von Zahl 1 \u00f6ffnet sich: falsche Eingabe - keine Zahl: Fenster \u00f6ffnet sich erneut (andere Nachricht!): Fenster zur Eingabe von Zahl 2 \u00f6ffnet sich: die Division Zahl1/Zahl2 schl\u00e4gt fehl ( ArithmeticException ), deshalb (andere Nachricht!): Ergebnis Lagern Sie eine solche Eingabem\u00f6glichkeit in eine wiederverwendbare Methode aus, z.B. public int inputInt(int min, int max) , welche die eingegebene Zahl zur\u00fcckgibt, wobei die eingegebene Zahl im Bereich [min, max] liegen muss. Lesen Sie eine Anzahl von Sekunden ein und schreiben Sie eine Umrechnung, so dass folgende Ausgabe entsteht (die Eingabe ist hier \u00fcber die Konsole gezeigt) : Gib eine Anzahl von Sekunden ein: 3456789 3456789 Sekunden sind 40 Tage, 13 Minuten, 9 Sekunden. Gib eine Anzahl von Sekunden ein: 2345678 2345678 Sekunden sind 27 Tage, 3 Stunden, 34 Minuten, 38 Sekunden. Gib eine Anzahl von Sekunden ein: 123456 123456 Sekunden sind 1 Tag, 10 Stunden, 17 Minuten, 36 Sekunden. Gib eine Anzahl von Sekunden ein: 12345 12345 Sekunden sind 3 Stunden, 25 Minuten, 45 Sekunden. Lesen Sie eine Zahl ein und geben Sie die Quersumme der Zahl aus. Viel Spa\u00df! Video zu \u00dcbung 3 (Exceptions) m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 3 Uebung3.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 package uebungen.uebung3 ; import javax.swing.JOptionPane ; public class Uebung3 { public static int inputInt ( int min , int max , String message ) { boolean eingabeOk = false ; int zahl = 0 ; // String message = \"Geben Sie eine Zahl ein : \"; while ( ! eingabeOk ) { String eingabe1 = JOptionPane . showInputDialog ( message ); try { zahl = Integer . valueOf ( eingabe1 ); if ( zahl >= min && zahl <= max ) { eingabeOk = true ; } else { message = \"Zahl muss zwischen \" + min + \" und \" + max + \" liegen!\" ; } } catch ( NumberFormatException e ) { message = \"Eingabe war keine Zahl! Bitte Zahl eingeben\" ; } } return zahl ; } public static int inputInt ( String message ) { return inputInt ( Integer . MIN_VALUE , Integer . MAX_VALUE , message ); } public static int division ( int divident , int divisor ) throws ArithmeticException { int quotient = divident / divisor ; return quotient ; } public static void printDivision () { int zahl1 = inputInt ( \"Geben Sie eine Zahl1 ein : \" ); boolean zahl2NotZero = false ; String message = \"Geben Sie eine Zahl2 ein : \" ; while ( ! zahl2NotZero ) { int zahl2 = inputInt ( message ); int result = 0 ; try { result = division ( zahl1 , zahl2 ); zahl2NotZero = true ; } catch ( ArithmeticException e ) { message = \"Zahl2 darf nicht 0 sein!\" ; } System . out . println ( zahl1 + \" / \" + zahl2 + \" = \" + result ); } } public static int quersumme ( int zahl ) { int ganz = zahl ; int quersumme = 0 ; while ( ganz > 0 ) { int rest = ganz % 10 ; quersumme += rest ; ganz = ganz / 10 ; } return quersumme ; } public static void printUmrechnungSek () { int sek = inputInt ( \"Anzahl Sekunden : \" ); int tage = sek / ( 24 * 60 * 60 ); int stunden = sek / ( 60 * 60 ) - ( tage * 24 ); int minuten = sek / ( 60 ) - ( tage * 24 * 60 ) - ( stunden * 60 ); int sekunden = sek - ( tage * 24 * 60 * 60 ) - ( stunden * 60 * 60 ) - ( minuten * 60 ); String s = sek + \" Sekunden sind \" ; if ( tage > 1 ) s += tage + \" Tage, \" ; else if ( tage == 1 ) s += \"1 Tag, \" ; if ( stunden > 1 ) s += stunden + \" Stunden, \" ; else if ( stunden == 1 ) s += \"1 Stunden, \" ; if ( minuten > 1 ) s += minuten + \" Minuten, \" ; else if ( minuten == 1 ) s += \"1 Minute, \" ; if ( sekunden > 1 ) s += sekunden + \" Sekunden.\" ; else if ( sekunden == 1 ) s += \"1 Sekunde.\" ; System . out . println ( s ); } public static void main ( String [] args ) { printDivision (); int zahl = inputInt ( \"Geben Sie eine Zahl ein\" ); // System.out.println(\"Quersumme von \" + zahl + \" ist \" + quersumme(zahl)); JOptionPane . showMessageDialog ( null , \"Quersumme von \" + zahl + \" ist \" + quersumme ( zahl )); printUmrechnungSek (); } } module-info.java 1 2 3 module SoSe2021 { requires java . desktop ; } \u00dcbung 4 (Test-driven development) \u00b6 Warning Diese \u00dcbung lassen wir weg. Am 6.5.2021 machen wir stattdessen gleich \u00dcbung 5 . Das hat den Vorteil, dass wir den Stoff von Vorlesung und \u00dcbung wieder zeitlich dichter zusammenziehen (Mittwoch Vorlesung und Donnerstag dazugeh\u00f6rige \u00dcbung). Au\u00dferdem f\u00e4llt die \u00dcbung am 13.5. wegen des Feiertages weg und somit w\u00e4re die L\u00fccke noch gr\u00f6\u00dfer. \u00dcbung 4 Implementieren Sie eine Methode public static int strStr(String haystack, String needle) durch testgetriebene Entwicklung. Die Methode gibt den Anfangsindex des ersten Auftretens von needle in haystack aus, z.B. // Beispiel 1 Input: haystack = \"hello\" , needle = \"ll\" Output: 2 // ll beginnt am Index 2 // Beispiel 2 Input: haystack = \"aaaaa\" , needle = \"bba\" Output: -1 // bba kommt nicht vor // Beispiel 3 Input: haystack = \"\" , needle = \"\" Output: 0 // \"leerer\" String ueberall, also auch bei 0 Wenn needle nicht in haystack enthalten ist, wird -1 zur\u00fcckgegeben. Implementieren Sie eine Methode public static int[][] permutations(int[] nums) durch testgetriebene Entwicklung. Die Methode gibt ein Array von int -Arrays zur\u00fcck, welches alle Permutationen der Zahlen aus nums enth\u00e4lt, z.B. // Beispiel 1 Input: nums = [ 1 ,2,3 ] Output: [[ 1 ,2,3 ] , [ 1 ,3,2 ] , [ 2 ,1,3 ] , [ 2 ,3,1 ] , [ 3 ,1,2 ] , [ 3 ,2,1 ]] // Beispiel 2 Input: nums = [ 0 ,1 ] Output: [[ 0 ,1 ] , [ 1 ,0 ]] // Beispiel 3 Input: nums = [ 1 ] Output: [[ 1 ]] Sie d\u00fcrfen folgende Annahmen treffen: 1 <= nums.length <= 6 -10 <= nums[i] <= 10 nums enth\u00e4lt keine Doppelungen Viel Spa\u00df! \u00dcbung 5 (Listen und Mengen) \u00b6 \u00dcbung 5 Erstellen Sie eine Klasse Uebung5 mit main() -Methode. Definieren Sie in der main() -Methode eine Variable words vom Typ String[] und weisen Sie dieser Variablen folgende Werte zu: String [] words = { \"Linux\" , \"Apple\" , \"Facebook\" , \"Amazon\" , \"IBM\" , \"Lenovo\" , \"Google\" , \"IBM\" , \"Microsoft\" , \"Apple\" , \"Google\" , \"Twitter\" , \"Skype\" , \"Chrome\" , \"Linux\" , \"Firefox\" }; A. Listen ( List ) Erstellen Sie eine Methode public static List<String> createArrayList(String[] words) . In dieser Methode soll eine ArrayList erstellt werden. Alle Elemente in dieser Liste sind vom Typ String . Bef\u00fcllen Sie diese Liste mit allen W\u00f6rtern aus dem words -Array. Die Methode gibt die bef\u00fcllte Liste ( List ) zur\u00fcck. Erstellen Sie eine Methode public static void printList(List<String> list) . Diese Methode gibt alle Elemente der Liste list auf der Konsole aus. Geben Sie auch die Anzahl der Elemente der Liste aus. Erstellen Sie in der main() -Methode mithilfe der Methode createArrayList(words) eine Liste und speichern Sie diese Liste in einer Variablen vom Typ List<String> . Geben Sie alle Elemente dieser Liste mithilfe der Methode printList() auf der Konsole aus. Studieren Sie alle Methoden f\u00fcr List unter https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html . Ermitteln Sie den Index in der Liste, in der \"Apple\" das erste Mal auftaucht. Erzeugen Sie folgende Ausgabe: Index des ersten Auftretens von Apple : 1 Ermitteln Sie den Index in der Liste, in der \"Apple\" das letzte Mal auftaucht. Erzeugen Sie folgende Ausgabe: Index des letzten Auftretens von Apple : 9 Geben Sie den Wert des ersten Elementes der Liste aus. Erzeugen Sie folgende Ausgabe: erstes Element der Liste : Linux Geben Sie den Wert des letzten Elementes der Liste aus. Erzeugen Sie folgende Ausgabe: letztes Element der Liste : Firefox L\u00f6schen Sie die Werte \"Apple\" , \"Google\" und \"Facebook\" . Geben Sie die Liste erneut mithilfe der printList(list) -Methode aus. B. Mengen ( Set ) Erstellen Sie eine Methode public static Set<String> createHashSet(String[] words) . In dieser Methode soll eine HashSet erstellt werden. Alle Elemente in dieser Liste sind vom Typ String . Bef\u00fcllen Sie diese Liste mit allen W\u00f6rtern aus dem words -Array. Die Methode gibt die bef\u00fcllte Menge ( Set ) zur\u00fcck. Erstellen Sie eine Methode public static void printSet(Set<String> set) . Diese Methode gibt alle Elemente der Menge set auf der Konsole aus. Geben Sie auch die Anzahl der Elemente der Menge aus. Erstellen Sie in der main() -Methode mithilfe der Methode createHashSet(words) eine Menge und speichern Sie diese Menge in einer Variablen vom Typ Set<String> . Geben Sie alle Elemente dieser Menge mithilfe der Methode printSet() auf der Konsole aus. Was beobachten Sie in Bezug auf die Anzahl der Elemente im Vergleich zur Anzahl der Elemente in der Liste? Warum ist das so? Erstellen Sie eine Methode public static Set<String> createTreeSet(String[] words) . In dieser Methode soll eine TreeSet erstellt werden. Alle Elemente in dieser Liste sind vom Typ String . Bef\u00fcllen Sie diese Menge ( Set ) mit allen W\u00f6rtern aus dem words -Array. Die Methode gibt die bef\u00fcllte Menge ( Set ) zur\u00fcck. Erstellen Sie in der main() -Methode mithilfe der Methode createTreeSet(words) eine Menge und speichern Sie diese Menge in einer Variablen. Geben Sie alle Elemente dieser Menge mithilfe der Methode printSet() auf der Konsole aus. Was beobachten Sie in Bezug auf die Sortierung der Elemente im Vergleich zur HashSet ? Zusatz Erstellen Sie f\u00fcr die Liste eine Methode public static List<String> findDoublets(List<String> list) . Diese Methode erstellt eine Liste, in der alle Elemente enthalten sind, die in list doppelt vorkommen. Diese Elemente werden dann auch doppelt in die Resultat-Liste \u00fcbernommen. Geben Sie diese Liste mithilfe der printList() -Methode in der main() -Methode aus. M\u00f6gliche Ausgabe (je nach Reihenfolge des Aufrufs der Methoden) Liste mit 16 Elementen : -------------------------- Linux Apple Facebook Amazon IBM Lenovo Google IBM Microsoft Apple Google Twitter Skype Chrome Linux Firefox Index des ersten Auftretens von Apple : 1 Index des letzten Auftretens von Apple : 9 erstes Element in der Liste : Linux letztes Element in der Liste : Firefox Liste mit 13 Elementen : -------------------------- Linux Amazon IBM Lenovo IBM Microsoft Apple Google Twitter Skype Chrome Linux Firefox Doublets- Liste mit 4 Elementen : -------------------------- Linux IBM IBM Linux ohne Doublets- Liste mit 9 Elementen : -------------------------- Amazon Lenovo Microsoft Apple Google Twitter Skype Chrome Firefox Menge mit 12 Elementen : -------------------------- Lenovo Google Apple Skype Linux IBM Twitter Chrome Microsoft Amazon Facebook Firefox Menge mit 12 Elementen : -------------------------- Amazon Apple Chrome Facebook Firefox Google IBM Lenovo Linux Microsoft Skype Twitter Video zu \u00dcbung 5 (Listen und Mengen) m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 5 - aus der \u00dcbung von Frau Busjahn (mit Kommentaren) Uebung5.javapackage uebungen.uebung5.loesung ; import java.util.ArrayList ; import java.util.HashSet ; import java.util.Iterator ; import java.util.List ; import java.util.Set ; import java.util.TreeSet ; public class Uebung5 { //A1. Erstellen Sie eine Methode public static List<String> createArrayList(String[] words). //In dieser Methode soll eine ArrayList erstellt werden. Alle Elemente in dieser Liste sind vom Typ String. //Bef\u00fcllen Sie diese Liste mit allen W\u00f6rtern aus dem words-Array. Die Methode gibt die bef\u00fcllte Liste (List) zur\u00fcck. public static List < String > createArrayList ( String [] words ){ // neue ArrayList mit String als Type anlegen List < String > list = new ArrayList <> (); // jedes Element aus words in die Liste einf\u00fcgen for ( int i = 0 ; i < words . length ; i ++ ) { list . add ( words [ i ] ); } return list ; } //A2. Erstellen Sie eine Methode public static void printList(List<String> list). //Diese Methode gibt alle Elemente der Liste list auf der Konsole aus. //Geben Sie auch die Anzahl der Elemente der Liste aus. public static void printList ( List < String > list ) { //Variante 1: Iterator System . out . println ( \"--Iterator--\" ); Iterator < String > it = list . iterator (); while ( it . hasNext ()) { System . out . println ( it . next ()); } //Variante 2: for-Schleife System . out . println ( \"--Schleife--\" ); for ( String s : list ) { System . out . println ( s ); } //Anzahl der Elemente ausgeben System . out . println ( \"Die Liste hat \" + list . size () + \" Elemente.\" ); } //B1. Erstellen Sie eine Methode public static Set<String> createHashSet(String[] words). //In dieser Methode soll eine HashSet erstellt werden. //Alle Elemente in dieser Liste sind vom Typ String. //Bef\u00fcllen Sie diese Liste mit allen W\u00f6rtern aus dem words-Array. //Die Methode gibt die bef\u00fcllte Menge (Set) zur\u00fcck. public static Set < String > createHashSet ( String [] words ) { Set < String > set = new HashSet <> (); for ( int i = 0 ; i < words . length ; i ++ ) { set . add ( words [ i ] ); } return set ; } //B2. Erstellen Sie eine Methode public static void printSet(Set<String> set). //Diese Methode gibt alle Elemente der Menge set auf der Konsole aus. //Geben Sie auch die Anzahl der Elemente der Menge aus. public static void printSet ( Set < String > set ) { for ( String s : set ) { System . out . println ( s ); } System . out . println ( \"Das Set hat \" + set . size () + \" Elemente.\" ); } //B4. Erstellen Sie eine Methode public static Set<String> createTreeSet(String[] words). //In dieser Methode soll eine TreeSet erstellt werden. //Alle Elemente in dieser Liste sind vom Typ String. //Bef\u00fcllen Sie diese Menge (Set) mit allen W\u00f6rtern aus dem words-Array. //Die Methode gibt die bef\u00fcllte Menge (Set) zur\u00fcck. public static Set < String > createTreeSet ( String [] words ) { Set < String > set = new TreeSet <> (); for ( int i = 0 ; i < words . length ; i ++ ) { set . add ( words [ i ] ); } return set ; } //Zusatz: Erstellen Sie f\u00fcr die Liste eine Methode public static List<String> findDoublets(List<String> list). //Diese Methode erstellt eine Liste, in der alle Elemente enthalten sind, die in list doppelt vorkommen. //Diese Elemente werden dann auch doppelt in die Resultat-Liste \u00fcbernommen. //Geben Sie diese Liste mithilfe der printList()-Methode in der main()-Methode aus. public static List < String > findDoublets ( List < String > list ) { //Grundidee //Beispiel-Liste: \"a\" \"b\" \"a\" \"c\" \"a\" //Index: 0 1 2 3 4 //Inhalt: a b a c a //erster Index von \"a\": 0 //letzter Index von \"a\":4 //0 != 4 -> es gibt Duplikate //erster Index von \"b\":1 //letzter Index von \"b\":1 //1 == 1 -> keine Duplikate, also diesen Eintrag als Einzeleintrag merken //... //leere Liste \"singles\" f\u00fcr Einzeleintr\u00e4ge anlegen List < String > singles = new ArrayList <> (); //durch list iterieren und testen ob das Element Duplikate hat, //wenn nicht in \"singles\" speichern Iterator < String > it = list . iterator (); //it = copy.iterator(); while ( it . hasNext ()) { String s = it . next (); if ( list . indexOf ( s ) == list . lastIndexOf ( s )) singles . add ( s ); } //Kopie von list anlegen List < String > copy = new ArrayList <> (); it = list . iterator (); while ( it . hasNext ()) copy . add ( it . next ()); //alle singles aus der kopierten Liste entfernen copy . removeAll ( singles ); return copy ; //um zu testen, warum die Kopie n\u00f6tig ist: //copy.removeAll(singles); und return copy; ersetzen durch //list.removeAll(singles); //return list; //und dann die Ausgabe von l2 in der main anschauen } public static void main ( String [] args ) { String [] words = { \"Linux\" , \"Apple\" , \"Facebook\" , \"Amazon\" , \"IBM\" , \"Lenovo\" , \"Google\" , \"IBM\" , \"Microsoft\" , \"Apple\" , \"Google\" , \"Twitter\" , \"Skype\" , \"Chrome\" , \"Linux\" , \"Firefox\" }; System . out . println ( \"---------- A ----------\" ); //A3. Erstellen Sie in der main()-Methode mithilfe der Methode createArrayList(words) eine //Liste und speichern Sie diese Liste in einer Variablen vom Typ List<String>. List < String > l1 = createArrayList ( words ); //Geben Sie alle Elemente dieser Liste mithilfe der Methode printList() auf der Konsole aus. printList ( l1 ); //A4. Ermitteln Sie den Index in der Liste, in der \"Apple\" das erste Mal auftaucht. //Erzeugen Sie folgende Ausgabe: Index des ersten Auftretens von Apple : 1 System . out . println ( \"Index des ersten Auftretens von Apple: \" + l1 . indexOf ( \"Apple\" )); //Ermitteln Sie den Index in der Liste, in der \"Apple\" das letzte Mal auftaucht. //Erzeugen Sie folgende Ausgabe: Index des letzten Auftretens von Apple : 9 System . out . println ( \"Index des letzten Auftretens von Apple: \" + l1 . lastIndexOf ( \"Apple\" )); //Geben Sie den Wert des ersten Elementes der Liste aus. //Erzeugen Sie folgende Ausgabe: erstes Element der Liste : Linux System . out . println ( \"erstes Element der Liste: \" + l1 . get ( 0 )); //Geben Sie den Wert des letzten Elementes der Liste aus. //Erzeugen Sie folgende Ausgabe: letztes Element der Liste : Firefox System . out . println ( \"letztes Element der Liste: \" + l1 . get ( l1 . size () - 1 )); //L\u00f6schen Sie die Werte \"Apple\", \"Google\" und \"Facebook\". //Geben Sie die Liste erneut mithilfe der printList(list)-Methode aus. //1. M\u00f6glichkeit: nur 1. Vorkommen l\u00f6schen l1 . remove ( \"Apple\" ); l1 . remove ( \"Google\" ); l1 . remove ( \"Facebook\" ); printList ( l1 ); //2. M\u00f6glichkeit: alle l\u00f6schen while ( l1 . remove ( \"Apple\" )); while ( l1 . remove ( \"Google\" )); while ( l1 . remove ( \"Facebook\" )); printList ( l1 ); System . out . println ( \"---------- B ----------\" ); System . out . println ( \"-------HashSet------\" ); //B3. Erstellen Sie in der main()-Methode mithilfe der Methode createHashSet(words) //eine Menge und speichern Sie diese Menge in einer Variablen vom Typ Set<String>. Set < String > h1 = createHashSet ( words ); //Geben Sie alle Elemente dieser Menge mithilfe der Methode printSet() auf der Konsole aus. //Was beobachten Sie in Bezug auf die Anzahl der Elemente im Vergleich zur Anzahl der Elemente //in der Liste? Warum ist das so? printSet ( h1 ); System . out . println ( \"-------TreeSet------\" ); //B5. Erstellen Sie in der main()-Methode mithilfe der Methode createTreeSet(words) //eine Menge und speichern Sie diese Menge in einer Variablen. Set < String > t1 = createTreeSet ( words ); //Geben Sie alle Elemente dieser Menge mithilfe der Methode printSet() auf der Konsole aus. //Was beobachten Sie in Bezug auf die Sortierung der Elemente im Vergleich zur HashSet? printSet ( t1 ); System . out . println ( \"-------Duplicates------\" ); List < String > l2 = createArrayList ( words ); List < String > d = findDoublets ( l2 ); printList ( d ); printList ( l2 ); } } \u00dcbung 6 (Wrapper-Klassen und Maps) \u00b6 \u00dcbung 6 Erstellen Sie eine Klasse Stadt mit folgenden Objektvariablen: String name; List<Integer> bevoelkerung; float flaeche; Erstellen Sie f\u00fcr die Klasse Stadt einen parametrisierten Konstruktor public Stadt(String name, List<Integer> bevoelkerung, float flaeche) , der die Objektvariablen initialisiert. Erstellen Sie f\u00fcr die Klasse Stadt eine print() -Methode, so dass eine Ausgabe auf der Konsole in folgender Form erscheint (Bsp.): Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 Erstellen Sie eine Klasse StadtTest mit main() -Methode. Kopieren Sie in die Klasse die Methode public static Stadt[] staedte() hinein: public static Stadt [] staedte () { Stadt [] staedte = new Stadt [ 6 ] ; List < Integer > berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 0 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); List < Integer > hamburgBevoelkerung = new ArrayList <> (); hamburgBevoelkerung . add ( 1715392 ); hamburgBevoelkerung . add ( 1786448 ); hamburgBevoelkerung . add ( 1810438 ); staedte [ 1 ] = new Stadt ( \"Hamburg\" , hamburgBevoelkerung , 755.22f ); List < Integer > muenchenBevoelkerung = new ArrayList <> (); muenchenBevoelkerung . add ( 1210223 ); muenchenBevoelkerung . add ( 1353186 ); muenchenBevoelkerung . add ( 1464301 ); staedte [ 2 ] = new Stadt ( \"Muenchen\" , muenchenBevoelkerung , 310.70f ); List < Integer > koelnBevoelkerung = new ArrayList <> (); koelnBevoelkerung . add ( 962884 ); koelnBevoelkerung . add ( 1007119 ); koelnBevoelkerung . add ( 1075935 ); staedte [ 3 ] = new Stadt ( \"Koeln\" , koelnBevoelkerung , 405.02f ); List < Integer > frankfurtBevoelkerung = new ArrayList <> (); frankfurtBevoelkerung . add ( 648550 ); frankfurtBevoelkerung . add ( 679664 ); frankfurtBevoelkerung . add ( 736414 ); staedte [ 4 ] = new Stadt ( \"Frankfurt/Main\" , frankfurtBevoelkerung , 248.31f ); berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 5 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); return staedte ; } Liste Erstellen Sie in der main() -Methode eine List<Stadt> staedteListe = new ArrayList<>(); . F\u00fcgen Sie der staedteListe alle St\u00e4dte aus dem durch Aufruf der staedte() -Methode erzeugtem Array zu. Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der print() -Methode aus der Klasse Stadt aus. Menge Erstellen Sie in der main() -Methode eine Set<Stadt> staedteMenge = new HashSet<>(); . F\u00fcgen Sie der staedteMenge alle St\u00e4dte aus dem durch Aufruf der staedte() -Methode erzeugtem Array zu. Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der print() -Methode aus der Klasse Stadt aus. Berlin erscheint doppelt, obwohl eine Menge keine doppelten Elemente enthalten darf. Warum? Stadt - Teil 2 Implementieren Sie in der Klasse Stadt die equals(Object) - und die hashCode() -Methode. F\u00fchren Sie danach die StadtTest -Klasse erneut aus. Was hat sich an der Menge ge\u00e4ndert? Maps Erstellen Sie in der main() -Methode eine Map<Integer, Stadt> staedteMap = new HashMap<>(); . F\u00fcgen Sie der staedteMap einen fortlaufenden, eindeutigen Integer -Wert beginnend mit 1 als Key sowie alle alle St\u00e4dte aus dem durch Aufruf der staedte() -Methode erzeugtem Array als Value hinzu. Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der print() -Methode aus der Klasse Stadt aus. Beginnen Sie die Zeile jeweils mit der Ausgabe des Keys . Ausgaben ------------ Liste -------------- Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 ------------ Menge -------------- Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 ------------ Maps -------------- 1 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 2 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 3 Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 4 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 5 Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 6 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 die von Frau Busjahn vorkommentierten Klassen Stadt.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 //import //1. Erstellen Sie eine Klasse Stadt mit folgenden Objektvariablen: public class Stadt { String name ; List < Integer > bevoelkerung ; float flaeche ; //2. Erstellen Sie f\u00fcr die Klasse Stadt einen parametrisierten Konstruktor //public Stadt(String name, List<Integer> bevoelkerung, float flaeche), //der die Objektvariablen initialisiert. public Stadt ( String name , List < Integer > bevoelkerung , float flaeche ) { //Da es sich um einen Konstruktor einer Kindklasse handelt, sollte zuerst explizit der Konstruktor der Elternklasse aufrufen werden //kann aber wie implements erst sp\u00e4ter erg\u00e4nzt werden //Objektvariablen initialisieren this . ??? = ??? ; ... } //3. Erstellen Sie f\u00fcr die Klasse Stadt eine print()-Methode, //so dass eine Ausgabe auf der Konsole in folgender Form erscheint (Bsp.): //Berlin 891,68 km2 3.382.169 3.460.725 3.574.830 void print () { //Namen der Stadt, ihre Fl\u00e4che und \"km2\" ausgeben //mithilfe einer Schleife oder Iterator Eintr\u00e4ge der Bev\u00f6lkerungs-Liste ausgeben //Beispiel f\u00fcr Schleife: //https://freiheit.f4.htw-berlin.de/prog2/collections/#die-for-each-schleife //Beispiel f\u00fcr Iterator: //https://freiheit.f4.htw-berlin.de/prog2/collections/#listen } //Teil 2 //1. Implementieren Sie in der Klasse Stadt die equals(Object)- und die hashCode()-Methode. //F\u00fchren Sie danach die StadtTest-Klasse erneut aus. Was hat sich an der Menge ge\u00e4ndert? //Kommentieren Sie hashCode() wieder aus und f\u00fchren StadtTest erneut aus. Was \u00e4ndert sich? //Kommentieren Sie equals() wieder aus und f\u00fchren StadtTest erneut aus. Was \u00e4ndert sich? @Override public boolean equals ( Object o ) { //Es soll getestet werden, ob der Name des \u00fcbergebenen Stadt-Objekts o gleich dem Namen des aktuellen Stadt-Objekts ist //Vorher m\u00fcssen erst ein paar F\u00e4lle abgekl\u00e4rt werden: // wenn \u00fcbergebenes Objekt o null ist, gib false zur\u00fcck // wenn \u00fcbergebenes Objekt o gleich dem aktuellen Objekt der Klasse ist, gib true zur\u00fcck // wenn die Laufzeitklasse des \u00fcbergebenen Objekts o nicht gleich der Laufzeitklasse des aktuellen Objekts ist, // gib false zur\u00fcck //Wenn diese drei F\u00e4lle nicht eingetreten sind: //Stadt-Objekt anlegen vom \u00fcbergebenen Objekt o //testen ob der Name des \u00fcbergebenen Stadt-Objekts gleich dem Namen des aktuellen Stadt-Objekts ist //Ergebnis zur\u00fcckgeben } @Override public int hashCode () { //Hashcode des Stadtnamens zur\u00fcckgeben } } StadtTest.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 //import //4. Erstellen Sie eine Klasse StadtTest mit main()-Methode. //Kopieren Sie in die Klasse die Methode public static Stadt[] staedte() hinein: public class StadtTest { public static Stadt [] staedte () { Stadt [] staedte = new Stadt [ 6 ] ; List < Integer > berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 0 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); List < Integer > hamburgBevoelkerung = new ArrayList <> (); hamburgBevoelkerung . add ( 1715392 ); hamburgBevoelkerung . add ( 1786448 ); hamburgBevoelkerung . add ( 1810438 ); staedte [ 1 ] = new Stadt ( \"Hamburg\" , hamburgBevoelkerung , 755.22f ); List < Integer > muenchenBevoelkerung = new ArrayList <> (); muenchenBevoelkerung . add ( 1210223 ); muenchenBevoelkerung . add ( 1353186 ); muenchenBevoelkerung . add ( 1464301 ); staedte [ 2 ] = new Stadt ( \"Muenchen\" , muenchenBevoelkerung , 310.70f ); List < Integer > koelnBevoelkerung = new ArrayList <> (); koelnBevoelkerung . add ( 962884 ); koelnBevoelkerung . add ( 1007119 ); koelnBevoelkerung . add ( 1075935 ); staedte [ 3 ] = new Stadt ( \"Koeln\" , koelnBevoelkerung , 405.02f ); List < Integer > frankfurtBevoelkerung = new ArrayList <> (); frankfurtBevoelkerung . add ( 648550 ); frankfurtBevoelkerung . add ( 679664 ); frankfurtBevoelkerung . add ( 736414 ); staedte [ 4 ] = new Stadt ( \"Frankfurt/Main\" , frankfurtBevoelkerung , 248.31f ); berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 5 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); return staedte ; } public static void main ( String [] args ) { System . out . printf ( \"%n------------ Liste --------------%n\" ); //1. Erstellen Sie in der main()-Methode eine List<Stadt> staedteListe = new ArrayList<>();. //F\u00fcgen Sie der staedteListe alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array zu. List < Stadt > staedteListe = new ArrayList <> (); //durch staedte iterieren und die St\u00e4dte zur staedteListe hinzuf\u00fcgen //2. Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung //der print()-Methode aus der Klasse Stadt aus. //durch staedteListe iterieren und f\u00fcr jeden Eintrag die print()-Methode aufrufen System . out . printf ( \"%n------------ Menge --------------%n\" ); //1. Erstellen Sie in der main()-Methode eine Set<Stadt> staedteMenge = new HashSet<>();. Set < Stadt > staedteMenge = new HashSet <> (); //F\u00fcgen Sie der staedteMenge alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array zu. //analog zur gleichen Aufgabe mit der Liste oben //Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der //print()-Methode aus der Klasse Stadt aus. //analog zur gleichen Aufgabe mit der Liste oben //Berlin erscheint doppelt, obwohl eine Menge keine doppelten Elemente enthalten darf. Warum? System . out . printf ( \"%n------------ Maps --------------%n\" ); //1. Erstellen Sie in der main()-Methode eine Map<Integer, Stadt> staedteMap = new HashMap<>();. Map < Integer , Stadt > staedteMap = new HashMap <> (); //F\u00fcgen Sie der staedteMap einen fortlaufenden, eindeutigen Integer-Wert beginnend mit 1 als Key //sowie alle alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array als Value hinzu. //Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der print()-Methode aus der Klasse Stadt aus. //Beginnen Sie die Zeile jeweils mit der Ausgabe des Keys. //Beispiel, wie man eine Map durchgeht: https://freiheit.f4.htw-berlin.de/prog2/maps/#durch-eine-map-laufen //erst den key ausgeben //dann die Werte } } Video zu \u00dcbung 6 (Wrapper-Klassen und Maps) m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 6 (aus dem Video - mit compareTo - den Teil mit TreeSet und compareTo m\u00fcssen Sie aber nicht beachten, kommt n\u00e4chste Woche) Stadt.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 package uebungen.uebung6 ; import java.util.* ; //import //1. Erstellen Sie eine Klasse Stadt mit folgenden Objektvariablen: public class Stadt implements Comparable //Der Teil mit \"implements\" wird nicht von Anfang an ben\u00f6tigt, es kann also auch erstmal mit \"public class Stadt\" begonnen werden. //W\u00e4hrend es bei primitiven Datentypen meist eindeutig ist, ob ein Wert gr\u00f6\u00dfer, kleiner oder gleich gro\u00df ist wie ein anderer Wert, ist die Ordnung bei Objekten nicht so klar. //Daher muss Stadt Klasse ein bestimmtes Interface implementieren, um festzulegen, was verglichen werden soll. { String name ; List < Integer > bevoelkerung ; float flaeche ; //2. Erstellen Sie f\u00fcr die Klasse Stadt einen parametrisierten Konstruktor //public Stadt(String name, List<Integer> bevoelkerung, float flaeche), //der die Objektvariablen initialisiert. public Stadt ( String name , List < Integer > bevoelkerung , float flaeche ) { //Da es sich um einen Konstruktor einer Kindklasse handelt, sollte zuerst explizit der Konstruktor der Elternklasse aufrufen werden //kann aber wie implements erst sp\u00e4ter erg\u00e4nzt werden //Objektvariablen initialisieren this . name = name ; this . bevoelkerung = bevoelkerung ; this . flaeche = flaeche ; } //3. Erstellen Sie f\u00fcr die Klasse Stadt eine print()-Methode, //so dass eine Ausgabe auf der Konsole in folgender Form erscheint (Bsp.): //Berlin 891,68 km2 3.382.169 3.460.725 3.574.830 void print () { //Namen der Stadt, ihre Fl\u00e4che und \"km2\" ausgeben //mithilfe einer Schleife oder Iterator Eintr\u00e4ge der Bev\u00f6lkerungs-Liste ausgeben //Beispiel f\u00fcr Schleife: //https://freiheit.f4.htw-berlin.de/prog2/collections/#die-for-each-schleife //Beispiel f\u00fcr Iterator: //https://freiheit.f4.htw-berlin.de/prog2/collections/#listen System . out . printf ( \"%-15s %9.2f km2 \" , this . name , this . flaeche ); for ( Integer el : this . bevoelkerung ) { System . out . printf ( \"%,10d\" , el ); } System . out . println (); } //Teil 2 //1. Implementieren Sie in der Klasse Stadt die equals(Object)- und die hashCode()-Methode. //F\u00fchren Sie danach die StadtTest-Klasse erneut aus. Was hat sich an der Menge ge\u00e4ndert? //Kommentieren Sie hashCode() wieder aus und f\u00fchren StadtTest erneut aus. Was \u00e4ndert sich? //Kommentieren Sie equals() wieder aus und f\u00fchren StadtTest erneut aus. Was \u00e4ndert sich? @Override public boolean equals ( Object o ) { //Es soll getestet werden, ob der Name des \u00fcbergebenen Stadt-Objekts o gleich dem Namen des aktuellen Stadt-Objekts ist //Vorher m\u00fcssen erst ein paar F\u00e4lle abgekl\u00e4rt werden: // wenn \u00fcbergebenes Objekt o null ist, gib false zur\u00fcck // wenn \u00fcbergebenes Objekt o gleich dem aktuellen Objekt der Klasse ist, gib true zur\u00fcck // wenn die Laufzeitklasse des \u00fcbergebenen Objekts o nicht gleich der Laufzeitklasse des aktuellen Objekts ist, // gib false zur\u00fcck if ( o == null ) return false ; if ( this == o ) return true ; if ( this . getClass () != o . getClass ()) return false ; //Wenn diese drei F\u00e4lle nicht eingetreten sind: //Stadt-Objekt anlegen vom \u00fcbergebenen Objekt o //testen ob der Name des \u00fcbergebenen Stadt-Objekts gleich dem Namen des aktuellen Stadt-Objekts ist //Ergebnis zur\u00fcckgeben Stadt stadt = ( Stadt ) o ; return this . name . equals ( stadt . name ); } @Override public int hashCode () { //Hashcode des Stadtnamens zur\u00fcckgeben return this . name . hashCode (); } //Festlegen, dass der Name des \u00fcbergebenen Stadt-Objekts o mit dem Namen des aktuellen Stadt-Objekts verglichen werden soll @Override public int compareTo ( Object o ) { Stadt stadt = ( Stadt ) o ; return this . name . compareTo ( stadt . name ); } } StadtTest.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 package uebungen.uebung6 ; //import import java.util.* ; //4. Erstellen Sie eine Klasse StadtTest mit main()-Methode. //Kopieren Sie in die Klasse die Methode public static Stadt[] staedte() hinein: public class StadtTest { public static Stadt [] staedte () { Stadt [] staedte = new Stadt [ 6 ] ; List < Integer > berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 0 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); List < Integer > hamburgBevoelkerung = new ArrayList <> (); hamburgBevoelkerung . add ( 1715392 ); hamburgBevoelkerung . add ( 1786448 ); hamburgBevoelkerung . add ( 1810438 ); staedte [ 1 ] = new Stadt ( \"Hamburg\" , hamburgBevoelkerung , 755.22f ); List < Integer > muenchenBevoelkerung = new ArrayList <> (); muenchenBevoelkerung . add ( 1210223 ); muenchenBevoelkerung . add ( 1353186 ); muenchenBevoelkerung . add ( 1464301 ); staedte [ 2 ] = new Stadt ( \"Muenchen\" , muenchenBevoelkerung , 310.70f ); List < Integer > koelnBevoelkerung = new ArrayList <> (); koelnBevoelkerung . add ( 962884 ); koelnBevoelkerung . add ( 1007119 ); koelnBevoelkerung . add ( 1075935 ); staedte [ 3 ] = new Stadt ( \"Koeln\" , koelnBevoelkerung , 405.02f ); List < Integer > frankfurtBevoelkerung = new ArrayList <> (); frankfurtBevoelkerung . add ( 648550 ); frankfurtBevoelkerung . add ( 679664 ); frankfurtBevoelkerung . add ( 736414 ); staedte [ 4 ] = new Stadt ( \"Frankfurt/Main\" , frankfurtBevoelkerung , 248.31f ); berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 5 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); return staedte ; } public static void main ( String [] args ) { System . out . printf ( \"%n%n------------------------- Liste -------------------------%n%n\" ); //1. Erstellen Sie in der main()-Methode eine List<Stadt> staedteListe = new ArrayList<>();. //F\u00fcgen Sie der staedteListe alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array zu. List < Stadt > staedteListe = new ArrayList <> (); //durch staedte iterieren und die St\u00e4dte zur staedteListe hinzuf\u00fcgen Stadt [] staedte = staedte (); for ( Stadt stadt : staedte ) { staedteListe . add ( stadt ); } //2. Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung //der print()-Methode aus der Klasse Stadt aus. for ( Stadt stadt : staedteListe ) { stadt . print (); } //durch staedteListe iterieren und f\u00fcr jeden Eintrag die print()-Methode aufrufen System . out . printf ( \"%n%n------------------------- Menge -------------------------%n%n\" ); //1. Erstellen Sie in der main()-Methode eine Set<Stadt> staedteMenge = new HashSet<>();. Set < Stadt > staedteMenge1 = new HashSet <> (); //F\u00fcgen Sie der staedteMenge alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array zu. for ( Stadt stadt : staedte ()) { staedteMenge1 . add ( stadt ); } //analog zur gleichen Aufgabe mit der Liste oben //Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der //print()-Methode aus der Klasse Stadt aus. //analog zur gleichen Aufgabe mit der Liste oben for ( Stadt stadt : staedteMenge1 ) { stadt . print (); } //Berlin erscheint doppelt, obwohl eine Menge keine doppelten Elemente enthalten darf. Warum? //Notieren Sie sich die Reihenfolge, in der St\u00e4dte ausgegeben werden. //\u00c4ndern Sie den Konstruktor von HashSet<>() in TreeSet<>(). Was passiert und warum? Set < Stadt > staedteMenge2 = new TreeSet <> (); //analog zu oben System . out . printf ( \"%n%n------------------------- Maps -------------------------%n%n\" ); //1. Erstellen Sie in der main()-Methode eine Map<Integer, Stadt> staedteMap = new HashMap<>();. Map < Integer , Stadt > staedteMap = new HashMap <> (); Integer number = 1 ; for ( Stadt stadt : staedte ()) { staedteMap . put ( number , stadt ); number ++ ; } // Stadt berlin = staedte[0]; // staedteMap.put(2, berlin); //F\u00fcgen Sie der staedteMap einen fortlaufenden, eindeutigen Integer-Wert beginnend mit 1 als Key //sowie alle alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array als Value hinzu. //Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der print()-Methode aus der Klasse Stadt aus. //Beginnen Sie die Zeile jeweils mit der Ausgabe des Keys. for ( Map . Entry < Integer , Stadt > eintrag : staedteMap . entrySet ()) { System . out . printf ( \"%-3d\" , eintrag . getKey ()); Stadt stadt = eintrag . getValue (); stadt . print (); } //Beispiel, wie man eine Map durchgeht: https://freiheit.f4.htw-berlin.de/prog2/maps/#durch-eine-map-laufen //erst den key ausgeben //dann die Werte System . out . printf ( \"%n%n------------------------- Test compareTo -------------------------%n%n\" ); System . out . println ( \"Berlin\" . compareTo ( \"Anton\" )); System . out . println ( \"Anton\" . compareTo ( \"Berlin\" )); System . out . println ( \"Berlin\" . compareTo ( \"Berlin\" )); System . out . println ( \"Anton\" . compareTo ( \"Zeppelin\" )); } } eine andere m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 6 (aus der \u00dcbung von Frau Busjahn) Stadt.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 package prog2_uebungen ; import java.util.* ; //1. Erstellen Sie eine Klasse Stadt mit folgenden Objektvariablen: public class Stadt { String name ; List < Integer > bevoelkerung ; float flaeche ; //2. Erstellen Sie f\u00fcr die Klasse Stadt einen parametrisierten Konstruktor //public Stadt(String name, List<Integer> bevoelkerung, float flaeche), //der die Objektvariablen initialisiert. public Stadt ( String name , List < Integer > bevoelkerung , float flaeche ) { //Objektvariablen initialisieren this . name = name ; this . bevoelkerung = bevoelkerung ; this . flaeche = flaeche ; } //3. Erstellen Sie f\u00fcr die Klasse Stadt eine print()-Methode, //so dass eine Ausgabe auf der Konsole in folgender Form erscheint (Bsp.): //Berlin 891,68 km2 3.382.169 3.460.725 3.574.830 void print () { //Namen der Stadt, ihre Fl\u00e4che und \"km2\" ausgeben System . out . print ( name + \" \" + flaeche + \" km2 \" ); //mithilfe eines Iterator Eintr\u00e4ge der Bev\u00f6lkerungs-Liste ausgeben Iterator < Integer > it = bevoelkerung . iterator (); while ( it . hasNext ()) { System . out . print ( it . next () + \" \" ); } //Alternative mit Schleife // for(Integer i : bevoelkerung) // { // System.out.print(i + \" \"); // } System . out . println (); } //Teil 2 //1. Implementieren Sie in der Klasse Stadt die equals(Object)- und die hashCode()-Methode. //F\u00fchren Sie danach die StadtTest-Klasse erneut aus. Was hat sich an der Menge ge\u00e4ndert? @Override public boolean equals ( Object o ) { //Es soll getestet werden, ob der St\u00e4dtename des \u00fcbergebenen Objekts o gleich dem Namen des aktuellen Stadt-Objekts ist //Vorher m\u00fcssen erst ein paar F\u00e4lle abgekl\u00e4rt werden: // wenn \u00fcbergebenes Objekt o null ist, gib false zur\u00fcck if ( o == null ) return false ; // wenn \u00fcbergebenes Objekt o gleich dem aktuellen Objekt der Klasse ist, gib true zur\u00fcck, // da die St\u00e4dtenamen dann auf jeden Fall auch gleich sind if ( o == this ) return true ; // wenn die Laufzeitklasse des \u00fcbergebenen Objekts o nicht gleich der Laufzeitklasse des aktuellen Objekts ist, // gib false zur\u00fcck if ( o . getClass () != this . getClass ()) return false ; //Wenn diese drei F\u00e4lle nicht eingetreten sind: //Stadt-Objekt anlegen vom \u00fcbergebenen Objekt o Stadt other = ( Stadt ) o ; //testen ob der Name des \u00fcbergebenen Stadt-Objekts gleich dem Namen des aktuellen Stadt-Objekts ist //Ergebnis zur\u00fcckgeben return ( this . name . equals ( other . name )); } @Override public int hashCode () { //Hashcode des Stadtnamens zur\u00fcckgeben return this . name . hashCode (); } } StadtTest.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 package prog2_uebungen ; import java.util.* ; //4. Erstellen Sie eine Klasse StadtTest mit main()-Methode. //Kopieren Sie in die Klasse die Methode public static Stadt[] staedte() hinein: public class StadtTest { public static Stadt [] staedte () { Stadt [] staedte = new Stadt [ 6 ] ; List < Integer > berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 0 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); List < Integer > hamburgBevoelkerung = new ArrayList <> (); hamburgBevoelkerung . add ( 1715392 ); hamburgBevoelkerung . add ( 1786448 ); hamburgBevoelkerung . add ( 1810438 ); staedte [ 1 ] = new Stadt ( \"Hamburg\" , hamburgBevoelkerung , 755.22f ); List < Integer > muenchenBevoelkerung = new ArrayList <> (); muenchenBevoelkerung . add ( 1210223 ); muenchenBevoelkerung . add ( 1353186 ); muenchenBevoelkerung . add ( 1464301 ); staedte [ 2 ] = new Stadt ( \"Muenchen\" , muenchenBevoelkerung , 310.70f ); List < Integer > koelnBevoelkerung = new ArrayList <> (); koelnBevoelkerung . add ( 962884 ); koelnBevoelkerung . add ( 1007119 ); koelnBevoelkerung . add ( 1075935 ); staedte [ 3 ] = new Stadt ( \"Koeln\" , koelnBevoelkerung , 405.02f ); List < Integer > frankfurtBevoelkerung = new ArrayList <> (); frankfurtBevoelkerung . add ( 648550 ); frankfurtBevoelkerung . add ( 679664 ); frankfurtBevoelkerung . add ( 736414 ); staedte [ 4 ] = new Stadt ( \"Frankfurt/Main\" , frankfurtBevoelkerung , 248.31f ); berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 5 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); return staedte ; } public static void main ( String [] args ) { //staedte() genauer anschauen System . out . printf ( \"%n------------ R\u00fcckgabe von staedte() --------------%n\" ); Stadt [] staedteArray = staedte (); for ( int i = 0 ; i < staedteArray . length ; i ++ ) { Stadt s = staedteArray [ i ] ; System . out . println ( s . name + \" \" + s . flaeche + \" \" + s . bevoelkerung ); } System . out . printf ( \"%n------------ Liste --------------%n\" ); //1. Erstellen Sie in der main()-Methode eine List<Stadt> staedteListe = new ArrayList<>();. //F\u00fcgen Sie der staedteListe alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array zu. List < Stadt > staedteListe = new ArrayList <> (); //durch staedte iterieren und die St\u00e4dte zur staedteListe hinzuf\u00fcgen for ( Stadt s : staedte ()) { staedteListe . add ( s ); } //Alternative: //for (Stadt s : staedteArray) { // staedteListe.add(s); //} //2. Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung //der print()-Methode aus der Klasse Stadt aus. //durch staedteListe iterieren und f\u00fcr jeden Eintrag die print()-Methode aufrufen for ( Stadt s : staedteListe ) { s . print (); } System . out . printf ( \"%n------------ Menge --------------%n\" ); //1. Erstellen Sie in der main()-Methode eine Set<Stadt> staedteMenge = new HashSet<>();. Set < Stadt > staedteMenge = new HashSet <> (); //F\u00fcgen Sie der staedteMenge alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array zu. for ( Stadt s : staedte ()) { staedteMenge . add ( s ); } //Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der //print()-Methode aus der Klasse Stadt aus. for ( Stadt s : staedteMenge ) { s . print (); } System . out . printf ( \"%n------------ Maps --------------%n\" ); //1. Erstellen Sie in der main()-Methode eine Map<Integer, Stadt> staedteMap = new HashMap<>();. Map < Integer , Stadt > staedteMap = new HashMap <> (); //F\u00fcgen Sie der staedteMap einen fortlaufenden, eindeutigen Integer-Wert beginnend mit 1 als Key //sowie alle alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array als Value hinzu. Integer i = 1 ; //int i = 1; ginge auch, w\u00fcrde dann beim Einf\u00fcgen automtisch zu Integer umgewandelt (Auto-Boxing) for ( Stadt s : staedte ()) { staedteMap . put ( i ++ , s ); } //Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der print()-Methode aus der Klasse Stadt aus. //Beginnen Sie die Zeile jeweils mit der Ausgabe des Keys. for ( Map . Entry < Integer , Stadt > eintrag : staedteMap . entrySet ()) { System . out . print ( eintrag . getKey () + \": \" ); eintrag . getValue (). print (); } } } \u00dcbung 7 (Interfaces) \u00b6 \u00dcbung 7 Wir besch\u00e4ftigen uns nochmal mit der \u00dcbung 6, d.h. mit Stadt und StadtTest . Dieses Mal geht es uns aber mehr um die Verwendung des Interfaces Comparable . Zun\u00e4chst sind die beiden Klassen Stadt und StadtTest wie folgt gegeben (das haben wir so in \u00dcbung 6 erarbeitet - es gibt eine \u00c4nderung in StadtTest , dort benutzen wir jetzt ): Stadt.java import java.util.* ; public class Stadt { String name ; List < Integer > bevoelkerung ; float flaeche ; public Stadt ( String name , List < Integer > bevoelkerung , float flaeche ) { super (); this . name = name ; this . bevoelkerung = bevoelkerung ; this . flaeche = flaeche ; } void print () { System . out . printf ( \"%-15s %9.2f km2 \" , name , flaeche ); for ( Integer i : bevoelkerung ) { System . out . printf ( \"%,12d\" , i ); } System . out . println (); } @Override public boolean equals ( Object o ) { if ( o == null ) return false ; if ( o == this ) return true ; if ( this . getClass () != o . getClass ()) return false ; Stadt other = ( Stadt ) o ; return ( this . name . equals ( other . name )); } @Override public int hashCode () { return this . name . hashCode (); } } StadtTest.java public class StadtTest { public static Stadt [] staedte () { Stadt [] staedte = new Stadt [ 6 ] ; List < Integer > berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 0 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); List < Integer > hamburgBevoelkerung = new ArrayList <> (); hamburgBevoelkerung . add ( 1715392 ); hamburgBevoelkerung . add ( 1786448 ); hamburgBevoelkerung . add ( 1810438 ); staedte [ 1 ] = new Stadt ( \"Hamburg\" , hamburgBevoelkerung , 755.22f ); List < Integer > muenchenBevoelkerung = new ArrayList <> (); muenchenBevoelkerung . add ( 1210223 ); muenchenBevoelkerung . add ( 1353186 ); muenchenBevoelkerung . add ( 1464301 ); staedte [ 2 ] = new Stadt ( \"Muenchen\" , muenchenBevoelkerung , 310.70f ); List < Integer > koelnBevoelkerung = new ArrayList <> (); koelnBevoelkerung . add ( 962884 ); koelnBevoelkerung . add ( 1007119 ); koelnBevoelkerung . add ( 1075935 ); staedte [ 3 ] = new Stadt ( \"Koeln\" , koelnBevoelkerung , 405.02f ); List < Integer > frankfurtBevoelkerung = new ArrayList <> (); frankfurtBevoelkerung . add ( 648550 ); frankfurtBevoelkerung . add ( 679664 ); frankfurtBevoelkerung . add ( 736414 ); staedte [ 4 ] = new Stadt ( \"Frankfurt/Main\" , frankfurtBevoelkerung , 248.31f ); berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 5 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); return staedte ; } public static void main ( String [] args ) { System . out . printf ( \"%n------------ Menge --------------%n\" ); Set < Stadt > staedteMenge = new HashSet <> (); for ( Stadt s : staedte ()) { staedteMenge . add ( s ); } for ( Stadt s : staedteMenge ) { s . print (); } System . out . printf ( \"%n------------ Maps --------------%n\" ); Map < MyInteger , Stadt > staedteMap = new HashMap <> (); int i = 1 ; for ( Stadt s : staedte ()) { staedteMap . put ( new MyInteger ( i ++ ), s ); } for ( Map . Entry < MyInteger , Stadt > entry : staedteMap . entrySet ()) { MyInteger key = entry . getKey (); System . out . printf ( \"%-3d\" , key . intValue ()); entry . getValue (). print (); } } } F\u00fcr die Schl\u00fcssel in der Map benutzen wir die selbstgeschriebne Klasse MyInteger : MyInteger.java public class MyInteger { private int value ; public MyInteger ( int value ) { this . value = value ; } public int intValue () { return this . value ; } public static MyInteger valueOf ( int value ) { return new MyInteger ( value ); } } \u00c4ndern Sie in der StadtTest.java den Konstruktoraufruf der Set von HashSet nach TreeSet und f\u00fchren Sie die Klasse aus - es wird eine Exception geworfen ( Stadt cannot be cast to class java.lang.Comparable ). Implementieren Sie f\u00fcr Stadt das Interface Comparable<Stadt> so, dass nach den Namen der St\u00e4dte sortiert wird. F\u00fchren Sie dann erneut StadtTest.java aus. Es sollte folgende Ausgabe f\u00fcr die Set erzeugt werden: ------------ Menge -------------- Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 \u00c4ndern Sie compareTo() in Stadt so, dass die Namen der St\u00e4dte absteigend sortiert werden und f\u00fchren Sie dann StadtTest.java erneut aus. Es sollte folgende Ausgabe erzeugt werden: ------------ Menge -------------- Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 \u00c4ndern Sie compareTo() in Stadt so, dass die St\u00e4dte absteigend nach ihrer Fl\u00e4che sortiert werden und f\u00fchren Sie dann StadtTest.java erneut aus. Es sollte folgende Ausgabe erzeugt werden: ------------ Menge -------------- Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 \u00c4ndern Sie in der StadtTest.java den Konstruktoraufruf der Map von HashMap nach TreeMap und f\u00fchren Sie die Klasse aus - es wird eine Exception geworfen ( MyInteger cannot be cast to class java.lang.Comparable ). Implementieren Sie f\u00fcr MyInteger das Interface Comparable<MyInteger> so, dass nach den Gr\u00f6\u00dfen der Werte sortiert wird. F\u00fchren Sie dann erneut StadtTest.java aus. Es sollte folgende Ausgabe f\u00fcr die Map erzeugt werden: ------------ Maps -------------- 1 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 2 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 3 Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 4 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 5 Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 6 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 \u00c4ndern Sie compareTo() in MyInteger so, dass die Werte der Schl\u00fcssel absteigend sortiert werden und f\u00fchren Sie dann StadtTest.java erneut aus. Es sollte folgende Ausgabe erzeugt werden: ------------ Maps -------------- 6 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 5 Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 4 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 3 Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 2 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 1 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 Zusatz : Schreiben Sie in StadtTest.java eine Methode public static boolean contains(Map<MyInteger, Stadt> staedteMap, Stadt stadt) , die ein true zur\u00fcckgibt, wenn die Stadt stadt bereits in der staedteMap als ein value existiert. Tipp : Die Methode get(Object key) aus Map gibt den zu key geh\u00f6rigen value zur\u00fcck und mit keySet() bekommt man die Menge aller keys aus der Map ermittelt. Testen Sie die Methode, indem Sie zur Menge nur dann die stadt hinzuf\u00fcgen, wenn sie nicht bereits in der Menge aufgef\u00fchrt ist. Sie sollten folgende Ausgabe erhalten: ------------ Maps -------------- 5 Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 4 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 3 Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 2 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 1 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 Vorkommentierte Klassen : Stadt.java import java.util.* ; //3. Implementieren Sie f\u00fcr Stadt das Interface Comparable<Stadt> so, //dass nach den Namen der St\u00e4dte sortiert wird. public class Stadt implements ?/ extends ? Comparable < Stadt > { String name ; List < Integer > bevoelkerung ; float flaeche ; public Stadt ( String name , List < Integer > bevoelkerung , float flaeche ) { super (); this . name = name ; this . bevoelkerung = bevoelkerung ; this . flaeche = flaeche ; } void print () { System . out . printf ( \"%-15s %9.2f km2 \" , name , flaeche ); for ( Integer i : bevoelkerung ) { System . out . printf ( \"%,12d\" , i ); } System . out . println (); } @Override public boolean equals ( Object o ) { if ( o == null ) return false ; if ( o == this ) return true ; if ( this . getClass () != o . getClass ()) return false ; Stadt other = ( Stadt ) o ; return ( this . name . equals ( other . name )); } @Override public int hashCode () { return this . name . hashCode (); } //3. \u00c4ndern Sie compareTo() in Stadt so, dass nach den Namen der //St\u00e4dte sortiert werden kann. //4. \u00c4ndern Sie compareTo() in Stadt so, dass die Namen der //St\u00e4dte absteigend sortiert werden //5. \u00c4ndern Sie compareTo() in Stadt so, //dass die St\u00e4dte absteigend nach ihrer Fl\u00e4che sortiert werden. //Beispiel aus dem Script //@Override //public int compareTo(Circle o) { // if(this.radius > o.radius) return 1; // else if(this.radius < o.radius) return -1; // else return 0; // this.radius == o.radius //} @Override public int compareTo ( ??? ??? ) { } } StadtTest.java import java.util.* ; public class StadtTest { public static Stadt [] staedte () { Stadt [] staedte = new Stadt [ 6 ] ; List < Integer > berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 0 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); List < Integer > hamburgBevoelkerung = new ArrayList <> (); hamburgBevoelkerung . add ( 1715392 ); hamburgBevoelkerung . add ( 1786448 ); hamburgBevoelkerung . add ( 1810438 ); staedte [ 1 ] = new Stadt ( \"Hamburg\" , hamburgBevoelkerung , 755.22f ); List < Integer > muenchenBevoelkerung = new ArrayList <> (); muenchenBevoelkerung . add ( 1210223 ); muenchenBevoelkerung . add ( 1353186 ); muenchenBevoelkerung . add ( 1464301 ); staedte [ 2 ] = new Stadt ( \"Muenchen\" , muenchenBevoelkerung , 310.70f ); List < Integer > koelnBevoelkerung = new ArrayList <> (); koelnBevoelkerung . add ( 962884 ); koelnBevoelkerung . add ( 1007119 ); koelnBevoelkerung . add ( 1075935 ); staedte [ 3 ] = new Stadt ( \"Koeln\" , koelnBevoelkerung , 405.02f ); List < Integer > frankfurtBevoelkerung = new ArrayList <> (); frankfurtBevoelkerung . add ( 648550 ); frankfurtBevoelkerung . add ( 679664 ); frankfurtBevoelkerung . add ( 736414 ); staedte [ 4 ] = new Stadt ( \"Frankfurt/Main\" , frankfurtBevoelkerung , 248.31f ); berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 5 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); return staedte ; } //Zusatz: Schreiben Sie in StadtTest.java eine Methode //public static boolean contains(Map<MyInteger, Stadt> staedteMap, Stadt stadt), //die ein true zur\u00fcckgibt, wenn die Stadt stadt bereits in der staedteMap als ein //value existiert. //Tipp: Die Methode get(Object key) aus Map gibt den zu key geh\u00f6rigen value zur\u00fcck //und mit keySet() bekommt man die Menge aller keys aus der Map ermittelt. //Testen Sie die Methode, indem Sie zur Menge nur dann die stadt hinzuf\u00fcgen, //wenn sie nicht bereits in der Menge aufgef\u00fchrt ist. public static boolean contains ( Map < MyInteger , Stadt > staedteMap , Stadt stadt ) { //alle Schl\u00fcssel ermitteln mit keySet() //durch alle Schl\u00fcssel iterieren und testen ob der jeweilige Schl\u00fcssel //gleich der \u00fcbergebenen Stadt ist //wird die Stadt gefunden -> return true, sonst false } public static void main ( String [] args ) { System . out . printf ( \"%n------------ Menge --------------%n\" ); //3. \u00c4ndern Sie in der StadtTest.java den Konstruktoraufruf der //Set von HashSet nach TreeSet und f\u00fchren Sie die Klasse aus - //es wird eine Exception geworfen (Stadt cannot be cast to //class java.lang.Comparable). Set < Stadt > staedteMenge = new HashSet <> (); for ( Stadt s : staedte ()) { staedteMenge . add ( s ); } for ( Stadt s : staedteMenge ) { s . print (); } System . out . printf ( \"%n------------ Maps --------------%n\" ); //6. \u00c4ndern Sie in der StadtTest.java den Konstruktoraufruf der Map von //HashMap nach TreeMap und f\u00fchren Sie die Klasse aus - es wird eine Exception // geworfen (MyInteger cannot be cast to class java.lang.Comparable). Map < MyInteger , Stadt > staedteMap = new HashMap <> (); int i = 1 ; for ( Stadt s : staedte ()) { //f\u00fcr die Zusatzaufgabe muss hier noch gepr\u00fcft werden, ob s bereits in //der Map vorhanden ist, daf\u00fcr wird die contains-Methode ben\u00f6tigt staedteMap . put ( new MyInteger ( i ++ ), s ); } for ( Map . Entry < MyInteger , Stadt > entry : staedteMap . entrySet ()) { MyInteger key = entry . getKey (); System . out . printf ( \"%-3d\" , key . intValue ()); entry . getValue (). print (); } } } MyInteger.java //6. Implementieren Sie f\u00fcr MyInteger das Interface Comparable<MyInteger> so, //dass nach den Gr\u00f6\u00dfen der Werte sortiert wird. public class MyInteger implements ?/ extends ? ???<???> { private int value ; public MyInteger ( int value ) { this . value = value ; } public int intValue () { return this . value ; } public static MyInteger valueOf ( int value ) { return new MyInteger ( value ); } //7. \u00c4ndern Sie compareTo() in MyInteger so, dass //die Werte der Schl\u00fcssel absteigend sortiert werden. //Beispiel aus dem Script f\u00fcr AUFsteigend sortiert: //public int compareTo(Rectangle o) { // int diff = (this.height+this.width) - (o.height+o.width); // return diff; //} @Override public int compareTo ( ??? ??? ) { } } m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 7 Stadt.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 package uebungen.uebung7 ; import java.util.* ; public class Stadt implements Comparable < Stadt > { String name ; List < Integer > bevoelkerung ; float flaeche ; public Stadt ( String name , List < Integer > bevoelkerung , float flaeche ) { super (); this . name = name ; this . bevoelkerung = bevoelkerung ; this . flaeche = flaeche ; } void print () { System . out . printf ( \"%-15s %9.2f km2 \" , name , flaeche ); for ( Integer i : bevoelkerung ) { System . out . printf ( \"%,12d\" , i ); } System . out . println (); } @Override public boolean equals ( Object o ) { if ( o == null ) return false ; if ( o == this ) return true ; if ( this . getClass () != o . getClass ()) return false ; Stadt other = ( Stadt ) o ; return ( this . name . equals ( other . name )); } @Override public int hashCode () { return this . name . hashCode (); } @Override public int compareTo ( Stadt o ) { if ( this . flaeche < o . flaeche ) return 1 ; else if ( this . flaeche > o . flaeche ) return - 1 ; else return 0 ; } } StadtTest.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 package uebungen.uebung7 ; import java.util.* ; public class StadtTest { public static Stadt [] staedte () { Stadt [] staedte = new Stadt [ 6 ] ; List < Integer > berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 0 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); List < Integer > hamburgBevoelkerung = new ArrayList <> (); hamburgBevoelkerung . add ( 1715392 ); hamburgBevoelkerung . add ( 1786448 ); hamburgBevoelkerung . add ( 1810438 ); staedte [ 1 ] = new Stadt ( \"Hamburg\" , hamburgBevoelkerung , 755.22f ); List < Integer > muenchenBevoelkerung = new ArrayList <> (); muenchenBevoelkerung . add ( 1210223 ); muenchenBevoelkerung . add ( 1353186 ); muenchenBevoelkerung . add ( 1464301 ); staedte [ 2 ] = new Stadt ( \"Muenchen\" , muenchenBevoelkerung , 310.70f ); List < Integer > koelnBevoelkerung = new ArrayList <> (); koelnBevoelkerung . add ( 962884 ); koelnBevoelkerung . add ( 1007119 ); koelnBevoelkerung . add ( 1075935 ); staedte [ 3 ] = new Stadt ( \"Koeln\" , koelnBevoelkerung , 405.02f ); List < Integer > frankfurtBevoelkerung = new ArrayList <> (); frankfurtBevoelkerung . add ( 648550 ); frankfurtBevoelkerung . add ( 679664 ); frankfurtBevoelkerung . add ( 736414 ); staedte [ 4 ] = new Stadt ( \"Frankfurt/Main\" , frankfurtBevoelkerung , 248.31f ); berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 5 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); return staedte ; } public static boolean contains ( Map < MyInteger , Stadt > staedteMap , Stadt stadt ) { Set < MyInteger > allKeys = staedteMap . keySet (); for ( MyInteger key : allKeys ) { if ( staedteMap . get ( key ). equals ( stadt )) return true ; } return false ; } public static void main ( String [] args ) { System . out . printf ( \"%n------------ Menge --------------%n\" ); Set < Stadt > staedteMenge = new TreeSet <> (); for ( Stadt s : staedte ()) { staedteMenge . add ( s ); } for ( Stadt s : staedteMenge ) { s . print (); } System . out . printf ( \"%n------------ Maps --------------%n\" ); Map < MyInteger , Stadt > staedteMap = new TreeMap <> (); int i = 1 ; for ( Stadt s : staedte ()) { if ( ! contains ( staedteMap , s )) { staedteMap . put ( new MyInteger ( i ++ ), s ); } } for ( Map . Entry < MyInteger , Stadt > entry : staedteMap . entrySet ()) { MyInteger key = entry . getKey (); System . out . printf ( \"%-3d\" , key . intValue ()); entry . getValue (). print (); } } } MyInteger.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package uebungen.uebung7 ; public class MyInteger implements Comparable < MyInteger > { private int value ; public MyInteger ( int value ) { this . value = value ; } public int intValue () { return this . value ; } public static MyInteger valueOf ( int value ) { return new MyInteger ( value ); } @Override public int compareTo ( MyInteger o ) { return - ( this . value - o . value ); } } m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 7 - aus der \u00dcbung von Frau Busjahn Stadt.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 package uebungen.uebung7 ; import java.util.* ; public class Stadt implements Comparable < Stadt > { String name ; List < Integer > bevoelkerung ; float flaeche ; public Stadt ( String name , List < Integer > bevoelkerung , float flaeche ) { super (); this . name = name ; this . bevoelkerung = bevoelkerung ; this . flaeche = flaeche ; } void print () { System . out . printf ( \"%-15s %9.2f km2 \" , name , flaeche ); for ( Integer i : bevoelkerung ) { System . out . printf ( \"%,12d\" , i ); } System . out . println (); } @Override public boolean equals ( Object o ) { if ( o == null ) return false ; if ( o == this ) return true ; if ( this . getClass () != o . getClass ()) return false ; Stadt other = ( Stadt ) o ; return ( this . name . equals ( other . name )); } @Override public int hashCode () { return this . name . hashCode (); } @Override public int compareTo ( Stadt o ) { //Um aufsteigend nach Stadtnamen zu sortieren: //return this.name.compareTo(o.name); //Um absteigend nach Stadtnamen zu sortieren: //return -this.name.compareTo(o.name); //Um anhand der Fl\u00e4che absteigend zu sortieren: if ( this . flaeche < o . flaeche ) return 1 ; else if ( this . flaeche > o . flaeche ) return - 1 ; else return 0 ; //Alternativen: //return this.flaeche < o.flaeche ? 1: (this.flaeche == o.flaeche ? 0 : -1); //Float f1 = this.flaeche; //Float f2 = o.flaeche; //return -f1.compareTo(f2); } } StadtTest.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 package uebungen.uebung7 ; import java.util.* ; public class StadtTest { public static Stadt [] staedte () { Stadt [] staedte = new Stadt [ 6 ] ; List < Integer > berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 0 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); List < Integer > hamburgBevoelkerung = new ArrayList <> (); hamburgBevoelkerung . add ( 1715392 ); hamburgBevoelkerung . add ( 1786448 ); hamburgBevoelkerung . add ( 1810438 ); staedte [ 1 ] = new Stadt ( \"Hamburg\" , hamburgBevoelkerung , 755.22f ); List < Integer > muenchenBevoelkerung = new ArrayList <> (); muenchenBevoelkerung . add ( 1210223 ); muenchenBevoelkerung . add ( 1353186 ); muenchenBevoelkerung . add ( 1464301 ); staedte [ 2 ] = new Stadt ( \"Muenchen\" , muenchenBevoelkerung , 310.70f ); List < Integer > koelnBevoelkerung = new ArrayList <> (); koelnBevoelkerung . add ( 962884 ); koelnBevoelkerung . add ( 1007119 ); koelnBevoelkerung . add ( 1075935 ); staedte [ 3 ] = new Stadt ( \"Koeln\" , koelnBevoelkerung , 405.02f ); List < Integer > frankfurtBevoelkerung = new ArrayList <> (); frankfurtBevoelkerung . add ( 648550 ); frankfurtBevoelkerung . add ( 679664 ); frankfurtBevoelkerung . add ( 736414 ); staedte [ 4 ] = new Stadt ( \"Frankfurt/Main\" , frankfurtBevoelkerung , 248.31f ); berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 5 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); return staedte ; } public static boolean contains ( Map < MyInteger , Stadt > staedteMap , Stadt stadt ) { Set < MyInteger > allKeys = staedteMap . keySet (); for ( MyInteger key : allKeys ) { if ( staedteMap . get ( key ). equals ( stadt )) return true ; } //Alternative ohne keyset //for(Map.Entry<MyInteger, Stadt> entry : staedteMap.entrySet()) //{ // if (entry.getValue().equals(stadt)) return true; //} return false ; } public static void main ( String [] args ) { System . out . printf ( \"%n------------ Menge --------------%n\" ); Set < Stadt > staedteMenge = new TreeSet <> (); for ( Stadt s : staedte ()) { staedteMenge . add ( s ); } for ( Stadt s : staedteMenge ) { s . print (); } System . out . printf ( \"%n------------ Maps --------------%n\" ); Map < MyInteger , Stadt > staedteMap = new TreeMap <> (); int i = 1 ; for ( Stadt s : staedte ()) { if ( ! contains ( staedteMap , s )) { staedteMap . put ( new MyInteger ( i ++ ), s ); } } for ( Map . Entry < MyInteger , Stadt > entry : staedteMap . entrySet ()) { MyInteger key = entry . getKey (); System . out . printf ( \"%-3d\" , key . intValue ()); entry . getValue (). print (); } } } MyInteger.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package uebungen.uebung7 ; public class MyInteger implements Comparable < MyInteger > { private int value ; public MyInteger ( int value ) { this . value = value ; } public int intValue () { return this . value ; } public static MyInteger valueOf ( int value ) { return new MyInteger ( value ); } @Override public int compareTo ( MyInteger o ) { return - ( this . value - o . value ); //Alternative: //if(this.value > o.value) return -1; //else if(this.value < o.value) return 1; //else return 0; } } \u00dcbung 8 (GUI) \u00b6 \u00dcbung 8 Erstellen Sie folgende GUI: vorkommentierte Klasse GUIUebung.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 //import public class GUIUebung extends JFrame { public GUIUebung () { super (); //Titel //Verhalten beim Schlie\u00dfen //Gr\u00f6\u00dfe //Sichtbarkeit //... //gute Vorlage: //https://freiheit.f4.htw-berlin.de/prog2/gui/#erweitern-des-fensters-um-ein-jpanel } private JPanel initContent () { //Ein paar Tipps: //mehrere Panels verwenden //JTextField hat verschiedene Konstruktoren, nicht nur JTextField(int columns) //Rahmen k\u00f6nnen mit BorderFactory erzeugt werden //Beim FlowLayout \u00e4ndert sich die Gr\u00f6\u00dfe der Steuerelemente nicht, //bei GridLayout passt sich die Gr\u00f6\u00dfe an den Container an } public static void main ( String [] args ) { new GUIUebung (); } } m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 8 Uebung8.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 package uebungen.uebung8 ; import java.awt.* ; import javax.swing.* ; import javax.swing.border.Border ; public class Uebung8 extends JFrame { public Uebung8 () { super (); this . setTitle ( \"GUI \u00dcbung\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel content = this . initContent (); this . getContentPane (). add ( content ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private JPanel initContent () { JPanel mainPanel = new JPanel (); mainPanel . setLayout ( new BorderLayout ()); Border redline = BorderFactory . createLineBorder ( Color . RED ); JPanel oben = new JPanel (); oben . setLayout ( new FlowLayout ()); JLabel text1 = new JLabel ( \"Text\" ); text1 . setForeground ( Color . WHITE ); oben . add ( text1 ); oben . setBackground ( Color . BLUE ); oben . setBorder ( redline ); JPanel links = new JPanel (); links . setLayout ( new FlowLayout ( FlowLayout . CENTER , 50 , 50 )); JLabel text2 = new JLabel ( \"Weiterer Text\" ); links . add ( text2 ); JTextField input = new JTextField ( \"Feld\" , 10 ); links . add ( input ); links . setBackground ( Color . LIGHT_GRAY ); JPanel rechts = new JPanel (); rechts . setLayout ( new GridLayout ( 2 , 1 , 20 , 20 )); rechts . add ( new JButton ( \"Button 1\" )); rechts . add ( new JButton ( \"Button 2\" )); rechts . setBackground ( Color . LIGHT_GRAY ); mainPanel . add ( oben , BorderLayout . NORTH ); mainPanel . add ( links , BorderLayout . CENTER ); mainPanel . add ( rechts , BorderLayout . EAST ); return mainPanel ; } public static void main ( String [] args ) { new Uebung8 (); } } sehr hilfreiche Grafiken zur \u00dcbung von Frau Busjahn Unterscheidung zwischen Containern und Steuerelementen: Visualisierung der Panels (Container) in der GUI der \u00dcbung \u00dcbung 9 (Ereignisbehandlung - ActionListener) \u00b6 \u00dcbung 9 Erstellen Sie ein Fenster mit einem Textfeld und zwei Buttons add und remove . Sowohl das Textfeld als auch die beiden Buttons sollen Objektvariablen (und somit zugreifbar von allen Methoden der Klasse) sein. Unterteilen Sie das main - JPanel zun\u00e4chst in zwei JPanel s unten und oben . Dem JPanel oben werden das Textfeld und die beiden Buttons hinzugef\u00fcgt. Setzen Sie die Hintergrundfarbe des JPanels oben auf YELLOW . Setzen Sie die Hintergrundfarbe des JPanels unten auf CYAN . Das JPanel unten soll ebenfalls eine Objektvariable sein. Setzen Sie die Gr\u00f6\u00dfe des Fensters auf Werte, so dass es wie folgt erscheint: F\u00fcgen Sie folgende Objektvariable hinzu: List<JLabel> labels = new ArrayList<>(); Implementieren Sie den ActionListener wie folgt: Wird der add -Button gedr\u00fcckt, wird der Liste labels ein JLabel hinzugef\u00fcgt, wobei der Text des JLabels dem Text im Textfeld entspricht (der Text des Textfeldes kann \u00fcber die Objektmethode getText() von JTextField ausgelesen werden). Die Liste labels wird vollst\u00e4ndig ausgelesen und jedes JLabel aus labels wird dem JPanel unten mithilfe der add() -Methode von JPanel hinzugef\u00fcgt. Rufen Sie this.unten.revalidate(); auf \u2013 dies st\u00f6\u00dft ein Neuzeichnen des JPanels unten an. Wird der \u201eremove\u201c-Button gedr\u00fcckt, wird das JLabel aus der Liste labels gel\u00f6scht, das den gleichen Text hat wie der Text, der im Textfeld eingegeben wurde. Au\u00dferdem wird das JLabel aus den JPanel unten entfernt (Objektmethode remove() von JPanel ). Rufen Sie this.unten.revalidate(); auf \u2013 dies st\u00f6\u00dft ein Neuzeichnen des JPanels unten an. Tipp : wenn Sie einem JLabel eine Hintergrundfarbe mit setBackground(Color c) setzen, dann sieht man diese nur, wenn Sie f\u00fcr dieses JLabel die Methode setOpaque(true) aufrufen. Nur dadurch werden f\u00fcr dieses JLabel alle Pixel gezeichnet, die in dessen Grenzen sind, d.h. das komplette Rechteck, das das JLabel ausf\u00fcllt. Ansonsten w\u00fcrde nur der Text \"gezeichnet\" und die Hintergrundfarbe w\u00e4re hinter dem Text versteckt. vorkommentierte Klasse Uebung9.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 //import public class Uebung9 // es werden JFrame und ActionListener ben\u00f6tigt { //Objektvariablen: //1. Textfeld, zwei Buttons (add und remove) //2. unteres Panel //4. Liste mit Labeln public Uebung9 () { super ( \"TITEL\" ); //Verhalten beim Schlie\u00dfen //Gr\u00f6\u00dfe //Sichtbarkeit //... //2. main-JPanel in JPanels unten und oben unterteilen //Dem Panel oben werden das Textfeld und die beiden Buttons hinzugef\u00fcgt, //das lagern wir in die Methode createOben() aus //oben: Hintergrundfarbe ist YELLOW //unten: Hintergrundfarbe ist CYAN //Das Panel unten soll ebenfalls eine Objektvariable sein. //4. neue ArrayList f\u00fcr die Label anlegen } private JPanel createOben () { //... return panel ; } @Override public void actionPerformed ( ActionEvent e ) { //Quelle des Events ermitteln //Falls es der \"add\"-Button ist // - Text aus dem Textfeld \u00fcbernehmen // - neues Label mit dem Text anlegen // - das Label formatieren (Hintergrundfarbe RED) // Tipp: wenn Sie einem JLabel eine Hintergrundfarbe mit setBackground(Color c) // setzen, dann sieht man diese nur, wenn Sie f\u00fcr dieses JLabel die Methode // setOpaque(true) aufrufen. Nur dadurch werden f\u00fcr dieses JLabel alle Pixel // gezeichnet, die in dessen Grenzen sind, d.h. das komplette Rechteck, // das das JLabel ausf\u00fcllt. Ansonsten w\u00fcrde nur der Text \"gezeichnet\" und // die Hintergrundfarbe w\u00e4re hinter dem Text versteckt. // - das Label in Label-Liste einf\u00fcgen // - das Label dem unteren Panel hinzuf\u00fcgen //Falls es der \"remove\"-Button ist // - Text aus dem Textfeld \u00fcbernehmen // - durch die Label-Liste iterieren, um das zu entfernende Label zu finden // Tipp: Iterator nehmen // Iterator<Typ> it = variable.iterator(); // while(it.hasNext()){ // mach irgendwas mit it.next() // } // das Label muss sowohl aus der Liste als auch aus dem Panel entfernt werden //Text im Textfeld l\u00f6schen //weitere n\u00f6tige Schritte requestFocus(), revalidate(), repaint() } public static void main ( String [] args ) { new Uebung9 (); } } eine m\u00f6gliche L\u00f6sung (aus der Morgen\u00fcbung - danke an Frau Schippl) Uebung9.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 package uebungen.uebung9 ; import java.awt.Color ; import java.awt.GridLayout ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.util.ArrayList ; import java.util.Iterator ; import java.util.List ; import javax.swing.* ; public class Uebung9 extends JFrame implements ActionListener { //Objektvariablen hier erstellen, damit die f\u00fcr alle Methoden verf\u00fcgbar sind, also in der initContent(), auch ActionEvent() JTextField textfeld ; JButton b1 ; JButton b2 ; List < JLabel > labels = new ArrayList <> (); //Collection, Liste voll mit labels JPanel unten ; public Uebung9 () { super (); this . setTitle ( \"Elemente hinzuf\u00fcgen\" ); this . setDefaultCloseOperation ( EXIT_ON_CLOSE ); //Steuerelemente : Buttons, Label, ... //Container: JPanel JPanel panel = this . initContent (); this . getContentPane (). add ( panel ); //Steuerelemente dem Container hinzuf\u00fcgen this . setSize ( 400 , 100 ); this . setLocation ( 200 , 300 ); this . setVisible ( true ); } public JPanel initContent () { JPanel main = new JPanel (); main . setLayout ( new GridLayout ( 2 , 1 )); //Bei grid + flowLayout spielt die Reihenfolge eine Rolle! JPanel oben = new JPanel (); this . textfeld = new JTextField ( 10 ); this . b1 = new JButton ( \"add\" ); this . b1 . setActionCommand ( \"add\" ); //doppelmoppel, aber falls Text kryptisch, dann wird setAytionCommans benutzt!! this . b2 = new JButton ( \"remove\" ); oben . setBackground ( Color . YELLOW ); oben . add ( this . textfeld ); oben . add ( this . b1 ); oben . add ( this . b2 ); this . b1 . addActionListener ( this ); this . b2 . addActionListener ( this ); main . add ( oben ); this . unten = new JPanel (); unten . setBackground ( Color . CYAN ); main . add ( unten ); return main ; } public static void main ( String [] args ) { new Uebung9 (); } @Override public void actionPerformed ( ActionEvent e ) //HINZUF\u00dcGEN ZUM PANEL!!!! { //System.out.println(\"Test..\"); IMMER TESTEN ZUERST!!!! Object quelle = e . getSource (); if ( quelle instanceof JButton ) //Ist es ein JBUTTON? { JButton button = ( JButton ) quelle ; //\u00fcberpr\u00fcfen, ob JButton und was f\u00fcr ein Button geklickt wird if ( button . getActionCommand (). equals ( \"add\" )) { JLabel neu = new JLabel ( this . textfeld . getText ()); neu . setOpaque ( true ); neu . setBackground ( Color . RED ); neu . setForeground ( Color . WHITE ); this . labels . add ( neu ); //Liste hinzugef\u00fcgt //Textfeld auslesen, dannJLabel erzeugen -> Liste hinzuf\u00fcgen //Textfeld mit \"Hallo\" bef\u00fc\u00fclen, dann add-Button -> Ausgabe erscheint this . unten . add ( neu ); //JPanel hinzugef\u00fcgt System . out . println ( this . textfeld . getText ()); //Text aus Textfeld erscheint auf konsole System . out . println ( \"Add - Button geklickt...\" ); //Ist es ein add-Button? } else if ( button . getActionCommand (). equals ( \"remove\" )) { String inputText = this . textfeld . getText (); //Text aus Textfeld wird zwischen gespeichert Iterator < JLabel > it = this . labels . iterator (); //laufen durch Liste while ( it . hasNext ()) //Element in der Liste? { JLabel aktLabel = it . next (); //wir holen das ELement aus der Liste, wir betrachten es if ( aktLabel . getText (). equals ( inputText )) //Was f\u00fcr einen text in diesem label? + vergleichen den Text mit dem Text im Textfeld { it . remove (); //wenn gleich/schon vorhanden, dann l\u00f6schen this . unten . remove ( aktLabel ); //wird auch ausJPanel gel\u00f6scht } } System . out . println ( \"Remove - Button geklickt..\" ); //ist es ein remove Button? } this . unten . revalidate (); //zeichnet Fenster nochmal neu this . unten . repaint (); } } } \u00dcbung 10 (Zeichnen) \u00b6 \u00dcbung 10 Zeichnen Sie ein Quadrat. Passen Sie dieses Quadrat m\u00f6glichst passend in das Fenster. Da es sich um ein Quadrat handelt, kann es sich nur der H\u00f6he oder der Breite des Fensters anpassen, je nachdem, was kleiner ist. Wenn die H\u00f6he kleiner ist, als die Breite, dann soll das Quadrat ausgef\u00fcllt sein. Wenn die Breite kleiner als die H\u00f6he ist, dann soll das Quadrat nicht ausgef\u00fcllt sein, aber die Linienst\u00e4rke auf 5.0f gesetzt werden. Die Zeichenfarbe soll zuf\u00e4llig erzeugt werden - jedes Mal, wenn die paintComponent() -Methode aufgerufen wird. Beobachten Sie anhand des Farbwechsels, wie oft die paintComponent() -Methode aufgerufen wird. vorkommentierte Klasse Uebung10.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 //import public class Uebung10 extends JFrame { public Uebung10 () { //Titel, Verhalten beim Schlie\u00dfen ... //neue Leinwand (Canvas) anlegen und dem Fenster hinzuf\u00fcgen //Gr\u00f6\u00dfe, Location, Sichtbarkeit } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { // Implementierung von JPanel aufrufen // Methoden von Graphics2D nutzbar machen //Zuf\u00e4llige Werte f\u00fcr Rot, Gr\u00fcn und Blau erzeugen //Kleine Hilfe: //https://www.tutorialspoint.com/java/util/random_nextint_inc_exc.htm //public Color(int r, int g, int b) //falls die H\u00f6he des Fensters kleiner ist, als die Breite //L\u00e4nge der Seiten an H\u00f6he anpassen //Quadrat ausgef\u00fcllt //sonst //L\u00e4nge der Seiten an Breite anpassen //Quadrat nicht ausgef\u00fcllt, Linienst\u00e4rke 5.0f } } public static void main ( String [] args ) { new Uebung10 (); } } eine m\u00f6gliche L\u00f6sung (aus der Morgen\u00fcbung - danke an Frau Schippl) Uebung10.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 package uebungen.uebung10 ; import java.awt.BasicStroke ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.util.Random ; import javax.swing.* ; public class Uebung10 extends JFrame { public Uebung10 () { super (); this . setTitle ( \"\u00dcbung10\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). add ( new Canvas ()); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; //g2.drawRect(20, 130, 200, 100); int abstand = this . getHeight () / 20 ; int hoehe = this . getHeight () - 2 * abstand ; int breite = this . getWidth () - 2 * abstand ; //Random Farben erzeugen: Random r = new Random (); int rot = r . nextInt ( 256 ); int gruen = r . nextInt ( 256 ); int blau = r . nextInt ( 256 ); Color c = new Color ( rot , gruen , blau ); g2 . setColor ( c ); //rot-Gr\u00fcn-Blau 0 bis 255 // Quadrat zeichnen if ( hoehe < breite ) { int abstandLinks = ( this . getWidth () - hoehe ) / 2 ; g2 . fillRect ( abstandLinks , abstand , hoehe , hoehe ); } else { int abstandOben = ( this . getHeight () - breite ) / 2 ; g2 . setStroke ( new BasicStroke ( 5.0f )); //dicke Linien g2 . drawRect ( abstand , abstandOben , breite , breite ); } } } public static void main ( String [] args ) { new Uebung10 (); } } sehr hilfreiche Erl\u00e4uterungen zur \u00dcbung von Frau Busjahn Wenn man keine Abst\u00e4nde definiert und die gesamte H\u00f6he als Seitenl\u00e4nge nimmt: g2 . fillRect ( 0 , 0 , this . getHeight (), this . getHeight ()); Beispiel f\u00fcr H\u00f6he < Breite Um oben und unten gleich gro\u00dfe Abst\u00e4nde einzufu\u0308gen: int abstandOben = this . getHeight () / 20 ; int abstandUnten = this . getHeight () / 20 ; int seitenLaenge = this . getHeight () - abstandOben - abstandUnten ; g2 . fillRect ( 0 , abstandOben , seitenLaenge , seitenLaenge ); ``` Da abstandOben und abstandUnten gleich sein sollen, l\u00e4sst sich das verku\u0308rzen zu: int abstandObenUnten = this . getHeight () / 20 ; int seitenLaenge = this . getHeight () - ( 2 * abstandObenUnten ); g2 . fillRect ( 0 , abstandObenUnten , seitenLaenge , seitenLaenge ); Um das Quadrat auch horizontal mittig auszurichten, braucht man noch den Abstand links int rest = this . getWidth () - seitenLaenge ; int links = rest / 2 ; oder zusammengefasst: int links = ( this . getWidth () - seitenLaenge ) / 2 ; g2 . fillRect ( links , abstandObenUnten , seitenLaenge , seitenLaenge ); \u00dcbung 11 (Mausereignisse) \u00b6 \u00dcbung 11 Zeichnen Sie mithilfe der Maus farbige Rechtecke. Das Zeichnen soll folgenderma\u00dfen funktionieren: dort, wo sie mit der Maus in die Zeichenfl\u00e4che klicken, ist ein Eckpunkt des Rechtecks mit gedr\u00fcckter Maustaste ziehen Sie das Rechteck gro\u00df (w\u00e4hrenddessen soll das Rechteck dargestellt werden) durch Loslassen der Maustaste legen Sie die endg\u00fcltige Gr\u00f6\u00dfe des Rechtecks fest und speichern das Rechteck durch wiederholtes Zeichnen werden mehrere Rechtecke gezeichnet. Die zuvor gezeichneten Rechtecke bleiben dargestellt jedes Rechteck hat eine zuf\u00e4llig erzeugte Farbe beachten Sie, dass das Zeichnen eines Rechtecks nicht nur von links oben nach rechts unten, sondern in alle Richtungen m\u00f6glich sein soll Tipps: studieren Sie dieses Beispiel behandeln Sie die Mausereignisse in den Methoden mousePressed() , mouseReleased() ( MouseListener ) sowie aus dem MouseMotionListener mouseDragged() erstellen Sie sich zun\u00e4chst eine Klasse, die Rechtecke repr\u00e4sentiert (Objektvariablen x , y , width , height , jweils int ) speichern Sie die Rechtecke zusammen mit ihrer Farbe in einer Map (untersuchen Sie den Unterschied zwischen HashMap und LinkedHashMap ) zeichnen Sie in paintComponent() alle Rechtecke aus der Map und das aktuelle Rechteck (das Sie gerade zeichnen) vorkommentierte Klassen RechteckeZeichnen.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.HashMap ; import java.util.Map ; import java.util.Random ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class RechteckeZeichnen extends ... implements ... { // Objektvariablen public RechteckeZeichnen () { super (); this . setTitle (...); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); //Collection f\u00fcr die Rechtecke anlegen //Leinwand anlegen und die Listener f\u00fcr Mausereignisse hinzuf\u00fcgen this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; //aktuelles Rechteck zeichnen (falls es aktuell eins gibt) //gespecherte Rechtecke aus der Collection zeichnen } } public static void main ( String [] args ) { new RechteckeZeichnen (); } @Override public void mousePressed ( MouseEvent e ) { //neues Rechteck erzeugen //zuf\u00e4llige Farbe erzeugen - hatten wir letzte Woche } @Override public void mouseDragged ( MouseEvent e ) { //H\u00f6he und Breite des aktuellen Rechtecks setzen //je nachdem ob die Maus gerade nach rechts, links, oben oder unten gezogen wird //Leinwand neu zeichnen } @Override public void mouseReleased ( MouseEvent e ) { //aktuelles Rechteck speichern } @Override public void mouseClicked ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} @Override public void mouseMoved ( MouseEvent e ) {} } Rechteck.java 1 2 3 4 5 6 7 8 9 10 11 12 public class Rechteck { //private Objektvariablen f\u00fcr x, y, H\u00f6he und Breite public Rechteck ( int x , int y , int width , int height ) { //Koordinaten und Gr\u00f6\u00dfe des Rechtecks } // Getter und Setter f\u00fcr x, y, H\u00f6he und Breite } eine m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 11 RechteckeZeichnen.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 package uebungen.uebung11 ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.HashMap ; import java.util.Map ; import java.util.Random ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class RechteckeZeichnen extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; Rechteck aktRechteck ; Color aktColor ; Map < Rechteck , Color > rechtecke ; public RechteckeZeichnen () { super (); this . setTitle ( \"Rechtecke zeichnen\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . rechtecke = new HashMap <> (); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { // die View @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; if ( RechteckeZeichnen . this . aktRechteck != null ) { g2 . setColor ( aktColor ); int x = RechteckeZeichnen . this . aktRechteck . getX (); int y = RechteckeZeichnen . this . aktRechteck . getY (); int width = RechteckeZeichnen . this . aktRechteck . getWidth (); int height = RechteckeZeichnen . this . aktRechteck . getHeight (); g2 . fillRect ( x , y , width , height ); } for ( Map . Entry < Rechteck , Color > eintrag : RechteckeZeichnen . this . rechtecke . entrySet ()) { Rechteck r = eintrag . getKey (); Color c = eintrag . getValue (); g2 . setColor ( c ); int x = r . getX (); int y = r . getY (); int width = r . getWidth (); int height = r . getHeight (); g2 . fillRect ( x , y , width , height ); } } } public static void main ( String [] args ) { new RechteckeZeichnen (); } // der Controller @Override public void mousePressed ( MouseEvent e ) { Point p = e . getPoint (); this . aktRechteck = new Rechteck ( p . x , p . y , 0 , 0 ); Random zuf = new Random (); int r = zuf . nextInt ( 256 ); int g = zuf . nextInt ( 256 ); int b = zuf . nextInt ( 256 ); this . aktColor = new Color ( r , g , b ); } @Override public void mouseDragged ( MouseEvent e ) { Point p = e . getPoint (); if ( p . x > this . aktRechteck . getX ()) // Maus nach rechts { int width = p . x - this . aktRechteck . getX (); this . aktRechteck . setWidth ( width ); } else // Maus nach links { int width = ( this . aktRechteck . getX () - p . x ) + this . aktRechteck . getWidth (); this . aktRechteck . setWidth ( width ); this . aktRechteck . setX ( p . x ); } if ( p . y > this . aktRechteck . getY ()) // Maus nach unten { int height = p . y - this . aktRechteck . getY (); this . aktRechteck . setHeight ( height ); } else // Maus nach oben { int height = ( this . aktRechteck . getY () - p . y ) + this . aktRechteck . getHeight (); this . aktRechteck . setHeight ( height ); this . aktRechteck . setY ( p . y ); } this . canvas . repaint (); } @Override public void mouseReleased ( MouseEvent e ) { Point p = e . getPoint (); this . rechtecke . put ( this . aktRechteck , this . aktColor ); } @Override public void mouseClicked ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} @Override public void mouseMoved ( MouseEvent e ) {} } Rechteck.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package uebungen.uebung11 ; public class Rechteck { private int x ; private int y ; private int width ; private int height ; public Rechteck ( int x , int y , int width , int height ) { this . x = x ; this . y = y ; this . width = width ; this . height = height ; } public int getX () { return x ; } public void setX ( int x ) { this . x = x ; } public int getY () { return y ; } public void setY ( int y ) { this . y = y ; } public int getWidth () { return width ; } public void setWidth ( int width ) { this . width = width ; } public int getHeight () { return height ; } public void setHeight ( int height ) { this . height = height ; } } sehr hilfreiche Erl\u00e4uterungen zur \u00dcbung von Frau Busjahn \u00dcbung 12 (Klicks z\u00e4hlen) \u00b6 \u00dcbung 12 Erstellen Sie eine solche GUI: Es handelt sich im Prinzip um ein Gitter aus JPanel s (siehe auch Tipps unten). Beachten Sie: Dem Konstruktor f\u00fcr das Fenster wird eine hoehe (int) und eine breite (int) \u00fcbergeben. Aus der hoehe und der breite ergibt sich die Anzahl der JPanels. In der Abbildung ist also hoehe=4 und breite=3 . Jedes JPanel soll ein JLabel enthalten, das der Anzahl der (Maus-)Klicks auf dieses JPanel entspricht. Am Anfang sind die Anzahl der Klicks f\u00fcr alle JPanels 0. Implementieren Sie den MouseListener so, dass bei Klick auf ein JPanel automatisch die Anzahl der Klicks um 1 erh\u00f6ht und die neue Anzahl im JLabel dargestellt wird. Au\u00dferdem soll das (oder die) JPanel(s) mit den meisten Klicks rot dargestellt werden. Die Abbildung zeigt das Fenster nach einigen Mausklicks auf die einzelnen Panels. Es gibt drei Panels mit den meisten Klicks. Nach einem weiteren Klick gibt es nur noch ein Panel mit dem meisten Klicks. Wird auf den reset -Button geklickt, ist alles wieder auf 0 (und grau) gestellt. Tipps: F\u00fcr die \"JPanels\" eigenen sich tats\u00e4chlich JPanels , da diese ja eine Hintergrundfarbe haben, einen Rand ( Border ) haben k\u00f6nnen, ein JLabel aufnehmen k\u00f6nnen usw. Es w\u00e4re ja aber auch sinnvoll, dass jedes JPanel z.B. auch eine Eigenschaft anzahlKlicks o.\u00e4. hat. Insofern w\u00e4re der Vorschlag, eine eigene Klasse MyPanel zu erstellen, die von JPanel erbt, somit alle Eigenschaften eines JPanel hat und aber auch noch zus\u00e4tzliche Eigenschaften haben kann. Als Datenstruktur f\u00fcr das Model bietet sich sicherlich ein zweidimensionales Array an. Wenn Sie jedes MyPanel an den MouseListener anmelden, dann m\u00fcssen Sie gar nicht die Koordinaten des Mausklicks betrachten, sondern nur abfragen, welches der MyPanel das Mausereignis ausgel\u00f6st hat (oder Sie verwenden sogar f\u00fcr jedes dieser MyPanel eine anonyme Klasse des MouseListener ). Probieren Sie mal ein wenig herum, es gibt sehr viele verschiedene L\u00f6sungsm\u00f6glichkeiten hier. eine m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 12 (Morgen\u00fcbung) Uebung12.javapackage uebungen.uebung12 ; import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Font ; import java.awt.GridLayout ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.awt.event.ItemEvent ; import java.awt.event.ItemListener ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.WindowEvent ; import java.awt.event.WindowListener ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JLabel ; import javax.swing.JPanel ; import javax.swing.JToggleButton ; public class Uebung12 extends JFrame { JPanel content ; MyPanel [][] panels ; int meistenClicks = 0 ; JToggleButton blau ; public Uebung12 ( int hoehe , int breite ) { super (); this . setTitle ( \"Klicks zaehlen\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . content = this . initCenter ( hoehe , breite ); this . getContentPane (). add ( this . content , BorderLayout . CENTER ); // von den folgenden vier Zeilen werden eventuell eine oder mehrere oder alle auskommentiert this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private JPanel initCenter ( int hoehe , int breite ) { JPanel center = new JPanel (); center . setBackground ( Color . BLACK ); center . setLayout ( new GridLayout ( hoehe , breite , 2 , 2 )); this . panels = new MyPanel [ hoehe ][ breite ] ; for ( int row = 0 ; row < hoehe ; row ++ ) { for ( int col = 0 ; col < breite ; col ++ ) { panels [ row ][ col ] = new MyPanel (); panels [ row ][ col ] . setBackground ( Color . RED ); //panels[row][col].addMouseListener(panels[row][col]); center . add ( panels [ row ][ col ] ); } } return center ; } private JPanel initSouth () { JPanel south = new JPanel (); JButton resetBtn = new JButton ( \"reset\" ); resetBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { for ( int zeile = 0 ; zeile < Uebung12 . this . panels . length ; zeile ++ ) { for ( int spalte = 0 ; spalte < Uebung12 . this . panels [ zeile ] . length ; spalte ++ ) { Uebung12 . this . panels [ zeile ][ spalte ] . nrOfClicks = 0 ; Uebung12 . this . panels [ zeile ][ spalte ] . label . setText ( \"0\" ); // \"Anwendung\" des ToggleButtons - gehoert nicht zur Aufgabe if ( Uebung12 . this . blau . isSelected ()) { Uebung12 . this . panels [ zeile ][ spalte ] . setBackground ( Color . BLUE ); } else { Uebung12 . this . panels [ zeile ][ spalte ] . setBackground ( Color . LIGHT_GRAY ); } Uebung12 . this . meistenClicks = 0 ; } } } }); // gehoert nicht zur Aufgabe, nur \"Spielerei\" this . blau = new JToggleButton ( \"blau\" ); this . blau . addItemListener ( new ItemListener () { @Override public void itemStateChanged ( ItemEvent e ) { JToggleButton tb = ( JToggleButton ) e . getSource (); if ( tb . getText (). equals ( \"blau\" )) tb . setText ( \"grau\" ); else if ( tb . getText (). equals ( \"grau\" )) tb . setText ( \"blau\" ); } }); south . add ( resetBtn ); south . add ( blau ); return south ; } class MyPanel extends JPanel implements MouseListener { int nrOfClicks ; JLabel label ; MyPanel () { this . nrOfClicks = 0 ; this . setLayout ( new GridLayout ( 1 , 1 )); this . label = new JLabel ( \"0\" ); this . label . setFont ( new Font ( \"Verdana\" , Font . BOLD , 48 )); this . label . setForeground ( Color . WHITE ); this . label . setHorizontalAlignment ( JLabel . CENTER ); this . add ( label ); this . addMouseListener ( this ); } @Override public void mouseClicked ( MouseEvent e ) { MyPanel mp = ( MyPanel ) e . getSource (); mp . nrOfClicks ++ ; mp . label . setText ( String . valueOf ( nrOfClicks )); if ( mp . nrOfClicks > Uebung12 . this . meistenClicks ) { Uebung12 . this . meistenClicks = mp . nrOfClicks ; } for ( int zeile = 0 ; zeile < Uebung12 . this . panels . length ; zeile ++ ) { for ( int spalte = 0 ; spalte < Uebung12 . this . panels [ zeile ] . length ; spalte ++ ) { if ( Uebung12 . this . panels [ zeile ][ spalte ] . nrOfClicks == Uebung12 . this . meistenClicks ) { Uebung12 . this . panels [ zeile ][ spalte ] . setBackground ( Color . RED ); } else { Uebung12 . this . panels [ zeile ][ spalte ] . setBackground ( Color . LIGHT_GRAY ); } } } } @Override public void mousePressed ( MouseEvent e ) {} @Override public void mouseReleased ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } public static void main ( String [] args ) { new Uebung12 ( 4 , 3 ); } } sehr hilfreiche Erl\u00e4uterungen zu JPanels von Frau Busjahn Die folgenden drei Programme machen letztlich alle das Gleiche. Sie erzeugen alle ein Panel, das in die Mitte des Fenster platziert wird, nur die Stelle im Quelltext, an der das Panel angelegt wird, variiert. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import java.awt.BorderLayout ; import javax.swing.* ; public class PanelsVarianteA extends JFrame { public PanelsVarianteA () { super ( \"Variante A\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel panelCenter = new JPanel (); JLabel labelCenter = new JLabel ( \"A\" ); panelCenter . add ( labelCenter ); this . getContentPane (). add ( panelCenter , BorderLayout . CENTER ); this . setSize ( 400 , 200 ); this . setVisible ( true ); } public static void main ( String [] args ) { new PanelsVarianteA (); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import java.awt.BorderLayout ; import javax.swing.* ; public class PanelsVarianteB extends JFrame { public PanelsVarianteB () { super ( \"Variante B\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel panelCenter = initCenter (); this . getContentPane (). add ( panelCenter , BorderLayout . CENTER ); this . setSize ( 400 , 200 ); this . setVisible ( true ); } JPanel initCenter () { JPanel panelCenter = new JPanel (); JLabel labelCenter = new JLabel ( \"B\" ); panelCenter . add ( labelCenter ); return panelCenter ; } public static void main ( String [] args ) { new PanelsVarianteB (); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import java.awt.BorderLayout ; import javax.swing.* ; public class PanelsVarianteC extends JFrame { public PanelsVarianteC () { super ( \"Variante C\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). add ( initCenter (), BorderLayout . CENTER ); this . setSize ( 400 , 200 ); this . setVisible ( true ); } JPanel initCenter () { JPanel panelCenter = new JPanel (); JLabel labelCenter = new JLabel ( \"C\" ); panelCenter . add ( labelCenter ); return panelCenter ; } public static void main ( String [] args ) { new PanelsVarianteC (); } } \u00dcbung 13 (Graphen) \u00b6 \u00dcbung 13 Erstellen Sie ein Fenster zum Zeichnen. Implementieren Sie den Mauslistener so, dass f\u00fcr jeden Mausklick an der Stelle des Mausklicks ein schwarzer ausgef\u00fcllter Kreis mit dem DURCHMESSER = 30 angezeigt wird: F\u00fcr das Model gen\u00fcgt es, sich die Punkte in einer Collection zu merken (am einfachsten ist wohl eine ArrayList ). F\u00fcr den Controller h\u00e4tten wir hier die Wahl zwischen mouseClicked() und mousePressed() . Wegen der sp\u00e4teren Erweiterung (Bewegen der Punkte), sollten wir hier mouseClicked() w\u00e4hlen. Passen Sie die View nun so an, dass die Punkte durch Linien der Strichst\u00e4rke 2.0f miteinander verbunden werden. Sie k\u00f6nnen auch gleich (oder sp\u00e4ter) den ersten und letzten Punkt mit einer Linie verbinden (so wie in der Abbildung). Implementieren sie den MouseMotionListener so, dass wenn Sie mit der Maus auf einen Punkt (Kreis) klicken (oder knapp daneben) und bei gedr\u00fcckter Maustaste die Maus bewegen, sich auch der Punkt mitbewegt. Zur Erinnerung: die Methode mouseClicked() wird aufgerufen, nachdem mousePressed() und mouseReleased() aufgerufen wurden. \u00c4ndert sich die Mausposition zwischen den Aufrufen von mousePressed() und mouseReleased() , wird mouseClicked() gar nicht aufgerufen. Es empfiehlt sich also, in mousePressed() zu bestimmen, ob durch den Mausklick ein Kreis getroffen wurde. Das muss nat\u00fcrlich kein genauer \"Treffer\" sein, bauen Sie ruhig eine Toleranz von z.B. 20 ein. Den Punkt, den Sie \"getroffen\" haben, sollten Sie sich merken, denn seine Koordinaten werden ja durch die Mausbewegung ver\u00e4ndert. Wenn Sie in mousePressed() einen Punkt \"getroffen\" haben, dann sollten Sie das Verschieben des Punktes in mouseDragged() behandeln. Beachten Sie, dass mouseDragged() (bei gedr\u00fcckter Maustaste) permanent aufgerufen wird. Wir k\u00f6nnen Sie die \u00c4nderung der Mausposition zwischen zwei Aufrufen von mouseDragged() ermitteln? eine m\u00f6gliche L\u00f6sung (aus der Morgen\u00fcbung - danke an Frau Schippl) Uebung13.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 package uebungen.uebung13 ; import java.awt.BorderLayout ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.ArrayList ; import java.util.List ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Uebung13 extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; List < Point > points ; //f\u00fcr uns = Java.util! Point movepoint ; Point remember ; public Uebung13 () { super (); this . setTitle ( \"Uebung13\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . canvas . addMouseListener ( this ); //MOUSELISTENER ANMELDEN NICHT VERGESSEN!!!! this . canvas . addMouseMotionListener ( this ); //MOUSEMOTIONLISTENER ANMELDEN NICHT VERGESSEN!!!! this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); this . points = new ArrayList <> (); } private class Canvas extends JPanel { final static int DURCHM = 30 ; final static int RADIUS = DURCHM / 2 ; @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier zeichnen wir die Punkte: for ( Point p : Uebung13 . this . points ) // anstatt \"points\" = Uebung13.this.points { int x = p . x ; int y = p . y ; g2 . fillOval ( x , y , DURCHM , DURCHM ); } for ( int i = 0 ; i < Uebung13 . this . points . size () - 1 ; i ++ ) //.size wegen Liste { Point p1 = Uebung13 . this . points . get ( i ); Point p2 = Uebung13 . this . points . get ( i + 1 ); // \"i+1\" => Nachbarpunkt von p1 g2 . drawLine ( p1 . x + RADIUS , p1 . y + RADIUS , p2 . x + RADIUS , p2 . y + RADIUS ); // \"+ Radius\" -> damit die Linien ab der Mitte des Punktes beginnen if ( i == Uebung13 . this . points . size () - 2 ) // vorletzte Position=> HIER verbinden wir den ersten und letzten Punkt { Point p = Uebung13 . this . points . get ( 0 ); g2 . drawLine ( p2 . x + RADIUS , p2 . y + RADIUS , p . x + RADIUS , p . y + RADIUS ); } } } } public static void main ( String [] args ) { new Uebung13 (); } @Override public void mouseClicked ( MouseEvent e ) //wir klicken -> Kreis wird gezeichnet -> Liste wird bef\u00fcllt { Point p = e . getPoint (); // speichern den Punkt beim Ort des Klickens this . points . add ( p ); // in der Liste speichern this . canvas . repaint (); // canvas wird nochmal gezeichnet-- wichtig!! } @Override public void mousePressed ( MouseEvent e ) //ermitteln, ob wir punkt getroffen haben { int x = e . getX (); int y = e . getY (); final int ABSTAND = 20 ; //Abstand festlegen for ( Point p : this . points ) { if ( Math . abs ( x - p . x ) < ABSTAND && Math . abs ( y - p . y ) < ABSTAND ) // Abstand von Punkt ermitteln // MINUS den Punkt, den wir betrachten { this . movepoint = p ; this . remember = e . getPoint (); // Speichern die Koordinate des Mausklicks } } } @Override public void mouseReleased ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} @Override public void mouseDragged ( MouseEvent e ) //Kreise bewegen: { int x = e . getX (); int y = e . getY (); int x1 = this . remember . x ; int y1 = this . remember . y ; int xDif = x - x1 ; //Wohin und um wie viel haben wir uns bewegt? int yDif = y - y1 ; this . movepoint . x = this . movepoint . x + xDif ; // wir verschieben den Punkt um die Differenz, this . movepoint . y = this . movepoint . y + yDif ; // die wir ermittelt haben this . canvas . repaint (); //WICHTIG this . remember = e . getPoint (); // rememberPunkt wird gespeichert } } sehr hilfreiche Erl\u00e4uterungen zu this von Frau Busjahn 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 //Achtung, dieser Code dient nur dazu, zu zeigen, wie man an //verschiedenen Stellen auf die Methoden und Variablen zugreifen //kann und ist nicht unbedingt der beste Stil public class A { int variableInA ; B bInA ; A ( int wertA ) { this . variableInA = wertA ; this . bInA = new B ( wertA + 10 ); this . printA ( \"Konstruktor A\" ); this . bInA . printB ( \"Konstruktor A\" ); } void printA ( String aufrufIn ) { System . out . println ( \"printA - \" + aufrufIn + \" - Variable der Klasse A: \" + this . variableInA ); System . out . println ( \"printA - \" + aufrufIn + \" - Variable der Klasse B: \" + this . bInA . variableInB ); } class B { int variableInB ; B ( int wertB ) { this . variableInB = wertB ; this . printB ( \"Konstruktor B\" ); } void printB ( String aufrufIn ) { System . out . println ( \"printB - \" + aufrufIn + \" - Variable der Klasse A: \" + A . this . variableInA ); System . out . println ( \"printB - \" + aufrufIn + \" - Variable der Klasse B: \" + this . variableInB ); } } public static void main ( String [] args ) { A a1 = new A ( 2 ); a1 . variableInA = 6 ; a1 . printA ( \"main\" ); a1 . bInA . variableInB = 16 ; a1 . bInA . printB ( \"main\" ); } } \u00dcbung 14 (Quadrat) \u00b6 \u00dcbung 14 Erstellen Sie ein Fenster zum Zeichnen. Passen Sie zun\u00e4chst ein Quadrat mit Strichst\u00e4rke 3.0f in das Fenster ein und zwar so, dass es \u2153 von entweder der Breite der canvas oder der H\u00f6he der canvas gro\u00df ist, je nachdem, was kleiner ist. Es muss aber nicht mittig sein: In der folgenden Abbildung ist die H\u00f6he kleiner als die Breite. Also ist die H\u00f6he korrekt gedrittelt, aber die gleiche L\u00e4nge wurde f\u00fcr x verwendet, also f\u00fcr den Abstand vom linken Rand zum Quadrat. Deshalb ist der Abstand vom Quadrat zum rechten Rand gr\u00f6\u00dfer. Sie k\u00f6nnen aber das Quadrat auch gerne komplett in die Mitte setzen. Wenn der create square -Button gedr\u00fcckt wird, erscheint ein farbiges Quadrat, das genau so gro\u00df ist, wie das zuvor gezeichnete nichtausgef\u00fcllte schwarze Quadrat. Die Position des Quadrates wird zuf\u00e4llig bestimmt. Es passt aber auf jeden Fall vollst\u00e4ndig in die Canvas! Auch die Farbe des Quadrates wird zuf\u00e4llig bestimmt. Es beh\u00e4lt die ganze Zeit \u00fcber seine Farbe. Das farbige Quadrat kann nun durch Bewegen der Maus bei gedr\u00fcckter Maustaste bewegt werden. Wenn das Quadrat (fast) vollst\u00e4ndig in dem schwarzen Quadrat ist, dann bleibt es genau dort und kann nicht weiter bewegt werden. Video zu \u00dcbung 14 eine m\u00f6gliche L\u00f6sung zu \u00dcbung 14 (zum Video) Uebung14.javaimport java.awt.BasicStroke ; import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.Random ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Uebung14 extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; Point posSquare ; Color colorSquare ; boolean move = false ; Point remember ; boolean fixiert = false ; public Uebung14 () { super (); this . setTitle ( \"Quadrat\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); // von den folgenden vier Zeilen werden eventuell eine oder mehrere oder alle auskommentiert this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } // start inner class private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int width = this . getWidth (); int height = this . getHeight (); // int smaller = (width < height) ? width : height; int smaller = 0 ; int length = 0 ; int x = 0 ; int y = 0 ; if ( width < height ) { smaller = width ; length = smaller / 3 ; x = smaller / 3 ; y = ( height - length ) / 2 ; } else { smaller = height ; length = smaller / 3 ; y = smaller / 3 ; x = ( width - length ) / 2 ; } g2 . setStroke ( new BasicStroke ( 3.0f )); g2 . drawRect ( x , y , length , length ); if ( Uebung14 . this . posSquare != null && Uebung14 . this . colorSquare != null ) { int xSquare = Uebung14 . this . posSquare . x ; int ySquare = Uebung14 . this . posSquare . y ; Color cSquare = Uebung14 . this . colorSquare ; g2 . setColor ( cSquare ); g2 . fillRect ( xSquare , ySquare , length , length ); } } } // ende innere Klasse private JPanel initSouth () { JPanel south = new JPanel (); JButton btnCreate = new JButton ( \"create square\" ); btnCreate . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Random r = new Random (); int widthCanvas = Uebung14 . this . canvas . getWidth (); int heightCanvas = Uebung14 . this . canvas . getHeight (); int lengthSquare = ( widthCanvas < heightCanvas ) ? widthCanvas / 3 : heightCanvas / 3 ; int x = r . nextInt ( widthCanvas - lengthSquare ); int y = r . nextInt ( heightCanvas - lengthSquare ); Uebung14 . this . posSquare = new Point ( x , y ); int rot = r . nextInt ( 256 ); int gruen = r . nextInt ( 256 ); int blau = r . nextInt ( 256 ); Uebung14 . this . colorSquare = new Color ( rot , gruen , blau ); Uebung14 . this . canvas . repaint (); } }); south . add ( btnCreate ); return south ; } public static void main ( String [] args ) { new Uebung14 (); } @Override public void mouseDragged ( MouseEvent e ) { if ( move ) { int xMouse = e . getX (); int yMouse = e . getY (); int xLast = this . remember . x ; int yLast = this . remember . y ; int xDiff = xMouse - xLast ; int yDiff = yMouse - yLast ; this . posSquare . x = this . posSquare . x + xDiff ; this . posSquare . y = this . posSquare . y + yDiff ; // ab hier: im schwarzen Quadrat? int widthCanvas = this . canvas . getWidth (); int heightCanvas = this . canvas . getHeight (); int xBlack , yBlack ; if ( widthCanvas < heightCanvas ) { int lengthSquare = widthCanvas / 3 ; xBlack = widthCanvas / 3 ; yBlack = ( heightCanvas - lengthSquare ) / 2 ; } else { int lengthSquare = heightCanvas / 3 ; yBlack = heightCanvas / 3 ; xBlack = ( widthCanvas - lengthSquare ) / 2 ; } int xSquare = this . posSquare . x ; int ySquare = this . posSquare . y ; final int ABSTAND = 20 ; if ( Math . abs ( xSquare - xBlack ) < ABSTAND && Math . abs ( ySquare - yBlack ) < ABSTAND ) { // farbiges Quadrat genau im schwarzen System . out . println ( \"im schwarzen\" ); this . move = false ; this . posSquare . x = xBlack ; this . posSquare . y = yBlack ; } this . canvas . repaint (); this . remember = e . getPoint (); } } @Override public void mouseMoved ( MouseEvent e ) { // TODO Auto-generated method stub } @Override public void mouseClicked ( MouseEvent e ) { // TODO Auto-generated method stub } @Override public void mousePressed ( MouseEvent e ) { int xMouse = e . getX (); int yMouse = e . getY (); if ( ! this . fixiert && this . posSquare != null ) { int xSquare = this . posSquare . x ; int ySquare = this . posSquare . y ; int widthCanvas = this . canvas . getWidth (); int heightCanvas = this . canvas . getHeight (); int lengthSquare = ( widthCanvas < heightCanvas ) ? widthCanvas / 3 : heightCanvas / 3 ; if ( xMouse >= xSquare && xMouse <= ( xSquare + lengthSquare ) && yMouse >= ySquare && yMouse <= ( ySquare + lengthSquare )) { this . move = true ; this . remember = e . getPoint (); System . out . println ( \"im Quadrat\" ); } } } @Override public void mouseReleased ( MouseEvent e ) { this . move = false ; } @Override public void mouseEntered ( MouseEvent e ) { // TODO Auto-generated method stub } @Override public void mouseExited ( MouseEvent e ) { // TODO Auto-generated method stub } } Zusatz \u00b6 Test-driven development \u00b6 parseDouble(String) In der Aufgabe 2 sollen Sie f\u00fcr die Klasse MyInteger eine Methode parseInt(String s) schreiben, die einen String s in eine int -Zahl umwandelt, wenn dies m\u00f6glich ist. In dieser \u00dcbung wollen wir eine solche (statische) Methode parseDouble(String s) f\u00fcr eine Klasse MyDouble testgetrieben entwickeln. \u00dcberlegen Sie sich dazu einige Strings, die Sie umwandeln wollen und die dazugeh\u00f6rigen erwarteten Ergebnisse. Es muss nicht vollst\u00e4ndig implementiert werden. Es geht ums Prinzip. Mithilfe von assertThrows() k\u00f6nnen Sie \u00fcbrigens pr\u00fcfen, ob eine Exception geworfen wird (wenn s keiner Zahl entspricht) - siehe dazu z.B. hier oder hier . Viel Spa\u00df!","title":"\u00dcbungen"},{"location":"uebungen/#ubungen","text":"","title":"\u00dcbungen"},{"location":"uebungen/#ubung-1-git","text":"\u00dcbung 1 Erstellen Sie sich einen GitHub-Account (oder w\u00e4hlen Sie einen anderen Git-Diensteanbieter) Erstellen Sie sich dort ein zentrales Repository Richten Sie Ihren workspace , in dem Sie alle Ihre Entwicklungen in diesem Semester durchf\u00fchren wollen (\u00dcbungen, Aufgaben, ...) als lokales Git-Repository ein Synchroniseren Sie Ihr lokales und Ihr zentrales Git-Repository Video zu \u00dcbung 1 ( Git ) - alles zu EGit herausgenommen","title":"\u00dcbung 1 (Git)"},{"location":"uebungen/#ubung-2-enum-und-zweidimensionale-arrays","text":"\u00dcbung 2 Gegeben ist die folgende Klasse TicTacToe : 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 package uebungen.uebung2 ; public class TicTacToe { enum State { EMPTY , RED , BLACK }; State [][] field ; public TicTacToe () { field = new State [ 3 ][ 3 ] ; for ( int i = 0 ; i < field . length ; i ++ ) for ( int j = 0 ; j < field [ i ] . length ; j ++ ) field [ i ][ j ]= State . EMPTY ; } public void makeMove ( int i , int j , State player ) { if ( field [ i ][ j ]== State . EMPTY && player != State . EMPTY ) field [ i ][ j ]= player ; } } F\u00fcgen Sie alle notwendigen Klammern { } ein, so dass die Anweisungsbl\u00f6cke korrekt geklammert sind. Erweitern Sie die Klasse TicTacToe um eine print() -Methode, die das Spielfeld auf die Konsole ausgibt (Setzen Sie z.B. f\u00fcr den Player RED ein x und f\u00fcr den Player Black ein o und f\u00fcr EMPTY ein Leerzeichen oder ein - ). Die Ausgabe nach jeweils 2 Z\u00fcgen von RED und BLACK k\u00f6nnte dann z.B. so aussehen: - o o - x - - - x Erweitern Sie die Klasse TicTacToe um eine gewonnen() -Methode ( true , wenn ein Spieler drei Felder horizontal, diagonal oder vertikal belegt hat; ansonsten false ). Erweitern Sie die Klasse TicTacToe um eine unentschieden() -Methode ( true , wenn alle Felder besetzt sind, aber kein Spieler gewonnen hat; ansonsten false ). Erstellen Sie eine Test-Klasse mit main() -Methode. Erstellen sie darin ein Objekt der Klasse TicTacToe . F\u00fchren Sie Z\u00fcge aus ( makeMove() ) und pr\u00fcfen Sie, ob gewonnen wurde oder unentschieden ist (mit entsprechenden Ausgaben). F\u00fcr 6. m\u00fcssen Sie in der Testklasse Ihr enum State importieren. Warum ist das so? Was k\u00f6nnten Sie machen, damit das nicht notwendig ist? Zusatz: Sie k\u00f6nnen die Klasse TicTacToe beliebig erweitern, z.B.: um Ausgaben, wenn gewonnen bzw. es unentschieden ist, um Fehler in den Indizes i und j bei der makeMove() -Methode abzufangen, eine Methode spielen() implementieren, die zuf\u00e4llig f\u00fcr die Spieler die Steine setzt usw. Viel Spa\u00df! Video zu \u00dcbung 2 (TicTacToe) m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 2 TicTacToe.javapackage uebungen.uebung2 ; import java.util.Random ; public class TicTacToe { State [][] field ; public TicTacToe () { this . field = new State [ 3 ][ 3 ] ; for ( int i = 0 ; i < this . field . length ; i ++ ) { for ( int j = 0 ; j < this . field [ i ] . length ; j ++ ) { field [ i ][ j ]= State . EMPTY ; } } } public void makeMove ( int row , int col , State player ) { if ( row >= 0 && row < this . field . length && col >= 0 && col < this . field [ row ] . length && this . field [ row ][ col ] == State . EMPTY ) { if ( player != State . EMPTY ) { this . field [ row ][ col ]= player ; } } } public void print () { for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { if ( field [ row ][ col ]== State . EMPTY ) { System . out . print ( \"- \" ); } else if ( field [ row ][ col ]== State . RED ) { System . out . print ( \"x \" ); } else // BLACK { System . out . print ( \"o \" ); } } System . out . println (); } System . out . println (); } public boolean gewonnen ( State player ) { if ( player == State . EMPTY ) return false ; // alle drei Zeilen pruefen for ( int row = 0 ; row < this . field . length ; row ++ ) { if ( this . field [ row ][ 0 ] == player && this . field [ row ][ 1 ] == player && this . field [ row ][ 2 ] == player ) { return true ; } } // alle drei Spalten pruefen for ( int col = 0 ; col < this . field . length ; col ++ ) { if ( this . field [ 0 ][ col ] == player && this . field [ 1 ][ col ] == player && this . field [ 2 ][ col ] == player ) { return true ; } } // Diagonale von links oben nach rechts unten if ( this . field [ 0 ][ 0 ] == player && this . field [ 1 ][ 1 ] == player && this . field [ 2 ][ 2 ] == player ) { return true ; } // Diagonale von rechts oben nach links unten if ( this . field [ 0 ][ 2 ] == player && this . field [ 1 ][ 1 ] == player && this . field [ 2 ][ 0 ] == player ) { return true ; } return false ; } public void printResultat () { if ( this . gewonnen ( State . RED )) { System . out . println ( \"Rot hat gewonnen!!!\" ); } else if ( this . gewonnen ( State . BLACK )) { System . out . println ( \"Schwarz hat gewonnen!!!\" ); } else if ( this . unentschieden ()) { System . out . println ( \"Unentschieden!!!\" ); } } public void makeRandomMove ( State player ) { if ( player != State . EMPTY ) { Random r = new Random (); int row = r . nextInt ( 3 ); int col = r . nextInt ( 3 ); while ( this . field [ row ][ col ]!= State . EMPTY ) { row = r . nextInt ( 3 ); col = r . nextInt ( 3 ); } this . field [ row ][ col ]= player ; } } public void spielen () { State player = State . RED ; while ( ! ( this . unentschieden () || this . gewonnen ( State . RED ) || this . gewonnen ( State . BLACK ))) { this . makeRandomMove ( player ); this . print (); this . printResultat (); if ( player == State . RED ) { player = State . BLACK ; } else { player = State . RED ; } // player = (player == State.RED) ? State.BLACK : State.RED; } } public boolean voll () { for ( int row = 0 ; row < this . field . length ; row ++ ) { for ( int col = 0 ; col < this . field [ row ] . length ; col ++ ) { if ( field [ row ][ col ]== State . EMPTY ) { return false ; } } } return true ; } public boolean unentschieden () { return ( this . voll () && ! this . gewonnen ( State . RED ) && ! this . gewonnen ( State . BLACK )); } } State.java 1 2 3 4 5 package uebungen.uebung2 ; public enum State { EMPTY , RED , BLACK } TestTicTacToe.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 package uebungen.uebung2 ; public class TestTicTacToe { public static void main ( String [] args ) { TicTacToe ttt = new TicTacToe (); ttt . print (); /* ttt.makeMove(1, 1, State.RED); ttt.printResultat(); ttt.print(); ttt.makeMove(1, 2, State.BLACK); ttt.printResultat(); ttt.print(); ttt.makeMove(1, -1, State.BLACK); ttt.printResultat(); ttt.print(); ttt.makeMove(0, 1, State.RED); ttt.printResultat(); ttt.print(); ttt.makeMove(2, 1, State.BLACK); ttt.printResultat(); ttt.print(); ttt.makeMove(1, 0, State.RED); ttt.printResultat(); ttt.print(); ttt.makeMove(0, 0, State.BLACK); ttt.printResultat(); ttt.print(); ttt.makeMove(0, 2, State.RED); ttt.printResultat(); ttt.print(); ttt.makeMove(2, 0, State.BLACK); ttt.printResultat(); ttt.print(); ttt.makeMove(2, 2, State.RED); ttt.printResultat(); ttt.print(); */ ttt . spielen (); // ttt.makeRandomMove(State.RED); // ttt.print(); } }","title":"\u00dcbung 2 (enum und zweidimensionale Arrays)"},{"location":"uebungen/#ubung-3-exceptions","text":"\u00dcbung 3 Schreiben Sie ein Programm zur Eingabe von zwei Zahlen mithilfe der Klasse JOptionPane aus dem und deren Division! Fangen Sie folgende Ausnahmen ab: Falls die Eingabe keiner Zahl entspricht. Falls die zweite Zahl eine 0 ist. Scenario : Fenster zur Eingabe von Zahl 1 \u00f6ffnet sich: falsche Eingabe - keine Zahl: Fenster \u00f6ffnet sich erneut (andere Nachricht!): Fenster zur Eingabe von Zahl 2 \u00f6ffnet sich: die Division Zahl1/Zahl2 schl\u00e4gt fehl ( ArithmeticException ), deshalb (andere Nachricht!): Ergebnis Lagern Sie eine solche Eingabem\u00f6glichkeit in eine wiederverwendbare Methode aus, z.B. public int inputInt(int min, int max) , welche die eingegebene Zahl zur\u00fcckgibt, wobei die eingegebene Zahl im Bereich [min, max] liegen muss. Lesen Sie eine Anzahl von Sekunden ein und schreiben Sie eine Umrechnung, so dass folgende Ausgabe entsteht (die Eingabe ist hier \u00fcber die Konsole gezeigt) : Gib eine Anzahl von Sekunden ein: 3456789 3456789 Sekunden sind 40 Tage, 13 Minuten, 9 Sekunden. Gib eine Anzahl von Sekunden ein: 2345678 2345678 Sekunden sind 27 Tage, 3 Stunden, 34 Minuten, 38 Sekunden. Gib eine Anzahl von Sekunden ein: 123456 123456 Sekunden sind 1 Tag, 10 Stunden, 17 Minuten, 36 Sekunden. Gib eine Anzahl von Sekunden ein: 12345 12345 Sekunden sind 3 Stunden, 25 Minuten, 45 Sekunden. Lesen Sie eine Zahl ein und geben Sie die Quersumme der Zahl aus. Viel Spa\u00df! Video zu \u00dcbung 3 (Exceptions) m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 3 Uebung3.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 package uebungen.uebung3 ; import javax.swing.JOptionPane ; public class Uebung3 { public static int inputInt ( int min , int max , String message ) { boolean eingabeOk = false ; int zahl = 0 ; // String message = \"Geben Sie eine Zahl ein : \"; while ( ! eingabeOk ) { String eingabe1 = JOptionPane . showInputDialog ( message ); try { zahl = Integer . valueOf ( eingabe1 ); if ( zahl >= min && zahl <= max ) { eingabeOk = true ; } else { message = \"Zahl muss zwischen \" + min + \" und \" + max + \" liegen!\" ; } } catch ( NumberFormatException e ) { message = \"Eingabe war keine Zahl! Bitte Zahl eingeben\" ; } } return zahl ; } public static int inputInt ( String message ) { return inputInt ( Integer . MIN_VALUE , Integer . MAX_VALUE , message ); } public static int division ( int divident , int divisor ) throws ArithmeticException { int quotient = divident / divisor ; return quotient ; } public static void printDivision () { int zahl1 = inputInt ( \"Geben Sie eine Zahl1 ein : \" ); boolean zahl2NotZero = false ; String message = \"Geben Sie eine Zahl2 ein : \" ; while ( ! zahl2NotZero ) { int zahl2 = inputInt ( message ); int result = 0 ; try { result = division ( zahl1 , zahl2 ); zahl2NotZero = true ; } catch ( ArithmeticException e ) { message = \"Zahl2 darf nicht 0 sein!\" ; } System . out . println ( zahl1 + \" / \" + zahl2 + \" = \" + result ); } } public static int quersumme ( int zahl ) { int ganz = zahl ; int quersumme = 0 ; while ( ganz > 0 ) { int rest = ganz % 10 ; quersumme += rest ; ganz = ganz / 10 ; } return quersumme ; } public static void printUmrechnungSek () { int sek = inputInt ( \"Anzahl Sekunden : \" ); int tage = sek / ( 24 * 60 * 60 ); int stunden = sek / ( 60 * 60 ) - ( tage * 24 ); int minuten = sek / ( 60 ) - ( tage * 24 * 60 ) - ( stunden * 60 ); int sekunden = sek - ( tage * 24 * 60 * 60 ) - ( stunden * 60 * 60 ) - ( minuten * 60 ); String s = sek + \" Sekunden sind \" ; if ( tage > 1 ) s += tage + \" Tage, \" ; else if ( tage == 1 ) s += \"1 Tag, \" ; if ( stunden > 1 ) s += stunden + \" Stunden, \" ; else if ( stunden == 1 ) s += \"1 Stunden, \" ; if ( minuten > 1 ) s += minuten + \" Minuten, \" ; else if ( minuten == 1 ) s += \"1 Minute, \" ; if ( sekunden > 1 ) s += sekunden + \" Sekunden.\" ; else if ( sekunden == 1 ) s += \"1 Sekunde.\" ; System . out . println ( s ); } public static void main ( String [] args ) { printDivision (); int zahl = inputInt ( \"Geben Sie eine Zahl ein\" ); // System.out.println(\"Quersumme von \" + zahl + \" ist \" + quersumme(zahl)); JOptionPane . showMessageDialog ( null , \"Quersumme von \" + zahl + \" ist \" + quersumme ( zahl )); printUmrechnungSek (); } } module-info.java 1 2 3 module SoSe2021 { requires java . desktop ; }","title":"\u00dcbung 3 (Exceptions)"},{"location":"uebungen/#ubung-4-test-driven-development","text":"Warning Diese \u00dcbung lassen wir weg. Am 6.5.2021 machen wir stattdessen gleich \u00dcbung 5 . Das hat den Vorteil, dass wir den Stoff von Vorlesung und \u00dcbung wieder zeitlich dichter zusammenziehen (Mittwoch Vorlesung und Donnerstag dazugeh\u00f6rige \u00dcbung). Au\u00dferdem f\u00e4llt die \u00dcbung am 13.5. wegen des Feiertages weg und somit w\u00e4re die L\u00fccke noch gr\u00f6\u00dfer. \u00dcbung 4 Implementieren Sie eine Methode public static int strStr(String haystack, String needle) durch testgetriebene Entwicklung. Die Methode gibt den Anfangsindex des ersten Auftretens von needle in haystack aus, z.B. // Beispiel 1 Input: haystack = \"hello\" , needle = \"ll\" Output: 2 // ll beginnt am Index 2 // Beispiel 2 Input: haystack = \"aaaaa\" , needle = \"bba\" Output: -1 // bba kommt nicht vor // Beispiel 3 Input: haystack = \"\" , needle = \"\" Output: 0 // \"leerer\" String ueberall, also auch bei 0 Wenn needle nicht in haystack enthalten ist, wird -1 zur\u00fcckgegeben. Implementieren Sie eine Methode public static int[][] permutations(int[] nums) durch testgetriebene Entwicklung. Die Methode gibt ein Array von int -Arrays zur\u00fcck, welches alle Permutationen der Zahlen aus nums enth\u00e4lt, z.B. // Beispiel 1 Input: nums = [ 1 ,2,3 ] Output: [[ 1 ,2,3 ] , [ 1 ,3,2 ] , [ 2 ,1,3 ] , [ 2 ,3,1 ] , [ 3 ,1,2 ] , [ 3 ,2,1 ]] // Beispiel 2 Input: nums = [ 0 ,1 ] Output: [[ 0 ,1 ] , [ 1 ,0 ]] // Beispiel 3 Input: nums = [ 1 ] Output: [[ 1 ]] Sie d\u00fcrfen folgende Annahmen treffen: 1 <= nums.length <= 6 -10 <= nums[i] <= 10 nums enth\u00e4lt keine Doppelungen Viel Spa\u00df!","title":"\u00dcbung 4 (Test-driven development)"},{"location":"uebungen/#ubung-5-listen-und-mengen","text":"\u00dcbung 5 Erstellen Sie eine Klasse Uebung5 mit main() -Methode. Definieren Sie in der main() -Methode eine Variable words vom Typ String[] und weisen Sie dieser Variablen folgende Werte zu: String [] words = { \"Linux\" , \"Apple\" , \"Facebook\" , \"Amazon\" , \"IBM\" , \"Lenovo\" , \"Google\" , \"IBM\" , \"Microsoft\" , \"Apple\" , \"Google\" , \"Twitter\" , \"Skype\" , \"Chrome\" , \"Linux\" , \"Firefox\" }; A. Listen ( List ) Erstellen Sie eine Methode public static List<String> createArrayList(String[] words) . In dieser Methode soll eine ArrayList erstellt werden. Alle Elemente in dieser Liste sind vom Typ String . Bef\u00fcllen Sie diese Liste mit allen W\u00f6rtern aus dem words -Array. Die Methode gibt die bef\u00fcllte Liste ( List ) zur\u00fcck. Erstellen Sie eine Methode public static void printList(List<String> list) . Diese Methode gibt alle Elemente der Liste list auf der Konsole aus. Geben Sie auch die Anzahl der Elemente der Liste aus. Erstellen Sie in der main() -Methode mithilfe der Methode createArrayList(words) eine Liste und speichern Sie diese Liste in einer Variablen vom Typ List<String> . Geben Sie alle Elemente dieser Liste mithilfe der Methode printList() auf der Konsole aus. Studieren Sie alle Methoden f\u00fcr List unter https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/List.html . Ermitteln Sie den Index in der Liste, in der \"Apple\" das erste Mal auftaucht. Erzeugen Sie folgende Ausgabe: Index des ersten Auftretens von Apple : 1 Ermitteln Sie den Index in der Liste, in der \"Apple\" das letzte Mal auftaucht. Erzeugen Sie folgende Ausgabe: Index des letzten Auftretens von Apple : 9 Geben Sie den Wert des ersten Elementes der Liste aus. Erzeugen Sie folgende Ausgabe: erstes Element der Liste : Linux Geben Sie den Wert des letzten Elementes der Liste aus. Erzeugen Sie folgende Ausgabe: letztes Element der Liste : Firefox L\u00f6schen Sie die Werte \"Apple\" , \"Google\" und \"Facebook\" . Geben Sie die Liste erneut mithilfe der printList(list) -Methode aus. B. Mengen ( Set ) Erstellen Sie eine Methode public static Set<String> createHashSet(String[] words) . In dieser Methode soll eine HashSet erstellt werden. Alle Elemente in dieser Liste sind vom Typ String . Bef\u00fcllen Sie diese Liste mit allen W\u00f6rtern aus dem words -Array. Die Methode gibt die bef\u00fcllte Menge ( Set ) zur\u00fcck. Erstellen Sie eine Methode public static void printSet(Set<String> set) . Diese Methode gibt alle Elemente der Menge set auf der Konsole aus. Geben Sie auch die Anzahl der Elemente der Menge aus. Erstellen Sie in der main() -Methode mithilfe der Methode createHashSet(words) eine Menge und speichern Sie diese Menge in einer Variablen vom Typ Set<String> . Geben Sie alle Elemente dieser Menge mithilfe der Methode printSet() auf der Konsole aus. Was beobachten Sie in Bezug auf die Anzahl der Elemente im Vergleich zur Anzahl der Elemente in der Liste? Warum ist das so? Erstellen Sie eine Methode public static Set<String> createTreeSet(String[] words) . In dieser Methode soll eine TreeSet erstellt werden. Alle Elemente in dieser Liste sind vom Typ String . Bef\u00fcllen Sie diese Menge ( Set ) mit allen W\u00f6rtern aus dem words -Array. Die Methode gibt die bef\u00fcllte Menge ( Set ) zur\u00fcck. Erstellen Sie in der main() -Methode mithilfe der Methode createTreeSet(words) eine Menge und speichern Sie diese Menge in einer Variablen. Geben Sie alle Elemente dieser Menge mithilfe der Methode printSet() auf der Konsole aus. Was beobachten Sie in Bezug auf die Sortierung der Elemente im Vergleich zur HashSet ? Zusatz Erstellen Sie f\u00fcr die Liste eine Methode public static List<String> findDoublets(List<String> list) . Diese Methode erstellt eine Liste, in der alle Elemente enthalten sind, die in list doppelt vorkommen. Diese Elemente werden dann auch doppelt in die Resultat-Liste \u00fcbernommen. Geben Sie diese Liste mithilfe der printList() -Methode in der main() -Methode aus. M\u00f6gliche Ausgabe (je nach Reihenfolge des Aufrufs der Methoden) Liste mit 16 Elementen : -------------------------- Linux Apple Facebook Amazon IBM Lenovo Google IBM Microsoft Apple Google Twitter Skype Chrome Linux Firefox Index des ersten Auftretens von Apple : 1 Index des letzten Auftretens von Apple : 9 erstes Element in der Liste : Linux letztes Element in der Liste : Firefox Liste mit 13 Elementen : -------------------------- Linux Amazon IBM Lenovo IBM Microsoft Apple Google Twitter Skype Chrome Linux Firefox Doublets- Liste mit 4 Elementen : -------------------------- Linux IBM IBM Linux ohne Doublets- Liste mit 9 Elementen : -------------------------- Amazon Lenovo Microsoft Apple Google Twitter Skype Chrome Firefox Menge mit 12 Elementen : -------------------------- Lenovo Google Apple Skype Linux IBM Twitter Chrome Microsoft Amazon Facebook Firefox Menge mit 12 Elementen : -------------------------- Amazon Apple Chrome Facebook Firefox Google IBM Lenovo Linux Microsoft Skype Twitter Video zu \u00dcbung 5 (Listen und Mengen) m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 5 - aus der \u00dcbung von Frau Busjahn (mit Kommentaren) Uebung5.javapackage uebungen.uebung5.loesung ; import java.util.ArrayList ; import java.util.HashSet ; import java.util.Iterator ; import java.util.List ; import java.util.Set ; import java.util.TreeSet ; public class Uebung5 { //A1. Erstellen Sie eine Methode public static List<String> createArrayList(String[] words). //In dieser Methode soll eine ArrayList erstellt werden. Alle Elemente in dieser Liste sind vom Typ String. //Bef\u00fcllen Sie diese Liste mit allen W\u00f6rtern aus dem words-Array. Die Methode gibt die bef\u00fcllte Liste (List) zur\u00fcck. public static List < String > createArrayList ( String [] words ){ // neue ArrayList mit String als Type anlegen List < String > list = new ArrayList <> (); // jedes Element aus words in die Liste einf\u00fcgen for ( int i = 0 ; i < words . length ; i ++ ) { list . add ( words [ i ] ); } return list ; } //A2. Erstellen Sie eine Methode public static void printList(List<String> list). //Diese Methode gibt alle Elemente der Liste list auf der Konsole aus. //Geben Sie auch die Anzahl der Elemente der Liste aus. public static void printList ( List < String > list ) { //Variante 1: Iterator System . out . println ( \"--Iterator--\" ); Iterator < String > it = list . iterator (); while ( it . hasNext ()) { System . out . println ( it . next ()); } //Variante 2: for-Schleife System . out . println ( \"--Schleife--\" ); for ( String s : list ) { System . out . println ( s ); } //Anzahl der Elemente ausgeben System . out . println ( \"Die Liste hat \" + list . size () + \" Elemente.\" ); } //B1. Erstellen Sie eine Methode public static Set<String> createHashSet(String[] words). //In dieser Methode soll eine HashSet erstellt werden. //Alle Elemente in dieser Liste sind vom Typ String. //Bef\u00fcllen Sie diese Liste mit allen W\u00f6rtern aus dem words-Array. //Die Methode gibt die bef\u00fcllte Menge (Set) zur\u00fcck. public static Set < String > createHashSet ( String [] words ) { Set < String > set = new HashSet <> (); for ( int i = 0 ; i < words . length ; i ++ ) { set . add ( words [ i ] ); } return set ; } //B2. Erstellen Sie eine Methode public static void printSet(Set<String> set). //Diese Methode gibt alle Elemente der Menge set auf der Konsole aus. //Geben Sie auch die Anzahl der Elemente der Menge aus. public static void printSet ( Set < String > set ) { for ( String s : set ) { System . out . println ( s ); } System . out . println ( \"Das Set hat \" + set . size () + \" Elemente.\" ); } //B4. Erstellen Sie eine Methode public static Set<String> createTreeSet(String[] words). //In dieser Methode soll eine TreeSet erstellt werden. //Alle Elemente in dieser Liste sind vom Typ String. //Bef\u00fcllen Sie diese Menge (Set) mit allen W\u00f6rtern aus dem words-Array. //Die Methode gibt die bef\u00fcllte Menge (Set) zur\u00fcck. public static Set < String > createTreeSet ( String [] words ) { Set < String > set = new TreeSet <> (); for ( int i = 0 ; i < words . length ; i ++ ) { set . add ( words [ i ] ); } return set ; } //Zusatz: Erstellen Sie f\u00fcr die Liste eine Methode public static List<String> findDoublets(List<String> list). //Diese Methode erstellt eine Liste, in der alle Elemente enthalten sind, die in list doppelt vorkommen. //Diese Elemente werden dann auch doppelt in die Resultat-Liste \u00fcbernommen. //Geben Sie diese Liste mithilfe der printList()-Methode in der main()-Methode aus. public static List < String > findDoublets ( List < String > list ) { //Grundidee //Beispiel-Liste: \"a\" \"b\" \"a\" \"c\" \"a\" //Index: 0 1 2 3 4 //Inhalt: a b a c a //erster Index von \"a\": 0 //letzter Index von \"a\":4 //0 != 4 -> es gibt Duplikate //erster Index von \"b\":1 //letzter Index von \"b\":1 //1 == 1 -> keine Duplikate, also diesen Eintrag als Einzeleintrag merken //... //leere Liste \"singles\" f\u00fcr Einzeleintr\u00e4ge anlegen List < String > singles = new ArrayList <> (); //durch list iterieren und testen ob das Element Duplikate hat, //wenn nicht in \"singles\" speichern Iterator < String > it = list . iterator (); //it = copy.iterator(); while ( it . hasNext ()) { String s = it . next (); if ( list . indexOf ( s ) == list . lastIndexOf ( s )) singles . add ( s ); } //Kopie von list anlegen List < String > copy = new ArrayList <> (); it = list . iterator (); while ( it . hasNext ()) copy . add ( it . next ()); //alle singles aus der kopierten Liste entfernen copy . removeAll ( singles ); return copy ; //um zu testen, warum die Kopie n\u00f6tig ist: //copy.removeAll(singles); und return copy; ersetzen durch //list.removeAll(singles); //return list; //und dann die Ausgabe von l2 in der main anschauen } public static void main ( String [] args ) { String [] words = { \"Linux\" , \"Apple\" , \"Facebook\" , \"Amazon\" , \"IBM\" , \"Lenovo\" , \"Google\" , \"IBM\" , \"Microsoft\" , \"Apple\" , \"Google\" , \"Twitter\" , \"Skype\" , \"Chrome\" , \"Linux\" , \"Firefox\" }; System . out . println ( \"---------- A ----------\" ); //A3. Erstellen Sie in der main()-Methode mithilfe der Methode createArrayList(words) eine //Liste und speichern Sie diese Liste in einer Variablen vom Typ List<String>. List < String > l1 = createArrayList ( words ); //Geben Sie alle Elemente dieser Liste mithilfe der Methode printList() auf der Konsole aus. printList ( l1 ); //A4. Ermitteln Sie den Index in der Liste, in der \"Apple\" das erste Mal auftaucht. //Erzeugen Sie folgende Ausgabe: Index des ersten Auftretens von Apple : 1 System . out . println ( \"Index des ersten Auftretens von Apple: \" + l1 . indexOf ( \"Apple\" )); //Ermitteln Sie den Index in der Liste, in der \"Apple\" das letzte Mal auftaucht. //Erzeugen Sie folgende Ausgabe: Index des letzten Auftretens von Apple : 9 System . out . println ( \"Index des letzten Auftretens von Apple: \" + l1 . lastIndexOf ( \"Apple\" )); //Geben Sie den Wert des ersten Elementes der Liste aus. //Erzeugen Sie folgende Ausgabe: erstes Element der Liste : Linux System . out . println ( \"erstes Element der Liste: \" + l1 . get ( 0 )); //Geben Sie den Wert des letzten Elementes der Liste aus. //Erzeugen Sie folgende Ausgabe: letztes Element der Liste : Firefox System . out . println ( \"letztes Element der Liste: \" + l1 . get ( l1 . size () - 1 )); //L\u00f6schen Sie die Werte \"Apple\", \"Google\" und \"Facebook\". //Geben Sie die Liste erneut mithilfe der printList(list)-Methode aus. //1. M\u00f6glichkeit: nur 1. Vorkommen l\u00f6schen l1 . remove ( \"Apple\" ); l1 . remove ( \"Google\" ); l1 . remove ( \"Facebook\" ); printList ( l1 ); //2. M\u00f6glichkeit: alle l\u00f6schen while ( l1 . remove ( \"Apple\" )); while ( l1 . remove ( \"Google\" )); while ( l1 . remove ( \"Facebook\" )); printList ( l1 ); System . out . println ( \"---------- B ----------\" ); System . out . println ( \"-------HashSet------\" ); //B3. Erstellen Sie in der main()-Methode mithilfe der Methode createHashSet(words) //eine Menge und speichern Sie diese Menge in einer Variablen vom Typ Set<String>. Set < String > h1 = createHashSet ( words ); //Geben Sie alle Elemente dieser Menge mithilfe der Methode printSet() auf der Konsole aus. //Was beobachten Sie in Bezug auf die Anzahl der Elemente im Vergleich zur Anzahl der Elemente //in der Liste? Warum ist das so? printSet ( h1 ); System . out . println ( \"-------TreeSet------\" ); //B5. Erstellen Sie in der main()-Methode mithilfe der Methode createTreeSet(words) //eine Menge und speichern Sie diese Menge in einer Variablen. Set < String > t1 = createTreeSet ( words ); //Geben Sie alle Elemente dieser Menge mithilfe der Methode printSet() auf der Konsole aus. //Was beobachten Sie in Bezug auf die Sortierung der Elemente im Vergleich zur HashSet? printSet ( t1 ); System . out . println ( \"-------Duplicates------\" ); List < String > l2 = createArrayList ( words ); List < String > d = findDoublets ( l2 ); printList ( d ); printList ( l2 ); } }","title":"\u00dcbung 5 (Listen und Mengen)"},{"location":"uebungen/#ubung-6-wrapper-klassen-und-maps","text":"\u00dcbung 6 Erstellen Sie eine Klasse Stadt mit folgenden Objektvariablen: String name; List<Integer> bevoelkerung; float flaeche; Erstellen Sie f\u00fcr die Klasse Stadt einen parametrisierten Konstruktor public Stadt(String name, List<Integer> bevoelkerung, float flaeche) , der die Objektvariablen initialisiert. Erstellen Sie f\u00fcr die Klasse Stadt eine print() -Methode, so dass eine Ausgabe auf der Konsole in folgender Form erscheint (Bsp.): Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 Erstellen Sie eine Klasse StadtTest mit main() -Methode. Kopieren Sie in die Klasse die Methode public static Stadt[] staedte() hinein: public static Stadt [] staedte () { Stadt [] staedte = new Stadt [ 6 ] ; List < Integer > berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 0 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); List < Integer > hamburgBevoelkerung = new ArrayList <> (); hamburgBevoelkerung . add ( 1715392 ); hamburgBevoelkerung . add ( 1786448 ); hamburgBevoelkerung . add ( 1810438 ); staedte [ 1 ] = new Stadt ( \"Hamburg\" , hamburgBevoelkerung , 755.22f ); List < Integer > muenchenBevoelkerung = new ArrayList <> (); muenchenBevoelkerung . add ( 1210223 ); muenchenBevoelkerung . add ( 1353186 ); muenchenBevoelkerung . add ( 1464301 ); staedte [ 2 ] = new Stadt ( \"Muenchen\" , muenchenBevoelkerung , 310.70f ); List < Integer > koelnBevoelkerung = new ArrayList <> (); koelnBevoelkerung . add ( 962884 ); koelnBevoelkerung . add ( 1007119 ); koelnBevoelkerung . add ( 1075935 ); staedte [ 3 ] = new Stadt ( \"Koeln\" , koelnBevoelkerung , 405.02f ); List < Integer > frankfurtBevoelkerung = new ArrayList <> (); frankfurtBevoelkerung . add ( 648550 ); frankfurtBevoelkerung . add ( 679664 ); frankfurtBevoelkerung . add ( 736414 ); staedte [ 4 ] = new Stadt ( \"Frankfurt/Main\" , frankfurtBevoelkerung , 248.31f ); berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 5 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); return staedte ; } Liste Erstellen Sie in der main() -Methode eine List<Stadt> staedteListe = new ArrayList<>(); . F\u00fcgen Sie der staedteListe alle St\u00e4dte aus dem durch Aufruf der staedte() -Methode erzeugtem Array zu. Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der print() -Methode aus der Klasse Stadt aus. Menge Erstellen Sie in der main() -Methode eine Set<Stadt> staedteMenge = new HashSet<>(); . F\u00fcgen Sie der staedteMenge alle St\u00e4dte aus dem durch Aufruf der staedte() -Methode erzeugtem Array zu. Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der print() -Methode aus der Klasse Stadt aus. Berlin erscheint doppelt, obwohl eine Menge keine doppelten Elemente enthalten darf. Warum? Stadt - Teil 2 Implementieren Sie in der Klasse Stadt die equals(Object) - und die hashCode() -Methode. F\u00fchren Sie danach die StadtTest -Klasse erneut aus. Was hat sich an der Menge ge\u00e4ndert? Maps Erstellen Sie in der main() -Methode eine Map<Integer, Stadt> staedteMap = new HashMap<>(); . F\u00fcgen Sie der staedteMap einen fortlaufenden, eindeutigen Integer -Wert beginnend mit 1 als Key sowie alle alle St\u00e4dte aus dem durch Aufruf der staedte() -Methode erzeugtem Array als Value hinzu. Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der print() -Methode aus der Klasse Stadt aus. Beginnen Sie die Zeile jeweils mit der Ausgabe des Keys . Ausgaben ------------ Liste -------------- Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 ------------ Menge -------------- Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 ------------ Maps -------------- 1 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 2 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 3 Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 4 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 5 Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 6 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 die von Frau Busjahn vorkommentierten Klassen Stadt.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 //import //1. Erstellen Sie eine Klasse Stadt mit folgenden Objektvariablen: public class Stadt { String name ; List < Integer > bevoelkerung ; float flaeche ; //2. Erstellen Sie f\u00fcr die Klasse Stadt einen parametrisierten Konstruktor //public Stadt(String name, List<Integer> bevoelkerung, float flaeche), //der die Objektvariablen initialisiert. public Stadt ( String name , List < Integer > bevoelkerung , float flaeche ) { //Da es sich um einen Konstruktor einer Kindklasse handelt, sollte zuerst explizit der Konstruktor der Elternklasse aufrufen werden //kann aber wie implements erst sp\u00e4ter erg\u00e4nzt werden //Objektvariablen initialisieren this . ??? = ??? ; ... } //3. Erstellen Sie f\u00fcr die Klasse Stadt eine print()-Methode, //so dass eine Ausgabe auf der Konsole in folgender Form erscheint (Bsp.): //Berlin 891,68 km2 3.382.169 3.460.725 3.574.830 void print () { //Namen der Stadt, ihre Fl\u00e4che und \"km2\" ausgeben //mithilfe einer Schleife oder Iterator Eintr\u00e4ge der Bev\u00f6lkerungs-Liste ausgeben //Beispiel f\u00fcr Schleife: //https://freiheit.f4.htw-berlin.de/prog2/collections/#die-for-each-schleife //Beispiel f\u00fcr Iterator: //https://freiheit.f4.htw-berlin.de/prog2/collections/#listen } //Teil 2 //1. Implementieren Sie in der Klasse Stadt die equals(Object)- und die hashCode()-Methode. //F\u00fchren Sie danach die StadtTest-Klasse erneut aus. Was hat sich an der Menge ge\u00e4ndert? //Kommentieren Sie hashCode() wieder aus und f\u00fchren StadtTest erneut aus. Was \u00e4ndert sich? //Kommentieren Sie equals() wieder aus und f\u00fchren StadtTest erneut aus. Was \u00e4ndert sich? @Override public boolean equals ( Object o ) { //Es soll getestet werden, ob der Name des \u00fcbergebenen Stadt-Objekts o gleich dem Namen des aktuellen Stadt-Objekts ist //Vorher m\u00fcssen erst ein paar F\u00e4lle abgekl\u00e4rt werden: // wenn \u00fcbergebenes Objekt o null ist, gib false zur\u00fcck // wenn \u00fcbergebenes Objekt o gleich dem aktuellen Objekt der Klasse ist, gib true zur\u00fcck // wenn die Laufzeitklasse des \u00fcbergebenen Objekts o nicht gleich der Laufzeitklasse des aktuellen Objekts ist, // gib false zur\u00fcck //Wenn diese drei F\u00e4lle nicht eingetreten sind: //Stadt-Objekt anlegen vom \u00fcbergebenen Objekt o //testen ob der Name des \u00fcbergebenen Stadt-Objekts gleich dem Namen des aktuellen Stadt-Objekts ist //Ergebnis zur\u00fcckgeben } @Override public int hashCode () { //Hashcode des Stadtnamens zur\u00fcckgeben } } StadtTest.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 //import //4. Erstellen Sie eine Klasse StadtTest mit main()-Methode. //Kopieren Sie in die Klasse die Methode public static Stadt[] staedte() hinein: public class StadtTest { public static Stadt [] staedte () { Stadt [] staedte = new Stadt [ 6 ] ; List < Integer > berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 0 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); List < Integer > hamburgBevoelkerung = new ArrayList <> (); hamburgBevoelkerung . add ( 1715392 ); hamburgBevoelkerung . add ( 1786448 ); hamburgBevoelkerung . add ( 1810438 ); staedte [ 1 ] = new Stadt ( \"Hamburg\" , hamburgBevoelkerung , 755.22f ); List < Integer > muenchenBevoelkerung = new ArrayList <> (); muenchenBevoelkerung . add ( 1210223 ); muenchenBevoelkerung . add ( 1353186 ); muenchenBevoelkerung . add ( 1464301 ); staedte [ 2 ] = new Stadt ( \"Muenchen\" , muenchenBevoelkerung , 310.70f ); List < Integer > koelnBevoelkerung = new ArrayList <> (); koelnBevoelkerung . add ( 962884 ); koelnBevoelkerung . add ( 1007119 ); koelnBevoelkerung . add ( 1075935 ); staedte [ 3 ] = new Stadt ( \"Koeln\" , koelnBevoelkerung , 405.02f ); List < Integer > frankfurtBevoelkerung = new ArrayList <> (); frankfurtBevoelkerung . add ( 648550 ); frankfurtBevoelkerung . add ( 679664 ); frankfurtBevoelkerung . add ( 736414 ); staedte [ 4 ] = new Stadt ( \"Frankfurt/Main\" , frankfurtBevoelkerung , 248.31f ); berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 5 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); return staedte ; } public static void main ( String [] args ) { System . out . printf ( \"%n------------ Liste --------------%n\" ); //1. Erstellen Sie in der main()-Methode eine List<Stadt> staedteListe = new ArrayList<>();. //F\u00fcgen Sie der staedteListe alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array zu. List < Stadt > staedteListe = new ArrayList <> (); //durch staedte iterieren und die St\u00e4dte zur staedteListe hinzuf\u00fcgen //2. Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung //der print()-Methode aus der Klasse Stadt aus. //durch staedteListe iterieren und f\u00fcr jeden Eintrag die print()-Methode aufrufen System . out . printf ( \"%n------------ Menge --------------%n\" ); //1. Erstellen Sie in der main()-Methode eine Set<Stadt> staedteMenge = new HashSet<>();. Set < Stadt > staedteMenge = new HashSet <> (); //F\u00fcgen Sie der staedteMenge alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array zu. //analog zur gleichen Aufgabe mit der Liste oben //Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der //print()-Methode aus der Klasse Stadt aus. //analog zur gleichen Aufgabe mit der Liste oben //Berlin erscheint doppelt, obwohl eine Menge keine doppelten Elemente enthalten darf. Warum? System . out . printf ( \"%n------------ Maps --------------%n\" ); //1. Erstellen Sie in der main()-Methode eine Map<Integer, Stadt> staedteMap = new HashMap<>();. Map < Integer , Stadt > staedteMap = new HashMap <> (); //F\u00fcgen Sie der staedteMap einen fortlaufenden, eindeutigen Integer-Wert beginnend mit 1 als Key //sowie alle alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array als Value hinzu. //Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der print()-Methode aus der Klasse Stadt aus. //Beginnen Sie die Zeile jeweils mit der Ausgabe des Keys. //Beispiel, wie man eine Map durchgeht: https://freiheit.f4.htw-berlin.de/prog2/maps/#durch-eine-map-laufen //erst den key ausgeben //dann die Werte } } Video zu \u00dcbung 6 (Wrapper-Klassen und Maps) m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 6 (aus dem Video - mit compareTo - den Teil mit TreeSet und compareTo m\u00fcssen Sie aber nicht beachten, kommt n\u00e4chste Woche) Stadt.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 package uebungen.uebung6 ; import java.util.* ; //import //1. Erstellen Sie eine Klasse Stadt mit folgenden Objektvariablen: public class Stadt implements Comparable //Der Teil mit \"implements\" wird nicht von Anfang an ben\u00f6tigt, es kann also auch erstmal mit \"public class Stadt\" begonnen werden. //W\u00e4hrend es bei primitiven Datentypen meist eindeutig ist, ob ein Wert gr\u00f6\u00dfer, kleiner oder gleich gro\u00df ist wie ein anderer Wert, ist die Ordnung bei Objekten nicht so klar. //Daher muss Stadt Klasse ein bestimmtes Interface implementieren, um festzulegen, was verglichen werden soll. { String name ; List < Integer > bevoelkerung ; float flaeche ; //2. Erstellen Sie f\u00fcr die Klasse Stadt einen parametrisierten Konstruktor //public Stadt(String name, List<Integer> bevoelkerung, float flaeche), //der die Objektvariablen initialisiert. public Stadt ( String name , List < Integer > bevoelkerung , float flaeche ) { //Da es sich um einen Konstruktor einer Kindklasse handelt, sollte zuerst explizit der Konstruktor der Elternklasse aufrufen werden //kann aber wie implements erst sp\u00e4ter erg\u00e4nzt werden //Objektvariablen initialisieren this . name = name ; this . bevoelkerung = bevoelkerung ; this . flaeche = flaeche ; } //3. Erstellen Sie f\u00fcr die Klasse Stadt eine print()-Methode, //so dass eine Ausgabe auf der Konsole in folgender Form erscheint (Bsp.): //Berlin 891,68 km2 3.382.169 3.460.725 3.574.830 void print () { //Namen der Stadt, ihre Fl\u00e4che und \"km2\" ausgeben //mithilfe einer Schleife oder Iterator Eintr\u00e4ge der Bev\u00f6lkerungs-Liste ausgeben //Beispiel f\u00fcr Schleife: //https://freiheit.f4.htw-berlin.de/prog2/collections/#die-for-each-schleife //Beispiel f\u00fcr Iterator: //https://freiheit.f4.htw-berlin.de/prog2/collections/#listen System . out . printf ( \"%-15s %9.2f km2 \" , this . name , this . flaeche ); for ( Integer el : this . bevoelkerung ) { System . out . printf ( \"%,10d\" , el ); } System . out . println (); } //Teil 2 //1. Implementieren Sie in der Klasse Stadt die equals(Object)- und die hashCode()-Methode. //F\u00fchren Sie danach die StadtTest-Klasse erneut aus. Was hat sich an der Menge ge\u00e4ndert? //Kommentieren Sie hashCode() wieder aus und f\u00fchren StadtTest erneut aus. Was \u00e4ndert sich? //Kommentieren Sie equals() wieder aus und f\u00fchren StadtTest erneut aus. Was \u00e4ndert sich? @Override public boolean equals ( Object o ) { //Es soll getestet werden, ob der Name des \u00fcbergebenen Stadt-Objekts o gleich dem Namen des aktuellen Stadt-Objekts ist //Vorher m\u00fcssen erst ein paar F\u00e4lle abgekl\u00e4rt werden: // wenn \u00fcbergebenes Objekt o null ist, gib false zur\u00fcck // wenn \u00fcbergebenes Objekt o gleich dem aktuellen Objekt der Klasse ist, gib true zur\u00fcck // wenn die Laufzeitklasse des \u00fcbergebenen Objekts o nicht gleich der Laufzeitklasse des aktuellen Objekts ist, // gib false zur\u00fcck if ( o == null ) return false ; if ( this == o ) return true ; if ( this . getClass () != o . getClass ()) return false ; //Wenn diese drei F\u00e4lle nicht eingetreten sind: //Stadt-Objekt anlegen vom \u00fcbergebenen Objekt o //testen ob der Name des \u00fcbergebenen Stadt-Objekts gleich dem Namen des aktuellen Stadt-Objekts ist //Ergebnis zur\u00fcckgeben Stadt stadt = ( Stadt ) o ; return this . name . equals ( stadt . name ); } @Override public int hashCode () { //Hashcode des Stadtnamens zur\u00fcckgeben return this . name . hashCode (); } //Festlegen, dass der Name des \u00fcbergebenen Stadt-Objekts o mit dem Namen des aktuellen Stadt-Objekts verglichen werden soll @Override public int compareTo ( Object o ) { Stadt stadt = ( Stadt ) o ; return this . name . compareTo ( stadt . name ); } } StadtTest.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 package uebungen.uebung6 ; //import import java.util.* ; //4. Erstellen Sie eine Klasse StadtTest mit main()-Methode. //Kopieren Sie in die Klasse die Methode public static Stadt[] staedte() hinein: public class StadtTest { public static Stadt [] staedte () { Stadt [] staedte = new Stadt [ 6 ] ; List < Integer > berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 0 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); List < Integer > hamburgBevoelkerung = new ArrayList <> (); hamburgBevoelkerung . add ( 1715392 ); hamburgBevoelkerung . add ( 1786448 ); hamburgBevoelkerung . add ( 1810438 ); staedte [ 1 ] = new Stadt ( \"Hamburg\" , hamburgBevoelkerung , 755.22f ); List < Integer > muenchenBevoelkerung = new ArrayList <> (); muenchenBevoelkerung . add ( 1210223 ); muenchenBevoelkerung . add ( 1353186 ); muenchenBevoelkerung . add ( 1464301 ); staedte [ 2 ] = new Stadt ( \"Muenchen\" , muenchenBevoelkerung , 310.70f ); List < Integer > koelnBevoelkerung = new ArrayList <> (); koelnBevoelkerung . add ( 962884 ); koelnBevoelkerung . add ( 1007119 ); koelnBevoelkerung . add ( 1075935 ); staedte [ 3 ] = new Stadt ( \"Koeln\" , koelnBevoelkerung , 405.02f ); List < Integer > frankfurtBevoelkerung = new ArrayList <> (); frankfurtBevoelkerung . add ( 648550 ); frankfurtBevoelkerung . add ( 679664 ); frankfurtBevoelkerung . add ( 736414 ); staedte [ 4 ] = new Stadt ( \"Frankfurt/Main\" , frankfurtBevoelkerung , 248.31f ); berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 5 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); return staedte ; } public static void main ( String [] args ) { System . out . printf ( \"%n%n------------------------- Liste -------------------------%n%n\" ); //1. Erstellen Sie in der main()-Methode eine List<Stadt> staedteListe = new ArrayList<>();. //F\u00fcgen Sie der staedteListe alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array zu. List < Stadt > staedteListe = new ArrayList <> (); //durch staedte iterieren und die St\u00e4dte zur staedteListe hinzuf\u00fcgen Stadt [] staedte = staedte (); for ( Stadt stadt : staedte ) { staedteListe . add ( stadt ); } //2. Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung //der print()-Methode aus der Klasse Stadt aus. for ( Stadt stadt : staedteListe ) { stadt . print (); } //durch staedteListe iterieren und f\u00fcr jeden Eintrag die print()-Methode aufrufen System . out . printf ( \"%n%n------------------------- Menge -------------------------%n%n\" ); //1. Erstellen Sie in der main()-Methode eine Set<Stadt> staedteMenge = new HashSet<>();. Set < Stadt > staedteMenge1 = new HashSet <> (); //F\u00fcgen Sie der staedteMenge alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array zu. for ( Stadt stadt : staedte ()) { staedteMenge1 . add ( stadt ); } //analog zur gleichen Aufgabe mit der Liste oben //Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der //print()-Methode aus der Klasse Stadt aus. //analog zur gleichen Aufgabe mit der Liste oben for ( Stadt stadt : staedteMenge1 ) { stadt . print (); } //Berlin erscheint doppelt, obwohl eine Menge keine doppelten Elemente enthalten darf. Warum? //Notieren Sie sich die Reihenfolge, in der St\u00e4dte ausgegeben werden. //\u00c4ndern Sie den Konstruktor von HashSet<>() in TreeSet<>(). Was passiert und warum? Set < Stadt > staedteMenge2 = new TreeSet <> (); //analog zu oben System . out . printf ( \"%n%n------------------------- Maps -------------------------%n%n\" ); //1. Erstellen Sie in der main()-Methode eine Map<Integer, Stadt> staedteMap = new HashMap<>();. Map < Integer , Stadt > staedteMap = new HashMap <> (); Integer number = 1 ; for ( Stadt stadt : staedte ()) { staedteMap . put ( number , stadt ); number ++ ; } // Stadt berlin = staedte[0]; // staedteMap.put(2, berlin); //F\u00fcgen Sie der staedteMap einen fortlaufenden, eindeutigen Integer-Wert beginnend mit 1 als Key //sowie alle alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array als Value hinzu. //Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der print()-Methode aus der Klasse Stadt aus. //Beginnen Sie die Zeile jeweils mit der Ausgabe des Keys. for ( Map . Entry < Integer , Stadt > eintrag : staedteMap . entrySet ()) { System . out . printf ( \"%-3d\" , eintrag . getKey ()); Stadt stadt = eintrag . getValue (); stadt . print (); } //Beispiel, wie man eine Map durchgeht: https://freiheit.f4.htw-berlin.de/prog2/maps/#durch-eine-map-laufen //erst den key ausgeben //dann die Werte System . out . printf ( \"%n%n------------------------- Test compareTo -------------------------%n%n\" ); System . out . println ( \"Berlin\" . compareTo ( \"Anton\" )); System . out . println ( \"Anton\" . compareTo ( \"Berlin\" )); System . out . println ( \"Berlin\" . compareTo ( \"Berlin\" )); System . out . println ( \"Anton\" . compareTo ( \"Zeppelin\" )); } } eine andere m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 6 (aus der \u00dcbung von Frau Busjahn) Stadt.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 package prog2_uebungen ; import java.util.* ; //1. Erstellen Sie eine Klasse Stadt mit folgenden Objektvariablen: public class Stadt { String name ; List < Integer > bevoelkerung ; float flaeche ; //2. Erstellen Sie f\u00fcr die Klasse Stadt einen parametrisierten Konstruktor //public Stadt(String name, List<Integer> bevoelkerung, float flaeche), //der die Objektvariablen initialisiert. public Stadt ( String name , List < Integer > bevoelkerung , float flaeche ) { //Objektvariablen initialisieren this . name = name ; this . bevoelkerung = bevoelkerung ; this . flaeche = flaeche ; } //3. Erstellen Sie f\u00fcr die Klasse Stadt eine print()-Methode, //so dass eine Ausgabe auf der Konsole in folgender Form erscheint (Bsp.): //Berlin 891,68 km2 3.382.169 3.460.725 3.574.830 void print () { //Namen der Stadt, ihre Fl\u00e4che und \"km2\" ausgeben System . out . print ( name + \" \" + flaeche + \" km2 \" ); //mithilfe eines Iterator Eintr\u00e4ge der Bev\u00f6lkerungs-Liste ausgeben Iterator < Integer > it = bevoelkerung . iterator (); while ( it . hasNext ()) { System . out . print ( it . next () + \" \" ); } //Alternative mit Schleife // for(Integer i : bevoelkerung) // { // System.out.print(i + \" \"); // } System . out . println (); } //Teil 2 //1. Implementieren Sie in der Klasse Stadt die equals(Object)- und die hashCode()-Methode. //F\u00fchren Sie danach die StadtTest-Klasse erneut aus. Was hat sich an der Menge ge\u00e4ndert? @Override public boolean equals ( Object o ) { //Es soll getestet werden, ob der St\u00e4dtename des \u00fcbergebenen Objekts o gleich dem Namen des aktuellen Stadt-Objekts ist //Vorher m\u00fcssen erst ein paar F\u00e4lle abgekl\u00e4rt werden: // wenn \u00fcbergebenes Objekt o null ist, gib false zur\u00fcck if ( o == null ) return false ; // wenn \u00fcbergebenes Objekt o gleich dem aktuellen Objekt der Klasse ist, gib true zur\u00fcck, // da die St\u00e4dtenamen dann auf jeden Fall auch gleich sind if ( o == this ) return true ; // wenn die Laufzeitklasse des \u00fcbergebenen Objekts o nicht gleich der Laufzeitklasse des aktuellen Objekts ist, // gib false zur\u00fcck if ( o . getClass () != this . getClass ()) return false ; //Wenn diese drei F\u00e4lle nicht eingetreten sind: //Stadt-Objekt anlegen vom \u00fcbergebenen Objekt o Stadt other = ( Stadt ) o ; //testen ob der Name des \u00fcbergebenen Stadt-Objekts gleich dem Namen des aktuellen Stadt-Objekts ist //Ergebnis zur\u00fcckgeben return ( this . name . equals ( other . name )); } @Override public int hashCode () { //Hashcode des Stadtnamens zur\u00fcckgeben return this . name . hashCode (); } } StadtTest.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 package prog2_uebungen ; import java.util.* ; //4. Erstellen Sie eine Klasse StadtTest mit main()-Methode. //Kopieren Sie in die Klasse die Methode public static Stadt[] staedte() hinein: public class StadtTest { public static Stadt [] staedte () { Stadt [] staedte = new Stadt [ 6 ] ; List < Integer > berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 0 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); List < Integer > hamburgBevoelkerung = new ArrayList <> (); hamburgBevoelkerung . add ( 1715392 ); hamburgBevoelkerung . add ( 1786448 ); hamburgBevoelkerung . add ( 1810438 ); staedte [ 1 ] = new Stadt ( \"Hamburg\" , hamburgBevoelkerung , 755.22f ); List < Integer > muenchenBevoelkerung = new ArrayList <> (); muenchenBevoelkerung . add ( 1210223 ); muenchenBevoelkerung . add ( 1353186 ); muenchenBevoelkerung . add ( 1464301 ); staedte [ 2 ] = new Stadt ( \"Muenchen\" , muenchenBevoelkerung , 310.70f ); List < Integer > koelnBevoelkerung = new ArrayList <> (); koelnBevoelkerung . add ( 962884 ); koelnBevoelkerung . add ( 1007119 ); koelnBevoelkerung . add ( 1075935 ); staedte [ 3 ] = new Stadt ( \"Koeln\" , koelnBevoelkerung , 405.02f ); List < Integer > frankfurtBevoelkerung = new ArrayList <> (); frankfurtBevoelkerung . add ( 648550 ); frankfurtBevoelkerung . add ( 679664 ); frankfurtBevoelkerung . add ( 736414 ); staedte [ 4 ] = new Stadt ( \"Frankfurt/Main\" , frankfurtBevoelkerung , 248.31f ); berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 5 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); return staedte ; } public static void main ( String [] args ) { //staedte() genauer anschauen System . out . printf ( \"%n------------ R\u00fcckgabe von staedte() --------------%n\" ); Stadt [] staedteArray = staedte (); for ( int i = 0 ; i < staedteArray . length ; i ++ ) { Stadt s = staedteArray [ i ] ; System . out . println ( s . name + \" \" + s . flaeche + \" \" + s . bevoelkerung ); } System . out . printf ( \"%n------------ Liste --------------%n\" ); //1. Erstellen Sie in der main()-Methode eine List<Stadt> staedteListe = new ArrayList<>();. //F\u00fcgen Sie der staedteListe alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array zu. List < Stadt > staedteListe = new ArrayList <> (); //durch staedte iterieren und die St\u00e4dte zur staedteListe hinzuf\u00fcgen for ( Stadt s : staedte ()) { staedteListe . add ( s ); } //Alternative: //for (Stadt s : staedteArray) { // staedteListe.add(s); //} //2. Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung //der print()-Methode aus der Klasse Stadt aus. //durch staedteListe iterieren und f\u00fcr jeden Eintrag die print()-Methode aufrufen for ( Stadt s : staedteListe ) { s . print (); } System . out . printf ( \"%n------------ Menge --------------%n\" ); //1. Erstellen Sie in der main()-Methode eine Set<Stadt> staedteMenge = new HashSet<>();. Set < Stadt > staedteMenge = new HashSet <> (); //F\u00fcgen Sie der staedteMenge alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array zu. for ( Stadt s : staedte ()) { staedteMenge . add ( s ); } //Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der //print()-Methode aus der Klasse Stadt aus. for ( Stadt s : staedteMenge ) { s . print (); } System . out . printf ( \"%n------------ Maps --------------%n\" ); //1. Erstellen Sie in der main()-Methode eine Map<Integer, Stadt> staedteMap = new HashMap<>();. Map < Integer , Stadt > staedteMap = new HashMap <> (); //F\u00fcgen Sie der staedteMap einen fortlaufenden, eindeutigen Integer-Wert beginnend mit 1 als Key //sowie alle alle St\u00e4dte aus dem durch Aufruf der staedte()-Methode erzeugtem Array als Value hinzu. Integer i = 1 ; //int i = 1; ginge auch, w\u00fcrde dann beim Einf\u00fcgen automtisch zu Integer umgewandelt (Auto-Boxing) for ( Stadt s : staedte ()) { staedteMap . put ( i ++ , s ); } //Geben Sie alle Informationen \u00fcber alle St\u00e4dte aus der Liste unter Verwendung der print()-Methode aus der Klasse Stadt aus. //Beginnen Sie die Zeile jeweils mit der Ausgabe des Keys. for ( Map . Entry < Integer , Stadt > eintrag : staedteMap . entrySet ()) { System . out . print ( eintrag . getKey () + \": \" ); eintrag . getValue (). print (); } } }","title":"\u00dcbung 6 (Wrapper-Klassen und Maps)"},{"location":"uebungen/#ubung-7-interfaces","text":"\u00dcbung 7 Wir besch\u00e4ftigen uns nochmal mit der \u00dcbung 6, d.h. mit Stadt und StadtTest . Dieses Mal geht es uns aber mehr um die Verwendung des Interfaces Comparable . Zun\u00e4chst sind die beiden Klassen Stadt und StadtTest wie folgt gegeben (das haben wir so in \u00dcbung 6 erarbeitet - es gibt eine \u00c4nderung in StadtTest , dort benutzen wir jetzt ): Stadt.java import java.util.* ; public class Stadt { String name ; List < Integer > bevoelkerung ; float flaeche ; public Stadt ( String name , List < Integer > bevoelkerung , float flaeche ) { super (); this . name = name ; this . bevoelkerung = bevoelkerung ; this . flaeche = flaeche ; } void print () { System . out . printf ( \"%-15s %9.2f km2 \" , name , flaeche ); for ( Integer i : bevoelkerung ) { System . out . printf ( \"%,12d\" , i ); } System . out . println (); } @Override public boolean equals ( Object o ) { if ( o == null ) return false ; if ( o == this ) return true ; if ( this . getClass () != o . getClass ()) return false ; Stadt other = ( Stadt ) o ; return ( this . name . equals ( other . name )); } @Override public int hashCode () { return this . name . hashCode (); } } StadtTest.java public class StadtTest { public static Stadt [] staedte () { Stadt [] staedte = new Stadt [ 6 ] ; List < Integer > berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 0 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); List < Integer > hamburgBevoelkerung = new ArrayList <> (); hamburgBevoelkerung . add ( 1715392 ); hamburgBevoelkerung . add ( 1786448 ); hamburgBevoelkerung . add ( 1810438 ); staedte [ 1 ] = new Stadt ( \"Hamburg\" , hamburgBevoelkerung , 755.22f ); List < Integer > muenchenBevoelkerung = new ArrayList <> (); muenchenBevoelkerung . add ( 1210223 ); muenchenBevoelkerung . add ( 1353186 ); muenchenBevoelkerung . add ( 1464301 ); staedte [ 2 ] = new Stadt ( \"Muenchen\" , muenchenBevoelkerung , 310.70f ); List < Integer > koelnBevoelkerung = new ArrayList <> (); koelnBevoelkerung . add ( 962884 ); koelnBevoelkerung . add ( 1007119 ); koelnBevoelkerung . add ( 1075935 ); staedte [ 3 ] = new Stadt ( \"Koeln\" , koelnBevoelkerung , 405.02f ); List < Integer > frankfurtBevoelkerung = new ArrayList <> (); frankfurtBevoelkerung . add ( 648550 ); frankfurtBevoelkerung . add ( 679664 ); frankfurtBevoelkerung . add ( 736414 ); staedte [ 4 ] = new Stadt ( \"Frankfurt/Main\" , frankfurtBevoelkerung , 248.31f ); berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 5 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); return staedte ; } public static void main ( String [] args ) { System . out . printf ( \"%n------------ Menge --------------%n\" ); Set < Stadt > staedteMenge = new HashSet <> (); for ( Stadt s : staedte ()) { staedteMenge . add ( s ); } for ( Stadt s : staedteMenge ) { s . print (); } System . out . printf ( \"%n------------ Maps --------------%n\" ); Map < MyInteger , Stadt > staedteMap = new HashMap <> (); int i = 1 ; for ( Stadt s : staedte ()) { staedteMap . put ( new MyInteger ( i ++ ), s ); } for ( Map . Entry < MyInteger , Stadt > entry : staedteMap . entrySet ()) { MyInteger key = entry . getKey (); System . out . printf ( \"%-3d\" , key . intValue ()); entry . getValue (). print (); } } } F\u00fcr die Schl\u00fcssel in der Map benutzen wir die selbstgeschriebne Klasse MyInteger : MyInteger.java public class MyInteger { private int value ; public MyInteger ( int value ) { this . value = value ; } public int intValue () { return this . value ; } public static MyInteger valueOf ( int value ) { return new MyInteger ( value ); } } \u00c4ndern Sie in der StadtTest.java den Konstruktoraufruf der Set von HashSet nach TreeSet und f\u00fchren Sie die Klasse aus - es wird eine Exception geworfen ( Stadt cannot be cast to class java.lang.Comparable ). Implementieren Sie f\u00fcr Stadt das Interface Comparable<Stadt> so, dass nach den Namen der St\u00e4dte sortiert wird. F\u00fchren Sie dann erneut StadtTest.java aus. Es sollte folgende Ausgabe f\u00fcr die Set erzeugt werden: ------------ Menge -------------- Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 \u00c4ndern Sie compareTo() in Stadt so, dass die Namen der St\u00e4dte absteigend sortiert werden und f\u00fchren Sie dann StadtTest.java erneut aus. Es sollte folgende Ausgabe erzeugt werden: ------------ Menge -------------- Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 \u00c4ndern Sie compareTo() in Stadt so, dass die St\u00e4dte absteigend nach ihrer Fl\u00e4che sortiert werden und f\u00fchren Sie dann StadtTest.java erneut aus. Es sollte folgende Ausgabe erzeugt werden: ------------ Menge -------------- Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 \u00c4ndern Sie in der StadtTest.java den Konstruktoraufruf der Map von HashMap nach TreeMap und f\u00fchren Sie die Klasse aus - es wird eine Exception geworfen ( MyInteger cannot be cast to class java.lang.Comparable ). Implementieren Sie f\u00fcr MyInteger das Interface Comparable<MyInteger> so, dass nach den Gr\u00f6\u00dfen der Werte sortiert wird. F\u00fchren Sie dann erneut StadtTest.java aus. Es sollte folgende Ausgabe f\u00fcr die Map erzeugt werden: ------------ Maps -------------- 1 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 2 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 3 Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 4 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 5 Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 6 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 \u00c4ndern Sie compareTo() in MyInteger so, dass die Werte der Schl\u00fcssel absteigend sortiert werden und f\u00fchren Sie dann StadtTest.java erneut aus. Es sollte folgende Ausgabe erzeugt werden: ------------ Maps -------------- 6 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 5 Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 4 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 3 Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 2 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 1 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 Zusatz : Schreiben Sie in StadtTest.java eine Methode public static boolean contains(Map<MyInteger, Stadt> staedteMap, Stadt stadt) , die ein true zur\u00fcckgibt, wenn die Stadt stadt bereits in der staedteMap als ein value existiert. Tipp : Die Methode get(Object key) aus Map gibt den zu key geh\u00f6rigen value zur\u00fcck und mit keySet() bekommt man die Menge aller keys aus der Map ermittelt. Testen Sie die Methode, indem Sie zur Menge nur dann die stadt hinzuf\u00fcgen, wenn sie nicht bereits in der Menge aufgef\u00fchrt ist. Sie sollten folgende Ausgabe erhalten: ------------ Maps -------------- 5 Frankfurt/Main 248 ,31 km2 648 .550 679 .664 736 .414 4 Koeln 405 ,02 km2 962 .884 1 .007.119 1 .075.935 3 Muenchen 310 ,70 km2 1 .210.223 1 .353.186 1 .464.301 2 Hamburg 755 ,22 km2 1 .715.392 1 .786.448 1 .810.438 1 Berlin 891 ,68 km2 3 .382.169 3 .460.725 3 .574.830 Vorkommentierte Klassen : Stadt.java import java.util.* ; //3. Implementieren Sie f\u00fcr Stadt das Interface Comparable<Stadt> so, //dass nach den Namen der St\u00e4dte sortiert wird. public class Stadt implements ?/ extends ? Comparable < Stadt > { String name ; List < Integer > bevoelkerung ; float flaeche ; public Stadt ( String name , List < Integer > bevoelkerung , float flaeche ) { super (); this . name = name ; this . bevoelkerung = bevoelkerung ; this . flaeche = flaeche ; } void print () { System . out . printf ( \"%-15s %9.2f km2 \" , name , flaeche ); for ( Integer i : bevoelkerung ) { System . out . printf ( \"%,12d\" , i ); } System . out . println (); } @Override public boolean equals ( Object o ) { if ( o == null ) return false ; if ( o == this ) return true ; if ( this . getClass () != o . getClass ()) return false ; Stadt other = ( Stadt ) o ; return ( this . name . equals ( other . name )); } @Override public int hashCode () { return this . name . hashCode (); } //3. \u00c4ndern Sie compareTo() in Stadt so, dass nach den Namen der //St\u00e4dte sortiert werden kann. //4. \u00c4ndern Sie compareTo() in Stadt so, dass die Namen der //St\u00e4dte absteigend sortiert werden //5. \u00c4ndern Sie compareTo() in Stadt so, //dass die St\u00e4dte absteigend nach ihrer Fl\u00e4che sortiert werden. //Beispiel aus dem Script //@Override //public int compareTo(Circle o) { // if(this.radius > o.radius) return 1; // else if(this.radius < o.radius) return -1; // else return 0; // this.radius == o.radius //} @Override public int compareTo ( ??? ??? ) { } } StadtTest.java import java.util.* ; public class StadtTest { public static Stadt [] staedte () { Stadt [] staedte = new Stadt [ 6 ] ; List < Integer > berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 0 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); List < Integer > hamburgBevoelkerung = new ArrayList <> (); hamburgBevoelkerung . add ( 1715392 ); hamburgBevoelkerung . add ( 1786448 ); hamburgBevoelkerung . add ( 1810438 ); staedte [ 1 ] = new Stadt ( \"Hamburg\" , hamburgBevoelkerung , 755.22f ); List < Integer > muenchenBevoelkerung = new ArrayList <> (); muenchenBevoelkerung . add ( 1210223 ); muenchenBevoelkerung . add ( 1353186 ); muenchenBevoelkerung . add ( 1464301 ); staedte [ 2 ] = new Stadt ( \"Muenchen\" , muenchenBevoelkerung , 310.70f ); List < Integer > koelnBevoelkerung = new ArrayList <> (); koelnBevoelkerung . add ( 962884 ); koelnBevoelkerung . add ( 1007119 ); koelnBevoelkerung . add ( 1075935 ); staedte [ 3 ] = new Stadt ( \"Koeln\" , koelnBevoelkerung , 405.02f ); List < Integer > frankfurtBevoelkerung = new ArrayList <> (); frankfurtBevoelkerung . add ( 648550 ); frankfurtBevoelkerung . add ( 679664 ); frankfurtBevoelkerung . add ( 736414 ); staedte [ 4 ] = new Stadt ( \"Frankfurt/Main\" , frankfurtBevoelkerung , 248.31f ); berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 5 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); return staedte ; } //Zusatz: Schreiben Sie in StadtTest.java eine Methode //public static boolean contains(Map<MyInteger, Stadt> staedteMap, Stadt stadt), //die ein true zur\u00fcckgibt, wenn die Stadt stadt bereits in der staedteMap als ein //value existiert. //Tipp: Die Methode get(Object key) aus Map gibt den zu key geh\u00f6rigen value zur\u00fcck //und mit keySet() bekommt man die Menge aller keys aus der Map ermittelt. //Testen Sie die Methode, indem Sie zur Menge nur dann die stadt hinzuf\u00fcgen, //wenn sie nicht bereits in der Menge aufgef\u00fchrt ist. public static boolean contains ( Map < MyInteger , Stadt > staedteMap , Stadt stadt ) { //alle Schl\u00fcssel ermitteln mit keySet() //durch alle Schl\u00fcssel iterieren und testen ob der jeweilige Schl\u00fcssel //gleich der \u00fcbergebenen Stadt ist //wird die Stadt gefunden -> return true, sonst false } public static void main ( String [] args ) { System . out . printf ( \"%n------------ Menge --------------%n\" ); //3. \u00c4ndern Sie in der StadtTest.java den Konstruktoraufruf der //Set von HashSet nach TreeSet und f\u00fchren Sie die Klasse aus - //es wird eine Exception geworfen (Stadt cannot be cast to //class java.lang.Comparable). Set < Stadt > staedteMenge = new HashSet <> (); for ( Stadt s : staedte ()) { staedteMenge . add ( s ); } for ( Stadt s : staedteMenge ) { s . print (); } System . out . printf ( \"%n------------ Maps --------------%n\" ); //6. \u00c4ndern Sie in der StadtTest.java den Konstruktoraufruf der Map von //HashMap nach TreeMap und f\u00fchren Sie die Klasse aus - es wird eine Exception // geworfen (MyInteger cannot be cast to class java.lang.Comparable). Map < MyInteger , Stadt > staedteMap = new HashMap <> (); int i = 1 ; for ( Stadt s : staedte ()) { //f\u00fcr die Zusatzaufgabe muss hier noch gepr\u00fcft werden, ob s bereits in //der Map vorhanden ist, daf\u00fcr wird die contains-Methode ben\u00f6tigt staedteMap . put ( new MyInteger ( i ++ ), s ); } for ( Map . Entry < MyInteger , Stadt > entry : staedteMap . entrySet ()) { MyInteger key = entry . getKey (); System . out . printf ( \"%-3d\" , key . intValue ()); entry . getValue (). print (); } } } MyInteger.java //6. Implementieren Sie f\u00fcr MyInteger das Interface Comparable<MyInteger> so, //dass nach den Gr\u00f6\u00dfen der Werte sortiert wird. public class MyInteger implements ?/ extends ? ???<???> { private int value ; public MyInteger ( int value ) { this . value = value ; } public int intValue () { return this . value ; } public static MyInteger valueOf ( int value ) { return new MyInteger ( value ); } //7. \u00c4ndern Sie compareTo() in MyInteger so, dass //die Werte der Schl\u00fcssel absteigend sortiert werden. //Beispiel aus dem Script f\u00fcr AUFsteigend sortiert: //public int compareTo(Rectangle o) { // int diff = (this.height+this.width) - (o.height+o.width); // return diff; //} @Override public int compareTo ( ??? ??? ) { } } m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 7 Stadt.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 package uebungen.uebung7 ; import java.util.* ; public class Stadt implements Comparable < Stadt > { String name ; List < Integer > bevoelkerung ; float flaeche ; public Stadt ( String name , List < Integer > bevoelkerung , float flaeche ) { super (); this . name = name ; this . bevoelkerung = bevoelkerung ; this . flaeche = flaeche ; } void print () { System . out . printf ( \"%-15s %9.2f km2 \" , name , flaeche ); for ( Integer i : bevoelkerung ) { System . out . printf ( \"%,12d\" , i ); } System . out . println (); } @Override public boolean equals ( Object o ) { if ( o == null ) return false ; if ( o == this ) return true ; if ( this . getClass () != o . getClass ()) return false ; Stadt other = ( Stadt ) o ; return ( this . name . equals ( other . name )); } @Override public int hashCode () { return this . name . hashCode (); } @Override public int compareTo ( Stadt o ) { if ( this . flaeche < o . flaeche ) return 1 ; else if ( this . flaeche > o . flaeche ) return - 1 ; else return 0 ; } } StadtTest.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 package uebungen.uebung7 ; import java.util.* ; public class StadtTest { public static Stadt [] staedte () { Stadt [] staedte = new Stadt [ 6 ] ; List < Integer > berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 0 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); List < Integer > hamburgBevoelkerung = new ArrayList <> (); hamburgBevoelkerung . add ( 1715392 ); hamburgBevoelkerung . add ( 1786448 ); hamburgBevoelkerung . add ( 1810438 ); staedte [ 1 ] = new Stadt ( \"Hamburg\" , hamburgBevoelkerung , 755.22f ); List < Integer > muenchenBevoelkerung = new ArrayList <> (); muenchenBevoelkerung . add ( 1210223 ); muenchenBevoelkerung . add ( 1353186 ); muenchenBevoelkerung . add ( 1464301 ); staedte [ 2 ] = new Stadt ( \"Muenchen\" , muenchenBevoelkerung , 310.70f ); List < Integer > koelnBevoelkerung = new ArrayList <> (); koelnBevoelkerung . add ( 962884 ); koelnBevoelkerung . add ( 1007119 ); koelnBevoelkerung . add ( 1075935 ); staedte [ 3 ] = new Stadt ( \"Koeln\" , koelnBevoelkerung , 405.02f ); List < Integer > frankfurtBevoelkerung = new ArrayList <> (); frankfurtBevoelkerung . add ( 648550 ); frankfurtBevoelkerung . add ( 679664 ); frankfurtBevoelkerung . add ( 736414 ); staedte [ 4 ] = new Stadt ( \"Frankfurt/Main\" , frankfurtBevoelkerung , 248.31f ); berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 5 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); return staedte ; } public static boolean contains ( Map < MyInteger , Stadt > staedteMap , Stadt stadt ) { Set < MyInteger > allKeys = staedteMap . keySet (); for ( MyInteger key : allKeys ) { if ( staedteMap . get ( key ). equals ( stadt )) return true ; } return false ; } public static void main ( String [] args ) { System . out . printf ( \"%n------------ Menge --------------%n\" ); Set < Stadt > staedteMenge = new TreeSet <> (); for ( Stadt s : staedte ()) { staedteMenge . add ( s ); } for ( Stadt s : staedteMenge ) { s . print (); } System . out . printf ( \"%n------------ Maps --------------%n\" ); Map < MyInteger , Stadt > staedteMap = new TreeMap <> (); int i = 1 ; for ( Stadt s : staedte ()) { if ( ! contains ( staedteMap , s )) { staedteMap . put ( new MyInteger ( i ++ ), s ); } } for ( Map . Entry < MyInteger , Stadt > entry : staedteMap . entrySet ()) { MyInteger key = entry . getKey (); System . out . printf ( \"%-3d\" , key . intValue ()); entry . getValue (). print (); } } } MyInteger.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 package uebungen.uebung7 ; public class MyInteger implements Comparable < MyInteger > { private int value ; public MyInteger ( int value ) { this . value = value ; } public int intValue () { return this . value ; } public static MyInteger valueOf ( int value ) { return new MyInteger ( value ); } @Override public int compareTo ( MyInteger o ) { return - ( this . value - o . value ); } } m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 7 - aus der \u00dcbung von Frau Busjahn Stadt.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 package uebungen.uebung7 ; import java.util.* ; public class Stadt implements Comparable < Stadt > { String name ; List < Integer > bevoelkerung ; float flaeche ; public Stadt ( String name , List < Integer > bevoelkerung , float flaeche ) { super (); this . name = name ; this . bevoelkerung = bevoelkerung ; this . flaeche = flaeche ; } void print () { System . out . printf ( \"%-15s %9.2f km2 \" , name , flaeche ); for ( Integer i : bevoelkerung ) { System . out . printf ( \"%,12d\" , i ); } System . out . println (); } @Override public boolean equals ( Object o ) { if ( o == null ) return false ; if ( o == this ) return true ; if ( this . getClass () != o . getClass ()) return false ; Stadt other = ( Stadt ) o ; return ( this . name . equals ( other . name )); } @Override public int hashCode () { return this . name . hashCode (); } @Override public int compareTo ( Stadt o ) { //Um aufsteigend nach Stadtnamen zu sortieren: //return this.name.compareTo(o.name); //Um absteigend nach Stadtnamen zu sortieren: //return -this.name.compareTo(o.name); //Um anhand der Fl\u00e4che absteigend zu sortieren: if ( this . flaeche < o . flaeche ) return 1 ; else if ( this . flaeche > o . flaeche ) return - 1 ; else return 0 ; //Alternativen: //return this.flaeche < o.flaeche ? 1: (this.flaeche == o.flaeche ? 0 : -1); //Float f1 = this.flaeche; //Float f2 = o.flaeche; //return -f1.compareTo(f2); } } StadtTest.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 package uebungen.uebung7 ; import java.util.* ; public class StadtTest { public static Stadt [] staedte () { Stadt [] staedte = new Stadt [ 6 ] ; List < Integer > berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 0 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); List < Integer > hamburgBevoelkerung = new ArrayList <> (); hamburgBevoelkerung . add ( 1715392 ); hamburgBevoelkerung . add ( 1786448 ); hamburgBevoelkerung . add ( 1810438 ); staedte [ 1 ] = new Stadt ( \"Hamburg\" , hamburgBevoelkerung , 755.22f ); List < Integer > muenchenBevoelkerung = new ArrayList <> (); muenchenBevoelkerung . add ( 1210223 ); muenchenBevoelkerung . add ( 1353186 ); muenchenBevoelkerung . add ( 1464301 ); staedte [ 2 ] = new Stadt ( \"Muenchen\" , muenchenBevoelkerung , 310.70f ); List < Integer > koelnBevoelkerung = new ArrayList <> (); koelnBevoelkerung . add ( 962884 ); koelnBevoelkerung . add ( 1007119 ); koelnBevoelkerung . add ( 1075935 ); staedte [ 3 ] = new Stadt ( \"Koeln\" , koelnBevoelkerung , 405.02f ); List < Integer > frankfurtBevoelkerung = new ArrayList <> (); frankfurtBevoelkerung . add ( 648550 ); frankfurtBevoelkerung . add ( 679664 ); frankfurtBevoelkerung . add ( 736414 ); staedte [ 4 ] = new Stadt ( \"Frankfurt/Main\" , frankfurtBevoelkerung , 248.31f ); berlinBevoelkerung = new ArrayList <> (); berlinBevoelkerung . add ( 3382169 ); berlinBevoelkerung . add ( 3460725 ); berlinBevoelkerung . add ( 3574830 ); staedte [ 5 ] = new Stadt ( \"Berlin\" , berlinBevoelkerung , 891.68f ); return staedte ; } public static boolean contains ( Map < MyInteger , Stadt > staedteMap , Stadt stadt ) { Set < MyInteger > allKeys = staedteMap . keySet (); for ( MyInteger key : allKeys ) { if ( staedteMap . get ( key ). equals ( stadt )) return true ; } //Alternative ohne keyset //for(Map.Entry<MyInteger, Stadt> entry : staedteMap.entrySet()) //{ // if (entry.getValue().equals(stadt)) return true; //} return false ; } public static void main ( String [] args ) { System . out . printf ( \"%n------------ Menge --------------%n\" ); Set < Stadt > staedteMenge = new TreeSet <> (); for ( Stadt s : staedte ()) { staedteMenge . add ( s ); } for ( Stadt s : staedteMenge ) { s . print (); } System . out . printf ( \"%n------------ Maps --------------%n\" ); Map < MyInteger , Stadt > staedteMap = new TreeMap <> (); int i = 1 ; for ( Stadt s : staedte ()) { if ( ! contains ( staedteMap , s )) { staedteMap . put ( new MyInteger ( i ++ ), s ); } } for ( Map . Entry < MyInteger , Stadt > entry : staedteMap . entrySet ()) { MyInteger key = entry . getKey (); System . out . printf ( \"%-3d\" , key . intValue ()); entry . getValue (). print (); } } } MyInteger.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 package uebungen.uebung7 ; public class MyInteger implements Comparable < MyInteger > { private int value ; public MyInteger ( int value ) { this . value = value ; } public int intValue () { return this . value ; } public static MyInteger valueOf ( int value ) { return new MyInteger ( value ); } @Override public int compareTo ( MyInteger o ) { return - ( this . value - o . value ); //Alternative: //if(this.value > o.value) return -1; //else if(this.value < o.value) return 1; //else return 0; } }","title":"\u00dcbung 7 (Interfaces)"},{"location":"uebungen/#ubung-8-gui","text":"\u00dcbung 8 Erstellen Sie folgende GUI: vorkommentierte Klasse GUIUebung.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 //import public class GUIUebung extends JFrame { public GUIUebung () { super (); //Titel //Verhalten beim Schlie\u00dfen //Gr\u00f6\u00dfe //Sichtbarkeit //... //gute Vorlage: //https://freiheit.f4.htw-berlin.de/prog2/gui/#erweitern-des-fensters-um-ein-jpanel } private JPanel initContent () { //Ein paar Tipps: //mehrere Panels verwenden //JTextField hat verschiedene Konstruktoren, nicht nur JTextField(int columns) //Rahmen k\u00f6nnen mit BorderFactory erzeugt werden //Beim FlowLayout \u00e4ndert sich die Gr\u00f6\u00dfe der Steuerelemente nicht, //bei GridLayout passt sich die Gr\u00f6\u00dfe an den Container an } public static void main ( String [] args ) { new GUIUebung (); } } m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 8 Uebung8.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 package uebungen.uebung8 ; import java.awt.* ; import javax.swing.* ; import javax.swing.border.Border ; public class Uebung8 extends JFrame { public Uebung8 () { super (); this . setTitle ( \"GUI \u00dcbung\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel content = this . initContent (); this . getContentPane (). add ( content ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private JPanel initContent () { JPanel mainPanel = new JPanel (); mainPanel . setLayout ( new BorderLayout ()); Border redline = BorderFactory . createLineBorder ( Color . RED ); JPanel oben = new JPanel (); oben . setLayout ( new FlowLayout ()); JLabel text1 = new JLabel ( \"Text\" ); text1 . setForeground ( Color . WHITE ); oben . add ( text1 ); oben . setBackground ( Color . BLUE ); oben . setBorder ( redline ); JPanel links = new JPanel (); links . setLayout ( new FlowLayout ( FlowLayout . CENTER , 50 , 50 )); JLabel text2 = new JLabel ( \"Weiterer Text\" ); links . add ( text2 ); JTextField input = new JTextField ( \"Feld\" , 10 ); links . add ( input ); links . setBackground ( Color . LIGHT_GRAY ); JPanel rechts = new JPanel (); rechts . setLayout ( new GridLayout ( 2 , 1 , 20 , 20 )); rechts . add ( new JButton ( \"Button 1\" )); rechts . add ( new JButton ( \"Button 2\" )); rechts . setBackground ( Color . LIGHT_GRAY ); mainPanel . add ( oben , BorderLayout . NORTH ); mainPanel . add ( links , BorderLayout . CENTER ); mainPanel . add ( rechts , BorderLayout . EAST ); return mainPanel ; } public static void main ( String [] args ) { new Uebung8 (); } } sehr hilfreiche Grafiken zur \u00dcbung von Frau Busjahn Unterscheidung zwischen Containern und Steuerelementen: Visualisierung der Panels (Container) in der GUI der \u00dcbung","title":"\u00dcbung 8 (GUI)"},{"location":"uebungen/#ubung-9-ereignisbehandlung-actionlistener","text":"\u00dcbung 9 Erstellen Sie ein Fenster mit einem Textfeld und zwei Buttons add und remove . Sowohl das Textfeld als auch die beiden Buttons sollen Objektvariablen (und somit zugreifbar von allen Methoden der Klasse) sein. Unterteilen Sie das main - JPanel zun\u00e4chst in zwei JPanel s unten und oben . Dem JPanel oben werden das Textfeld und die beiden Buttons hinzugef\u00fcgt. Setzen Sie die Hintergrundfarbe des JPanels oben auf YELLOW . Setzen Sie die Hintergrundfarbe des JPanels unten auf CYAN . Das JPanel unten soll ebenfalls eine Objektvariable sein. Setzen Sie die Gr\u00f6\u00dfe des Fensters auf Werte, so dass es wie folgt erscheint: F\u00fcgen Sie folgende Objektvariable hinzu: List<JLabel> labels = new ArrayList<>(); Implementieren Sie den ActionListener wie folgt: Wird der add -Button gedr\u00fcckt, wird der Liste labels ein JLabel hinzugef\u00fcgt, wobei der Text des JLabels dem Text im Textfeld entspricht (der Text des Textfeldes kann \u00fcber die Objektmethode getText() von JTextField ausgelesen werden). Die Liste labels wird vollst\u00e4ndig ausgelesen und jedes JLabel aus labels wird dem JPanel unten mithilfe der add() -Methode von JPanel hinzugef\u00fcgt. Rufen Sie this.unten.revalidate(); auf \u2013 dies st\u00f6\u00dft ein Neuzeichnen des JPanels unten an. Wird der \u201eremove\u201c-Button gedr\u00fcckt, wird das JLabel aus der Liste labels gel\u00f6scht, das den gleichen Text hat wie der Text, der im Textfeld eingegeben wurde. Au\u00dferdem wird das JLabel aus den JPanel unten entfernt (Objektmethode remove() von JPanel ). Rufen Sie this.unten.revalidate(); auf \u2013 dies st\u00f6\u00dft ein Neuzeichnen des JPanels unten an. Tipp : wenn Sie einem JLabel eine Hintergrundfarbe mit setBackground(Color c) setzen, dann sieht man diese nur, wenn Sie f\u00fcr dieses JLabel die Methode setOpaque(true) aufrufen. Nur dadurch werden f\u00fcr dieses JLabel alle Pixel gezeichnet, die in dessen Grenzen sind, d.h. das komplette Rechteck, das das JLabel ausf\u00fcllt. Ansonsten w\u00fcrde nur der Text \"gezeichnet\" und die Hintergrundfarbe w\u00e4re hinter dem Text versteckt. vorkommentierte Klasse Uebung9.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 //import public class Uebung9 // es werden JFrame und ActionListener ben\u00f6tigt { //Objektvariablen: //1. Textfeld, zwei Buttons (add und remove) //2. unteres Panel //4. Liste mit Labeln public Uebung9 () { super ( \"TITEL\" ); //Verhalten beim Schlie\u00dfen //Gr\u00f6\u00dfe //Sichtbarkeit //... //2. main-JPanel in JPanels unten und oben unterteilen //Dem Panel oben werden das Textfeld und die beiden Buttons hinzugef\u00fcgt, //das lagern wir in die Methode createOben() aus //oben: Hintergrundfarbe ist YELLOW //unten: Hintergrundfarbe ist CYAN //Das Panel unten soll ebenfalls eine Objektvariable sein. //4. neue ArrayList f\u00fcr die Label anlegen } private JPanel createOben () { //... return panel ; } @Override public void actionPerformed ( ActionEvent e ) { //Quelle des Events ermitteln //Falls es der \"add\"-Button ist // - Text aus dem Textfeld \u00fcbernehmen // - neues Label mit dem Text anlegen // - das Label formatieren (Hintergrundfarbe RED) // Tipp: wenn Sie einem JLabel eine Hintergrundfarbe mit setBackground(Color c) // setzen, dann sieht man diese nur, wenn Sie f\u00fcr dieses JLabel die Methode // setOpaque(true) aufrufen. Nur dadurch werden f\u00fcr dieses JLabel alle Pixel // gezeichnet, die in dessen Grenzen sind, d.h. das komplette Rechteck, // das das JLabel ausf\u00fcllt. Ansonsten w\u00fcrde nur der Text \"gezeichnet\" und // die Hintergrundfarbe w\u00e4re hinter dem Text versteckt. // - das Label in Label-Liste einf\u00fcgen // - das Label dem unteren Panel hinzuf\u00fcgen //Falls es der \"remove\"-Button ist // - Text aus dem Textfeld \u00fcbernehmen // - durch die Label-Liste iterieren, um das zu entfernende Label zu finden // Tipp: Iterator nehmen // Iterator<Typ> it = variable.iterator(); // while(it.hasNext()){ // mach irgendwas mit it.next() // } // das Label muss sowohl aus der Liste als auch aus dem Panel entfernt werden //Text im Textfeld l\u00f6schen //weitere n\u00f6tige Schritte requestFocus(), revalidate(), repaint() } public static void main ( String [] args ) { new Uebung9 (); } } eine m\u00f6gliche L\u00f6sung (aus der Morgen\u00fcbung - danke an Frau Schippl) Uebung9.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 package uebungen.uebung9 ; import java.awt.Color ; import java.awt.GridLayout ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.util.ArrayList ; import java.util.Iterator ; import java.util.List ; import javax.swing.* ; public class Uebung9 extends JFrame implements ActionListener { //Objektvariablen hier erstellen, damit die f\u00fcr alle Methoden verf\u00fcgbar sind, also in der initContent(), auch ActionEvent() JTextField textfeld ; JButton b1 ; JButton b2 ; List < JLabel > labels = new ArrayList <> (); //Collection, Liste voll mit labels JPanel unten ; public Uebung9 () { super (); this . setTitle ( \"Elemente hinzuf\u00fcgen\" ); this . setDefaultCloseOperation ( EXIT_ON_CLOSE ); //Steuerelemente : Buttons, Label, ... //Container: JPanel JPanel panel = this . initContent (); this . getContentPane (). add ( panel ); //Steuerelemente dem Container hinzuf\u00fcgen this . setSize ( 400 , 100 ); this . setLocation ( 200 , 300 ); this . setVisible ( true ); } public JPanel initContent () { JPanel main = new JPanel (); main . setLayout ( new GridLayout ( 2 , 1 )); //Bei grid + flowLayout spielt die Reihenfolge eine Rolle! JPanel oben = new JPanel (); this . textfeld = new JTextField ( 10 ); this . b1 = new JButton ( \"add\" ); this . b1 . setActionCommand ( \"add\" ); //doppelmoppel, aber falls Text kryptisch, dann wird setAytionCommans benutzt!! this . b2 = new JButton ( \"remove\" ); oben . setBackground ( Color . YELLOW ); oben . add ( this . textfeld ); oben . add ( this . b1 ); oben . add ( this . b2 ); this . b1 . addActionListener ( this ); this . b2 . addActionListener ( this ); main . add ( oben ); this . unten = new JPanel (); unten . setBackground ( Color . CYAN ); main . add ( unten ); return main ; } public static void main ( String [] args ) { new Uebung9 (); } @Override public void actionPerformed ( ActionEvent e ) //HINZUF\u00dcGEN ZUM PANEL!!!! { //System.out.println(\"Test..\"); IMMER TESTEN ZUERST!!!! Object quelle = e . getSource (); if ( quelle instanceof JButton ) //Ist es ein JBUTTON? { JButton button = ( JButton ) quelle ; //\u00fcberpr\u00fcfen, ob JButton und was f\u00fcr ein Button geklickt wird if ( button . getActionCommand (). equals ( \"add\" )) { JLabel neu = new JLabel ( this . textfeld . getText ()); neu . setOpaque ( true ); neu . setBackground ( Color . RED ); neu . setForeground ( Color . WHITE ); this . labels . add ( neu ); //Liste hinzugef\u00fcgt //Textfeld auslesen, dannJLabel erzeugen -> Liste hinzuf\u00fcgen //Textfeld mit \"Hallo\" bef\u00fc\u00fclen, dann add-Button -> Ausgabe erscheint this . unten . add ( neu ); //JPanel hinzugef\u00fcgt System . out . println ( this . textfeld . getText ()); //Text aus Textfeld erscheint auf konsole System . out . println ( \"Add - Button geklickt...\" ); //Ist es ein add-Button? } else if ( button . getActionCommand (). equals ( \"remove\" )) { String inputText = this . textfeld . getText (); //Text aus Textfeld wird zwischen gespeichert Iterator < JLabel > it = this . labels . iterator (); //laufen durch Liste while ( it . hasNext ()) //Element in der Liste? { JLabel aktLabel = it . next (); //wir holen das ELement aus der Liste, wir betrachten es if ( aktLabel . getText (). equals ( inputText )) //Was f\u00fcr einen text in diesem label? + vergleichen den Text mit dem Text im Textfeld { it . remove (); //wenn gleich/schon vorhanden, dann l\u00f6schen this . unten . remove ( aktLabel ); //wird auch ausJPanel gel\u00f6scht } } System . out . println ( \"Remove - Button geklickt..\" ); //ist es ein remove Button? } this . unten . revalidate (); //zeichnet Fenster nochmal neu this . unten . repaint (); } } }","title":"\u00dcbung 9 (Ereignisbehandlung - ActionListener)"},{"location":"uebungen/#ubung-10-zeichnen","text":"\u00dcbung 10 Zeichnen Sie ein Quadrat. Passen Sie dieses Quadrat m\u00f6glichst passend in das Fenster. Da es sich um ein Quadrat handelt, kann es sich nur der H\u00f6he oder der Breite des Fensters anpassen, je nachdem, was kleiner ist. Wenn die H\u00f6he kleiner ist, als die Breite, dann soll das Quadrat ausgef\u00fcllt sein. Wenn die Breite kleiner als die H\u00f6he ist, dann soll das Quadrat nicht ausgef\u00fcllt sein, aber die Linienst\u00e4rke auf 5.0f gesetzt werden. Die Zeichenfarbe soll zuf\u00e4llig erzeugt werden - jedes Mal, wenn die paintComponent() -Methode aufgerufen wird. Beobachten Sie anhand des Farbwechsels, wie oft die paintComponent() -Methode aufgerufen wird. vorkommentierte Klasse Uebung10.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 //import public class Uebung10 extends JFrame { public Uebung10 () { //Titel, Verhalten beim Schlie\u00dfen ... //neue Leinwand (Canvas) anlegen und dem Fenster hinzuf\u00fcgen //Gr\u00f6\u00dfe, Location, Sichtbarkeit } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { // Implementierung von JPanel aufrufen // Methoden von Graphics2D nutzbar machen //Zuf\u00e4llige Werte f\u00fcr Rot, Gr\u00fcn und Blau erzeugen //Kleine Hilfe: //https://www.tutorialspoint.com/java/util/random_nextint_inc_exc.htm //public Color(int r, int g, int b) //falls die H\u00f6he des Fensters kleiner ist, als die Breite //L\u00e4nge der Seiten an H\u00f6he anpassen //Quadrat ausgef\u00fcllt //sonst //L\u00e4nge der Seiten an Breite anpassen //Quadrat nicht ausgef\u00fcllt, Linienst\u00e4rke 5.0f } } public static void main ( String [] args ) { new Uebung10 (); } } eine m\u00f6gliche L\u00f6sung (aus der Morgen\u00fcbung - danke an Frau Schippl) Uebung10.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 package uebungen.uebung10 ; import java.awt.BasicStroke ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.util.Random ; import javax.swing.* ; public class Uebung10 extends JFrame { public Uebung10 () { super (); this . setTitle ( \"\u00dcbung10\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). add ( new Canvas ()); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; //g2.drawRect(20, 130, 200, 100); int abstand = this . getHeight () / 20 ; int hoehe = this . getHeight () - 2 * abstand ; int breite = this . getWidth () - 2 * abstand ; //Random Farben erzeugen: Random r = new Random (); int rot = r . nextInt ( 256 ); int gruen = r . nextInt ( 256 ); int blau = r . nextInt ( 256 ); Color c = new Color ( rot , gruen , blau ); g2 . setColor ( c ); //rot-Gr\u00fcn-Blau 0 bis 255 // Quadrat zeichnen if ( hoehe < breite ) { int abstandLinks = ( this . getWidth () - hoehe ) / 2 ; g2 . fillRect ( abstandLinks , abstand , hoehe , hoehe ); } else { int abstandOben = ( this . getHeight () - breite ) / 2 ; g2 . setStroke ( new BasicStroke ( 5.0f )); //dicke Linien g2 . drawRect ( abstand , abstandOben , breite , breite ); } } } public static void main ( String [] args ) { new Uebung10 (); } } sehr hilfreiche Erl\u00e4uterungen zur \u00dcbung von Frau Busjahn Wenn man keine Abst\u00e4nde definiert und die gesamte H\u00f6he als Seitenl\u00e4nge nimmt: g2 . fillRect ( 0 , 0 , this . getHeight (), this . getHeight ()); Beispiel f\u00fcr H\u00f6he < Breite Um oben und unten gleich gro\u00dfe Abst\u00e4nde einzufu\u0308gen: int abstandOben = this . getHeight () / 20 ; int abstandUnten = this . getHeight () / 20 ; int seitenLaenge = this . getHeight () - abstandOben - abstandUnten ; g2 . fillRect ( 0 , abstandOben , seitenLaenge , seitenLaenge ); ``` Da abstandOben und abstandUnten gleich sein sollen, l\u00e4sst sich das verku\u0308rzen zu: int abstandObenUnten = this . getHeight () / 20 ; int seitenLaenge = this . getHeight () - ( 2 * abstandObenUnten ); g2 . fillRect ( 0 , abstandObenUnten , seitenLaenge , seitenLaenge ); Um das Quadrat auch horizontal mittig auszurichten, braucht man noch den Abstand links int rest = this . getWidth () - seitenLaenge ; int links = rest / 2 ; oder zusammengefasst: int links = ( this . getWidth () - seitenLaenge ) / 2 ; g2 . fillRect ( links , abstandObenUnten , seitenLaenge , seitenLaenge );","title":"\u00dcbung 10 (Zeichnen)"},{"location":"uebungen/#ubung-11-mausereignisse","text":"\u00dcbung 11 Zeichnen Sie mithilfe der Maus farbige Rechtecke. Das Zeichnen soll folgenderma\u00dfen funktionieren: dort, wo sie mit der Maus in die Zeichenfl\u00e4che klicken, ist ein Eckpunkt des Rechtecks mit gedr\u00fcckter Maustaste ziehen Sie das Rechteck gro\u00df (w\u00e4hrenddessen soll das Rechteck dargestellt werden) durch Loslassen der Maustaste legen Sie die endg\u00fcltige Gr\u00f6\u00dfe des Rechtecks fest und speichern das Rechteck durch wiederholtes Zeichnen werden mehrere Rechtecke gezeichnet. Die zuvor gezeichneten Rechtecke bleiben dargestellt jedes Rechteck hat eine zuf\u00e4llig erzeugte Farbe beachten Sie, dass das Zeichnen eines Rechtecks nicht nur von links oben nach rechts unten, sondern in alle Richtungen m\u00f6glich sein soll Tipps: studieren Sie dieses Beispiel behandeln Sie die Mausereignisse in den Methoden mousePressed() , mouseReleased() ( MouseListener ) sowie aus dem MouseMotionListener mouseDragged() erstellen Sie sich zun\u00e4chst eine Klasse, die Rechtecke repr\u00e4sentiert (Objektvariablen x , y , width , height , jweils int ) speichern Sie die Rechtecke zusammen mit ihrer Farbe in einer Map (untersuchen Sie den Unterschied zwischen HashMap und LinkedHashMap ) zeichnen Sie in paintComponent() alle Rechtecke aus der Map und das aktuelle Rechteck (das Sie gerade zeichnen) vorkommentierte Klassen RechteckeZeichnen.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.HashMap ; import java.util.Map ; import java.util.Random ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class RechteckeZeichnen extends ... implements ... { // Objektvariablen public RechteckeZeichnen () { super (); this . setTitle (...); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); //Collection f\u00fcr die Rechtecke anlegen //Leinwand anlegen und die Listener f\u00fcr Mausereignisse hinzuf\u00fcgen this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; //aktuelles Rechteck zeichnen (falls es aktuell eins gibt) //gespecherte Rechtecke aus der Collection zeichnen } } public static void main ( String [] args ) { new RechteckeZeichnen (); } @Override public void mousePressed ( MouseEvent e ) { //neues Rechteck erzeugen //zuf\u00e4llige Farbe erzeugen - hatten wir letzte Woche } @Override public void mouseDragged ( MouseEvent e ) { //H\u00f6he und Breite des aktuellen Rechtecks setzen //je nachdem ob die Maus gerade nach rechts, links, oben oder unten gezogen wird //Leinwand neu zeichnen } @Override public void mouseReleased ( MouseEvent e ) { //aktuelles Rechteck speichern } @Override public void mouseClicked ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} @Override public void mouseMoved ( MouseEvent e ) {} } Rechteck.java 1 2 3 4 5 6 7 8 9 10 11 12 public class Rechteck { //private Objektvariablen f\u00fcr x, y, H\u00f6he und Breite public Rechteck ( int x , int y , int width , int height ) { //Koordinaten und Gr\u00f6\u00dfe des Rechtecks } // Getter und Setter f\u00fcr x, y, H\u00f6he und Breite } eine m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 11 RechteckeZeichnen.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 package uebungen.uebung11 ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.HashMap ; import java.util.Map ; import java.util.Random ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class RechteckeZeichnen extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; Rechteck aktRechteck ; Color aktColor ; Map < Rechteck , Color > rechtecke ; public RechteckeZeichnen () { super (); this . setTitle ( \"Rechtecke zeichnen\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . rechtecke = new HashMap <> (); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private class Canvas extends JPanel { // die View @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); Graphics2D g2 = ( Graphics2D ) g ; if ( RechteckeZeichnen . this . aktRechteck != null ) { g2 . setColor ( aktColor ); int x = RechteckeZeichnen . this . aktRechteck . getX (); int y = RechteckeZeichnen . this . aktRechteck . getY (); int width = RechteckeZeichnen . this . aktRechteck . getWidth (); int height = RechteckeZeichnen . this . aktRechteck . getHeight (); g2 . fillRect ( x , y , width , height ); } for ( Map . Entry < Rechteck , Color > eintrag : RechteckeZeichnen . this . rechtecke . entrySet ()) { Rechteck r = eintrag . getKey (); Color c = eintrag . getValue (); g2 . setColor ( c ); int x = r . getX (); int y = r . getY (); int width = r . getWidth (); int height = r . getHeight (); g2 . fillRect ( x , y , width , height ); } } } public static void main ( String [] args ) { new RechteckeZeichnen (); } // der Controller @Override public void mousePressed ( MouseEvent e ) { Point p = e . getPoint (); this . aktRechteck = new Rechteck ( p . x , p . y , 0 , 0 ); Random zuf = new Random (); int r = zuf . nextInt ( 256 ); int g = zuf . nextInt ( 256 ); int b = zuf . nextInt ( 256 ); this . aktColor = new Color ( r , g , b ); } @Override public void mouseDragged ( MouseEvent e ) { Point p = e . getPoint (); if ( p . x > this . aktRechteck . getX ()) // Maus nach rechts { int width = p . x - this . aktRechteck . getX (); this . aktRechteck . setWidth ( width ); } else // Maus nach links { int width = ( this . aktRechteck . getX () - p . x ) + this . aktRechteck . getWidth (); this . aktRechteck . setWidth ( width ); this . aktRechteck . setX ( p . x ); } if ( p . y > this . aktRechteck . getY ()) // Maus nach unten { int height = p . y - this . aktRechteck . getY (); this . aktRechteck . setHeight ( height ); } else // Maus nach oben { int height = ( this . aktRechteck . getY () - p . y ) + this . aktRechteck . getHeight (); this . aktRechteck . setHeight ( height ); this . aktRechteck . setY ( p . y ); } this . canvas . repaint (); } @Override public void mouseReleased ( MouseEvent e ) { Point p = e . getPoint (); this . rechtecke . put ( this . aktRechteck , this . aktColor ); } @Override public void mouseClicked ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} @Override public void mouseMoved ( MouseEvent e ) {} } Rechteck.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 package uebungen.uebung11 ; public class Rechteck { private int x ; private int y ; private int width ; private int height ; public Rechteck ( int x , int y , int width , int height ) { this . x = x ; this . y = y ; this . width = width ; this . height = height ; } public int getX () { return x ; } public void setX ( int x ) { this . x = x ; } public int getY () { return y ; } public void setY ( int y ) { this . y = y ; } public int getWidth () { return width ; } public void setWidth ( int width ) { this . width = width ; } public int getHeight () { return height ; } public void setHeight ( int height ) { this . height = height ; } } sehr hilfreiche Erl\u00e4uterungen zur \u00dcbung von Frau Busjahn","title":"\u00dcbung 11 (Mausereignisse)"},{"location":"uebungen/#ubung-12-klicks-zahlen","text":"\u00dcbung 12 Erstellen Sie eine solche GUI: Es handelt sich im Prinzip um ein Gitter aus JPanel s (siehe auch Tipps unten). Beachten Sie: Dem Konstruktor f\u00fcr das Fenster wird eine hoehe (int) und eine breite (int) \u00fcbergeben. Aus der hoehe und der breite ergibt sich die Anzahl der JPanels. In der Abbildung ist also hoehe=4 und breite=3 . Jedes JPanel soll ein JLabel enthalten, das der Anzahl der (Maus-)Klicks auf dieses JPanel entspricht. Am Anfang sind die Anzahl der Klicks f\u00fcr alle JPanels 0. Implementieren Sie den MouseListener so, dass bei Klick auf ein JPanel automatisch die Anzahl der Klicks um 1 erh\u00f6ht und die neue Anzahl im JLabel dargestellt wird. Au\u00dferdem soll das (oder die) JPanel(s) mit den meisten Klicks rot dargestellt werden. Die Abbildung zeigt das Fenster nach einigen Mausklicks auf die einzelnen Panels. Es gibt drei Panels mit den meisten Klicks. Nach einem weiteren Klick gibt es nur noch ein Panel mit dem meisten Klicks. Wird auf den reset -Button geklickt, ist alles wieder auf 0 (und grau) gestellt. Tipps: F\u00fcr die \"JPanels\" eigenen sich tats\u00e4chlich JPanels , da diese ja eine Hintergrundfarbe haben, einen Rand ( Border ) haben k\u00f6nnen, ein JLabel aufnehmen k\u00f6nnen usw. Es w\u00e4re ja aber auch sinnvoll, dass jedes JPanel z.B. auch eine Eigenschaft anzahlKlicks o.\u00e4. hat. Insofern w\u00e4re der Vorschlag, eine eigene Klasse MyPanel zu erstellen, die von JPanel erbt, somit alle Eigenschaften eines JPanel hat und aber auch noch zus\u00e4tzliche Eigenschaften haben kann. Als Datenstruktur f\u00fcr das Model bietet sich sicherlich ein zweidimensionales Array an. Wenn Sie jedes MyPanel an den MouseListener anmelden, dann m\u00fcssen Sie gar nicht die Koordinaten des Mausklicks betrachten, sondern nur abfragen, welches der MyPanel das Mausereignis ausgel\u00f6st hat (oder Sie verwenden sogar f\u00fcr jedes dieser MyPanel eine anonyme Klasse des MouseListener ). Probieren Sie mal ein wenig herum, es gibt sehr viele verschiedene L\u00f6sungsm\u00f6glichkeiten hier. eine m\u00f6gliche L\u00f6sung f\u00fcr \u00dcbung 12 (Morgen\u00fcbung) Uebung12.javapackage uebungen.uebung12 ; import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Font ; import java.awt.GridLayout ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.awt.event.ItemEvent ; import java.awt.event.ItemListener ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.WindowEvent ; import java.awt.event.WindowListener ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JLabel ; import javax.swing.JPanel ; import javax.swing.JToggleButton ; public class Uebung12 extends JFrame { JPanel content ; MyPanel [][] panels ; int meistenClicks = 0 ; JToggleButton blau ; public Uebung12 ( int hoehe , int breite ) { super (); this . setTitle ( \"Klicks zaehlen\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . content = this . initCenter ( hoehe , breite ); this . getContentPane (). add ( this . content , BorderLayout . CENTER ); // von den folgenden vier Zeilen werden eventuell eine oder mehrere oder alle auskommentiert this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 400 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } private JPanel initCenter ( int hoehe , int breite ) { JPanel center = new JPanel (); center . setBackground ( Color . BLACK ); center . setLayout ( new GridLayout ( hoehe , breite , 2 , 2 )); this . panels = new MyPanel [ hoehe ][ breite ] ; for ( int row = 0 ; row < hoehe ; row ++ ) { for ( int col = 0 ; col < breite ; col ++ ) { panels [ row ][ col ] = new MyPanel (); panels [ row ][ col ] . setBackground ( Color . RED ); //panels[row][col].addMouseListener(panels[row][col]); center . add ( panels [ row ][ col ] ); } } return center ; } private JPanel initSouth () { JPanel south = new JPanel (); JButton resetBtn = new JButton ( \"reset\" ); resetBtn . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { for ( int zeile = 0 ; zeile < Uebung12 . this . panels . length ; zeile ++ ) { for ( int spalte = 0 ; spalte < Uebung12 . this . panels [ zeile ] . length ; spalte ++ ) { Uebung12 . this . panels [ zeile ][ spalte ] . nrOfClicks = 0 ; Uebung12 . this . panels [ zeile ][ spalte ] . label . setText ( \"0\" ); // \"Anwendung\" des ToggleButtons - gehoert nicht zur Aufgabe if ( Uebung12 . this . blau . isSelected ()) { Uebung12 . this . panels [ zeile ][ spalte ] . setBackground ( Color . BLUE ); } else { Uebung12 . this . panels [ zeile ][ spalte ] . setBackground ( Color . LIGHT_GRAY ); } Uebung12 . this . meistenClicks = 0 ; } } } }); // gehoert nicht zur Aufgabe, nur \"Spielerei\" this . blau = new JToggleButton ( \"blau\" ); this . blau . addItemListener ( new ItemListener () { @Override public void itemStateChanged ( ItemEvent e ) { JToggleButton tb = ( JToggleButton ) e . getSource (); if ( tb . getText (). equals ( \"blau\" )) tb . setText ( \"grau\" ); else if ( tb . getText (). equals ( \"grau\" )) tb . setText ( \"blau\" ); } }); south . add ( resetBtn ); south . add ( blau ); return south ; } class MyPanel extends JPanel implements MouseListener { int nrOfClicks ; JLabel label ; MyPanel () { this . nrOfClicks = 0 ; this . setLayout ( new GridLayout ( 1 , 1 )); this . label = new JLabel ( \"0\" ); this . label . setFont ( new Font ( \"Verdana\" , Font . BOLD , 48 )); this . label . setForeground ( Color . WHITE ); this . label . setHorizontalAlignment ( JLabel . CENTER ); this . add ( label ); this . addMouseListener ( this ); } @Override public void mouseClicked ( MouseEvent e ) { MyPanel mp = ( MyPanel ) e . getSource (); mp . nrOfClicks ++ ; mp . label . setText ( String . valueOf ( nrOfClicks )); if ( mp . nrOfClicks > Uebung12 . this . meistenClicks ) { Uebung12 . this . meistenClicks = mp . nrOfClicks ; } for ( int zeile = 0 ; zeile < Uebung12 . this . panels . length ; zeile ++ ) { for ( int spalte = 0 ; spalte < Uebung12 . this . panels [ zeile ] . length ; spalte ++ ) { if ( Uebung12 . this . panels [ zeile ][ spalte ] . nrOfClicks == Uebung12 . this . meistenClicks ) { Uebung12 . this . panels [ zeile ][ spalte ] . setBackground ( Color . RED ); } else { Uebung12 . this . panels [ zeile ][ spalte ] . setBackground ( Color . LIGHT_GRAY ); } } } } @Override public void mousePressed ( MouseEvent e ) {} @Override public void mouseReleased ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} } public static void main ( String [] args ) { new Uebung12 ( 4 , 3 ); } } sehr hilfreiche Erl\u00e4uterungen zu JPanels von Frau Busjahn Die folgenden drei Programme machen letztlich alle das Gleiche. Sie erzeugen alle ein Panel, das in die Mitte des Fenster platziert wird, nur die Stelle im Quelltext, an der das Panel angelegt wird, variiert. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 import java.awt.BorderLayout ; import javax.swing.* ; public class PanelsVarianteA extends JFrame { public PanelsVarianteA () { super ( \"Variante A\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel panelCenter = new JPanel (); JLabel labelCenter = new JLabel ( \"A\" ); panelCenter . add ( labelCenter ); this . getContentPane (). add ( panelCenter , BorderLayout . CENTER ); this . setSize ( 400 , 200 ); this . setVisible ( true ); } public static void main ( String [] args ) { new PanelsVarianteA (); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 import java.awt.BorderLayout ; import javax.swing.* ; public class PanelsVarianteB extends JFrame { public PanelsVarianteB () { super ( \"Variante B\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); JPanel panelCenter = initCenter (); this . getContentPane (). add ( panelCenter , BorderLayout . CENTER ); this . setSize ( 400 , 200 ); this . setVisible ( true ); } JPanel initCenter () { JPanel panelCenter = new JPanel (); JLabel labelCenter = new JLabel ( \"B\" ); panelCenter . add ( labelCenter ); return panelCenter ; } public static void main ( String [] args ) { new PanelsVarianteB (); } } 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 import java.awt.BorderLayout ; import javax.swing.* ; public class PanelsVarianteC extends JFrame { public PanelsVarianteC () { super ( \"Variante C\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . getContentPane (). add ( initCenter (), BorderLayout . CENTER ); this . setSize ( 400 , 200 ); this . setVisible ( true ); } JPanel initCenter () { JPanel panelCenter = new JPanel (); JLabel labelCenter = new JLabel ( \"C\" ); panelCenter . add ( labelCenter ); return panelCenter ; } public static void main ( String [] args ) { new PanelsVarianteC (); } }","title":"\u00dcbung 12 (Klicks z\u00e4hlen)"},{"location":"uebungen/#ubung-13-graphen","text":"\u00dcbung 13 Erstellen Sie ein Fenster zum Zeichnen. Implementieren Sie den Mauslistener so, dass f\u00fcr jeden Mausklick an der Stelle des Mausklicks ein schwarzer ausgef\u00fcllter Kreis mit dem DURCHMESSER = 30 angezeigt wird: F\u00fcr das Model gen\u00fcgt es, sich die Punkte in einer Collection zu merken (am einfachsten ist wohl eine ArrayList ). F\u00fcr den Controller h\u00e4tten wir hier die Wahl zwischen mouseClicked() und mousePressed() . Wegen der sp\u00e4teren Erweiterung (Bewegen der Punkte), sollten wir hier mouseClicked() w\u00e4hlen. Passen Sie die View nun so an, dass die Punkte durch Linien der Strichst\u00e4rke 2.0f miteinander verbunden werden. Sie k\u00f6nnen auch gleich (oder sp\u00e4ter) den ersten und letzten Punkt mit einer Linie verbinden (so wie in der Abbildung). Implementieren sie den MouseMotionListener so, dass wenn Sie mit der Maus auf einen Punkt (Kreis) klicken (oder knapp daneben) und bei gedr\u00fcckter Maustaste die Maus bewegen, sich auch der Punkt mitbewegt. Zur Erinnerung: die Methode mouseClicked() wird aufgerufen, nachdem mousePressed() und mouseReleased() aufgerufen wurden. \u00c4ndert sich die Mausposition zwischen den Aufrufen von mousePressed() und mouseReleased() , wird mouseClicked() gar nicht aufgerufen. Es empfiehlt sich also, in mousePressed() zu bestimmen, ob durch den Mausklick ein Kreis getroffen wurde. Das muss nat\u00fcrlich kein genauer \"Treffer\" sein, bauen Sie ruhig eine Toleranz von z.B. 20 ein. Den Punkt, den Sie \"getroffen\" haben, sollten Sie sich merken, denn seine Koordinaten werden ja durch die Mausbewegung ver\u00e4ndert. Wenn Sie in mousePressed() einen Punkt \"getroffen\" haben, dann sollten Sie das Verschieben des Punktes in mouseDragged() behandeln. Beachten Sie, dass mouseDragged() (bei gedr\u00fcckter Maustaste) permanent aufgerufen wird. Wir k\u00f6nnen Sie die \u00c4nderung der Mausposition zwischen zwei Aufrufen von mouseDragged() ermitteln? eine m\u00f6gliche L\u00f6sung (aus der Morgen\u00fcbung - danke an Frau Schippl) Uebung13.java 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 package uebungen.uebung13 ; import java.awt.BorderLayout ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.ArrayList ; import java.util.List ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Uebung13 extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; List < Point > points ; //f\u00fcr uns = Java.util! Point movepoint ; Point remember ; public Uebung13 () { super (); this . setTitle ( \"Uebung13\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); this . canvas . addMouseListener ( this ); //MOUSELISTENER ANMELDEN NICHT VERGESSEN!!!! this . canvas . addMouseMotionListener ( this ); //MOUSEMOTIONLISTENER ANMELDEN NICHT VERGESSEN!!!! this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); this . points = new ArrayList <> (); } private class Canvas extends JPanel { final static int DURCHM = 30 ; final static int RADIUS = DURCHM / 2 ; @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar // hier zeichnen wir die Punkte: for ( Point p : Uebung13 . this . points ) // anstatt \"points\" = Uebung13.this.points { int x = p . x ; int y = p . y ; g2 . fillOval ( x , y , DURCHM , DURCHM ); } for ( int i = 0 ; i < Uebung13 . this . points . size () - 1 ; i ++ ) //.size wegen Liste { Point p1 = Uebung13 . this . points . get ( i ); Point p2 = Uebung13 . this . points . get ( i + 1 ); // \"i+1\" => Nachbarpunkt von p1 g2 . drawLine ( p1 . x + RADIUS , p1 . y + RADIUS , p2 . x + RADIUS , p2 . y + RADIUS ); // \"+ Radius\" -> damit die Linien ab der Mitte des Punktes beginnen if ( i == Uebung13 . this . points . size () - 2 ) // vorletzte Position=> HIER verbinden wir den ersten und letzten Punkt { Point p = Uebung13 . this . points . get ( 0 ); g2 . drawLine ( p2 . x + RADIUS , p2 . y + RADIUS , p . x + RADIUS , p . y + RADIUS ); } } } } public static void main ( String [] args ) { new Uebung13 (); } @Override public void mouseClicked ( MouseEvent e ) //wir klicken -> Kreis wird gezeichnet -> Liste wird bef\u00fcllt { Point p = e . getPoint (); // speichern den Punkt beim Ort des Klickens this . points . add ( p ); // in der Liste speichern this . canvas . repaint (); // canvas wird nochmal gezeichnet-- wichtig!! } @Override public void mousePressed ( MouseEvent e ) //ermitteln, ob wir punkt getroffen haben { int x = e . getX (); int y = e . getY (); final int ABSTAND = 20 ; //Abstand festlegen for ( Point p : this . points ) { if ( Math . abs ( x - p . x ) < ABSTAND && Math . abs ( y - p . y ) < ABSTAND ) // Abstand von Punkt ermitteln // MINUS den Punkt, den wir betrachten { this . movepoint = p ; this . remember = e . getPoint (); // Speichern die Koordinate des Mausklicks } } } @Override public void mouseReleased ( MouseEvent e ) {} @Override public void mouseEntered ( MouseEvent e ) {} @Override public void mouseExited ( MouseEvent e ) {} @Override public void mouseDragged ( MouseEvent e ) //Kreise bewegen: { int x = e . getX (); int y = e . getY (); int x1 = this . remember . x ; int y1 = this . remember . y ; int xDif = x - x1 ; //Wohin und um wie viel haben wir uns bewegt? int yDif = y - y1 ; this . movepoint . x = this . movepoint . x + xDif ; // wir verschieben den Punkt um die Differenz, this . movepoint . y = this . movepoint . y + yDif ; // die wir ermittelt haben this . canvas . repaint (); //WICHTIG this . remember = e . getPoint (); // rememberPunkt wird gespeichert } } sehr hilfreiche Erl\u00e4uterungen zu this von Frau Busjahn 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 //Achtung, dieser Code dient nur dazu, zu zeigen, wie man an //verschiedenen Stellen auf die Methoden und Variablen zugreifen //kann und ist nicht unbedingt der beste Stil public class A { int variableInA ; B bInA ; A ( int wertA ) { this . variableInA = wertA ; this . bInA = new B ( wertA + 10 ); this . printA ( \"Konstruktor A\" ); this . bInA . printB ( \"Konstruktor A\" ); } void printA ( String aufrufIn ) { System . out . println ( \"printA - \" + aufrufIn + \" - Variable der Klasse A: \" + this . variableInA ); System . out . println ( \"printA - \" + aufrufIn + \" - Variable der Klasse B: \" + this . bInA . variableInB ); } class B { int variableInB ; B ( int wertB ) { this . variableInB = wertB ; this . printB ( \"Konstruktor B\" ); } void printB ( String aufrufIn ) { System . out . println ( \"printB - \" + aufrufIn + \" - Variable der Klasse A: \" + A . this . variableInA ); System . out . println ( \"printB - \" + aufrufIn + \" - Variable der Klasse B: \" + this . variableInB ); } } public static void main ( String [] args ) { A a1 = new A ( 2 ); a1 . variableInA = 6 ; a1 . printA ( \"main\" ); a1 . bInA . variableInB = 16 ; a1 . bInA . printB ( \"main\" ); } }","title":"\u00dcbung 13 (Graphen)"},{"location":"uebungen/#ubung-14-quadrat","text":"\u00dcbung 14 Erstellen Sie ein Fenster zum Zeichnen. Passen Sie zun\u00e4chst ein Quadrat mit Strichst\u00e4rke 3.0f in das Fenster ein und zwar so, dass es \u2153 von entweder der Breite der canvas oder der H\u00f6he der canvas gro\u00df ist, je nachdem, was kleiner ist. Es muss aber nicht mittig sein: In der folgenden Abbildung ist die H\u00f6he kleiner als die Breite. Also ist die H\u00f6he korrekt gedrittelt, aber die gleiche L\u00e4nge wurde f\u00fcr x verwendet, also f\u00fcr den Abstand vom linken Rand zum Quadrat. Deshalb ist der Abstand vom Quadrat zum rechten Rand gr\u00f6\u00dfer. Sie k\u00f6nnen aber das Quadrat auch gerne komplett in die Mitte setzen. Wenn der create square -Button gedr\u00fcckt wird, erscheint ein farbiges Quadrat, das genau so gro\u00df ist, wie das zuvor gezeichnete nichtausgef\u00fcllte schwarze Quadrat. Die Position des Quadrates wird zuf\u00e4llig bestimmt. Es passt aber auf jeden Fall vollst\u00e4ndig in die Canvas! Auch die Farbe des Quadrates wird zuf\u00e4llig bestimmt. Es beh\u00e4lt die ganze Zeit \u00fcber seine Farbe. Das farbige Quadrat kann nun durch Bewegen der Maus bei gedr\u00fcckter Maustaste bewegt werden. Wenn das Quadrat (fast) vollst\u00e4ndig in dem schwarzen Quadrat ist, dann bleibt es genau dort und kann nicht weiter bewegt werden. Video zu \u00dcbung 14 eine m\u00f6gliche L\u00f6sung zu \u00dcbung 14 (zum Video) Uebung14.javaimport java.awt.BasicStroke ; import java.awt.BorderLayout ; import java.awt.Color ; import java.awt.Graphics ; import java.awt.Graphics2D ; import java.awt.Point ; import java.awt.event.ActionEvent ; import java.awt.event.ActionListener ; import java.awt.event.MouseEvent ; import java.awt.event.MouseListener ; import java.awt.event.MouseMotionListener ; import java.util.Random ; import javax.swing.JButton ; import javax.swing.JFrame ; import javax.swing.JPanel ; public class Uebung14 extends JFrame implements MouseListener , MouseMotionListener { Canvas canvas ; Point posSquare ; Color colorSquare ; boolean move = false ; Point remember ; boolean fixiert = false ; public Uebung14 () { super (); this . setTitle ( \"Quadrat\" ); this . setDefaultCloseOperation ( JFrame . EXIT_ON_CLOSE ); this . canvas = new Canvas (); this . canvas . addMouseListener ( this ); this . canvas . addMouseMotionListener ( this ); this . getContentPane (). add ( this . canvas , BorderLayout . CENTER ); // von den folgenden vier Zeilen werden eventuell eine oder mehrere oder alle auskommentiert this . getContentPane (). add ( this . initSouth (), BorderLayout . SOUTH ); this . setSize ( 400 , 300 ); this . setLocation ( 300 , 200 ); this . setVisible ( true ); } // start inner class private class Canvas extends JPanel { @Override protected void paintComponent ( Graphics g ) { super . paintComponent ( g ); // Implementierung von JPanel aufrufen Graphics2D g2 = ( Graphics2D ) g ; // Methoden von Graphics2D nutzbar int width = this . getWidth (); int height = this . getHeight (); // int smaller = (width < height) ? width : height; int smaller = 0 ; int length = 0 ; int x = 0 ; int y = 0 ; if ( width < height ) { smaller = width ; length = smaller / 3 ; x = smaller / 3 ; y = ( height - length ) / 2 ; } else { smaller = height ; length = smaller / 3 ; y = smaller / 3 ; x = ( width - length ) / 2 ; } g2 . setStroke ( new BasicStroke ( 3.0f )); g2 . drawRect ( x , y , length , length ); if ( Uebung14 . this . posSquare != null && Uebung14 . this . colorSquare != null ) { int xSquare = Uebung14 . this . posSquare . x ; int ySquare = Uebung14 . this . posSquare . y ; Color cSquare = Uebung14 . this . colorSquare ; g2 . setColor ( cSquare ); g2 . fillRect ( xSquare , ySquare , length , length ); } } } // ende innere Klasse private JPanel initSouth () { JPanel south = new JPanel (); JButton btnCreate = new JButton ( \"create square\" ); btnCreate . addActionListener ( new ActionListener () { @Override public void actionPerformed ( ActionEvent e ) { Random r = new Random (); int widthCanvas = Uebung14 . this . canvas . getWidth (); int heightCanvas = Uebung14 . this . canvas . getHeight (); int lengthSquare = ( widthCanvas < heightCanvas ) ? widthCanvas / 3 : heightCanvas / 3 ; int x = r . nextInt ( widthCanvas - lengthSquare ); int y = r . nextInt ( heightCanvas - lengthSquare ); Uebung14 . this . posSquare = new Point ( x , y ); int rot = r . nextInt ( 256 ); int gruen = r . nextInt ( 256 ); int blau = r . nextInt ( 256 ); Uebung14 . this . colorSquare = new Color ( rot , gruen , blau ); Uebung14 . this . canvas . repaint (); } }); south . add ( btnCreate ); return south ; } public static void main ( String [] args ) { new Uebung14 (); } @Override public void mouseDragged ( MouseEvent e ) { if ( move ) { int xMouse = e . getX (); int yMouse = e . getY (); int xLast = this . remember . x ; int yLast = this . remember . y ; int xDiff = xMouse - xLast ; int yDiff = yMouse - yLast ; this . posSquare . x = this . posSquare . x + xDiff ; this . posSquare . y = this . posSquare . y + yDiff ; // ab hier: im schwarzen Quadrat? int widthCanvas = this . canvas . getWidth (); int heightCanvas = this . canvas . getHeight (); int xBlack , yBlack ; if ( widthCanvas < heightCanvas ) { int lengthSquare = widthCanvas / 3 ; xBlack = widthCanvas / 3 ; yBlack = ( heightCanvas - lengthSquare ) / 2 ; } else { int lengthSquare = heightCanvas / 3 ; yBlack = heightCanvas / 3 ; xBlack = ( widthCanvas - lengthSquare ) / 2 ; } int xSquare = this . posSquare . x ; int ySquare = this . posSquare . y ; final int ABSTAND = 20 ; if ( Math . abs ( xSquare - xBlack ) < ABSTAND && Math . abs ( ySquare - yBlack ) < ABSTAND ) { // farbiges Quadrat genau im schwarzen System . out . println ( \"im schwarzen\" ); this . move = false ; this . posSquare . x = xBlack ; this . posSquare . y = yBlack ; } this . canvas . repaint (); this . remember = e . getPoint (); } } @Override public void mouseMoved ( MouseEvent e ) { // TODO Auto-generated method stub } @Override public void mouseClicked ( MouseEvent e ) { // TODO Auto-generated method stub } @Override public void mousePressed ( MouseEvent e ) { int xMouse = e . getX (); int yMouse = e . getY (); if ( ! this . fixiert && this . posSquare != null ) { int xSquare = this . posSquare . x ; int ySquare = this . posSquare . y ; int widthCanvas = this . canvas . getWidth (); int heightCanvas = this . canvas . getHeight (); int lengthSquare = ( widthCanvas < heightCanvas ) ? widthCanvas / 3 : heightCanvas / 3 ; if ( xMouse >= xSquare && xMouse <= ( xSquare + lengthSquare ) && yMouse >= ySquare && yMouse <= ( ySquare + lengthSquare )) { this . move = true ; this . remember = e . getPoint (); System . out . println ( \"im Quadrat\" ); } } } @Override public void mouseReleased ( MouseEvent e ) { this . move = false ; } @Override public void mouseEntered ( MouseEvent e ) { // TODO Auto-generated method stub } @Override public void mouseExited ( MouseEvent e ) { // TODO Auto-generated method stub } }","title":"\u00dcbung 14 (Quadrat)"},{"location":"uebungen/#zusatz","text":"","title":"Zusatz"},{"location":"uebungen/#test-driven-development","text":"parseDouble(String) In der Aufgabe 2 sollen Sie f\u00fcr die Klasse MyInteger eine Methode parseInt(String s) schreiben, die einen String s in eine int -Zahl umwandelt, wenn dies m\u00f6glich ist. In dieser \u00dcbung wollen wir eine solche (statische) Methode parseDouble(String s) f\u00fcr eine Klasse MyDouble testgetrieben entwickeln. \u00dcberlegen Sie sich dazu einige Strings, die Sie umwandeln wollen und die dazugeh\u00f6rigen erwarteten Ergebnisse. Es muss nicht vollst\u00e4ndig implementiert werden. Es geht ums Prinzip. Mithilfe von assertThrows() k\u00f6nnen Sie \u00fcbrigens pr\u00fcfen, ob eine Exception geworfen wird (wenn s keiner Zahl entspricht) - siehe dazu z.B. hier oder hier . Viel Spa\u00df!","title":"Test-driven development"},{"location":"wiederholung/","text":"Wiederholung \u00b6 Datentypen \u00b6 Wertetypen \u00b6 es wird der konkrete Wert in der Variablen gespeichert belegen abh\u00e4ngig vom Datentyp unterschiedlich viel Arbeitsspeicher \u2192 unterschiedliche Wertebereiche Beispiele Wertetypen // boolean f\u00fcr Wahrheitswerte true und false boolean x = false ; // mit false initialisiert boolean wahr = true ; // Schluesselwort true boolean falsch = ! wahr ; // Enthaelt den Wert false // byte, short, int, long f\u00fcr ganze Zahlen byte a = 0 ; // mit 0 initialisiert short b = 124 ; // Zuweisung einer ganzen Zahl int c = a + b ; // Wertebereich immer beachten! long lo = c * 200 ; // l nicht als Variablenname verwenden // char f\u00fcr ein einzelnes Zeichen - einfache Anfuehrungszeichen! char zeichen = 'c' ; // Doppelte \" f\u00fcr Strings! // float und double f\u00fcr Flie\u00dfkommazahlen float f = 0.0f ; // Wird mit 0.0 initialisiert double d = 100.25 ; // Dezimalpunkt statt Dezimalkomma!! Referenztypen \u00b6 es wird eine Referenz auf ein Objekt gespeichert Objekte besitzen Eigenschaften: Methoden (Verhalten) und Variablen (Zustand) Zugriff auf Methoden und Variablen \u00fcber den Punkt-Operator Beispiele Referenztypen // Schluesselwort class um neue Klasse (Typ) zu definieren public class Power { int base ; // Objektvariablen, f\u00fcr jedes Objekt int exp ; // existieren Kopien im Arbeitsspeicher // Objektmethode public void print () { System . out . println ( this . base + \"^\" + this . exp ); } } // irgendwo im Hauptprogramm public static void main ( String [] args ) { Power p1 = new Power ( 2 , 4 ); Power p2 = new Power ( 2 , 4 ); p1 . print (); p2 . print (); boolean equal = ( p1 == p2 ); // true oder false ? } Datenstrukturen \u00b6 Variablen \u00b6 einfachste Datenstruktur \u2192 speichern genau einen Wert (kann auch Referenz auf ein Objekt sein) sind von einem Datentyp (Wertetyp oder Referenztyp) haben einen Namen besitzen einen Wert Wert kann sich bei Variablen zur Laufzeit \u00e4ndern (Wertzuweisungsoperator =) Wert von Konstanten kann nicht mehr ge\u00e4ndert werden (final) besitzen einen G\u00fcltigkeitsbereich (den sogenannten Scope) Scope einer Variable: der Anweisungsblock, in dem die Variable deklariert wurde lokale Variable: in einer Methode deklariert \u2192 dort lokal globale Variable: in einer Klasse deklariert \u2192 dort global Beispiele Variablen int zahlen = 0 ; // konventionelle Variable final float PI = 3.14516f ; // Konstante // Erzeugen eines neuen Feldes (Arrays) und Zuweisen der Referenz int [] zahlenFeld = new int [ 100 ] ; // Klassen mit Objekt- und Klassenvariablen public class Power { int base ; // Objektvariablen, f\u00fcr jedes Objekt int exp ; // existieren Kopien im Arbeitsspeicher public String toString () { // lokale Variable --> nur in der Methode gueltig String output = this . base + \"^\" + this . exp ; return output ; } // Variablen sollten mit einem Kleinbuchstaben beginnen // Konstanten sollten nur mit Gro\u00dfbuchstaben benannt werden Arrays \u00b6 Arrays sind Objekte (Referenztypen) speichern eine festgelegte Anzahl von Werten eines festgelegten Datentyps (k\u00f6nnen Werte- und Referenztypen sein) besitzen Methoden (z.B. sort() ) und Variablen (z.B. length ) k\u00f6nnen auch mehrdimensional sein Zugriff auf Elemente mit eckigen Klammern unter Verwndung des Indexes Beispiele Arrays // Einfache Deklaration -> nur Datentyp bekannt, keine Laenge int [] zahlen ; // Eckige Klammern f\u00fcr Array-Datentyp // Erzeugen eines neuen Feldes und Zuweisen der Referenz zahlen = new int [ 100 ] ; // new-Operator, hier: Angabe der Laenge // Explizite Initialisierung bei der Deklaration // Bei Initialisiert mit Werten --> keine Laengenangabe noetig float [] werte = new float [ 10 ] ; // Platz f\u00fcr 10 Werte double [] fib = { 1.0 , 2.0 , 3.0 }; // Werte in {}-Klammern // Mehrdimensionale Felder int [][] hdBild = new int [ 1920 ][ 1080 ] ; // Felder k\u00f6nnen f\u00fcr alle Datentypen verwendet werden Power [] potenzen = new Power [ 5 ] ; // Noch keine Objekte enthalten potenzen [ 0 ] = new Power ( 2 , 4 ); // Zuweisung Objekt an Index 0 Literale \u00b6 sind Werte sind von einem bestimmten Datentyp (kann auch ein Referenztyp sein) keine ausf\u00fchrbare Einheit \u2192 kein Ausdruck \u2192 k\u00f6nnen nicht alleine stehen meistens auf der rechten Seite einer Wertzuweisung als Parameterwert bei Aufruf einer Methode als Vergleichswert bei logischen Ausdr\u00fccken Beispiele Literale 100 true 'a' \"hallo\" { 1 , 2 , 3 , 4 } 5.5 Ausdr\u00fccke \u00b6 kleinste ausf\u00fchrbare Einheit eines Programms z.B.: Zuweisung numerische Berechnung logische Bedingung Operatoren: arithmetisch: +, -, *, /, %, ++, -- relational: ==, !=, <, >, <=, >= logisch: !, &&, || Zuweisung: =, +=, -=, *=, /=, %= sonstige: a?b:c, typecast, new, instanceof, . Anweisungen \u00b6 Einzelanweisung ; Block {} Deklaration Typ Methode , Typ Variable Ausdruck Bedingung if() else switch() case Schleifen for while do while Exceptions try catch() Assertions assert Beispiele Anweisungen // Bloecke immer zwischen geschweiften Klammern { // Anweisung 1... // Anweisung 2... } // Definition und Deklaration int a ; float b = 1.0f ; // Einfacher Ausdruck a = 1010 ; // Bedingungen if ( a == 1010 ) // if-Zweig muss immer vorhanden sein { // Anweisungen... } else if ( a == 1011 ) // 0 - beliebig viele else-if-Zweige { // Anweisungen... } else // 0 - 1 else-Zweig { // Anweisungen... } switch ( a ) // zu pruefende Variable in Klammern { case 1010 : { b *= 2.0 ; break ; } // beliebig viele case-Zweige case 1011 : { b *= 3.0 ; break ; } // break nicht vergessen default : { b = 0.0f ; } // Zweig f\u00fcr alle anderen Werte } int [] meinFeld = { 1 , 2 , 3 , 4 , 5 }; // for-Schleife // 1. Initialisierung // 2. Schleifen-Bedingung // 3. Anweisungen nach Schleifendurchlauf // Schleifen-Anweisungen als Block hinter for for ( int index = 0 ; index < meinFeld . length ; index ++ ) { System . out . println ( meinFeld [ index ] ); } // while-Schleife // Nur Schleifen-Bedingung angeben // Auf Endlos-Schleifen achten while ( index < meinFeld . length ) { System . out . println ( meinFeld [ index ] ); index ++ ; } Methoden \u00b6 wiederverwendbare und/oder logisch abgeschlossene Programmteile sollten in Methoden zusammengefasst werden Methoden besitzen einen Namen (im Scope eindeutig), keinen, einen oder mehrere Parameter und einen R\u00fcckgabetyp (evtl. void ) Aufruf einer Methode durch Namen und runde Klammern, in welche Werte f\u00fcr die Parameter \u00fcbergeben werden bei Aufruf einer Methode werden alle Anweisungen abgearbeitet, die in der Methode definiert (implementiert) wurden (bis zum return ) werden Methoden mit R\u00fcckgabetyp (also nicht void ) aufgerufen, entspricht ihr Aufruf einem konkreten Wert (R\u00fcckgabewert) Methodenstack/Call stack public static int multiply ( int a , int b ) { return a * b ; } public static int square ( int n ) { return multiply ( n , n ); } public static void printSquare ( int n ) { int squared = square ( n ); System . out . println ( n + \" x \" + n + \" = \" + squared ); } public static void main ( String [] args ) { printSquare ( 4 ); } Vererbung \u00b6 Weitergabe aller Methoden und Objekte einer Elternklasse (Basisklasse) an eine Kindklasse (Subklasse) Schl\u00fcsselwort extends jede Klasse (bis auf Object ) besitzt genau eine Elternklasse; ist keine angegeben, ist es automatisch Object Vererebung beschreibt \u201eis-a\u201c-Beziehung Methoden der Elternklasse k\u00f6nnen \u00fcberschrieben werden (wenn sie nicht als final definiert wurden) \u2192 @Override verwenden Originalmethode kann mit Schl\u00fcsselwort super aufgerufen werden Konstruktoren \u00b6 besondere Objektmethoden, die beim Erzeugen des Objektes aufgerufen werden gleicher Name wie die Klasse, keinen R\u00fcckgabetyp angeben (auch nicht void ) wird kein Konstruktor definiert, steht automatisch (implizit) ein parameterloser Konstruktor zur Verf\u00fcgung (einzige Ausnahme: in der Elternklasse existieren nur parametrisierte Konstruktoren) Aufruf von this und super m\u00f6glich werden nicht vererbt Beispiele Konstruktoren public class Power { int base ; int exp ; public Power () { this ( 1 , 0 ); // Aufruf des Konstruktors in Zeile 15 } public Power ( int base ) { this ( base , 0 ); // Aufruf des Konstruktors in Zeile 15 } public Power ( int base , int exp ) { this . base = base ; // Parameterwerte f\u00fcr base und int this . exp = exp ; // auf Objektvariablen sichern } } public static void main ( String [] args ) { Power p1 = new Power (); // p1.base = 1, p1.exp = 0 Power p2 = new Power ( 10 ); // p2.base = 10, p2.exp = 0 Power p3 = new Power ( 10 , 5 ); // p3.base = 10, p3.exp = 5 } Access Controller (Zugriffsmodifizierer) \u00b6 Steuerung der Lebensdauer, Sichtbarkeit und Ver\u00e4nderbarkeit von Klassen, Methoden und Variablen \u2013 Prinzip der Datenkapselung Klassen public Zugriff von au\u00dferhalb des Paketes (default) Zugriff nur innerhalb des Paketes final von der Klasse k\u00f6nnen keine Klassen erben abstract Klasse besitzt Methoden, die keinen Methodenrumpf besitzen (nicht implementiert sind) Variablen und Methoden (wenn Klasse public ) public Zugriff von \u00fcberall (bei Variablen vermeiden!) protected Zugriff aus Klasse und Kindklasse (default) Zugriff aus Klasse und Paket private Zugriff nur aus Klasse","title":"Wiederholung"},{"location":"wiederholung/#wiederholung","text":"","title":"Wiederholung"},{"location":"wiederholung/#datentypen","text":"","title":"Datentypen"},{"location":"wiederholung/#wertetypen","text":"es wird der konkrete Wert in der Variablen gespeichert belegen abh\u00e4ngig vom Datentyp unterschiedlich viel Arbeitsspeicher \u2192 unterschiedliche Wertebereiche Beispiele Wertetypen // boolean f\u00fcr Wahrheitswerte true und false boolean x = false ; // mit false initialisiert boolean wahr = true ; // Schluesselwort true boolean falsch = ! wahr ; // Enthaelt den Wert false // byte, short, int, long f\u00fcr ganze Zahlen byte a = 0 ; // mit 0 initialisiert short b = 124 ; // Zuweisung einer ganzen Zahl int c = a + b ; // Wertebereich immer beachten! long lo = c * 200 ; // l nicht als Variablenname verwenden // char f\u00fcr ein einzelnes Zeichen - einfache Anfuehrungszeichen! char zeichen = 'c' ; // Doppelte \" f\u00fcr Strings! // float und double f\u00fcr Flie\u00dfkommazahlen float f = 0.0f ; // Wird mit 0.0 initialisiert double d = 100.25 ; // Dezimalpunkt statt Dezimalkomma!!","title":"Wertetypen"},{"location":"wiederholung/#referenztypen","text":"es wird eine Referenz auf ein Objekt gespeichert Objekte besitzen Eigenschaften: Methoden (Verhalten) und Variablen (Zustand) Zugriff auf Methoden und Variablen \u00fcber den Punkt-Operator Beispiele Referenztypen // Schluesselwort class um neue Klasse (Typ) zu definieren public class Power { int base ; // Objektvariablen, f\u00fcr jedes Objekt int exp ; // existieren Kopien im Arbeitsspeicher // Objektmethode public void print () { System . out . println ( this . base + \"^\" + this . exp ); } } // irgendwo im Hauptprogramm public static void main ( String [] args ) { Power p1 = new Power ( 2 , 4 ); Power p2 = new Power ( 2 , 4 ); p1 . print (); p2 . print (); boolean equal = ( p1 == p2 ); // true oder false ? }","title":"Referenztypen"},{"location":"wiederholung/#datenstrukturen","text":"","title":"Datenstrukturen"},{"location":"wiederholung/#variablen","text":"einfachste Datenstruktur \u2192 speichern genau einen Wert (kann auch Referenz auf ein Objekt sein) sind von einem Datentyp (Wertetyp oder Referenztyp) haben einen Namen besitzen einen Wert Wert kann sich bei Variablen zur Laufzeit \u00e4ndern (Wertzuweisungsoperator =) Wert von Konstanten kann nicht mehr ge\u00e4ndert werden (final) besitzen einen G\u00fcltigkeitsbereich (den sogenannten Scope) Scope einer Variable: der Anweisungsblock, in dem die Variable deklariert wurde lokale Variable: in einer Methode deklariert \u2192 dort lokal globale Variable: in einer Klasse deklariert \u2192 dort global Beispiele Variablen int zahlen = 0 ; // konventionelle Variable final float PI = 3.14516f ; // Konstante // Erzeugen eines neuen Feldes (Arrays) und Zuweisen der Referenz int [] zahlenFeld = new int [ 100 ] ; // Klassen mit Objekt- und Klassenvariablen public class Power { int base ; // Objektvariablen, f\u00fcr jedes Objekt int exp ; // existieren Kopien im Arbeitsspeicher public String toString () { // lokale Variable --> nur in der Methode gueltig String output = this . base + \"^\" + this . exp ; return output ; } // Variablen sollten mit einem Kleinbuchstaben beginnen // Konstanten sollten nur mit Gro\u00dfbuchstaben benannt werden","title":"Variablen"},{"location":"wiederholung/#arrays","text":"Arrays sind Objekte (Referenztypen) speichern eine festgelegte Anzahl von Werten eines festgelegten Datentyps (k\u00f6nnen Werte- und Referenztypen sein) besitzen Methoden (z.B. sort() ) und Variablen (z.B. length ) k\u00f6nnen auch mehrdimensional sein Zugriff auf Elemente mit eckigen Klammern unter Verwndung des Indexes Beispiele Arrays // Einfache Deklaration -> nur Datentyp bekannt, keine Laenge int [] zahlen ; // Eckige Klammern f\u00fcr Array-Datentyp // Erzeugen eines neuen Feldes und Zuweisen der Referenz zahlen = new int [ 100 ] ; // new-Operator, hier: Angabe der Laenge // Explizite Initialisierung bei der Deklaration // Bei Initialisiert mit Werten --> keine Laengenangabe noetig float [] werte = new float [ 10 ] ; // Platz f\u00fcr 10 Werte double [] fib = { 1.0 , 2.0 , 3.0 }; // Werte in {}-Klammern // Mehrdimensionale Felder int [][] hdBild = new int [ 1920 ][ 1080 ] ; // Felder k\u00f6nnen f\u00fcr alle Datentypen verwendet werden Power [] potenzen = new Power [ 5 ] ; // Noch keine Objekte enthalten potenzen [ 0 ] = new Power ( 2 , 4 ); // Zuweisung Objekt an Index 0","title":"Arrays"},{"location":"wiederholung/#literale","text":"sind Werte sind von einem bestimmten Datentyp (kann auch ein Referenztyp sein) keine ausf\u00fchrbare Einheit \u2192 kein Ausdruck \u2192 k\u00f6nnen nicht alleine stehen meistens auf der rechten Seite einer Wertzuweisung als Parameterwert bei Aufruf einer Methode als Vergleichswert bei logischen Ausdr\u00fccken Beispiele Literale 100 true 'a' \"hallo\" { 1 , 2 , 3 , 4 } 5.5","title":"Literale"},{"location":"wiederholung/#ausdrucke","text":"kleinste ausf\u00fchrbare Einheit eines Programms z.B.: Zuweisung numerische Berechnung logische Bedingung Operatoren: arithmetisch: +, -, *, /, %, ++, -- relational: ==, !=, <, >, <=, >= logisch: !, &&, || Zuweisung: =, +=, -=, *=, /=, %= sonstige: a?b:c, typecast, new, instanceof, .","title":"Ausdr\u00fccke"},{"location":"wiederholung/#anweisungen","text":"Einzelanweisung ; Block {} Deklaration Typ Methode , Typ Variable Ausdruck Bedingung if() else switch() case Schleifen for while do while Exceptions try catch() Assertions assert Beispiele Anweisungen // Bloecke immer zwischen geschweiften Klammern { // Anweisung 1... // Anweisung 2... } // Definition und Deklaration int a ; float b = 1.0f ; // Einfacher Ausdruck a = 1010 ; // Bedingungen if ( a == 1010 ) // if-Zweig muss immer vorhanden sein { // Anweisungen... } else if ( a == 1011 ) // 0 - beliebig viele else-if-Zweige { // Anweisungen... } else // 0 - 1 else-Zweig { // Anweisungen... } switch ( a ) // zu pruefende Variable in Klammern { case 1010 : { b *= 2.0 ; break ; } // beliebig viele case-Zweige case 1011 : { b *= 3.0 ; break ; } // break nicht vergessen default : { b = 0.0f ; } // Zweig f\u00fcr alle anderen Werte } int [] meinFeld = { 1 , 2 , 3 , 4 , 5 }; // for-Schleife // 1. Initialisierung // 2. Schleifen-Bedingung // 3. Anweisungen nach Schleifendurchlauf // Schleifen-Anweisungen als Block hinter for for ( int index = 0 ; index < meinFeld . length ; index ++ ) { System . out . println ( meinFeld [ index ] ); } // while-Schleife // Nur Schleifen-Bedingung angeben // Auf Endlos-Schleifen achten while ( index < meinFeld . length ) { System . out . println ( meinFeld [ index ] ); index ++ ; }","title":"Anweisungen"},{"location":"wiederholung/#methoden","text":"wiederverwendbare und/oder logisch abgeschlossene Programmteile sollten in Methoden zusammengefasst werden Methoden besitzen einen Namen (im Scope eindeutig), keinen, einen oder mehrere Parameter und einen R\u00fcckgabetyp (evtl. void ) Aufruf einer Methode durch Namen und runde Klammern, in welche Werte f\u00fcr die Parameter \u00fcbergeben werden bei Aufruf einer Methode werden alle Anweisungen abgearbeitet, die in der Methode definiert (implementiert) wurden (bis zum return ) werden Methoden mit R\u00fcckgabetyp (also nicht void ) aufgerufen, entspricht ihr Aufruf einem konkreten Wert (R\u00fcckgabewert) Methodenstack/Call stack public static int multiply ( int a , int b ) { return a * b ; } public static int square ( int n ) { return multiply ( n , n ); } public static void printSquare ( int n ) { int squared = square ( n ); System . out . println ( n + \" x \" + n + \" = \" + squared ); } public static void main ( String [] args ) { printSquare ( 4 ); }","title":"Methoden"},{"location":"wiederholung/#vererbung","text":"Weitergabe aller Methoden und Objekte einer Elternklasse (Basisklasse) an eine Kindklasse (Subklasse) Schl\u00fcsselwort extends jede Klasse (bis auf Object ) besitzt genau eine Elternklasse; ist keine angegeben, ist es automatisch Object Vererebung beschreibt \u201eis-a\u201c-Beziehung Methoden der Elternklasse k\u00f6nnen \u00fcberschrieben werden (wenn sie nicht als final definiert wurden) \u2192 @Override verwenden Originalmethode kann mit Schl\u00fcsselwort super aufgerufen werden","title":"Vererbung"},{"location":"wiederholung/#konstruktoren","text":"besondere Objektmethoden, die beim Erzeugen des Objektes aufgerufen werden gleicher Name wie die Klasse, keinen R\u00fcckgabetyp angeben (auch nicht void ) wird kein Konstruktor definiert, steht automatisch (implizit) ein parameterloser Konstruktor zur Verf\u00fcgung (einzige Ausnahme: in der Elternklasse existieren nur parametrisierte Konstruktoren) Aufruf von this und super m\u00f6glich werden nicht vererbt Beispiele Konstruktoren public class Power { int base ; int exp ; public Power () { this ( 1 , 0 ); // Aufruf des Konstruktors in Zeile 15 } public Power ( int base ) { this ( base , 0 ); // Aufruf des Konstruktors in Zeile 15 } public Power ( int base , int exp ) { this . base = base ; // Parameterwerte f\u00fcr base und int this . exp = exp ; // auf Objektvariablen sichern } } public static void main ( String [] args ) { Power p1 = new Power (); // p1.base = 1, p1.exp = 0 Power p2 = new Power ( 10 ); // p2.base = 10, p2.exp = 0 Power p3 = new Power ( 10 , 5 ); // p3.base = 10, p3.exp = 5 }","title":"Konstruktoren"},{"location":"wiederholung/#access-controller-zugriffsmodifizierer","text":"Steuerung der Lebensdauer, Sichtbarkeit und Ver\u00e4nderbarkeit von Klassen, Methoden und Variablen \u2013 Prinzip der Datenkapselung Klassen public Zugriff von au\u00dferhalb des Paketes (default) Zugriff nur innerhalb des Paketes final von der Klasse k\u00f6nnen keine Klassen erben abstract Klasse besitzt Methoden, die keinen Methodenrumpf besitzen (nicht implementiert sind) Variablen und Methoden (wenn Klasse public ) public Zugriff von \u00fcberall (bei Variablen vermeiden!) protected Zugriff aus Klasse und Kindklasse (default) Zugriff aus Klasse und Paket private Zugriff nur aus Klasse","title":"Access Controller (Zugriffsmodifizierer)"},{"location":"wrapper/","text":"Wrapper-Klassen \u00b6 In Collections lassen sich nur Elemente speichern, die von einem Referenztyp sind. Das hei\u00dft es k\u00f6nnen keine Werte vom Typ int , boolean , double , char , long usw. speichern. Wenn wir z.B. versuchen, eine Liste mit int zu typisieren List < int > l = new ArrayList <> (); // Fehler !! bekommen wir einen Fehler angezeigt und k\u00f6nnen das Programm gar nicht compilieren. Trotzdem wollen wir nat\u00fcrlich auch solche \"Werte\" in Collections verwalten. Dazu existieren f\u00fcr alle Wertetypen entsprechende Referenztypen, sogenannte Wrapper-Klassen . Diese sind Integer , Double , Float , Short , Byte , Long , Character und Boolean und befinden sich im java.lang -Paket (also dem Standardpaket von Java - muss nicht importiert werden). Die grunds\u00e4tzliche Idee von Wrapper-Klassen ist das \"Verpacken\" ( wrappen ) eines Wertetyps in einen Referenztyp. Die folgende Abbildung soll das f\u00fcr das Beispiel int \u2194 Integer verdeutlichen: Der int -Wert 10 wird zu einem Typ Integer und somit zu einem Referenztyp. Daf\u00fcr sind alle Vorteile von referenztypen nutzbar, z.B. Objektmethoden, Vererbung usw. Welche Wrapper-Klasse zu welchem Wertetyp geh\u00f6rt, wird aus dem Namen erkennbar. Leider ist das aber nicht ganz konsistent. W\u00e4hrend die Wrapper-Klassen von boolean , byte , short , long , float und double so hei\u00dfen, wie die Wertetypen, nur jeweils mit einem Gro\u00dfbuchstaben am Anfang, hei\u00dft die Wrapper-Klasse von char Character und die Wrapper-Klasse von int Integer . Wertetyp Referenztyp (Wrapper-Klasse) byte Byte short Short int Integer long Long float Float double Double boolean Boolean char Character Objekterzeugung \u00b6 Es gibt ziemlich viele M\u00f6glichkeiten, um Objekte eines Wrapper-Klassen-Typs zu erzeugen: Verwendung des Kontruktors, Parameterwert entweder vom Typ String oder vom entsprechenden Wertetyp, Verwendung der statischen Methode valueOf() , Parameterwert entweder vom Typ String oder vom entsprechenden Wertetyp, sogenanntes Boxing (autmatisches wrappen eins Wertes in seinen Referenztyp). Wir schauen uns die drei M\u00f6glichkeiten am Beispiel von Integer an. Es gilt aber f\u00fcr alle Wrapper-Klassen. Verwendung des Kontruktors - deprecated \u00b6 F\u00fcr jede Wrapper-Klasse stehen zwei parametrisierte Konstruktoren zur Verf\u00fcgung, entweder wird ein entsprechender Wert \u00fcbergeben (am Beispiel von Integer als ein int -Wert) oder es wird ein String \u00fcbergeben, der idealerweise einen passenden Wrt ent\u00e4lt, also f\u00fcr Integer soll der String eine Zahl enthalten. Am Beispiel von Integer k\u00f6nnte das z.B. so aussehen: // Konstruktor mit Uebergabe Wertetyp int i = 100 ; Integer iObject1 = new Integer ( i ); Integer iObject2 = new Integer ( 100 ); // Konstruktor mit Uebergabe String String s = \"100\" ; Integer iObject3 = new Integer ( s ); Integer iObject4 = new Integer ( \"100\" ); // Moeglich f\u00fcr alle numerischen Datentypen und boolean F\u00fcr Character gibt es nur einen parametrisierten Konstruktor: Character\u200b(char value) . Die \u00dcbergabe eines Strings ist dort nicht m\u00f6glich. Wichtig hier ist zu betonen, dass man die Konstruktoren jedoch nicht verwenden sollte. Das hat haupts\u00e4chlich Performance-Gr\u00fcnde, sowohl in Zeit als auch in Speicher. Seit Java 9 gelten die Konstruktoren als deprecated , sollten also nicht mehr verwendet werden. Stattdessen wird empfohlen, die statischen Methoden valueOf() zu verwenden. Die valueOf() -Methoden \u00b6 Die valueOf() -Methoden der Wrapper-Klassen haben zwei wichtige Eigenschaften: sie sind statisch, d.h. der Aufruf erfolgt \u00fcber Klassenmane.valueOf() , sie sind sogenannte Erzeugermethoden , denn sie geben ein Objekt der Klasse zur\u00fcck Wie bei den Konstruktoren auch, k\u00f6nnen der Methode entweder ein Wert vom entsprechenden Typ oder ein String \u00fcbergeben werden, der ein Wert von dem Wertetyp enth\u00e4lt. Beispiele // Wrapper-Klassen haben die Klassenmethoden // valueOf(Wertetyp b) ... Integer iObject1 = Integer . valueOf ( 100 ); Boolean bObject1 = Boolean . valueOf ( true ); Double dObject1 = Double . valueOf ( 5.5 ); // ... oder valueOf(String s) Integer iObject2 = Integer . valueOf ( \"100\" ); Boolean bObject2 = Boolean . valueOf ( \"true\" ); Double dObject2 = Double . valueOf ( \"5.5\" ); Auch hier gilt wieder, dass f\u00fcr Character nur eine valueOf() -Methode existiert, n\u00e4mlich valueOf(char c) . Die \u00dcbergabe eines Strings ist nicht m\u00f6glich. Auto-Boxing \u00b6 Die dritte M\u00f6glichkeit, Objekte einer Wrapper-Klasse zu erzeugen, besteht darin, den entsprechenden Wert automatisch \"wrappen\" zu lassen, das sogenannte Auto-Boxing . Beispiele: Integer io1 = 100 ; Boolean bo1 = true ; Character co1 = 'a' ; Double do1 = 5.5 ; Float fo1 = 2.7f ; Long lo1 = 1234L ; Wahrscheinlich wird diese Form der Objekterzeugung die von Ihnen am meisten verwendete werden. Das ist auch v\u00f6llig in Ordnung. Sie sollten sich nur dessen bewusst sein, dass dabei ein solches Auto-Boxing passiert. Es ist empfehlenswert, gerade zu Anfang, Eclipse (oder Ihre IDE) so einzustellen, dass Sie eine Warnung erhalten, wenn ein solches Auto-Boxing passiert. das hat den Vorteil, dass die dieses Vorgehen nicht aus dem Blick verlieren, sondern dass Ihnen bewusst bleibt, dass die Werte gerade in eine Referenz umgewandelt werden. W\u00e4hlen Sie dazu in Eclipse unter Eclipse \u2192 Preferences \u2192 Java \u2192 Compiler \u2192 Errors/Warnings folgende Einstellungen: \u00dcbung Was wird ausgegeben und warum? Integer i1 = 5000 ; Integer i2 = 5000 ; System . out . println ( i1 == i2 ); Werte extrahieren \u00b6 H\u00e4ufig wollen wir aus unseren Wrapper-Objekten wieder die \"Werte extrahieren\", also z.B. erfahren, welcher int -Wert von einem Integer -Objekt repr\u00e4sentiert wird. Um das zu tun, stellen die Wrapper-Klassen jeweils <wrapperTyp>Value() -Objektmethoden zur Verf\u00fcgung also: intValue() , doubleValue() , charValue() , booleanValue() usw. Betrachten wir nochmal die Beispiele von eben: Integer io1 = 100 ; Boolean bo1 = true ; Character co1 = 'a' ; Double do1 = 5.5 ; Float fo1 = 2.7f ; Long lo1 = 1234L ; int i1 = io1 . intValue (); // 100 boolean b1 = bo1 . booleanValue (); // true char c1 = co1 . charValue (); // 'a' double d1 = do1 . doubleValue (); // 5.5 float f1 = fo1 . floatValue (); // 2.7 long l1 = lo1 . longValue (); // 1234 Aber auch hier gibt es wieder ein Auto-Unboxing . Das hei\u00dft, es w\u00e4re auch m\u00f6glich auf die <wrapperTyp>Value() -Objektmethode zu verzichten und stattdessen einfach das hier zu schreiben: int i2 = io1 ; // 100 boolean b2 = bo1 ; // true char c2 = co1 ; // 'a' double d2 = do1 ; // 5.5 float f2 = fo1 ; // 2.7 long l2 = lo1 ; // 1234 Auch hier sollte man sich aber stets der Tatsache bewusst sein, dass ein Unboxing passiert. \u00dcbung Geht das und wenn ja, warum? Was wird jeweils ausgegeben? Integer i1 = 5000 ; Integer i2 = 5000 ; Integer i3 = 5001 ; System . out . println ( i1 >= i2 ); System . out . println ( i3 > i2 ); Die folgende Abbildung zeigt einen \u00dcberblick \u00fcber die einzelnen Konvertierungen am Beispiel von Double . Beachten Sie dabei auch, dass ein Wert direkt aus einem passenden String erzeugt werden kann, indem die statische <WrapperTyp>.parse>Wrapper-Typ> -Methode verwendet wird. Links zu den Java-Docs \u00b6 Hier sind die Links zu den jeweiligen Java-Dokumentationen der Klassen aufgelistet (f\u00fcr Java 11). Ein Blick lohnt sich, da f\u00fcr die einzelnen Klassen jeweils viele Objektmethoden zur Verf\u00fcgung stehen, die Ihnen sehr n\u00fctzlich sein k\u00f6nnen. Boolean Byte Character Double Float Integer Long Short \u00dcbrigens erben die numerischen Datentypen alle von der Klasse Number . Diese enth\u00e4lt die Objektmethoden byteValue() , doubleValue() , floatValue() , intValue() , longValue() und shortValue() . Deswegen werden in allen numerischen Wrapper-Klassen auch alle diese Objektmethoden zur Verf\u00fcgung gestellt. \u00dcbung Schauen Sie sich einmal die Java-Dokumentation der Klasse Integer an. Welche Exception kann die valueOf(String) -Methode werfen? Welche Methode aus der Klasse Integer wird durch die valueOf(String) -Methode aufgerufen?","title":"Wrapper-Klassen"},{"location":"wrapper/#wrapper-klassen","text":"In Collections lassen sich nur Elemente speichern, die von einem Referenztyp sind. Das hei\u00dft es k\u00f6nnen keine Werte vom Typ int , boolean , double , char , long usw. speichern. Wenn wir z.B. versuchen, eine Liste mit int zu typisieren List < int > l = new ArrayList <> (); // Fehler !! bekommen wir einen Fehler angezeigt und k\u00f6nnen das Programm gar nicht compilieren. Trotzdem wollen wir nat\u00fcrlich auch solche \"Werte\" in Collections verwalten. Dazu existieren f\u00fcr alle Wertetypen entsprechende Referenztypen, sogenannte Wrapper-Klassen . Diese sind Integer , Double , Float , Short , Byte , Long , Character und Boolean und befinden sich im java.lang -Paket (also dem Standardpaket von Java - muss nicht importiert werden). Die grunds\u00e4tzliche Idee von Wrapper-Klassen ist das \"Verpacken\" ( wrappen ) eines Wertetyps in einen Referenztyp. Die folgende Abbildung soll das f\u00fcr das Beispiel int \u2194 Integer verdeutlichen: Der int -Wert 10 wird zu einem Typ Integer und somit zu einem Referenztyp. Daf\u00fcr sind alle Vorteile von referenztypen nutzbar, z.B. Objektmethoden, Vererbung usw. Welche Wrapper-Klasse zu welchem Wertetyp geh\u00f6rt, wird aus dem Namen erkennbar. Leider ist das aber nicht ganz konsistent. W\u00e4hrend die Wrapper-Klassen von boolean , byte , short , long , float und double so hei\u00dfen, wie die Wertetypen, nur jeweils mit einem Gro\u00dfbuchstaben am Anfang, hei\u00dft die Wrapper-Klasse von char Character und die Wrapper-Klasse von int Integer . Wertetyp Referenztyp (Wrapper-Klasse) byte Byte short Short int Integer long Long float Float double Double boolean Boolean char Character","title":"Wrapper-Klassen"},{"location":"wrapper/#objekterzeugung","text":"Es gibt ziemlich viele M\u00f6glichkeiten, um Objekte eines Wrapper-Klassen-Typs zu erzeugen: Verwendung des Kontruktors, Parameterwert entweder vom Typ String oder vom entsprechenden Wertetyp, Verwendung der statischen Methode valueOf() , Parameterwert entweder vom Typ String oder vom entsprechenden Wertetyp, sogenanntes Boxing (autmatisches wrappen eins Wertes in seinen Referenztyp). Wir schauen uns die drei M\u00f6glichkeiten am Beispiel von Integer an. Es gilt aber f\u00fcr alle Wrapper-Klassen.","title":"Objekterzeugung"},{"location":"wrapper/#verwendung-des-kontruktors-deprecated","text":"F\u00fcr jede Wrapper-Klasse stehen zwei parametrisierte Konstruktoren zur Verf\u00fcgung, entweder wird ein entsprechender Wert \u00fcbergeben (am Beispiel von Integer als ein int -Wert) oder es wird ein String \u00fcbergeben, der idealerweise einen passenden Wrt ent\u00e4lt, also f\u00fcr Integer soll der String eine Zahl enthalten. Am Beispiel von Integer k\u00f6nnte das z.B. so aussehen: // Konstruktor mit Uebergabe Wertetyp int i = 100 ; Integer iObject1 = new Integer ( i ); Integer iObject2 = new Integer ( 100 ); // Konstruktor mit Uebergabe String String s = \"100\" ; Integer iObject3 = new Integer ( s ); Integer iObject4 = new Integer ( \"100\" ); // Moeglich f\u00fcr alle numerischen Datentypen und boolean F\u00fcr Character gibt es nur einen parametrisierten Konstruktor: Character\u200b(char value) . Die \u00dcbergabe eines Strings ist dort nicht m\u00f6glich. Wichtig hier ist zu betonen, dass man die Konstruktoren jedoch nicht verwenden sollte. Das hat haupts\u00e4chlich Performance-Gr\u00fcnde, sowohl in Zeit als auch in Speicher. Seit Java 9 gelten die Konstruktoren als deprecated , sollten also nicht mehr verwendet werden. Stattdessen wird empfohlen, die statischen Methoden valueOf() zu verwenden.","title":"Verwendung des Kontruktors - deprecated"},{"location":"wrapper/#die-valueof-methoden","text":"Die valueOf() -Methoden der Wrapper-Klassen haben zwei wichtige Eigenschaften: sie sind statisch, d.h. der Aufruf erfolgt \u00fcber Klassenmane.valueOf() , sie sind sogenannte Erzeugermethoden , denn sie geben ein Objekt der Klasse zur\u00fcck Wie bei den Konstruktoren auch, k\u00f6nnen der Methode entweder ein Wert vom entsprechenden Typ oder ein String \u00fcbergeben werden, der ein Wert von dem Wertetyp enth\u00e4lt. Beispiele // Wrapper-Klassen haben die Klassenmethoden // valueOf(Wertetyp b) ... Integer iObject1 = Integer . valueOf ( 100 ); Boolean bObject1 = Boolean . valueOf ( true ); Double dObject1 = Double . valueOf ( 5.5 ); // ... oder valueOf(String s) Integer iObject2 = Integer . valueOf ( \"100\" ); Boolean bObject2 = Boolean . valueOf ( \"true\" ); Double dObject2 = Double . valueOf ( \"5.5\" ); Auch hier gilt wieder, dass f\u00fcr Character nur eine valueOf() -Methode existiert, n\u00e4mlich valueOf(char c) . Die \u00dcbergabe eines Strings ist nicht m\u00f6glich.","title":"Die valueOf()-Methoden"},{"location":"wrapper/#auto-boxing","text":"Die dritte M\u00f6glichkeit, Objekte einer Wrapper-Klasse zu erzeugen, besteht darin, den entsprechenden Wert automatisch \"wrappen\" zu lassen, das sogenannte Auto-Boxing . Beispiele: Integer io1 = 100 ; Boolean bo1 = true ; Character co1 = 'a' ; Double do1 = 5.5 ; Float fo1 = 2.7f ; Long lo1 = 1234L ; Wahrscheinlich wird diese Form der Objekterzeugung die von Ihnen am meisten verwendete werden. Das ist auch v\u00f6llig in Ordnung. Sie sollten sich nur dessen bewusst sein, dass dabei ein solches Auto-Boxing passiert. Es ist empfehlenswert, gerade zu Anfang, Eclipse (oder Ihre IDE) so einzustellen, dass Sie eine Warnung erhalten, wenn ein solches Auto-Boxing passiert. das hat den Vorteil, dass die dieses Vorgehen nicht aus dem Blick verlieren, sondern dass Ihnen bewusst bleibt, dass die Werte gerade in eine Referenz umgewandelt werden. W\u00e4hlen Sie dazu in Eclipse unter Eclipse \u2192 Preferences \u2192 Java \u2192 Compiler \u2192 Errors/Warnings folgende Einstellungen: \u00dcbung Was wird ausgegeben und warum? Integer i1 = 5000 ; Integer i2 = 5000 ; System . out . println ( i1 == i2 );","title":"Auto-Boxing"},{"location":"wrapper/#werte-extrahieren","text":"H\u00e4ufig wollen wir aus unseren Wrapper-Objekten wieder die \"Werte extrahieren\", also z.B. erfahren, welcher int -Wert von einem Integer -Objekt repr\u00e4sentiert wird. Um das zu tun, stellen die Wrapper-Klassen jeweils <wrapperTyp>Value() -Objektmethoden zur Verf\u00fcgung also: intValue() , doubleValue() , charValue() , booleanValue() usw. Betrachten wir nochmal die Beispiele von eben: Integer io1 = 100 ; Boolean bo1 = true ; Character co1 = 'a' ; Double do1 = 5.5 ; Float fo1 = 2.7f ; Long lo1 = 1234L ; int i1 = io1 . intValue (); // 100 boolean b1 = bo1 . booleanValue (); // true char c1 = co1 . charValue (); // 'a' double d1 = do1 . doubleValue (); // 5.5 float f1 = fo1 . floatValue (); // 2.7 long l1 = lo1 . longValue (); // 1234 Aber auch hier gibt es wieder ein Auto-Unboxing . Das hei\u00dft, es w\u00e4re auch m\u00f6glich auf die <wrapperTyp>Value() -Objektmethode zu verzichten und stattdessen einfach das hier zu schreiben: int i2 = io1 ; // 100 boolean b2 = bo1 ; // true char c2 = co1 ; // 'a' double d2 = do1 ; // 5.5 float f2 = fo1 ; // 2.7 long l2 = lo1 ; // 1234 Auch hier sollte man sich aber stets der Tatsache bewusst sein, dass ein Unboxing passiert. \u00dcbung Geht das und wenn ja, warum? Was wird jeweils ausgegeben? Integer i1 = 5000 ; Integer i2 = 5000 ; Integer i3 = 5001 ; System . out . println ( i1 >= i2 ); System . out . println ( i3 > i2 ); Die folgende Abbildung zeigt einen \u00dcberblick \u00fcber die einzelnen Konvertierungen am Beispiel von Double . Beachten Sie dabei auch, dass ein Wert direkt aus einem passenden String erzeugt werden kann, indem die statische <WrapperTyp>.parse>Wrapper-Typ> -Methode verwendet wird.","title":"Werte extrahieren"},{"location":"wrapper/#links-zu-den-java-docs","text":"Hier sind die Links zu den jeweiligen Java-Dokumentationen der Klassen aufgelistet (f\u00fcr Java 11). Ein Blick lohnt sich, da f\u00fcr die einzelnen Klassen jeweils viele Objektmethoden zur Verf\u00fcgung stehen, die Ihnen sehr n\u00fctzlich sein k\u00f6nnen. Boolean Byte Character Double Float Integer Long Short \u00dcbrigens erben die numerischen Datentypen alle von der Klasse Number . Diese enth\u00e4lt die Objektmethoden byteValue() , doubleValue() , floatValue() , intValue() , longValue() und shortValue() . Deswegen werden in allen numerischen Wrapper-Klassen auch alle diese Objektmethoden zur Verf\u00fcgung gestellt. \u00dcbung Schauen Sie sich einmal die Java-Dokumentation der Klasse Integer an. Welche Exception kann die valueOf(String) -Methode werfen? Welche Methode aus der Klasse Integer wird durch die valueOf(String) -Methode aufgerufen?","title":"Links zu den Java-Docs"}]}